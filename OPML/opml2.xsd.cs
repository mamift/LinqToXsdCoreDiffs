//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OutlineProcessorML {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (head, body)
    /// </para>
    /// </summary>
    public partial class OPML : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator OPML(XElement xe) { return XTypedServices.ToXTypedElement<OPML>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static OPML() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("head", "")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("body", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head, body)
        /// </para>
        /// </summary>
        public OPML() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (head, body)
        /// </para>
        /// </summary>
        public virtual OutlineProcessorML.Head head {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head", ""));
                return ((OutlineProcessorML.Head)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (head, body)
        /// </para>
        /// </summary>
        public virtual OutlineProcessorML.Body body {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("body", ""));
                return ((OutlineProcessorML.Body)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("body", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string version {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("version", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("OPML", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OPML>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head", ""), typeof(OutlineProcessorML.Head));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("body", ""), typeof(OutlineProcessorML.Body));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (outline+)
    /// </para>
    /// </summary>
    public partial class Body : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<OutlineProcessorML.Outline> outlineField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Body(XElement xe) { return XTypedServices.ToXTypedElement<Body>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Body() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("outline", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (outline+)
        /// </para>
        /// </summary>
        public Body() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (outline+)
        /// </para>
        /// </summary>
        public virtual IList<OutlineProcessorML.Outline> outline {
            get {
                if ((this.outlineField == null)) {
                    this.outlineField = new XTypedList<OutlineProcessorML.Outline>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("outline", ""));
                }
                return this.outlineField;
            }
            set {
                if ((value == null)) {
                    this.outlineField = null;
                }
                else {
                    if ((this.outlineField == null)) {
                        this.outlineField = XTypedList<OutlineProcessorML.Outline>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("outline", ""));
                    }
                    else {
                        XTypedServices.SetList<OutlineProcessorML.Outline>(this.outlineField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Body", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Body>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("outline", ""), typeof(OutlineProcessorML.Outline));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (title?, dateCreated?, dateModified?, ownerName?, ownerEmail?, ownerId?, docs?, expansionState?, vertScrollState?, windowTop?, windowLeft?, windowBottom?, windowRight?)
    /// </para>
    /// </summary>
    public partial class Head : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Head(XElement xe) { return XTypedServices.ToXTypedElement<Head>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Head() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("title", "")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("dateCreated", "")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("dateModified", "")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("ownerName", "")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("ownerEmail", "")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("ownerId", "")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("docs", "")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("expansionState", "")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("vertScrollState", "")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("windowTop", "")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("windowLeft", "")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("windowBottom", "")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("windowRight", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (title?, dateCreated?, dateModified?, ownerName?, ownerEmail?, ownerId?, docs?, expansionState?, vertScrollState?, windowTop?, windowLeft?, windowBottom?, windowRight?)
        /// </para>
        /// </summary>
        public Head() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (title?, dateCreated?, dateModified?, ownerName?, ownerEmail?, ownerId?, docs?, expansionState?, vertScrollState?, windowTop?, windowLeft?, windowBottom?, windowRight?)
        /// </para>
        /// </summary>
        public virtual string title {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("title", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("title", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (title?, dateCreated?, dateModified?, ownerName?, ownerEmail?, ownerId?, docs?, expansionState?, vertScrollState?, windowTop?, windowLeft?, windowBottom?, windowRight?)
        /// </para>
        /// </summary>
        public virtual string dateCreated {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("dateCreated", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(System.Xml.Linq.XName.Get("dateCreated", ""), value, "dateCreated", global::OutlineProcessorML.RFC822Date.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (title?, dateCreated?, dateModified?, ownerName?, ownerEmail?, ownerId?, docs?, expansionState?, vertScrollState?, windowTop?, windowLeft?, windowBottom?, windowRight?)
        /// </para>
        /// </summary>
        public virtual string dateModified {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("dateModified", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(System.Xml.Linq.XName.Get("dateModified", ""), value, "dateModified", global::OutlineProcessorML.RFC822Date.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (title?, dateCreated?, dateModified?, ownerName?, ownerEmail?, ownerId?, docs?, expansionState?, vertScrollState?, windowTop?, windowLeft?, windowBottom?, windowRight?)
        /// </para>
        /// </summary>
        public virtual string ownerName {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("ownerName", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("ownerName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (title?, dateCreated?, dateModified?, ownerName?, ownerEmail?, ownerId?, docs?, expansionState?, vertScrollState?, windowTop?, windowLeft?, windowBottom?, windowRight?)
        /// </para>
        /// </summary>
        public virtual string ownerEmail {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("ownerEmail", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(System.Xml.Linq.XName.Get("ownerEmail", ""), value, "ownerEmail", global::OutlineProcessorML.EmailAddress.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (title?, dateCreated?, dateModified?, ownerName?, ownerEmail?, ownerId?, docs?, expansionState?, vertScrollState?, windowTop?, windowLeft?, windowBottom?, windowRight?)
        /// </para>
        /// </summary>
        public virtual System.Uri ownerId {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("ownerId", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("ownerId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (title?, dateCreated?, dateModified?, ownerName?, ownerEmail?, ownerId?, docs?, expansionState?, vertScrollState?, windowTop?, windowLeft?, windowBottom?, windowRight?)
        /// </para>
        /// </summary>
        public virtual System.Uri docs {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("docs", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("docs", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (title?, dateCreated?, dateModified?, ownerName?, ownerEmail?, ownerId?, docs?, expansionState?, vertScrollState?, windowTop?, windowLeft?, windowBottom?, windowRight?)
        /// </para>
        /// </summary>
        public virtual string expansionState {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("expansionState", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("expansionState", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (title?, dateCreated?, dateModified?, ownerName?, ownerEmail?, ownerId?, docs?, expansionState?, vertScrollState?, windowTop?, windowLeft?, windowBottom?, windowRight?)
        /// </para>
        /// </summary>
        public virtual System.Nullable<decimal> vertScrollState {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("vertScrollState", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("vertScrollState", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (title?, dateCreated?, dateModified?, ownerName?, ownerEmail?, ownerId?, docs?, expansionState?, vertScrollState?, windowTop?, windowLeft?, windowBottom?, windowRight?)
        /// </para>
        /// </summary>
        public virtual System.Nullable<decimal> windowTop {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("windowTop", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("windowTop", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (title?, dateCreated?, dateModified?, ownerName?, ownerEmail?, ownerId?, docs?, expansionState?, vertScrollState?, windowTop?, windowLeft?, windowBottom?, windowRight?)
        /// </para>
        /// </summary>
        public virtual System.Nullable<decimal> windowLeft {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("windowLeft", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("windowLeft", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (title?, dateCreated?, dateModified?, ownerName?, ownerEmail?, ownerId?, docs?, expansionState?, vertScrollState?, windowTop?, windowLeft?, windowBottom?, windowRight?)
        /// </para>
        /// </summary>
        public virtual System.Nullable<decimal> windowBottom {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("windowBottom", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("windowBottom", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (title?, dateCreated?, dateModified?, ownerName?, ownerEmail?, ownerId?, docs?, expansionState?, vertScrollState?, windowTop?, windowLeft?, windowBottom?, windowRight?)
        /// </para>
        /// </summary>
        public virtual System.Nullable<decimal> windowRight {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("windowRight", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("windowRight", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Head", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Head>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("title", ""), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("dateCreated", ""), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("dateModified", ""), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ownerName", ""), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ownerEmail", ""), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ownerId", ""), typeof(System.Uri));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("docs", ""), typeof(System.Uri));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("expansionState", ""), typeof(string));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("vertScrollState", ""), typeof(decimal));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("windowTop", ""), typeof(decimal));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("windowLeft", ""), typeof(decimal));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("windowBottom", ""), typeof(decimal));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("windowRight", ""), typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (outline1*)
    /// </para>
    /// </summary>
    public partial class Outline : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<OutlineProcessorML.Outline> outline1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool isCommentDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool isBreakpointDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Outline(XElement xe) { return XTypedServices.ToXTypedElement<Outline>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Outline() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("outline", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (outline1*)
        /// </para>
        /// </summary>
        public Outline() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (outline1*)
        /// </para>
        /// </summary>
        public virtual IList<OutlineProcessorML.Outline> outline1 {
            get {
                if ((this.outline1Field == null)) {
                    this.outline1Field = new XTypedList<OutlineProcessorML.Outline>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("outline", ""));
                }
                return this.outline1Field;
            }
            set {
                if ((value == null)) {
                    this.outline1Field = null;
                }
                else {
                    if ((this.outline1Field == null)) {
                        this.outline1Field = XTypedList<OutlineProcessorML.Outline>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("outline", ""));
                    }
                    else {
                        XTypedServices.SetList<OutlineProcessorML.Outline>(this.outline1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string text {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("text", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("text", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool isComment {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("isComment", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, isCommentDefaultValue);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("isComment", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool isBreakpoint {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("isBreakpoint", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, isBreakpointDefaultValue);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("isBreakpoint", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string created {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("created", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("created", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string category {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("category", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("category", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string description {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("description", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("description", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri url {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("url", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("url", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri htmlUrl {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("htmlUrl", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("htmlUrl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri xmlUrl {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("xmlUrl", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("xmlUrl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("title", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("title", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string version {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("version", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object language {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("language", ""));
                return XTypedServices.ParseUnionValue(x, global::OutlineProcessorML.Language.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "language", this, System.Xml.Linq.XName.Get("language", ""), global::OutlineProcessorML.Language.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Outline", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Outline>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("outline", ""), typeof(OutlineProcessorML.Outline));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public sealed class RFC822Date {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "((Mon|Tue|Wed|Thu|Fri|Sat|Sun),\\s*)?\\d\\d?\\s+(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|" +
                            "Oct|Nov|Dec)\\s+\\d\\d(\\d\\d)?\\s+\\d\\d:\\d\\d(:\\d\\d)?\\s+([+\\-]?\\d\\d\\d\\d|[A-Z]{2,3})"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private RFC822Date() {
        }
    }
    
    public sealed class EmailAddress {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[a-zA-Z0-9_\\-][a-zA-Z0-9_.\\-]*@[a-zA-Z0-9_\\-][a-zA-Z0-9_.\\-]*"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private EmailAddress() {
        }
    }
    
    public sealed class Language {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language), null),
                    OutlineProcessorML.Unknown.TypeDefinition});
        
        private Language() {
        }
    }
    
    public sealed class Unknown {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "unknown"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private Unknown() {
        }
    }
    
    public sealed class Version {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "1.0",
                        "2.0"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private Version() {
        }
    }
    
    public partial class opml : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OutlineProcessorML.OPML ContentField;
        
		public static explicit operator opml(XElement xe) { return XTypedServices.ToXTypedElement<opml, OutlineProcessorML.OPML>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public opml() {
            SetInnerType(new OutlineProcessorML.OPML());
        }
        
        public opml(OutlineProcessorML.OPML content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual OutlineProcessorML.OPML Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (head, body)
        /// </para>
        /// </summary>
        public virtual OutlineProcessorML.Head head {
            get {
                return this.ContentField.head;
            }
            set {
                this.ContentField.head = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (head, body)
        /// </para>
        /// </summary>
        public virtual OutlineProcessorML.Body body {
            get {
                return this.ContentField.body;
            }
            set {
                this.ContentField.body = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string version {
            get {
                return this.ContentField.version;
            }
            set {
                this.ContentField.version = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("opml", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static opml Load(string xmlFile) {
            return XTypedServices.Load<opml, OutlineProcessorML.OPML>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static opml Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<opml, OutlineProcessorML.OPML>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static opml Parse(string xml) {
            return XTypedServices.Parse<opml, OutlineProcessorML.OPML>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new opml(((OutlineProcessorML.OPML)(this.Content.Clone())));
        }
        
        private void SetInnerType(OutlineProcessorML.OPML ContentField) {
            this.ContentField = ((OutlineProcessorML.OPML)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> typeDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> elementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static Dictionary<System.Type, System.Type> wrapperDictionary = new Dictionary<System.Type, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
            BuildWrapperDictionary();
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return wrapperDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(System.Xml.Linq.XName.Get("OPML", ""), typeof(global::OutlineProcessorML.OPML));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Body", ""), typeof(global::OutlineProcessorML.Body));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Head", ""), typeof(global::OutlineProcessorML.Head));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Outline", ""), typeof(global::OutlineProcessorML.Outline));
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(System.Xml.Linq.XName.Get("opml", ""), typeof(global::OutlineProcessorML.opml));
        }
        
        private static void BuildWrapperDictionary() {
            wrapperDictionary.Add(typeof(OutlineProcessorML.opml), typeof(void));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[System.Xml.Linq.XName.Get("opml", "")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public opml opml {  get {return rootObject as opml; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(opml root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public global::OutlineProcessorML.opml opml {  get {return rootObject as global::OutlineProcessorML.opml; } }
        
        private XRoot() {
        }
        
        public XRoot(global::OutlineProcessorML.opml root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
