//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.1.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LibraryOfCongress.EAD {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (eadheader, frontmatter?, archdesc)
    /// </para>
    /// </summary>
    public partial class ead : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ead(XElement xe) { return XTypedServices.ToXTypedElement<ead>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ead() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("eadheader", "urn:isbn:1-931666-22-9")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("frontmatter", "urn:isbn:1-931666-22-9")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("archdesc", "urn:isbn:1-931666-22-9")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (eadheader, frontmatter?, archdesc)
        /// </para>
        /// </summary>
        public ead() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (eadheader, frontmatter?, archdesc)
        /// </para>
        /// </summary>
        public virtual eadheader eadheader {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("eadheader", "urn:isbn:1-931666-22-9"));
                return ((eadheader)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("eadheader", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (eadheader, frontmatter?, archdesc)
        /// </para>
        /// </summary>
        public virtual frontmatter frontmatter {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("frontmatter", "urn:isbn:1-931666-22-9"));
                return ((frontmatter)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("frontmatter", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (eadheader, frontmatter?, archdesc)
        /// </para>
        /// </summary>
        public virtual archdesc archdesc {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("archdesc", "urn:isbn:1-931666-22-9"));
                return ((archdesc)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("archdesc", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string relatedencoding {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("relatedencoding", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("relatedencoding", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("ead", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ead Load(string xmlFile) {
            return XTypedServices.Load<ead>(xmlFile);
        }
        
        public static ead Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ead>(xmlFile);
        }
        
        public static ead Parse(string xml) {
            return XTypedServices.Parse<ead>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ead>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("eadheader", "urn:isbn:1-931666-22-9"), typeof(eadheader));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("frontmatter", "urn:isbn:1-931666-22-9"), typeof(frontmatter));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("archdesc", "urn:isbn:1-931666-22-9"), typeof(archdesc));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public sealed class datarepositorycode {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        @"((AF|AX|AL|DZ|AS|AD|AO|AI|AQ|AG|AR|AM|AW|AU|AT|AZ|BS|BH|BD|BB|BY|BE|BZ|BJ|BM|BT|BO|BA|BW|BV|BR|IO|BN|BG|BF|BI|KH|CM|CA|CV|KY|CF|TD|CL|CN|CX|CC|CO|KM|CG|CD|CK|CR|CI|HR|CU|CY|CZ|DK|DJ|DM|DO|EC|EG|SV|GQ|ER|EE|ET|FK|FO|FJ|FI|FR|GF|PF|TF|GA|GM|GE|DE|GH|GI|GR|GL|GD|GP|GU|GT|GN|GW|GY|HT|HM|VA|HN|HK|HU|IS|IN|ID|IR|IQ|IE|IL|IT|JM|JP|JO|KZ|KE|KI|KP|KR|KW|KG|LA|LV|LB|LS|LR|LY|LI|LT|LU|MO|MK|MG|MW|MY|MV|ML|MT|MH|MQ|MR|MU|YT|MX|FM|MD|MC|MN|MS|MA|MZ|MM|NA|NR|NP|NL|AN|NC|NZ|NI|NE|NG|NU|NF|MP|NO|OM|PK|PW|PS|PA|PG|PY|PE|PH|PN|PL|PT|PR|QA|RE|RO|RU|RW|SH|KN|LC|PM|VC|WS|SM|ST|SA|SN|CS|SC|SL|SG|SK|SI|SB|SO|ZA|GS|ES|LK|SD|SR|SJ|SZ|SE|CH|SY|TW|TJ|TZ|TH|TL|TG|TK|TO|TT|TN|TR|TM|TC|TV|UG|UA|AE|GB|US|UM|UY|UZ|VU|VE|VN|VG|VI|WF|EH|YE|ZM|ZW)|([a-zA-Z]{1})|([a-zA-Z]{3,4}))(-[a-zA-Z0-9:/\-]{1,11})"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private datarepositorycode() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph1 | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
    /// </para>
    /// </summary>
    public partial class emph : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emph1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator emph(XElement xe) { return XTypedServices.ToXTypedElement<emph>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static emph() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph1 | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public emph() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph1 | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph1 | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph1 | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph1 {
            get {
                if ((this.emph1Field == null)) {
                    this.emph1Field = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emph1Field;
            }
            set {
                if ((value == null)) {
                    this.emph1Field = null;
                }
                else {
                    if ((this.emph1Field == null)) {
                        this.emph1Field = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emph1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph1 | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph1 | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph1 | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph1 | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph1 | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph1 | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph1 | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph1 | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph1 | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string render {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("render", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("render", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<emph>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"), typeof(abbr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"), typeof(expan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"), typeof(@ref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"), typeof(extref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"), typeof(linkgrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"), typeof(bibref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"), typeof(title));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"), typeof(archref));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class lb : XTypedElement, IXMetaData {
        
		public static explicit operator lb(XElement xe) { return XTypedServices.ToXTypedElement<lb>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public lb() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<lb>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (resource | arc | ptrloc | extptrloc | refloc | extrefloc)+
    /// </para>
    /// </summary>
    public partial class linkgrp : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<resource> resourceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<arc> arcField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptrloc> ptrlocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptrloc> extptrlocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<refloc> reflocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extrefloc> extreflocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string typeFixedValue = "extended";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator linkgrp(XElement xe) { return XTypedServices.ToXTypedElement<linkgrp>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static linkgrp() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (resource | arc | ptrloc | extptrloc | refloc | extrefloc)+
        /// </para>
        /// </summary>
        public linkgrp() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (resource | arc | ptrloc | extptrloc | refloc | extrefloc)+
        /// </para>
        /// </summary>
        public virtual IList<resource> resource {
            get {
                if ((this.resourceField == null)) {
                    this.resourceField = new XTypedList<resource>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("resource", "urn:isbn:1-931666-22-9"));
                }
                return this.resourceField;
            }
            set {
                if ((value == null)) {
                    this.resourceField = null;
                }
                else {
                    if ((this.resourceField == null)) {
                        this.resourceField = XTypedList<resource>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("resource", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<resource>(this.resourceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (resource | arc | ptrloc | extptrloc | refloc | extrefloc)+
        /// </para>
        /// </summary>
        public virtual IList<arc> arc {
            get {
                if ((this.arcField == null)) {
                    this.arcField = new XTypedList<arc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("arc", "urn:isbn:1-931666-22-9"));
                }
                return this.arcField;
            }
            set {
                if ((value == null)) {
                    this.arcField = null;
                }
                else {
                    if ((this.arcField == null)) {
                        this.arcField = XTypedList<arc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("arc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<arc>(this.arcField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (resource | arc | ptrloc | extptrloc | refloc | extrefloc)+
        /// </para>
        /// </summary>
        public virtual IList<ptrloc> ptrloc {
            get {
                if ((this.ptrlocField == null)) {
                    this.ptrlocField = new XTypedList<ptrloc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptrloc", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrlocField;
            }
            set {
                if ((value == null)) {
                    this.ptrlocField = null;
                }
                else {
                    if ((this.ptrlocField == null)) {
                        this.ptrlocField = XTypedList<ptrloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptrloc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptrloc>(this.ptrlocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (resource | arc | ptrloc | extptrloc | refloc | extrefloc)+
        /// </para>
        /// </summary>
        public virtual IList<extptrloc> extptrloc {
            get {
                if ((this.extptrlocField == null)) {
                    this.extptrlocField = new XTypedList<extptrloc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptrloc", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrlocField;
            }
            set {
                if ((value == null)) {
                    this.extptrlocField = null;
                }
                else {
                    if ((this.extptrlocField == null)) {
                        this.extptrlocField = XTypedList<extptrloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptrloc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptrloc>(this.extptrlocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (resource | arc | ptrloc | extptrloc | refloc | extrefloc)+
        /// </para>
        /// </summary>
        public virtual IList<refloc> refloc {
            get {
                if ((this.reflocField == null)) {
                    this.reflocField = new XTypedList<refloc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("refloc", "urn:isbn:1-931666-22-9"));
                }
                return this.reflocField;
            }
            set {
                if ((value == null)) {
                    this.reflocField = null;
                }
                else {
                    if ((this.reflocField == null)) {
                        this.reflocField = XTypedList<refloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("refloc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<refloc>(this.reflocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (resource | arc | ptrloc | extptrloc | refloc | extrefloc)+
        /// </para>
        /// </summary>
        public virtual IList<extrefloc> extrefloc {
            get {
                if ((this.extreflocField == null)) {
                    this.extreflocField = new XTypedList<extrefloc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extrefloc", "urn:isbn:1-931666-22-9"));
                }
                return this.extreflocField;
            }
            set {
                if ((value == null)) {
                    this.extreflocField = null;
                }
                else {
                    if ((this.extreflocField == null)) {
                        this.extreflocField = XTypedList<extrefloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extrefloc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extrefloc>(this.extreflocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                return typeFixedValue;
            }
            set {
                if (value.Equals(typeFixedValue)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, typeFixedValue);
                }
                this.SetAttribute(System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<linkgrp>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("resource", "urn:isbn:1-931666-22-9"), typeof(resource));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("arc", "urn:isbn:1-931666-22-9"), typeof(arc));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptrloc", "urn:isbn:1-931666-22-9"), typeof(ptrloc));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptrloc", "urn:isbn:1-931666-22-9"), typeof(extptrloc));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("refloc", "urn:isbn:1-931666-22-9"), typeof(refloc));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extrefloc", "urn:isbn:1-931666-22-9"), typeof(extrefloc));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb)*
    /// </para>
    /// </summary>
    public partial class occupation : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator occupation(XElement xe) { return XTypedServices.ToXTypedElement<occupation>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static occupation() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public occupation() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("source", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("source", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string rules {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("rules", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("rules", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string authfilenumber {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("authfilenumber", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("authfilenumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string normal {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("normal", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("normal", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<occupation>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb)*
    /// </para>
    /// </summary>
    public partial class subject : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator subject(XElement xe) { return XTypedServices.ToXTypedElement<subject>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static subject() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public subject() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("source", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("source", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string rules {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("rules", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("rules", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string authfilenumber {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("authfilenumber", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("authfilenumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string normal {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("normal", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("normal", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<subject>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb)*
    /// </para>
    /// </summary>
    public partial class genreform : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator genreform(XElement xe) { return XTypedServices.ToXTypedElement<genreform>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static genreform() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public genreform() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("source", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("source", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string rules {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("rules", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("rules", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string authfilenumber {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("authfilenumber", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("authfilenumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string normal {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("normal", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("normal", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<genreform>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb)*
    /// </para>
    /// </summary>
    public partial class function : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator function(XElement xe) { return XTypedServices.ToXTypedElement<function>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static function() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public function() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("source", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("source", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string rules {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("rules", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("rules", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string authfilenumber {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("authfilenumber", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("authfilenumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string normal {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("normal", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("normal", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<function>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class extptr : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string typeFixedValue = "simple";
        
		public static explicit operator extptr(XElement xe) { return XTypedServices.ToXTypedElement<extptr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public extptr() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string entityref {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("entityref", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Entity).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("entityref", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Entity).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string xpointer {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("xpointer", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("xpointer", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                return typeFixedValue;
            }
            set {
                if (value.Equals(typeFixedValue)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, typeFixedValue);
                }
                this.SetAttribute(System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri href {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("href", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("href", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string arcrole {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("arcrole", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("arcrole", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string show {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("show", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("show", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string actuate {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("actuate", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("actuate", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<extptr>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, listhead?, chronitem+)
    /// </para>
    /// </summary>
    public partial class chronlist : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronitem> chronitemField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator chronlist(XElement xe) { return XTypedServices.ToXTypedElement<chronlist>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static chronlist() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("listhead", "urn:isbn:1-931666-22-9")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("chronitem", "urn:isbn:1-931666-22-9")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, listhead?, chronitem+)
        /// </para>
        /// </summary>
        public chronlist() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, listhead?, chronitem+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"));
                return ((head)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, listhead?, chronitem+)
        /// </para>
        /// </summary>
        public virtual listhead listhead {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("listhead", "urn:isbn:1-931666-22-9"));
                return ((listhead)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("listhead", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (head?, listhead?, chronitem+)
        /// </para>
        /// </summary>
        public virtual IList<chronitem> chronitem {
            get {
                if ((this.chronitemField == null)) {
                    this.chronitemField = new XTypedList<chronitem>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("chronitem", "urn:isbn:1-931666-22-9"));
                }
                return this.chronitemField;
            }
            set {
                if ((value == null)) {
                    this.chronitemField = null;
                }
                else {
                    if ((this.chronitemField == null)) {
                        this.chronitemField = XTypedList<chronitem>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("chronitem", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<chronitem>(this.chronitemField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<chronlist>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), typeof(head));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("listhead", "urn:isbn:1-931666-22-9"), typeof(listhead));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("chronitem", "urn:isbn:1-931666-22-9"), typeof(chronitem));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (date, (@event | eventgrp))
    /// </para>
    /// </summary>
    public partial class chronitem : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator chronitem(XElement xe) { return XTypedServices.ToXTypedElement<chronitem>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static chronitem() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (date, (@event | eventgrp))
        /// </para>
        /// </summary>
        public chronitem() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (date, (@event | eventgrp))
        /// </para>
        /// </summary>
        public virtual date date {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"));
                return ((date)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (date, (@event | eventgrp))
        /// </para>
        /// </summary>
        public virtual @event @event {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("event", "urn:isbn:1-931666-22-9"));
                return ((@event)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("event", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (date, (@event | eventgrp))
        /// </para>
        /// </summary>
        public virtual eventgrp eventgrp {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("eventgrp", "urn:isbn:1-931666-22-9"));
                return ((eventgrp)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("eventgrp", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("chronitem", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<chronitem>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"), typeof(date));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("event", "urn:isbn:1-931666-22-9"), typeof(@event));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("eventgrp", "urn:isbn:1-931666-22-9"), typeof(eventgrp));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (@event+)
    /// </para>
    /// </summary>
    public partial class eventgrp : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@event> @eventField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator eventgrp(XElement xe) { return XTypedServices.ToXTypedElement<eventgrp>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static eventgrp() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("event", "urn:isbn:1-931666-22-9")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (@event+)
        /// </para>
        /// </summary>
        public eventgrp() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (@event+)
        /// </para>
        /// </summary>
        public virtual IList<@event> @event {
            get {
                if ((this.@eventField == null)) {
                    this.@eventField = new XTypedList<@event>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("event", "urn:isbn:1-931666-22-9"));
                }
                return this.@eventField;
            }
            set {
                if ((value == null)) {
                    this.@eventField = null;
                }
                else {
                    if ((this.@eventField == null)) {
                        this.@eventField = XTypedList<@event>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("event", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<@event>(this.@eventField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("eventgrp", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<eventgrp>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("event", "urn:isbn:1-931666-22-9"), typeof(@event));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, tgroup+)
    /// </para>
    /// </summary>
    public partial class table : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<tgroup> tgroupField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator table(XElement xe) { return XTypedServices.ToXTypedElement<table>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static table() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("tgroup", "urn:isbn:1-931666-22-9")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, tgroup+)
        /// </para>
        /// </summary>
        public table() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, tgroup+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"));
                return ((head)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (head?, tgroup+)
        /// </para>
        /// </summary>
        public virtual IList<tgroup> tgroup {
            get {
                if ((this.tgroupField == null)) {
                    this.tgroupField = new XTypedList<tgroup>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("tgroup", "urn:isbn:1-931666-22-9"));
                }
                return this.tgroupField;
            }
            set {
                if ((value == null)) {
                    this.tgroupField = null;
                }
                else {
                    if ((this.tgroupField == null)) {
                        this.tgroupField = XTypedList<tgroup>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("tgroup", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<tgroup>(this.tgroupField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string frame {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("frame", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("frame", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string colsep {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("colsep", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("colsep", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string rowsep {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("rowsep", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("rowsep", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string pgwide {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("pgwide", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("pgwide", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<table>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), typeof(head));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("tgroup", "urn:isbn:1-931666-22-9"), typeof(tgroup));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (colspec*, thead?, tbody)
    /// </para>
    /// </summary>
    public partial class tgroup : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<colspec> colspecField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator tgroup(XElement xe) { return XTypedServices.ToXTypedElement<tgroup>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static tgroup() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("colspec", "urn:isbn:1-931666-22-9")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("tbody", "urn:isbn:1-931666-22-9")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (colspec*, thead?, tbody)
        /// </para>
        /// </summary>
        public tgroup() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (colspec*, thead?, tbody)
        /// </para>
        /// </summary>
        public virtual IList<colspec> colspec {
            get {
                if ((this.colspecField == null)) {
                    this.colspecField = new XTypedList<colspec>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("colspec", "urn:isbn:1-931666-22-9"));
                }
                return this.colspecField;
            }
            set {
                if ((value == null)) {
                    this.colspecField = null;
                }
                else {
                    if ((this.colspecField == null)) {
                        this.colspecField = XTypedList<colspec>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("colspec", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<colspec>(this.colspecField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (colspec*, thead?, tbody)
        /// </para>
        /// </summary>
        public virtual thead thead {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9"));
                return ((thead)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (colspec*, thead?, tbody)
        /// </para>
        /// </summary>
        public virtual tbody tbody {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("tbody", "urn:isbn:1-931666-22-9"));
                return ((tbody)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("tbody", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string cols {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("cols", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("cols", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string colsep {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("colsep", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("colsep", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string rowsep {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("rowsep", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("rowsep", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string align {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("align", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("align", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("tgroup", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<tgroup>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("colspec", "urn:isbn:1-931666-22-9"), typeof(colspec));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9"), typeof(thead));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("tbody", "urn:isbn:1-931666-22-9"), typeof(tbody));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class colspec : XTypedElement, IXMetaData {
        
		public static explicit operator colspec(XElement xe) { return XTypedServices.ToXTypedElement<colspec>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public colspec() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string colnum {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("colnum", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("colnum", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string colname {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("colname", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("colname", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string colwidth {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("colwidth", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("colwidth", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string colsep {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("colsep", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("colsep", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string rowsep {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("rowsep", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("rowsep", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string align {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("align", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("align", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string @char {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("char", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("char", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string charoff {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("charoff", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("charoff", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("colspec", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<colspec>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (row+)
    /// </para>
    /// </summary>
    public partial class tbody : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<row> rowField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator tbody(XElement xe) { return XTypedServices.ToXTypedElement<tbody>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static tbody() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("row", "urn:isbn:1-931666-22-9")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (row+)
        /// </para>
        /// </summary>
        public tbody() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (row+)
        /// </para>
        /// </summary>
        public virtual IList<row> row {
            get {
                if ((this.rowField == null)) {
                    this.rowField = new XTypedList<row>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("row", "urn:isbn:1-931666-22-9"));
                }
                return this.rowField;
            }
            set {
                if ((value == null)) {
                    this.rowField = null;
                }
                else {
                    if ((this.rowField == null)) {
                        this.rowField = XTypedList<row>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("row", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<row>(this.rowField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string valign {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("valign", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("valign", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("tbody", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<tbody>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("row", "urn:isbn:1-931666-22-9"), typeof(row));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (address | chronlist | list | note | table | p)+
    /// </para>
    /// </summary>
    public partial class blockquote : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator blockquote(XElement xe) { return XTypedServices.ToXTypedElement<blockquote>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static blockquote() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | p)+
        /// </para>
        /// </summary>
        public blockquote() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | p)+
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | p)+
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | p)+
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | p)+
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | p)+
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | p)+
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<blockquote>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"), typeof(address));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"), typeof(chronlist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"), typeof(list));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"), typeof(table));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"), typeof(p));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
    /// </para>
    /// </summary>
    public partial class @abstract : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator @abstract(XElement xe) { return XTypedServices.ToXTypedElement<@abstract>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static @abstract() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public @abstract() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("label", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("label", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string langcode {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("langcode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("langcode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("abstract", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<@abstract>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"), typeof(abbr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"), typeof(expan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"), typeof(@ref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"), typeof(extref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"), typeof(linkgrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"), typeof(bibref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"), typeof(title));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"), typeof(archref));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
    /// </para>
    /// </summary>
    public partial class container : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator container(XElement xe) { return XTypedServices.ToXTypedElement<container>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static container() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public container() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("label", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("label", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> parent {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("parent", ""));
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetListAttribute(System.Xml.Linq.XName.Get("parent", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("container", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<container>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"), typeof(abbr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"), typeof(expan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"), typeof(@ref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"), typeof(extref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"), typeof(linkgrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"), typeof(bibref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"), typeof(title));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"), typeof(archref));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
    /// </para>
    /// </summary>
    public partial class langmaterial : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<language> languageField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator langmaterial(XElement xe) { return XTypedServices.ToXTypedElement<langmaterial>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static langmaterial() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public langmaterial() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<language> language {
            get {
                if ((this.languageField == null)) {
                    this.languageField = new XTypedList<language>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("language", "urn:isbn:1-931666-22-9"));
                }
                return this.languageField;
            }
            set {
                if ((value == null)) {
                    this.languageField = null;
                }
                else {
                    if ((this.languageField == null)) {
                        this.languageField = XTypedList<language>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("language", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<language>(this.languageField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("label", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("label", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("langmaterial", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<langmaterial>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"), typeof(abbr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"), typeof(expan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"), typeof(@ref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"), typeof(extref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"), typeof(linkgrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"), typeof(bibref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"), typeof(title));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"), typeof(archref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("language", "urn:isbn:1-931666-22-9"), typeof(language));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
    /// </para>
    /// </summary>
    public partial class physdesc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dimensions> dimensionsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<physfacet> physfacetField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extent> extentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<date> dateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<corpname> corpnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<famname> famnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<geogname> geognameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<name> nameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<occupation> occupationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<persname> persnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<subject> subjectField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<genreform> genreformField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<function> functionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator physdesc(XElement xe) { return XTypedServices.ToXTypedElement<physdesc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static physdesc() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public physdesc() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<dimensions> dimensions {
            get {
                if ((this.dimensionsField == null)) {
                    this.dimensionsField = new XTypedList<dimensions>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("dimensions", "urn:isbn:1-931666-22-9"));
                }
                return this.dimensionsField;
            }
            set {
                if ((value == null)) {
                    this.dimensionsField = null;
                }
                else {
                    if ((this.dimensionsField == null)) {
                        this.dimensionsField = XTypedList<dimensions>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("dimensions", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<dimensions>(this.dimensionsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<physfacet> physfacet {
            get {
                if ((this.physfacetField == null)) {
                    this.physfacetField = new XTypedList<physfacet>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("physfacet", "urn:isbn:1-931666-22-9"));
                }
                return this.physfacetField;
            }
            set {
                if ((value == null)) {
                    this.physfacetField = null;
                }
                else {
                    if ((this.physfacetField == null)) {
                        this.physfacetField = XTypedList<physfacet>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("physfacet", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<physfacet>(this.physfacetField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<extent> extent {
            get {
                if ((this.extentField == null)) {
                    this.extentField = new XTypedList<extent>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extent", "urn:isbn:1-931666-22-9"));
                }
                return this.extentField;
            }
            set {
                if ((value == null)) {
                    this.extentField = null;
                }
                else {
                    if ((this.extentField == null)) {
                        this.extentField = XTypedList<extent>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extent", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extent>(this.extentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<date> date {
            get {
                if ((this.dateField == null)) {
                    this.dateField = new XTypedList<date>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"));
                }
                return this.dateField;
            }
            set {
                if ((value == null)) {
                    this.dateField = null;
                }
                else {
                    if ((this.dateField == null)) {
                        this.dateField = XTypedList<date>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<date>(this.dateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<corpname> corpname {
            get {
                if ((this.corpnameField == null)) {
                    this.corpnameField = new XTypedList<corpname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"));
                }
                return this.corpnameField;
            }
            set {
                if ((value == null)) {
                    this.corpnameField = null;
                }
                else {
                    if ((this.corpnameField == null)) {
                        this.corpnameField = XTypedList<corpname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<corpname>(this.corpnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<famname> famname {
            get {
                if ((this.famnameField == null)) {
                    this.famnameField = new XTypedList<famname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"));
                }
                return this.famnameField;
            }
            set {
                if ((value == null)) {
                    this.famnameField = null;
                }
                else {
                    if ((this.famnameField == null)) {
                        this.famnameField = XTypedList<famname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<famname>(this.famnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<geogname> geogname {
            get {
                if ((this.geognameField == null)) {
                    this.geognameField = new XTypedList<geogname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"));
                }
                return this.geognameField;
            }
            set {
                if ((value == null)) {
                    this.geognameField = null;
                }
                else {
                    if ((this.geognameField == null)) {
                        this.geognameField = XTypedList<geogname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<geogname>(this.geognameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<name> name {
            get {
                if ((this.nameField == null)) {
                    this.nameField = new XTypedList<name>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"));
                }
                return this.nameField;
            }
            set {
                if ((value == null)) {
                    this.nameField = null;
                }
                else {
                    if ((this.nameField == null)) {
                        this.nameField = XTypedList<name>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<name>(this.nameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<occupation> occupation {
            get {
                if ((this.occupationField == null)) {
                    this.occupationField = new XTypedList<occupation>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"));
                }
                return this.occupationField;
            }
            set {
                if ((value == null)) {
                    this.occupationField = null;
                }
                else {
                    if ((this.occupationField == null)) {
                        this.occupationField = XTypedList<occupation>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<occupation>(this.occupationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<persname> persname {
            get {
                if ((this.persnameField == null)) {
                    this.persnameField = new XTypedList<persname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"));
                }
                return this.persnameField;
            }
            set {
                if ((value == null)) {
                    this.persnameField = null;
                }
                else {
                    if ((this.persnameField == null)) {
                        this.persnameField = XTypedList<persname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<persname>(this.persnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<subject> subject {
            get {
                if ((this.subjectField == null)) {
                    this.subjectField = new XTypedList<subject>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"));
                }
                return this.subjectField;
            }
            set {
                if ((value == null)) {
                    this.subjectField = null;
                }
                else {
                    if ((this.subjectField == null)) {
                        this.subjectField = XTypedList<subject>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<subject>(this.subjectField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<genreform> genreform {
            get {
                if ((this.genreformField == null)) {
                    this.genreformField = new XTypedList<genreform>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"));
                }
                return this.genreformField;
            }
            set {
                if ((value == null)) {
                    this.genreformField = null;
                }
                else {
                    if ((this.genreformField == null)) {
                        this.genreformField = XTypedList<genreform>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<genreform>(this.genreformField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<function> function {
            get {
                if ((this.functionField == null)) {
                    this.functionField = new XTypedList<function>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"));
                }
                return this.functionField;
            }
            set {
                if ((value == null)) {
                    this.functionField = null;
                }
                else {
                    if ((this.functionField == null)) {
                        this.functionField = XTypedList<function>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<function>(this.functionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("label", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("label", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("source", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("source", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string rules {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("rules", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("rules", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("physdesc", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<physdesc>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"), typeof(abbr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"), typeof(expan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"), typeof(@ref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"), typeof(extref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"), typeof(linkgrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"), typeof(bibref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"), typeof(title));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"), typeof(archref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("dimensions", "urn:isbn:1-931666-22-9"), typeof(dimensions));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("physfacet", "urn:isbn:1-931666-22-9"), typeof(physfacet));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extent", "urn:isbn:1-931666-22-9"), typeof(extent));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"), typeof(date));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"), typeof(corpname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"), typeof(famname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"), typeof(geogname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"), typeof(name));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"), typeof(occupation));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"), typeof(persname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"), typeof(subject));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"), typeof(genreform));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"), typeof(function));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
    /// </para>
    /// </summary>
    public partial class physfacet : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<corpname> corpnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<famname> famnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<geogname> geognameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<name> nameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<occupation> occupationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<persname> persnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<subject> subjectField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<genreform> genreformField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<function> functionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<date> dateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator physfacet(XElement xe) { return XTypedServices.ToXTypedElement<physfacet>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static physfacet() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public physfacet() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public virtual IList<corpname> corpname {
            get {
                if ((this.corpnameField == null)) {
                    this.corpnameField = new XTypedList<corpname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"));
                }
                return this.corpnameField;
            }
            set {
                if ((value == null)) {
                    this.corpnameField = null;
                }
                else {
                    if ((this.corpnameField == null)) {
                        this.corpnameField = XTypedList<corpname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<corpname>(this.corpnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public virtual IList<famname> famname {
            get {
                if ((this.famnameField == null)) {
                    this.famnameField = new XTypedList<famname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"));
                }
                return this.famnameField;
            }
            set {
                if ((value == null)) {
                    this.famnameField = null;
                }
                else {
                    if ((this.famnameField == null)) {
                        this.famnameField = XTypedList<famname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<famname>(this.famnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public virtual IList<geogname> geogname {
            get {
                if ((this.geognameField == null)) {
                    this.geognameField = new XTypedList<geogname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"));
                }
                return this.geognameField;
            }
            set {
                if ((value == null)) {
                    this.geognameField = null;
                }
                else {
                    if ((this.geognameField == null)) {
                        this.geognameField = XTypedList<geogname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<geogname>(this.geognameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public virtual IList<name> name {
            get {
                if ((this.nameField == null)) {
                    this.nameField = new XTypedList<name>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"));
                }
                return this.nameField;
            }
            set {
                if ((value == null)) {
                    this.nameField = null;
                }
                else {
                    if ((this.nameField == null)) {
                        this.nameField = XTypedList<name>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<name>(this.nameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public virtual IList<occupation> occupation {
            get {
                if ((this.occupationField == null)) {
                    this.occupationField = new XTypedList<occupation>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"));
                }
                return this.occupationField;
            }
            set {
                if ((value == null)) {
                    this.occupationField = null;
                }
                else {
                    if ((this.occupationField == null)) {
                        this.occupationField = XTypedList<occupation>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<occupation>(this.occupationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public virtual IList<persname> persname {
            get {
                if ((this.persnameField == null)) {
                    this.persnameField = new XTypedList<persname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"));
                }
                return this.persnameField;
            }
            set {
                if ((value == null)) {
                    this.persnameField = null;
                }
                else {
                    if ((this.persnameField == null)) {
                        this.persnameField = XTypedList<persname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<persname>(this.persnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public virtual IList<subject> subject {
            get {
                if ((this.subjectField == null)) {
                    this.subjectField = new XTypedList<subject>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"));
                }
                return this.subjectField;
            }
            set {
                if ((value == null)) {
                    this.subjectField = null;
                }
                else {
                    if ((this.subjectField == null)) {
                        this.subjectField = XTypedList<subject>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<subject>(this.subjectField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public virtual IList<genreform> genreform {
            get {
                if ((this.genreformField == null)) {
                    this.genreformField = new XTypedList<genreform>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"));
                }
                return this.genreformField;
            }
            set {
                if ((value == null)) {
                    this.genreformField = null;
                }
                else {
                    if ((this.genreformField == null)) {
                        this.genreformField = XTypedList<genreform>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<genreform>(this.genreformField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public virtual IList<function> function {
            get {
                if ((this.functionField == null)) {
                    this.functionField = new XTypedList<function>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"));
                }
                return this.functionField;
            }
            set {
                if ((value == null)) {
                    this.functionField = null;
                }
                else {
                    if ((this.functionField == null)) {
                        this.functionField = XTypedList<function>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<function>(this.functionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public virtual IList<date> date {
            get {
                if ((this.dateField == null)) {
                    this.dateField = new XTypedList<date>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"));
                }
                return this.dateField;
            }
            set {
                if ((value == null)) {
                    this.dateField = null;
                }
                else {
                    if ((this.dateField == null)) {
                        this.dateField = XTypedList<date>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<date>(this.dateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("label", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("label", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string unit {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("unit", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("unit", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("source", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("source", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string rules {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("rules", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("rules", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("physfacet", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<physfacet>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"), typeof(abbr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"), typeof(expan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"), typeof(@ref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"), typeof(extref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"), typeof(linkgrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"), typeof(bibref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"), typeof(title));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"), typeof(archref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"), typeof(corpname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"), typeof(famname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"), typeof(geogname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"), typeof(name));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"), typeof(occupation));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"), typeof(persname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"), typeof(subject));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"), typeof(genreform));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"), typeof(function));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"), typeof(date));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
    /// </para>
    /// </summary>
    public partial class extent : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator extent(XElement xe) { return XTypedServices.ToXTypedElement<extent>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static extent() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public extent() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("label", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("label", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string unit {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("unit", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("unit", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("extent", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<extent>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"), typeof(abbr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"), typeof(expan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"), typeof(@ref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"), typeof(extref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"), typeof(linkgrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"), typeof(bibref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"), typeof(title));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"), typeof(archref));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
    /// </para>
    /// </summary>
    public partial class physloc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator physloc(XElement xe) { return XTypedServices.ToXTypedElement<physloc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static physloc() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public physloc() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("label", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("label", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> parent {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("parent", ""));
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetListAttribute(System.Xml.Linq.XName.Get("parent", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("physloc", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<physloc>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"), typeof(abbr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"), typeof(expan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"), typeof(@ref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"), typeof(extref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"), typeof(linkgrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"), typeof(bibref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"), typeof(title));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"), typeof(archref));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
    /// </para>
    /// </summary>
    public partial class unitid : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator unitid(XElement xe) { return XTypedServices.ToXTypedElement<unitid>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static unitid() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public unitid() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("label", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("label", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string countrycode {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("countrycode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("countrycode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string repositorycode {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("repositorycode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("repositorycode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string identifier {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("identifier", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("identifier", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("unitid", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<unitid>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"), typeof(abbr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"), typeof(expan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"), typeof(@ref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"), typeof(extref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"), typeof(linkgrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"), typeof(bibref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"), typeof(title));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"), typeof(archref));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
    /// </para>
    /// </summary>
    public partial class descgrp : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accessrestrict> accessrestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accruals> accrualsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<acqinfo> acqinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<altformavail> altformavailField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<appraisal> appraisalField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<arrangement> arrangementField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibliography> bibliographyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bioghist> bioghistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<controlaccess> controlaccessField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<custodhist> custodhistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<descgrp> descgrp1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<fileplan> fileplanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<index> indexField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<odd> oddField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<originalsloc> originalslocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<otherfindaid> otherfindaidField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phystech> phystechField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<prefercite> preferciteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<processinfo> processinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<relatedmaterial> relatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<scopecontent> scopecontentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<separatedmaterial> separatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<userestrict> userestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator descgrp(XElement xe) { return XTypedServices.ToXTypedElement<descgrp>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static descgrp() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public descgrp() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"));
                return ((head)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<accessrestrict> accessrestrict {
            get {
                if ((this.accessrestrictField == null)) {
                    this.accessrestrictField = new XTypedList<accessrestrict>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"));
                }
                return this.accessrestrictField;
            }
            set {
                if ((value == null)) {
                    this.accessrestrictField = null;
                }
                else {
                    if ((this.accessrestrictField == null)) {
                        this.accessrestrictField = XTypedList<accessrestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<accessrestrict>(this.accessrestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<accruals> accruals {
            get {
                if ((this.accrualsField == null)) {
                    this.accrualsField = new XTypedList<accruals>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"));
                }
                return this.accrualsField;
            }
            set {
                if ((value == null)) {
                    this.accrualsField = null;
                }
                else {
                    if ((this.accrualsField == null)) {
                        this.accrualsField = XTypedList<accruals>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<accruals>(this.accrualsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<acqinfo> acqinfo {
            get {
                if ((this.acqinfoField == null)) {
                    this.acqinfoField = new XTypedList<acqinfo>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"));
                }
                return this.acqinfoField;
            }
            set {
                if ((value == null)) {
                    this.acqinfoField = null;
                }
                else {
                    if ((this.acqinfoField == null)) {
                        this.acqinfoField = XTypedList<acqinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<acqinfo>(this.acqinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<altformavail> altformavail {
            get {
                if ((this.altformavailField == null)) {
                    this.altformavailField = new XTypedList<altformavail>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"));
                }
                return this.altformavailField;
            }
            set {
                if ((value == null)) {
                    this.altformavailField = null;
                }
                else {
                    if ((this.altformavailField == null)) {
                        this.altformavailField = XTypedList<altformavail>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<altformavail>(this.altformavailField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<appraisal> appraisal {
            get {
                if ((this.appraisalField == null)) {
                    this.appraisalField = new XTypedList<appraisal>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"));
                }
                return this.appraisalField;
            }
            set {
                if ((value == null)) {
                    this.appraisalField = null;
                }
                else {
                    if ((this.appraisalField == null)) {
                        this.appraisalField = XTypedList<appraisal>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<appraisal>(this.appraisalField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<arrangement> arrangement {
            get {
                if ((this.arrangementField == null)) {
                    this.arrangementField = new XTypedList<arrangement>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"));
                }
                return this.arrangementField;
            }
            set {
                if ((value == null)) {
                    this.arrangementField = null;
                }
                else {
                    if ((this.arrangementField == null)) {
                        this.arrangementField = XTypedList<arrangement>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<arrangement>(this.arrangementField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<bibliography> bibliography {
            get {
                if ((this.bibliographyField == null)) {
                    this.bibliographyField = new XTypedList<bibliography>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"));
                }
                return this.bibliographyField;
            }
            set {
                if ((value == null)) {
                    this.bibliographyField = null;
                }
                else {
                    if ((this.bibliographyField == null)) {
                        this.bibliographyField = XTypedList<bibliography>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibliography>(this.bibliographyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<bioghist> bioghist {
            get {
                if ((this.bioghistField == null)) {
                    this.bioghistField = new XTypedList<bioghist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"));
                }
                return this.bioghistField;
            }
            set {
                if ((value == null)) {
                    this.bioghistField = null;
                }
                else {
                    if ((this.bioghistField == null)) {
                        this.bioghistField = XTypedList<bioghist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bioghist>(this.bioghistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<controlaccess> controlaccess {
            get {
                if ((this.controlaccessField == null)) {
                    this.controlaccessField = new XTypedList<controlaccess>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"));
                }
                return this.controlaccessField;
            }
            set {
                if ((value == null)) {
                    this.controlaccessField = null;
                }
                else {
                    if ((this.controlaccessField == null)) {
                        this.controlaccessField = XTypedList<controlaccess>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<controlaccess>(this.controlaccessField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<custodhist> custodhist {
            get {
                if ((this.custodhistField == null)) {
                    this.custodhistField = new XTypedList<custodhist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"));
                }
                return this.custodhistField;
            }
            set {
                if ((value == null)) {
                    this.custodhistField = null;
                }
                else {
                    if ((this.custodhistField == null)) {
                        this.custodhistField = XTypedList<custodhist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<custodhist>(this.custodhistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<descgrp> descgrp1 {
            get {
                if ((this.descgrp1Field == null)) {
                    this.descgrp1Field = new XTypedList<descgrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"));
                }
                return this.descgrp1Field;
            }
            set {
                if ((value == null)) {
                    this.descgrp1Field = null;
                }
                else {
                    if ((this.descgrp1Field == null)) {
                        this.descgrp1Field = XTypedList<descgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<descgrp>(this.descgrp1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<fileplan> fileplan {
            get {
                if ((this.fileplanField == null)) {
                    this.fileplanField = new XTypedList<fileplan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"));
                }
                return this.fileplanField;
            }
            set {
                if ((value == null)) {
                    this.fileplanField = null;
                }
                else {
                    if ((this.fileplanField == null)) {
                        this.fileplanField = XTypedList<fileplan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<fileplan>(this.fileplanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<index> index {
            get {
                if ((this.indexField == null)) {
                    this.indexField = new XTypedList<index>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"));
                }
                return this.indexField;
            }
            set {
                if ((value == null)) {
                    this.indexField = null;
                }
                else {
                    if ((this.indexField == null)) {
                        this.indexField = XTypedList<index>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<index>(this.indexField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<odd> odd {
            get {
                if ((this.oddField == null)) {
                    this.oddField = new XTypedList<odd>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"));
                }
                return this.oddField;
            }
            set {
                if ((value == null)) {
                    this.oddField = null;
                }
                else {
                    if ((this.oddField == null)) {
                        this.oddField = XTypedList<odd>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<odd>(this.oddField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<originalsloc> originalsloc {
            get {
                if ((this.originalslocField == null)) {
                    this.originalslocField = new XTypedList<originalsloc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"));
                }
                return this.originalslocField;
            }
            set {
                if ((value == null)) {
                    this.originalslocField = null;
                }
                else {
                    if ((this.originalslocField == null)) {
                        this.originalslocField = XTypedList<originalsloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<originalsloc>(this.originalslocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<otherfindaid> otherfindaid {
            get {
                if ((this.otherfindaidField == null)) {
                    this.otherfindaidField = new XTypedList<otherfindaid>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"));
                }
                return this.otherfindaidField;
            }
            set {
                if ((value == null)) {
                    this.otherfindaidField = null;
                }
                else {
                    if ((this.otherfindaidField == null)) {
                        this.otherfindaidField = XTypedList<otherfindaid>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<otherfindaid>(this.otherfindaidField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<phystech> phystech {
            get {
                if ((this.phystechField == null)) {
                    this.phystechField = new XTypedList<phystech>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"));
                }
                return this.phystechField;
            }
            set {
                if ((value == null)) {
                    this.phystechField = null;
                }
                else {
                    if ((this.phystechField == null)) {
                        this.phystechField = XTypedList<phystech>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<phystech>(this.phystechField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<prefercite> prefercite {
            get {
                if ((this.preferciteField == null)) {
                    this.preferciteField = new XTypedList<prefercite>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"));
                }
                return this.preferciteField;
            }
            set {
                if ((value == null)) {
                    this.preferciteField = null;
                }
                else {
                    if ((this.preferciteField == null)) {
                        this.preferciteField = XTypedList<prefercite>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<prefercite>(this.preferciteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<processinfo> processinfo {
            get {
                if ((this.processinfoField == null)) {
                    this.processinfoField = new XTypedList<processinfo>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"));
                }
                return this.processinfoField;
            }
            set {
                if ((value == null)) {
                    this.processinfoField = null;
                }
                else {
                    if ((this.processinfoField == null)) {
                        this.processinfoField = XTypedList<processinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<processinfo>(this.processinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<relatedmaterial> relatedmaterial {
            get {
                if ((this.relatedmaterialField == null)) {
                    this.relatedmaterialField = new XTypedList<relatedmaterial>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"));
                }
                return this.relatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.relatedmaterialField = null;
                }
                else {
                    if ((this.relatedmaterialField == null)) {
                        this.relatedmaterialField = XTypedList<relatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<relatedmaterial>(this.relatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<scopecontent> scopecontent {
            get {
                if ((this.scopecontentField == null)) {
                    this.scopecontentField = new XTypedList<scopecontent>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"));
                }
                return this.scopecontentField;
            }
            set {
                if ((value == null)) {
                    this.scopecontentField = null;
                }
                else {
                    if ((this.scopecontentField == null)) {
                        this.scopecontentField = XTypedList<scopecontent>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<scopecontent>(this.scopecontentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<separatedmaterial> separatedmaterial {
            get {
                if ((this.separatedmaterialField == null)) {
                    this.separatedmaterialField = new XTypedList<separatedmaterial>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"));
                }
                return this.separatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.separatedmaterialField = null;
                }
                else {
                    if ((this.separatedmaterialField == null)) {
                        this.separatedmaterialField = XTypedList<separatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<separatedmaterial>(this.separatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<userestrict> userestrict {
            get {
                if ((this.userestrictField == null)) {
                    this.userestrictField = new XTypedList<userestrict>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"));
                }
                return this.userestrictField;
            }
            set {
                if ((value == null)) {
                    this.userestrictField = null;
                }
                else {
                    if ((this.userestrictField == null)) {
                        this.userestrictField = XTypedList<userestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<userestrict>(this.userestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<descgrp>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), typeof(head));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"), typeof(address));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"), typeof(chronlist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"), typeof(list));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"), typeof(table));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"), typeof(blockquote));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"), typeof(p));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"), typeof(accessrestrict));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"), typeof(accruals));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"), typeof(acqinfo));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"), typeof(altformavail));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"), typeof(appraisal));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"), typeof(arrangement));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"), typeof(bibliography));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"), typeof(bioghist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"), typeof(controlaccess));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"), typeof(custodhist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"), typeof(descgrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"), typeof(fileplan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"), typeof(index));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"), typeof(odd));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"), typeof(originalsloc));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"), typeof(otherfindaid));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"), typeof(phystech));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"), typeof(prefercite));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"), typeof(processinfo));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"), typeof(relatedmaterial));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"), typeof(scopecontent));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"), typeof(separatedmaterial));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"), typeof(userestrict));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class yesorno {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), null);
        
        private yesorno() {
        }
    }
    
    public sealed class avlevel {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "class",
                        "collection",
                        "file",
                        "fonds",
                        "item",
                        "otherlevel",
                        "recordgrp",
                        "series",
                        "subfonds",
                        "subgrp",
                        "subseries"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private avlevel() {
        }
    }
    
    public sealed class avrender {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "altrender",
                        "bold",
                        "bolddoublequote",
                        "bolditalic",
                        "boldsinglequote",
                        "boldsmcaps",
                        "boldunderline",
                        "doublequote",
                        "italic",
                        "nonproport",
                        "singlequote",
                        "smcaps",
                        "sub",
                        "super",
                        "underline"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private avrender() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (eadid, filedesc, profiledesc?, revisiondesc?)
    /// </para>
    /// </summary>
    public partial class eadheader : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string langencodingDefaultValue = "iso639-2b";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string scriptencodingDefaultValue = "iso15924";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string dateencodingDefaultValue = "iso8601";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string countryencodingDefaultValue = "iso3166-1";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string repositoryencodingDefaultValue = "iso15511";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator eadheader(XElement xe) { return XTypedServices.ToXTypedElement<eadheader>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static eadheader() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("eadid", "urn:isbn:1-931666-22-9")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("filedesc", "urn:isbn:1-931666-22-9")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("profiledesc", "urn:isbn:1-931666-22-9")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("revisiondesc", "urn:isbn:1-931666-22-9")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (eadid, filedesc, profiledesc?, revisiondesc?)
        /// </para>
        /// </summary>
        public eadheader() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (eadid, filedesc, profiledesc?, revisiondesc?)
        /// </para>
        /// </summary>
        public virtual eadid eadid {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("eadid", "urn:isbn:1-931666-22-9"));
                return ((eadid)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("eadid", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (eadid, filedesc, profiledesc?, revisiondesc?)
        /// </para>
        /// </summary>
        public virtual filedesc filedesc {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("filedesc", "urn:isbn:1-931666-22-9"));
                return ((filedesc)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("filedesc", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (eadid, filedesc, profiledesc?, revisiondesc?)
        /// </para>
        /// </summary>
        public virtual profiledesc profiledesc {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("profiledesc", "urn:isbn:1-931666-22-9"));
                return ((profiledesc)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("profiledesc", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (eadid, filedesc, profiledesc?, revisiondesc?)
        /// </para>
        /// </summary>
        public virtual revisiondesc revisiondesc {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("revisiondesc", "urn:isbn:1-931666-22-9"));
                return ((revisiondesc)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("revisiondesc", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string langencoding {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("langencoding", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, langencodingDefaultValue);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("langencoding", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string scriptencoding {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("scriptencoding", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, scriptencodingDefaultValue);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("scriptencoding", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string dateencoding {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("dateencoding", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, dateencodingDefaultValue);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("dateencoding", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string countryencoding {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("countryencoding", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, countryencodingDefaultValue);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("countryencoding", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string repositoryencoding {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("repositoryencoding", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, repositoryencodingDefaultValue);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("repositoryencoding", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string relatedencoding {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("relatedencoding", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("relatedencoding", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string findaidstatus {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("findaidstatus", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("findaidstatus", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("eadheader", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<eadheader>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("eadid", "urn:isbn:1-931666-22-9"), typeof(eadid));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("filedesc", "urn:isbn:1-931666-22-9"), typeof(filedesc));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("profiledesc", "urn:isbn:1-931666-22-9"), typeof(profiledesc));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("revisiondesc", "urn:isbn:1-931666-22-9"), typeof(revisiondesc));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class eadid : XTypedElement, IXMetaData {
        
		public static explicit operator eadid(XElement xe) { return XTypedServices.ToXTypedElement<eadid>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public eadid() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string publicid {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("publicid", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("publicid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string urn {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("urn", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("urn", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string url {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("url", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("url", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string countrycode {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("countrycode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("countrycode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mainagencycode {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("mainagencycode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("mainagencycode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string identifier {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("identifier", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("identifier", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("eadid", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<eadid>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (titlestmt, editionstmt?, publicationstmt?, seriesstmt?, notestmt?)
    /// </para>
    /// </summary>
    public partial class filedesc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator filedesc(XElement xe) { return XTypedServices.ToXTypedElement<filedesc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static filedesc() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("titlestmt", "urn:isbn:1-931666-22-9")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("editionstmt", "urn:isbn:1-931666-22-9")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("publicationstmt", "urn:isbn:1-931666-22-9")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("seriesstmt", "urn:isbn:1-931666-22-9")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("notestmt", "urn:isbn:1-931666-22-9")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (titlestmt, editionstmt?, publicationstmt?, seriesstmt?, notestmt?)
        /// </para>
        /// </summary>
        public filedesc() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (titlestmt, editionstmt?, publicationstmt?, seriesstmt?, notestmt?)
        /// </para>
        /// </summary>
        public virtual titlestmt titlestmt {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("titlestmt", "urn:isbn:1-931666-22-9"));
                return ((titlestmt)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("titlestmt", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (titlestmt, editionstmt?, publicationstmt?, seriesstmt?, notestmt?)
        /// </para>
        /// </summary>
        public virtual editionstmt editionstmt {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("editionstmt", "urn:isbn:1-931666-22-9"));
                return ((editionstmt)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("editionstmt", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (titlestmt, editionstmt?, publicationstmt?, seriesstmt?, notestmt?)
        /// </para>
        /// </summary>
        public virtual publicationstmt publicationstmt {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("publicationstmt", "urn:isbn:1-931666-22-9"));
                return ((publicationstmt)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("publicationstmt", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (titlestmt, editionstmt?, publicationstmt?, seriesstmt?, notestmt?)
        /// </para>
        /// </summary>
        public virtual seriesstmt seriesstmt {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("seriesstmt", "urn:isbn:1-931666-22-9"));
                return ((seriesstmt)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("seriesstmt", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (titlestmt, editionstmt?, publicationstmt?, seriesstmt?, notestmt?)
        /// </para>
        /// </summary>
        public virtual notestmt notestmt {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("notestmt", "urn:isbn:1-931666-22-9"));
                return ((notestmt)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("notestmt", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("filedesc", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<filedesc>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("titlestmt", "urn:isbn:1-931666-22-9"), typeof(titlestmt));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("editionstmt", "urn:isbn:1-931666-22-9"), typeof(editionstmt));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("publicationstmt", "urn:isbn:1-931666-22-9"), typeof(publicationstmt));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("seriesstmt", "urn:isbn:1-931666-22-9"), typeof(seriesstmt));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("notestmt", "urn:isbn:1-931666-22-9"), typeof(notestmt));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (titleproper+, subtitle*, author?, sponsor?)
    /// </para>
    /// </summary>
    public partial class titlestmt : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<titleproper> titleproperField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<subtitle> subtitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator titlestmt(XElement xe) { return XTypedServices.ToXTypedElement<titlestmt>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static titlestmt() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("titleproper", "urn:isbn:1-931666-22-9")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("subtitle", "urn:isbn:1-931666-22-9")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("author", "urn:isbn:1-931666-22-9")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("sponsor", "urn:isbn:1-931666-22-9")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (titleproper+, subtitle*, author?, sponsor?)
        /// </para>
        /// </summary>
        public titlestmt() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (titleproper+, subtitle*, author?, sponsor?)
        /// </para>
        /// </summary>
        public virtual IList<titleproper> titleproper {
            get {
                if ((this.titleproperField == null)) {
                    this.titleproperField = new XTypedList<titleproper>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("titleproper", "urn:isbn:1-931666-22-9"));
                }
                return this.titleproperField;
            }
            set {
                if ((value == null)) {
                    this.titleproperField = null;
                }
                else {
                    if ((this.titleproperField == null)) {
                        this.titleproperField = XTypedList<titleproper>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("titleproper", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<titleproper>(this.titleproperField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (titleproper+, subtitle*, author?, sponsor?)
        /// </para>
        /// </summary>
        public virtual IList<subtitle> subtitle {
            get {
                if ((this.subtitleField == null)) {
                    this.subtitleField = new XTypedList<subtitle>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("subtitle", "urn:isbn:1-931666-22-9"));
                }
                return this.subtitleField;
            }
            set {
                if ((value == null)) {
                    this.subtitleField = null;
                }
                else {
                    if ((this.subtitleField == null)) {
                        this.subtitleField = XTypedList<subtitle>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("subtitle", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<subtitle>(this.subtitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (titleproper+, subtitle*, author?, sponsor?)
        /// </para>
        /// </summary>
        public virtual author author {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("author", "urn:isbn:1-931666-22-9"));
                return ((author)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("author", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (titleproper+, subtitle*, author?, sponsor?)
        /// </para>
        /// </summary>
        public virtual sponsor sponsor {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("sponsor", "urn:isbn:1-931666-22-9"));
                return ((sponsor)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("sponsor", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("titlestmt", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<titlestmt>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("titleproper", "urn:isbn:1-931666-22-9"), typeof(titleproper));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("subtitle", "urn:isbn:1-931666-22-9"), typeof(subtitle));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("author", "urn:isbn:1-931666-22-9"), typeof(author));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("sponsor", "urn:isbn:1-931666-22-9"), typeof(sponsor));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (edition | p)+
    /// </para>
    /// </summary>
    public partial class editionstmt : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<edition> editionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator editionstmt(XElement xe) { return XTypedServices.ToXTypedElement<editionstmt>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static editionstmt() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (edition | p)+
        /// </para>
        /// </summary>
        public editionstmt() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (edition | p)+
        /// </para>
        /// </summary>
        public virtual IList<edition> edition {
            get {
                if ((this.editionField == null)) {
                    this.editionField = new XTypedList<edition>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("edition", "urn:isbn:1-931666-22-9"));
                }
                return this.editionField;
            }
            set {
                if ((value == null)) {
                    this.editionField = null;
                }
                else {
                    if ((this.editionField == null)) {
                        this.editionField = XTypedList<edition>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("edition", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<edition>(this.editionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (edition | p)+
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("editionstmt", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<editionstmt>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("edition", "urn:isbn:1-931666-22-9"), typeof(edition));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"), typeof(p));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (publisher | date | address | num | p)+
    /// </para>
    /// </summary>
    public partial class publicationstmt : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<publisher> publisherField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<date> dateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<num> numField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator publicationstmt(XElement xe) { return XTypedServices.ToXTypedElement<publicationstmt>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static publicationstmt() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (publisher | date | address | num | p)+
        /// </para>
        /// </summary>
        public publicationstmt() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (publisher | date | address | num | p)+
        /// </para>
        /// </summary>
        public virtual IList<publisher> publisher {
            get {
                if ((this.publisherField == null)) {
                    this.publisherField = new XTypedList<publisher>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("publisher", "urn:isbn:1-931666-22-9"));
                }
                return this.publisherField;
            }
            set {
                if ((value == null)) {
                    this.publisherField = null;
                }
                else {
                    if ((this.publisherField == null)) {
                        this.publisherField = XTypedList<publisher>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("publisher", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<publisher>(this.publisherField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (publisher | date | address | num | p)+
        /// </para>
        /// </summary>
        public virtual IList<date> date {
            get {
                if ((this.dateField == null)) {
                    this.dateField = new XTypedList<date>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"));
                }
                return this.dateField;
            }
            set {
                if ((value == null)) {
                    this.dateField = null;
                }
                else {
                    if ((this.dateField == null)) {
                        this.dateField = XTypedList<date>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<date>(this.dateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (publisher | date | address | num | p)+
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (publisher | date | address | num | p)+
        /// </para>
        /// </summary>
        public virtual IList<num> num {
            get {
                if ((this.numField == null)) {
                    this.numField = new XTypedList<num>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"));
                }
                return this.numField;
            }
            set {
                if ((value == null)) {
                    this.numField = null;
                }
                else {
                    if ((this.numField == null)) {
                        this.numField = XTypedList<num>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<num>(this.numField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (publisher | date | address | num | p)+
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("publicationstmt", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<publicationstmt>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("publisher", "urn:isbn:1-931666-22-9"), typeof(publisher));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"), typeof(date));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"), typeof(address));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"), typeof(num));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"), typeof(p));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (titleproper | num | p)+
    /// </para>
    /// </summary>
    public partial class seriesstmt : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<titleproper> titleproperField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<num> numField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator seriesstmt(XElement xe) { return XTypedServices.ToXTypedElement<seriesstmt>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static seriesstmt() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (titleproper | num | p)+
        /// </para>
        /// </summary>
        public seriesstmt() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (titleproper | num | p)+
        /// </para>
        /// </summary>
        public virtual IList<titleproper> titleproper {
            get {
                if ((this.titleproperField == null)) {
                    this.titleproperField = new XTypedList<titleproper>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("titleproper", "urn:isbn:1-931666-22-9"));
                }
                return this.titleproperField;
            }
            set {
                if ((value == null)) {
                    this.titleproperField = null;
                }
                else {
                    if ((this.titleproperField == null)) {
                        this.titleproperField = XTypedList<titleproper>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("titleproper", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<titleproper>(this.titleproperField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (titleproper | num | p)+
        /// </para>
        /// </summary>
        public virtual IList<num> num {
            get {
                if ((this.numField == null)) {
                    this.numField = new XTypedList<num>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"));
                }
                return this.numField;
            }
            set {
                if ((value == null)) {
                    this.numField = null;
                }
                else {
                    if ((this.numField == null)) {
                        this.numField = XTypedList<num>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<num>(this.numField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (titleproper | num | p)+
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("seriesstmt", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<seriesstmt>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("titleproper", "urn:isbn:1-931666-22-9"), typeof(titleproper));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"), typeof(num));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"), typeof(p));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (note+)
    /// </para>
    /// </summary>
    public partial class notestmt : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator notestmt(XElement xe) { return XTypedServices.ToXTypedElement<notestmt>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static notestmt() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (note+)
        /// </para>
        /// </summary>
        public notestmt() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (note+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("notestmt", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<notestmt>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (creation?, langusage?, descrules?)
    /// </para>
    /// </summary>
    public partial class profiledesc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator profiledesc(XElement xe) { return XTypedServices.ToXTypedElement<profiledesc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static profiledesc() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("creation", "urn:isbn:1-931666-22-9")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("langusage", "urn:isbn:1-931666-22-9")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("descrules", "urn:isbn:1-931666-22-9")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (creation?, langusage?, descrules?)
        /// </para>
        /// </summary>
        public profiledesc() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (creation?, langusage?, descrules?)
        /// </para>
        /// </summary>
        public virtual creation creation {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("creation", "urn:isbn:1-931666-22-9"));
                return ((creation)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("creation", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (creation?, langusage?, descrules?)
        /// </para>
        /// </summary>
        public virtual langusage langusage {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("langusage", "urn:isbn:1-931666-22-9"));
                return ((langusage)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("langusage", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (creation?, langusage?, descrules?)
        /// </para>
        /// </summary>
        public virtual descrules descrules {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("descrules", "urn:isbn:1-931666-22-9"));
                return ((descrules)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("descrules", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("profiledesc", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<profiledesc>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("creation", "urn:isbn:1-931666-22-9"), typeof(creation));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("langusage", "urn:isbn:1-931666-22-9"), typeof(langusage));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("descrules", "urn:isbn:1-931666-22-9"), typeof(descrules));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | date)*
    /// </para>
    /// </summary>
    public partial class creation : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<date> dateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator creation(XElement xe) { return XTypedServices.ToXTypedElement<creation>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static creation() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | date)*
        /// </para>
        /// </summary>
        public creation() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | date)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | date)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | date)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | date)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | date)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | date)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | date)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | date)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | date)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | date)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | date)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | date)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | date)*
        /// </para>
        /// </summary>
        public virtual IList<date> date {
            get {
                if ((this.dateField == null)) {
                    this.dateField = new XTypedList<date>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"));
                }
                return this.dateField;
            }
            set {
                if ((value == null)) {
                    this.dateField = null;
                }
                else {
                    if ((this.dateField == null)) {
                        this.dateField = XTypedList<date>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<date>(this.dateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("creation", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<creation>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"), typeof(abbr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"), typeof(expan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"), typeof(@ref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"), typeof(extref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"), typeof(linkgrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"), typeof(bibref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"), typeof(title));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"), typeof(archref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"), typeof(date));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
    /// </para>
    /// </summary>
    public partial class langusage : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<language> languageField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator langusage(XElement xe) { return XTypedServices.ToXTypedElement<langusage>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static langusage() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public langusage() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<language> language {
            get {
                if ((this.languageField == null)) {
                    this.languageField = new XTypedList<language>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("language", "urn:isbn:1-931666-22-9"));
                }
                return this.languageField;
            }
            set {
                if ((value == null)) {
                    this.languageField = null;
                }
                else {
                    if ((this.languageField == null)) {
                        this.languageField = XTypedList<language>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("language", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<language>(this.languageField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("langusage", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<langusage>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"), typeof(abbr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"), typeof(expan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"), typeof(@ref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"), typeof(extref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"), typeof(linkgrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"), typeof(bibref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"), typeof(title));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"), typeof(archref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("language", "urn:isbn:1-931666-22-9"), typeof(language));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
    /// </para>
    /// </summary>
    public partial class descrules : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator descrules(XElement xe) { return XTypedServices.ToXTypedElement<descrules>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static descrules() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public descrules() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("descrules", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<descrules>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"), typeof(abbr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"), typeof(expan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"), typeof(@ref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"), typeof(extref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"), typeof(linkgrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"), typeof(bibref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"), typeof(title));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"), typeof(archref));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (list | change+)
    /// </para>
    /// </summary>
    public partial class revisiondesc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<change> changeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator revisiondesc(XElement xe) { return XTypedServices.ToXTypedElement<revisiondesc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static revisiondesc() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("change", "urn:isbn:1-931666-22-9")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (list | change+)
        /// </para>
        /// </summary>
        public revisiondesc() {
        }
        
        public revisiondesc(list list) {
            this.list = list;
        }
        
        public revisiondesc(IEnumerable<change> change) {
            this.changeField = XTypedList<change>.Initialize(this, LinqToXsdTypeManager.Instance, change, System.Xml.Linq.XName.Get("change", "urn:isbn:1-931666-22-9"));
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (list | change+)
        /// </para>
        /// </summary>
        public virtual list list {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                return ((list)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (list | change+)
        /// </para>
        /// </summary>
        public virtual IList<change> change {
            get {
                if ((this.changeField == null)) {
                    this.changeField = new XTypedList<change>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("change", "urn:isbn:1-931666-22-9"));
                }
                return this.changeField;
            }
            set {
                if ((value == null)) {
                    this.changeField = null;
                }
                else {
                    if ((this.changeField == null)) {
                        this.changeField = XTypedList<change>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("change", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<change>(this.changeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("revisiondesc", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<revisiondesc>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"), typeof(list));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("change", "urn:isbn:1-931666-22-9"), typeof(change));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (date, item+)
    /// </para>
    /// </summary>
    public partial class change : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<item> itemField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator change(XElement xe) { return XTypedServices.ToXTypedElement<change>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static change() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("item", "urn:isbn:1-931666-22-9")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (date, item+)
        /// </para>
        /// </summary>
        public change() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (date, item+)
        /// </para>
        /// </summary>
        public virtual date date {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"));
                return ((date)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (date, item+)
        /// </para>
        /// </summary>
        public virtual IList<item> item {
            get {
                if ((this.itemField == null)) {
                    this.itemField = new XTypedList<item>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("item", "urn:isbn:1-931666-22-9"));
                }
                return this.itemField;
            }
            set {
                if ((value == null)) {
                    this.itemField = null;
                }
                else {
                    if ((this.itemField == null)) {
                        this.itemField = XTypedList<item>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("item", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<item>(this.itemField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("change", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<change>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"), typeof(date));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("item", "urn:isbn:1-931666-22-9"), typeof(item));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (titlepage?, div*)
    /// </para>
    /// </summary>
    public partial class frontmatter : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<div> divField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator frontmatter(XElement xe) { return XTypedServices.ToXTypedElement<frontmatter>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static frontmatter() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("titlepage", "urn:isbn:1-931666-22-9")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("div", "urn:isbn:1-931666-22-9")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (titlepage?, div*)
        /// </para>
        /// </summary>
        public frontmatter() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (titlepage?, div*)
        /// </para>
        /// </summary>
        public virtual titlepage titlepage {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("titlepage", "urn:isbn:1-931666-22-9"));
                return ((titlepage)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("titlepage", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (titlepage?, div*)
        /// </para>
        /// </summary>
        public virtual IList<div> div {
            get {
                if ((this.divField == null)) {
                    this.divField = new XTypedList<div>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("div", "urn:isbn:1-931666-22-9"));
                }
                return this.divField;
            }
            set {
                if ((value == null)) {
                    this.divField = null;
                }
                else {
                    if ((this.divField == null)) {
                        this.divField = XTypedList<div>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("div", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<div>(this.divField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("frontmatter", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<frontmatter>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("titlepage", "urn:isbn:1-931666-22-9"), typeof(titlepage));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("div", "urn:isbn:1-931666-22-9"), typeof(div));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (address | chronlist | list | note | table | blockquote | p | author | date | edition | num | publisher | bibseries | sponsor | titleproper | subtitle)+
    /// </para>
    /// </summary>
    public partial class titlepage : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<author> authorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<date> dateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<edition> editionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<num> numField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<publisher> publisherField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibseries> bibseriesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<sponsor> sponsorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<titleproper> titleproperField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<subtitle> subtitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator titlepage(XElement xe) { return XTypedServices.ToXTypedElement<titlepage>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static titlepage() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | blockquote | p | author | date | edition | num | publisher | bibseries | sponsor | titleproper | subtitle)+
        /// </para>
        /// </summary>
        public titlepage() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | blockquote | p | author | date | edition | num | publisher | bibseries | sponsor | titleproper | subtitle)+
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | blockquote | p | author | date | edition | num | publisher | bibseries | sponsor | titleproper | subtitle)+
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | blockquote | p | author | date | edition | num | publisher | bibseries | sponsor | titleproper | subtitle)+
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | blockquote | p | author | date | edition | num | publisher | bibseries | sponsor | titleproper | subtitle)+
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | blockquote | p | author | date | edition | num | publisher | bibseries | sponsor | titleproper | subtitle)+
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | blockquote | p | author | date | edition | num | publisher | bibseries | sponsor | titleproper | subtitle)+
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | blockquote | p | author | date | edition | num | publisher | bibseries | sponsor | titleproper | subtitle)+
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | blockquote | p | author | date | edition | num | publisher | bibseries | sponsor | titleproper | subtitle)+
        /// </para>
        /// </summary>
        public virtual IList<author> author {
            get {
                if ((this.authorField == null)) {
                    this.authorField = new XTypedList<author>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("author", "urn:isbn:1-931666-22-9"));
                }
                return this.authorField;
            }
            set {
                if ((value == null)) {
                    this.authorField = null;
                }
                else {
                    if ((this.authorField == null)) {
                        this.authorField = XTypedList<author>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("author", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<author>(this.authorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | blockquote | p | author | date | edition | num | publisher | bibseries | sponsor | titleproper | subtitle)+
        /// </para>
        /// </summary>
        public virtual IList<date> date {
            get {
                if ((this.dateField == null)) {
                    this.dateField = new XTypedList<date>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"));
                }
                return this.dateField;
            }
            set {
                if ((value == null)) {
                    this.dateField = null;
                }
                else {
                    if ((this.dateField == null)) {
                        this.dateField = XTypedList<date>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<date>(this.dateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | blockquote | p | author | date | edition | num | publisher | bibseries | sponsor | titleproper | subtitle)+
        /// </para>
        /// </summary>
        public virtual IList<edition> edition {
            get {
                if ((this.editionField == null)) {
                    this.editionField = new XTypedList<edition>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("edition", "urn:isbn:1-931666-22-9"));
                }
                return this.editionField;
            }
            set {
                if ((value == null)) {
                    this.editionField = null;
                }
                else {
                    if ((this.editionField == null)) {
                        this.editionField = XTypedList<edition>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("edition", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<edition>(this.editionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | blockquote | p | author | date | edition | num | publisher | bibseries | sponsor | titleproper | subtitle)+
        /// </para>
        /// </summary>
        public virtual IList<num> num {
            get {
                if ((this.numField == null)) {
                    this.numField = new XTypedList<num>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"));
                }
                return this.numField;
            }
            set {
                if ((value == null)) {
                    this.numField = null;
                }
                else {
                    if ((this.numField == null)) {
                        this.numField = XTypedList<num>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<num>(this.numField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | blockquote | p | author | date | edition | num | publisher | bibseries | sponsor | titleproper | subtitle)+
        /// </para>
        /// </summary>
        public virtual IList<publisher> publisher {
            get {
                if ((this.publisherField == null)) {
                    this.publisherField = new XTypedList<publisher>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("publisher", "urn:isbn:1-931666-22-9"));
                }
                return this.publisherField;
            }
            set {
                if ((value == null)) {
                    this.publisherField = null;
                }
                else {
                    if ((this.publisherField == null)) {
                        this.publisherField = XTypedList<publisher>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("publisher", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<publisher>(this.publisherField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | blockquote | p | author | date | edition | num | publisher | bibseries | sponsor | titleproper | subtitle)+
        /// </para>
        /// </summary>
        public virtual IList<bibseries> bibseries {
            get {
                if ((this.bibseriesField == null)) {
                    this.bibseriesField = new XTypedList<bibseries>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibseries", "urn:isbn:1-931666-22-9"));
                }
                return this.bibseriesField;
            }
            set {
                if ((value == null)) {
                    this.bibseriesField = null;
                }
                else {
                    if ((this.bibseriesField == null)) {
                        this.bibseriesField = XTypedList<bibseries>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibseries", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibseries>(this.bibseriesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | blockquote | p | author | date | edition | num | publisher | bibseries | sponsor | titleproper | subtitle)+
        /// </para>
        /// </summary>
        public virtual IList<sponsor> sponsor {
            get {
                if ((this.sponsorField == null)) {
                    this.sponsorField = new XTypedList<sponsor>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("sponsor", "urn:isbn:1-931666-22-9"));
                }
                return this.sponsorField;
            }
            set {
                if ((value == null)) {
                    this.sponsorField = null;
                }
                else {
                    if ((this.sponsorField == null)) {
                        this.sponsorField = XTypedList<sponsor>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("sponsor", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<sponsor>(this.sponsorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | blockquote | p | author | date | edition | num | publisher | bibseries | sponsor | titleproper | subtitle)+
        /// </para>
        /// </summary>
        public virtual IList<titleproper> titleproper {
            get {
                if ((this.titleproperField == null)) {
                    this.titleproperField = new XTypedList<titleproper>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("titleproper", "urn:isbn:1-931666-22-9"));
                }
                return this.titleproperField;
            }
            set {
                if ((value == null)) {
                    this.titleproperField = null;
                }
                else {
                    if ((this.titleproperField == null)) {
                        this.titleproperField = XTypedList<titleproper>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("titleproper", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<titleproper>(this.titleproperField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | blockquote | p | author | date | edition | num | publisher | bibseries | sponsor | titleproper | subtitle)+
        /// </para>
        /// </summary>
        public virtual IList<subtitle> subtitle {
            get {
                if ((this.subtitleField == null)) {
                    this.subtitleField = new XTypedList<subtitle>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("subtitle", "urn:isbn:1-931666-22-9"));
                }
                return this.subtitleField;
            }
            set {
                if ((value == null)) {
                    this.subtitleField = null;
                }
                else {
                    if ((this.subtitleField == null)) {
                        this.subtitleField = XTypedList<subtitle>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("subtitle", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<subtitle>(this.subtitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("titlepage", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<titlepage>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"), typeof(address));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"), typeof(chronlist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"), typeof(list));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"), typeof(table));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"), typeof(blockquote));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"), typeof(p));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("author", "urn:isbn:1-931666-22-9"), typeof(author));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"), typeof(date));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("edition", "urn:isbn:1-931666-22-9"), typeof(edition));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"), typeof(num));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("publisher", "urn:isbn:1-931666-22-9"), typeof(publisher));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibseries", "urn:isbn:1-931666-22-9"), typeof(bibseries));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("sponsor", "urn:isbn:1-931666-22-9"), typeof(sponsor));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("titleproper", "urn:isbn:1-931666-22-9"), typeof(titleproper));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("subtitle", "urn:isbn:1-931666-22-9"), typeof(subtitle));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
    /// </para>
    /// </summary>
    public partial class archdesc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<runner> runnerField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accessrestrict> accessrestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accruals> accrualsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<acqinfo> acqinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<altformavail> altformavailField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<appraisal> appraisalField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<arrangement> arrangementField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibliography> bibliographyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bioghist> bioghistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<controlaccess> controlaccessField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<custodhist> custodhistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<descgrp> descgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<fileplan> fileplanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<index> indexField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<odd> oddField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<originalsloc> originalslocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<otherfindaid> otherfindaidField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phystech> phystechField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<prefercite> preferciteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<processinfo> processinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<relatedmaterial> relatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<scopecontent> scopecontentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<separatedmaterial> separatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<userestrict> userestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dsc> dscField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dao> daoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<daogrp> daogrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator archdesc(XElement xe) { return XTypedServices.ToXTypedElement<archdesc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static archdesc() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public archdesc() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<runner> runner {
            get {
                if ((this.runnerField == null)) {
                    this.runnerField = new XTypedList<runner>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("runner", "urn:isbn:1-931666-22-9"));
                }
                return this.runnerField;
            }
            set {
                if ((value == null)) {
                    this.runnerField = null;
                }
                else {
                    if ((this.runnerField == null)) {
                        this.runnerField = XTypedList<runner>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("runner", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<runner>(this.runnerField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual did did {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9"));
                return ((did)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<accessrestrict> accessrestrict {
            get {
                if ((this.accessrestrictField == null)) {
                    this.accessrestrictField = new XTypedList<accessrestrict>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"));
                }
                return this.accessrestrictField;
            }
            set {
                if ((value == null)) {
                    this.accessrestrictField = null;
                }
                else {
                    if ((this.accessrestrictField == null)) {
                        this.accessrestrictField = XTypedList<accessrestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<accessrestrict>(this.accessrestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<accruals> accruals {
            get {
                if ((this.accrualsField == null)) {
                    this.accrualsField = new XTypedList<accruals>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"));
                }
                return this.accrualsField;
            }
            set {
                if ((value == null)) {
                    this.accrualsField = null;
                }
                else {
                    if ((this.accrualsField == null)) {
                        this.accrualsField = XTypedList<accruals>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<accruals>(this.accrualsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<acqinfo> acqinfo {
            get {
                if ((this.acqinfoField == null)) {
                    this.acqinfoField = new XTypedList<acqinfo>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"));
                }
                return this.acqinfoField;
            }
            set {
                if ((value == null)) {
                    this.acqinfoField = null;
                }
                else {
                    if ((this.acqinfoField == null)) {
                        this.acqinfoField = XTypedList<acqinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<acqinfo>(this.acqinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<altformavail> altformavail {
            get {
                if ((this.altformavailField == null)) {
                    this.altformavailField = new XTypedList<altformavail>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"));
                }
                return this.altformavailField;
            }
            set {
                if ((value == null)) {
                    this.altformavailField = null;
                }
                else {
                    if ((this.altformavailField == null)) {
                        this.altformavailField = XTypedList<altformavail>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<altformavail>(this.altformavailField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<appraisal> appraisal {
            get {
                if ((this.appraisalField == null)) {
                    this.appraisalField = new XTypedList<appraisal>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"));
                }
                return this.appraisalField;
            }
            set {
                if ((value == null)) {
                    this.appraisalField = null;
                }
                else {
                    if ((this.appraisalField == null)) {
                        this.appraisalField = XTypedList<appraisal>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<appraisal>(this.appraisalField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<arrangement> arrangement {
            get {
                if ((this.arrangementField == null)) {
                    this.arrangementField = new XTypedList<arrangement>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"));
                }
                return this.arrangementField;
            }
            set {
                if ((value == null)) {
                    this.arrangementField = null;
                }
                else {
                    if ((this.arrangementField == null)) {
                        this.arrangementField = XTypedList<arrangement>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<arrangement>(this.arrangementField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<bibliography> bibliography {
            get {
                if ((this.bibliographyField == null)) {
                    this.bibliographyField = new XTypedList<bibliography>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"));
                }
                return this.bibliographyField;
            }
            set {
                if ((value == null)) {
                    this.bibliographyField = null;
                }
                else {
                    if ((this.bibliographyField == null)) {
                        this.bibliographyField = XTypedList<bibliography>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibliography>(this.bibliographyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<bioghist> bioghist {
            get {
                if ((this.bioghistField == null)) {
                    this.bioghistField = new XTypedList<bioghist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"));
                }
                return this.bioghistField;
            }
            set {
                if ((value == null)) {
                    this.bioghistField = null;
                }
                else {
                    if ((this.bioghistField == null)) {
                        this.bioghistField = XTypedList<bioghist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bioghist>(this.bioghistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<controlaccess> controlaccess {
            get {
                if ((this.controlaccessField == null)) {
                    this.controlaccessField = new XTypedList<controlaccess>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"));
                }
                return this.controlaccessField;
            }
            set {
                if ((value == null)) {
                    this.controlaccessField = null;
                }
                else {
                    if ((this.controlaccessField == null)) {
                        this.controlaccessField = XTypedList<controlaccess>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<controlaccess>(this.controlaccessField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<custodhist> custodhist {
            get {
                if ((this.custodhistField == null)) {
                    this.custodhistField = new XTypedList<custodhist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"));
                }
                return this.custodhistField;
            }
            set {
                if ((value == null)) {
                    this.custodhistField = null;
                }
                else {
                    if ((this.custodhistField == null)) {
                        this.custodhistField = XTypedList<custodhist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<custodhist>(this.custodhistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<descgrp> descgrp {
            get {
                if ((this.descgrpField == null)) {
                    this.descgrpField = new XTypedList<descgrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"));
                }
                return this.descgrpField;
            }
            set {
                if ((value == null)) {
                    this.descgrpField = null;
                }
                else {
                    if ((this.descgrpField == null)) {
                        this.descgrpField = XTypedList<descgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<descgrp>(this.descgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<fileplan> fileplan {
            get {
                if ((this.fileplanField == null)) {
                    this.fileplanField = new XTypedList<fileplan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"));
                }
                return this.fileplanField;
            }
            set {
                if ((value == null)) {
                    this.fileplanField = null;
                }
                else {
                    if ((this.fileplanField == null)) {
                        this.fileplanField = XTypedList<fileplan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<fileplan>(this.fileplanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<index> index {
            get {
                if ((this.indexField == null)) {
                    this.indexField = new XTypedList<index>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"));
                }
                return this.indexField;
            }
            set {
                if ((value == null)) {
                    this.indexField = null;
                }
                else {
                    if ((this.indexField == null)) {
                        this.indexField = XTypedList<index>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<index>(this.indexField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<odd> odd {
            get {
                if ((this.oddField == null)) {
                    this.oddField = new XTypedList<odd>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"));
                }
                return this.oddField;
            }
            set {
                if ((value == null)) {
                    this.oddField = null;
                }
                else {
                    if ((this.oddField == null)) {
                        this.oddField = XTypedList<odd>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<odd>(this.oddField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<originalsloc> originalsloc {
            get {
                if ((this.originalslocField == null)) {
                    this.originalslocField = new XTypedList<originalsloc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"));
                }
                return this.originalslocField;
            }
            set {
                if ((value == null)) {
                    this.originalslocField = null;
                }
                else {
                    if ((this.originalslocField == null)) {
                        this.originalslocField = XTypedList<originalsloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<originalsloc>(this.originalslocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<otherfindaid> otherfindaid {
            get {
                if ((this.otherfindaidField == null)) {
                    this.otherfindaidField = new XTypedList<otherfindaid>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"));
                }
                return this.otherfindaidField;
            }
            set {
                if ((value == null)) {
                    this.otherfindaidField = null;
                }
                else {
                    if ((this.otherfindaidField == null)) {
                        this.otherfindaidField = XTypedList<otherfindaid>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<otherfindaid>(this.otherfindaidField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<phystech> phystech {
            get {
                if ((this.phystechField == null)) {
                    this.phystechField = new XTypedList<phystech>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"));
                }
                return this.phystechField;
            }
            set {
                if ((value == null)) {
                    this.phystechField = null;
                }
                else {
                    if ((this.phystechField == null)) {
                        this.phystechField = XTypedList<phystech>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<phystech>(this.phystechField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<prefercite> prefercite {
            get {
                if ((this.preferciteField == null)) {
                    this.preferciteField = new XTypedList<prefercite>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"));
                }
                return this.preferciteField;
            }
            set {
                if ((value == null)) {
                    this.preferciteField = null;
                }
                else {
                    if ((this.preferciteField == null)) {
                        this.preferciteField = XTypedList<prefercite>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<prefercite>(this.preferciteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<processinfo> processinfo {
            get {
                if ((this.processinfoField == null)) {
                    this.processinfoField = new XTypedList<processinfo>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"));
                }
                return this.processinfoField;
            }
            set {
                if ((value == null)) {
                    this.processinfoField = null;
                }
                else {
                    if ((this.processinfoField == null)) {
                        this.processinfoField = XTypedList<processinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<processinfo>(this.processinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<relatedmaterial> relatedmaterial {
            get {
                if ((this.relatedmaterialField == null)) {
                    this.relatedmaterialField = new XTypedList<relatedmaterial>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"));
                }
                return this.relatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.relatedmaterialField = null;
                }
                else {
                    if ((this.relatedmaterialField == null)) {
                        this.relatedmaterialField = XTypedList<relatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<relatedmaterial>(this.relatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<scopecontent> scopecontent {
            get {
                if ((this.scopecontentField == null)) {
                    this.scopecontentField = new XTypedList<scopecontent>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"));
                }
                return this.scopecontentField;
            }
            set {
                if ((value == null)) {
                    this.scopecontentField = null;
                }
                else {
                    if ((this.scopecontentField == null)) {
                        this.scopecontentField = XTypedList<scopecontent>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<scopecontent>(this.scopecontentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<separatedmaterial> separatedmaterial {
            get {
                if ((this.separatedmaterialField == null)) {
                    this.separatedmaterialField = new XTypedList<separatedmaterial>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"));
                }
                return this.separatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.separatedmaterialField = null;
                }
                else {
                    if ((this.separatedmaterialField == null)) {
                        this.separatedmaterialField = XTypedList<separatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<separatedmaterial>(this.separatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<userestrict> userestrict {
            get {
                if ((this.userestrictField == null)) {
                    this.userestrictField = new XTypedList<userestrict>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"));
                }
                return this.userestrictField;
            }
            set {
                if ((value == null)) {
                    this.userestrictField = null;
                }
                else {
                    if ((this.userestrictField == null)) {
                        this.userestrictField = XTypedList<userestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<userestrict>(this.userestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<dsc> dsc {
            get {
                if ((this.dscField == null)) {
                    this.dscField = new XTypedList<dsc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"));
                }
                return this.dscField;
            }
            set {
                if ((value == null)) {
                    this.dscField = null;
                }
                else {
                    if ((this.dscField == null)) {
                        this.dscField = XTypedList<dsc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<dsc>(this.dscField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<dao> dao {
            get {
                if ((this.daoField == null)) {
                    this.daoField = new XTypedList<dao>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"));
                }
                return this.daoField;
            }
            set {
                if ((value == null)) {
                    this.daoField = null;
                }
                else {
                    if ((this.daoField == null)) {
                        this.daoField = XTypedList<dao>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<dao>(this.daoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<daogrp> daogrp {
            get {
                if ((this.daogrpField == null)) {
                    this.daogrpField = new XTypedList<daogrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"));
                }
                return this.daogrpField;
            }
            set {
                if ((value == null)) {
                    this.daogrpField = null;
                }
                else {
                    if ((this.daogrpField == null)) {
                        this.daogrpField = XTypedList<daogrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<daogrp>(this.daogrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string level {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("level", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("level", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string otherlevel {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("otherlevel", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("otherlevel", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string relatedencoding {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("relatedencoding", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("relatedencoding", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("archdesc", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<archdesc>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("runner", "urn:isbn:1-931666-22-9"), typeof(runner));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9"), typeof(did));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"), typeof(accessrestrict));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"), typeof(accruals));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"), typeof(acqinfo));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"), typeof(altformavail));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"), typeof(appraisal));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"), typeof(arrangement));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"), typeof(bibliography));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"), typeof(bioghist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"), typeof(controlaccess));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"), typeof(custodhist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"), typeof(descgrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"), typeof(fileplan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"), typeof(index));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"), typeof(odd));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"), typeof(originalsloc));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"), typeof(otherfindaid));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"), typeof(phystech));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"), typeof(prefercite));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"), typeof(processinfo));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"), typeof(relatedmaterial));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"), typeof(scopecontent));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"), typeof(separatedmaterial));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"), typeof(userestrict));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"), typeof(dsc));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"), typeof(dao));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"), typeof(daogrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb)*
    /// </para>
    /// </summary>
    public partial class runner : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator runner(XElement xe) { return XTypedServices.ToXTypedElement<runner>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static runner() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public runner() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string placement {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("placement", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("placement", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("role", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("role", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("runner", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<runner>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | date | expan | num)*
    /// </para>
    /// </summary>
    public partial class titleproper : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<date> dateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<num> numField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator titleproper(XElement xe) { return XTypedServices.ToXTypedElement<titleproper>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static titleproper() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | date | expan | num)*
        /// </para>
        /// </summary>
        public titleproper() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | date | expan | num)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | date | expan | num)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | date | expan | num)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | date | expan | num)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | date | expan | num)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | date | expan | num)*
        /// </para>
        /// </summary>
        public virtual IList<date> date {
            get {
                if ((this.dateField == null)) {
                    this.dateField = new XTypedList<date>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"));
                }
                return this.dateField;
            }
            set {
                if ((value == null)) {
                    this.dateField = null;
                }
                else {
                    if ((this.dateField == null)) {
                        this.dateField = XTypedList<date>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<date>(this.dateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | date | expan | num)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | date | expan | num)*
        /// </para>
        /// </summary>
        public virtual IList<num> num {
            get {
                if ((this.numField == null)) {
                    this.numField = new XTypedList<num>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"));
                }
                return this.numField;
            }
            set {
                if ((value == null)) {
                    this.numField = null;
                }
                else {
                    if ((this.numField == null)) {
                        this.numField = XTypedList<num>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<num>(this.numField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string render {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("render", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("render", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("titleproper", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<titleproper>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"), typeof(abbr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"), typeof(date));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"), typeof(expan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"), typeof(num));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | date | expan | num)*
    /// </para>
    /// </summary>
    public partial class subtitle : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<date> dateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<num> numField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator subtitle(XElement xe) { return XTypedServices.ToXTypedElement<subtitle>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static subtitle() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | date | expan | num)*
        /// </para>
        /// </summary>
        public subtitle() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | date | expan | num)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | date | expan | num)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | date | expan | num)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | date | expan | num)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | date | expan | num)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | date | expan | num)*
        /// </para>
        /// </summary>
        public virtual IList<date> date {
            get {
                if ((this.dateField == null)) {
                    this.dateField = new XTypedList<date>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"));
                }
                return this.dateField;
            }
            set {
                if ((value == null)) {
                    this.dateField = null;
                }
                else {
                    if ((this.dateField == null)) {
                        this.dateField = XTypedList<date>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<date>(this.dateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | date | expan | num)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | date | expan | num)*
        /// </para>
        /// </summary>
        public virtual IList<num> num {
            get {
                if ((this.numField == null)) {
                    this.numField = new XTypedList<num>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"));
                }
                return this.numField;
            }
            set {
                if ((value == null)) {
                    this.numField = null;
                }
                else {
                    if ((this.numField == null)) {
                        this.numField = XTypedList<num>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<num>(this.numField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("subtitle", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<subtitle>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"), typeof(abbr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"), typeof(date));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"), typeof(expan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"), typeof(num));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb)*
    /// </para>
    /// </summary>
    public partial class author : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator author(XElement xe) { return XTypedServices.ToXTypedElement<author>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static author() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public author() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("author", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<author>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb)*
    /// </para>
    /// </summary>
    public partial class sponsor : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator sponsor(XElement xe) { return XTypedServices.ToXTypedElement<sponsor>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static sponsor() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public sponsor() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("sponsor", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<sponsor>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, div1*)
    /// </para>
    /// </summary>
    public partial class div : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<div> div1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator div(XElement xe) { return XTypedServices.ToXTypedElement<div>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static div() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, div1*)
        /// </para>
        /// </summary>
        public div() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, div1*)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"));
                return ((head)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, div1*)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, div1*)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, div1*)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, div1*)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, div1*)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, div1*)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, div1*)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, div1*)
        /// </para>
        /// </summary>
        public virtual IList<div> div1 {
            get {
                if ((this.div1Field == null)) {
                    this.div1Field = new XTypedList<div>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("div", "urn:isbn:1-931666-22-9"));
                }
                return this.div1Field;
            }
            set {
                if ((value == null)) {
                    this.div1Field = null;
                }
                else {
                    if ((this.div1Field == null)) {
                        this.div1Field = XTypedList<div>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("div", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<div>(this.div1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("div", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<div>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), typeof(head));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"), typeof(address));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"), typeof(chronlist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"), typeof(list));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"), typeof(table));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"), typeof(blockquote));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"), typeof(p));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("div", "urn:isbn:1-931666-22-9"), typeof(div));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (@abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)+)
    /// </para>
    /// </summary>
    public partial class did : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@abstract> @abstractField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<container> containerField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dao> daoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<daogrp> daogrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<langmaterial> langmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<materialspec> materialspecField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<origination> originationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<physdesc> physdescField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<physloc> physlocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<repository> repositoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unitdate> unitdateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unitid> unitidField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unittitle> unittitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator did(XElement xe) { return XTypedServices.ToXTypedElement<did>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static did() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (@abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)+)
        /// </para>
        /// </summary>
        public did() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (@abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"));
                return ((head)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (@abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)+)
        /// </para>
        /// </summary>
        public virtual IList<@abstract> @abstract {
            get {
                if ((this.@abstractField == null)) {
                    this.@abstractField = new XTypedList<@abstract>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("abstract", "urn:isbn:1-931666-22-9"));
                }
                return this.@abstractField;
            }
            set {
                if ((value == null)) {
                    this.@abstractField = null;
                }
                else {
                    if ((this.@abstractField == null)) {
                        this.@abstractField = XTypedList<@abstract>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("abstract", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<@abstract>(this.@abstractField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (@abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)+)
        /// </para>
        /// </summary>
        public virtual IList<container> container {
            get {
                if ((this.containerField == null)) {
                    this.containerField = new XTypedList<container>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("container", "urn:isbn:1-931666-22-9"));
                }
                return this.containerField;
            }
            set {
                if ((value == null)) {
                    this.containerField = null;
                }
                else {
                    if ((this.containerField == null)) {
                        this.containerField = XTypedList<container>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("container", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<container>(this.containerField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (@abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)+)
        /// </para>
        /// </summary>
        public virtual IList<dao> dao {
            get {
                if ((this.daoField == null)) {
                    this.daoField = new XTypedList<dao>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"));
                }
                return this.daoField;
            }
            set {
                if ((value == null)) {
                    this.daoField = null;
                }
                else {
                    if ((this.daoField == null)) {
                        this.daoField = XTypedList<dao>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<dao>(this.daoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (@abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)+)
        /// </para>
        /// </summary>
        public virtual IList<daogrp> daogrp {
            get {
                if ((this.daogrpField == null)) {
                    this.daogrpField = new XTypedList<daogrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"));
                }
                return this.daogrpField;
            }
            set {
                if ((value == null)) {
                    this.daogrpField = null;
                }
                else {
                    if ((this.daogrpField == null)) {
                        this.daogrpField = XTypedList<daogrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<daogrp>(this.daogrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (@abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)+)
        /// </para>
        /// </summary>
        public virtual IList<langmaterial> langmaterial {
            get {
                if ((this.langmaterialField == null)) {
                    this.langmaterialField = new XTypedList<langmaterial>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("langmaterial", "urn:isbn:1-931666-22-9"));
                }
                return this.langmaterialField;
            }
            set {
                if ((value == null)) {
                    this.langmaterialField = null;
                }
                else {
                    if ((this.langmaterialField == null)) {
                        this.langmaterialField = XTypedList<langmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("langmaterial", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<langmaterial>(this.langmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (@abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)+)
        /// </para>
        /// </summary>
        public virtual IList<materialspec> materialspec {
            get {
                if ((this.materialspecField == null)) {
                    this.materialspecField = new XTypedList<materialspec>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("materialspec", "urn:isbn:1-931666-22-9"));
                }
                return this.materialspecField;
            }
            set {
                if ((value == null)) {
                    this.materialspecField = null;
                }
                else {
                    if ((this.materialspecField == null)) {
                        this.materialspecField = XTypedList<materialspec>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("materialspec", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<materialspec>(this.materialspecField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (@abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (@abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)+)
        /// </para>
        /// </summary>
        public virtual IList<origination> origination {
            get {
                if ((this.originationField == null)) {
                    this.originationField = new XTypedList<origination>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9"));
                }
                return this.originationField;
            }
            set {
                if ((value == null)) {
                    this.originationField = null;
                }
                else {
                    if ((this.originationField == null)) {
                        this.originationField = XTypedList<origination>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<origination>(this.originationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (@abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)+)
        /// </para>
        /// </summary>
        public virtual IList<physdesc> physdesc {
            get {
                if ((this.physdescField == null)) {
                    this.physdescField = new XTypedList<physdesc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("physdesc", "urn:isbn:1-931666-22-9"));
                }
                return this.physdescField;
            }
            set {
                if ((value == null)) {
                    this.physdescField = null;
                }
                else {
                    if ((this.physdescField == null)) {
                        this.physdescField = XTypedList<physdesc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("physdesc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<physdesc>(this.physdescField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (@abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)+)
        /// </para>
        /// </summary>
        public virtual IList<physloc> physloc {
            get {
                if ((this.physlocField == null)) {
                    this.physlocField = new XTypedList<physloc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("physloc", "urn:isbn:1-931666-22-9"));
                }
                return this.physlocField;
            }
            set {
                if ((value == null)) {
                    this.physlocField = null;
                }
                else {
                    if ((this.physlocField == null)) {
                        this.physlocField = XTypedList<physloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("physloc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<physloc>(this.physlocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (@abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)+)
        /// </para>
        /// </summary>
        public virtual IList<repository> repository {
            get {
                if ((this.repositoryField == null)) {
                    this.repositoryField = new XTypedList<repository>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9"));
                }
                return this.repositoryField;
            }
            set {
                if ((value == null)) {
                    this.repositoryField = null;
                }
                else {
                    if ((this.repositoryField == null)) {
                        this.repositoryField = XTypedList<repository>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<repository>(this.repositoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (@abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)+)
        /// </para>
        /// </summary>
        public virtual IList<unitdate> unitdate {
            get {
                if ((this.unitdateField == null)) {
                    this.unitdateField = new XTypedList<unitdate>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9"));
                }
                return this.unitdateField;
            }
            set {
                if ((value == null)) {
                    this.unitdateField = null;
                }
                else {
                    if ((this.unitdateField == null)) {
                        this.unitdateField = XTypedList<unitdate>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<unitdate>(this.unitdateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (@abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)+)
        /// </para>
        /// </summary>
        public virtual IList<unitid> unitid {
            get {
                if ((this.unitidField == null)) {
                    this.unitidField = new XTypedList<unitid>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("unitid", "urn:isbn:1-931666-22-9"));
                }
                return this.unitidField;
            }
            set {
                if ((value == null)) {
                    this.unitidField = null;
                }
                else {
                    if ((this.unitidField == null)) {
                        this.unitidField = XTypedList<unitid>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("unitid", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<unitid>(this.unitidField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (@abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)+)
        /// </para>
        /// </summary>
        public virtual IList<unittitle> unittitle {
            get {
                if ((this.unittitleField == null)) {
                    this.unittitleField = new XTypedList<unittitle>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9"));
                }
                return this.unittitleField;
            }
            set {
                if ((value == null)) {
                    this.unittitleField = null;
                }
                else {
                    if ((this.unittitleField == null)) {
                        this.unittitleField = XTypedList<unittitle>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<unittitle>(this.unittitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<did>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), typeof(head));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("abstract", "urn:isbn:1-931666-22-9"), typeof(@abstract));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("container", "urn:isbn:1-931666-22-9"), typeof(container));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"), typeof(dao));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"), typeof(daogrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("langmaterial", "urn:isbn:1-931666-22-9"), typeof(langmaterial));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("materialspec", "urn:isbn:1-931666-22-9"), typeof(materialspec));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9"), typeof(origination));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("physdesc", "urn:isbn:1-931666-22-9"), typeof(physdesc));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("physloc", "urn:isbn:1-931666-22-9"), typeof(physloc));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9"), typeof(repository));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9"), typeof(unitdate));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("unitid", "urn:isbn:1-931666-22-9"), typeof(unitid));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9"), typeof(unittitle));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions1)*
    /// </para>
    /// </summary>
    public partial class dimensions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dimensions> dimensions1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator dimensions(XElement xe) { return XTypedServices.ToXTypedElement<dimensions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static dimensions() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions1)*
        /// </para>
        /// </summary>
        public dimensions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions1)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions1)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions1)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions1)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions1)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions1)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions1)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions1)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions1)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions1)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions1)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions1)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions1)*
        /// </para>
        /// </summary>
        public virtual IList<dimensions> dimensions1 {
            get {
                if ((this.dimensions1Field == null)) {
                    this.dimensions1Field = new XTypedList<dimensions>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("dimensions", "urn:isbn:1-931666-22-9"));
                }
                return this.dimensions1Field;
            }
            set {
                if ((value == null)) {
                    this.dimensions1Field = null;
                }
                else {
                    if ((this.dimensions1Field == null)) {
                        this.dimensions1Field = XTypedList<dimensions>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("dimensions", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<dimensions>(this.dimensions1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("label", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("label", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string unit {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("unit", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("unit", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("dimensions", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<dimensions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"), typeof(abbr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"), typeof(expan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"), typeof(@ref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"), typeof(extref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"), typeof(linkgrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"), typeof(bibref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"), typeof(title));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"), typeof(archref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("dimensions", "urn:isbn:1-931666-22-9"), typeof(dimensions));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | name | persname)*
    /// </para>
    /// </summary>
    public partial class origination : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<corpname> corpnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<famname> famnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<name> nameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<persname> persnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator origination(XElement xe) { return XTypedServices.ToXTypedElement<origination>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static origination() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | name | persname)*
        /// </para>
        /// </summary>
        public origination() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | name | persname)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | name | persname)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | name | persname)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | name | persname)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | name | persname)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | name | persname)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | name | persname)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | name | persname)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | name | persname)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | name | persname)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | name | persname)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | name | persname)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | name | persname)*
        /// </para>
        /// </summary>
        public virtual IList<corpname> corpname {
            get {
                if ((this.corpnameField == null)) {
                    this.corpnameField = new XTypedList<corpname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"));
                }
                return this.corpnameField;
            }
            set {
                if ((value == null)) {
                    this.corpnameField = null;
                }
                else {
                    if ((this.corpnameField == null)) {
                        this.corpnameField = XTypedList<corpname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<corpname>(this.corpnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | name | persname)*
        /// </para>
        /// </summary>
        public virtual IList<famname> famname {
            get {
                if ((this.famnameField == null)) {
                    this.famnameField = new XTypedList<famname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"));
                }
                return this.famnameField;
            }
            set {
                if ((value == null)) {
                    this.famnameField = null;
                }
                else {
                    if ((this.famnameField == null)) {
                        this.famnameField = XTypedList<famname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<famname>(this.famnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | name | persname)*
        /// </para>
        /// </summary>
        public virtual IList<name> name {
            get {
                if ((this.nameField == null)) {
                    this.nameField = new XTypedList<name>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"));
                }
                return this.nameField;
            }
            set {
                if ((value == null)) {
                    this.nameField = null;
                }
                else {
                    if ((this.nameField == null)) {
                        this.nameField = XTypedList<name>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<name>(this.nameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | name | persname)*
        /// </para>
        /// </summary>
        public virtual IList<persname> persname {
            get {
                if ((this.persnameField == null)) {
                    this.persnameField = new XTypedList<persname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"));
                }
                return this.persnameField;
            }
            set {
                if ((value == null)) {
                    this.persnameField = null;
                }
                else {
                    if ((this.persnameField == null)) {
                        this.persnameField = XTypedList<persname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<persname>(this.persnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("label", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("label", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<origination>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"), typeof(abbr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"), typeof(expan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"), typeof(@ref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"), typeof(extref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"), typeof(linkgrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"), typeof(bibref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"), typeof(title));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"), typeof(archref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"), typeof(corpname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"), typeof(famname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"), typeof(name));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"), typeof(persname));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | address | corpname | name | subarea)*
    /// </para>
    /// </summary>
    public partial class repository : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<corpname> corpnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<name> nameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<subarea> subareaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator repository(XElement xe) { return XTypedServices.ToXTypedElement<repository>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static repository() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | address | corpname | name | subarea)*
        /// </para>
        /// </summary>
        public repository() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | address | corpname | name | subarea)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | address | corpname | name | subarea)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | address | corpname | name | subarea)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | address | corpname | name | subarea)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | address | corpname | name | subarea)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | address | corpname | name | subarea)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | address | corpname | name | subarea)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | address | corpname | name | subarea)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | address | corpname | name | subarea)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | address | corpname | name | subarea)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | address | corpname | name | subarea)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | address | corpname | name | subarea)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | address | corpname | name | subarea)*
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | address | corpname | name | subarea)*
        /// </para>
        /// </summary>
        public virtual IList<corpname> corpname {
            get {
                if ((this.corpnameField == null)) {
                    this.corpnameField = new XTypedList<corpname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"));
                }
                return this.corpnameField;
            }
            set {
                if ((value == null)) {
                    this.corpnameField = null;
                }
                else {
                    if ((this.corpnameField == null)) {
                        this.corpnameField = XTypedList<corpname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<corpname>(this.corpnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | address | corpname | name | subarea)*
        /// </para>
        /// </summary>
        public virtual IList<name> name {
            get {
                if ((this.nameField == null)) {
                    this.nameField = new XTypedList<name>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"));
                }
                return this.nameField;
            }
            set {
                if ((value == null)) {
                    this.nameField = null;
                }
                else {
                    if ((this.nameField == null)) {
                        this.nameField = XTypedList<name>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<name>(this.nameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | address | corpname | name | subarea)*
        /// </para>
        /// </summary>
        public virtual IList<subarea> subarea {
            get {
                if ((this.subareaField == null)) {
                    this.subareaField = new XTypedList<subarea>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("subarea", "urn:isbn:1-931666-22-9"));
                }
                return this.subareaField;
            }
            set {
                if ((value == null)) {
                    this.subareaField = null;
                }
                else {
                    if ((this.subareaField == null)) {
                        this.subareaField = XTypedList<subarea>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("subarea", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<subarea>(this.subareaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("label", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("label", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<repository>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"), typeof(abbr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"), typeof(expan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"), typeof(@ref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"), typeof(extref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"), typeof(linkgrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"), typeof(bibref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"), typeof(title));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"), typeof(archref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"), typeof(address));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"), typeof(corpname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"), typeof(name));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("subarea", "urn:isbn:1-931666-22-9"), typeof(subarea));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb)*
    /// </para>
    /// </summary>
    public partial class subarea : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator subarea(XElement xe) { return XTypedServices.ToXTypedElement<subarea>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static subarea() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public subarea() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("subarea", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<subarea>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
    /// </para>
    /// </summary>
    public partial class unitdate : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string eraDefaultValue = "ce";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string calendarDefaultValue = "gregorian";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator unitdate(XElement xe) { return XTypedServices.ToXTypedElement<unitdate>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static unitdate() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public unitdate() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("label", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("label", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string datechar {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("datechar", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("datechar", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string era {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("era", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, eraDefaultValue);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("era", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string calendar {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("calendar", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, calendarDefaultValue);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("calendar", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string normal {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("normal", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("normal", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string certainty {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("certainty", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("certainty", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<unitdate>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"), typeof(abbr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"), typeof(expan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"), typeof(@ref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"), typeof(extref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"), typeof(linkgrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"), typeof(bibref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"), typeof(title));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"), typeof(archref));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
    /// </para>
    /// </summary>
    public partial class unittitle : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<corpname> corpnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<famname> famnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<geogname> geognameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<name> nameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<occupation> occupationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<persname> persnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<subject> subjectField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<genreform> genreformField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<function> functionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unitdate> unitdateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<num> numField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<date> dateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibseries> bibseriesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<edition> editionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<imprint> imprintField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator unittitle(XElement xe) { return XTypedServices.ToXTypedElement<unittitle>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static unittitle() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public unittitle() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<corpname> corpname {
            get {
                if ((this.corpnameField == null)) {
                    this.corpnameField = new XTypedList<corpname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"));
                }
                return this.corpnameField;
            }
            set {
                if ((value == null)) {
                    this.corpnameField = null;
                }
                else {
                    if ((this.corpnameField == null)) {
                        this.corpnameField = XTypedList<corpname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<corpname>(this.corpnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<famname> famname {
            get {
                if ((this.famnameField == null)) {
                    this.famnameField = new XTypedList<famname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"));
                }
                return this.famnameField;
            }
            set {
                if ((value == null)) {
                    this.famnameField = null;
                }
                else {
                    if ((this.famnameField == null)) {
                        this.famnameField = XTypedList<famname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<famname>(this.famnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<geogname> geogname {
            get {
                if ((this.geognameField == null)) {
                    this.geognameField = new XTypedList<geogname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"));
                }
                return this.geognameField;
            }
            set {
                if ((value == null)) {
                    this.geognameField = null;
                }
                else {
                    if ((this.geognameField == null)) {
                        this.geognameField = XTypedList<geogname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<geogname>(this.geognameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<name> name {
            get {
                if ((this.nameField == null)) {
                    this.nameField = new XTypedList<name>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"));
                }
                return this.nameField;
            }
            set {
                if ((value == null)) {
                    this.nameField = null;
                }
                else {
                    if ((this.nameField == null)) {
                        this.nameField = XTypedList<name>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<name>(this.nameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<occupation> occupation {
            get {
                if ((this.occupationField == null)) {
                    this.occupationField = new XTypedList<occupation>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"));
                }
                return this.occupationField;
            }
            set {
                if ((value == null)) {
                    this.occupationField = null;
                }
                else {
                    if ((this.occupationField == null)) {
                        this.occupationField = XTypedList<occupation>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<occupation>(this.occupationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<persname> persname {
            get {
                if ((this.persnameField == null)) {
                    this.persnameField = new XTypedList<persname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"));
                }
                return this.persnameField;
            }
            set {
                if ((value == null)) {
                    this.persnameField = null;
                }
                else {
                    if ((this.persnameField == null)) {
                        this.persnameField = XTypedList<persname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<persname>(this.persnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<subject> subject {
            get {
                if ((this.subjectField == null)) {
                    this.subjectField = new XTypedList<subject>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"));
                }
                return this.subjectField;
            }
            set {
                if ((value == null)) {
                    this.subjectField = null;
                }
                else {
                    if ((this.subjectField == null)) {
                        this.subjectField = XTypedList<subject>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<subject>(this.subjectField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<genreform> genreform {
            get {
                if ((this.genreformField == null)) {
                    this.genreformField = new XTypedList<genreform>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"));
                }
                return this.genreformField;
            }
            set {
                if ((value == null)) {
                    this.genreformField = null;
                }
                else {
                    if ((this.genreformField == null)) {
                        this.genreformField = XTypedList<genreform>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<genreform>(this.genreformField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<function> function {
            get {
                if ((this.functionField == null)) {
                    this.functionField = new XTypedList<function>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"));
                }
                return this.functionField;
            }
            set {
                if ((value == null)) {
                    this.functionField = null;
                }
                else {
                    if ((this.functionField == null)) {
                        this.functionField = XTypedList<function>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<function>(this.functionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<unitdate> unitdate {
            get {
                if ((this.unitdateField == null)) {
                    this.unitdateField = new XTypedList<unitdate>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9"));
                }
                return this.unitdateField;
            }
            set {
                if ((value == null)) {
                    this.unitdateField = null;
                }
                else {
                    if ((this.unitdateField == null)) {
                        this.unitdateField = XTypedList<unitdate>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<unitdate>(this.unitdateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<num> num {
            get {
                if ((this.numField == null)) {
                    this.numField = new XTypedList<num>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"));
                }
                return this.numField;
            }
            set {
                if ((value == null)) {
                    this.numField = null;
                }
                else {
                    if ((this.numField == null)) {
                        this.numField = XTypedList<num>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<num>(this.numField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<date> date {
            get {
                if ((this.dateField == null)) {
                    this.dateField = new XTypedList<date>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"));
                }
                return this.dateField;
            }
            set {
                if ((value == null)) {
                    this.dateField = null;
                }
                else {
                    if ((this.dateField == null)) {
                        this.dateField = XTypedList<date>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<date>(this.dateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<bibseries> bibseries {
            get {
                if ((this.bibseriesField == null)) {
                    this.bibseriesField = new XTypedList<bibseries>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibseries", "urn:isbn:1-931666-22-9"));
                }
                return this.bibseriesField;
            }
            set {
                if ((value == null)) {
                    this.bibseriesField = null;
                }
                else {
                    if ((this.bibseriesField == null)) {
                        this.bibseriesField = XTypedList<bibseries>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibseries", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibseries>(this.bibseriesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<edition> edition {
            get {
                if ((this.editionField == null)) {
                    this.editionField = new XTypedList<edition>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("edition", "urn:isbn:1-931666-22-9"));
                }
                return this.editionField;
            }
            set {
                if ((value == null)) {
                    this.editionField = null;
                }
                else {
                    if ((this.editionField == null)) {
                        this.editionField = XTypedList<edition>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("edition", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<edition>(this.editionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<imprint> imprint {
            get {
                if ((this.imprintField == null)) {
                    this.imprintField = new XTypedList<imprint>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("imprint", "urn:isbn:1-931666-22-9"));
                }
                return this.imprintField;
            }
            set {
                if ((value == null)) {
                    this.imprintField = null;
                }
                else {
                    if ((this.imprintField == null)) {
                        this.imprintField = XTypedList<imprint>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("imprint", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<imprint>(this.imprintField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("label", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("label", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<unittitle>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"), typeof(abbr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"), typeof(expan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"), typeof(@ref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"), typeof(extref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"), typeof(linkgrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"), typeof(bibref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"), typeof(title));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"), typeof(archref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"), typeof(corpname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"), typeof(famname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"), typeof(geogname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"), typeof(name));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"), typeof(occupation));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"), typeof(persname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"), typeof(subject));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"), typeof(genreform));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"), typeof(function));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9"), typeof(unitdate));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"), typeof(num));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"), typeof(date));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibseries", "urn:isbn:1-931666-22-9"), typeof(bibseries));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("edition", "urn:isbn:1-931666-22-9"), typeof(edition));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("imprint", "urn:isbn:1-931666-22-9"), typeof(imprint));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb)*
    /// </para>
    /// </summary>
    public partial class language : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator language(XElement xe) { return XTypedServices.ToXTypedElement<language>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static language() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public language() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string langcode {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("langcode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("langcode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string scriptcode {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("scriptcode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("scriptcode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("language", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<language>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | num | materialspec1)*
    /// </para>
    /// </summary>
    public partial class materialspec : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<num> numField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<materialspec> materialspec1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator materialspec(XElement xe) { return XTypedServices.ToXTypedElement<materialspec>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static materialspec() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | num | materialspec1)*
        /// </para>
        /// </summary>
        public materialspec() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | num | materialspec1)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | num | materialspec1)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | num | materialspec1)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | num | materialspec1)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | num | materialspec1)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | num | materialspec1)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | num | materialspec1)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | num | materialspec1)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | num | materialspec1)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | num | materialspec1)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | num | materialspec1)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | num | materialspec1)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | num | materialspec1)*
        /// </para>
        /// </summary>
        public virtual IList<num> num {
            get {
                if ((this.numField == null)) {
                    this.numField = new XTypedList<num>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"));
                }
                return this.numField;
            }
            set {
                if ((value == null)) {
                    this.numField = null;
                }
                else {
                    if ((this.numField == null)) {
                        this.numField = XTypedList<num>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<num>(this.numField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | num | materialspec1)*
        /// </para>
        /// </summary>
        public virtual IList<materialspec> materialspec1 {
            get {
                if ((this.materialspec1Field == null)) {
                    this.materialspec1Field = new XTypedList<materialspec>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("materialspec", "urn:isbn:1-931666-22-9"));
                }
                return this.materialspec1Field;
            }
            set {
                if ((value == null)) {
                    this.materialspec1Field = null;
                }
                else {
                    if ((this.materialspec1Field == null)) {
                        this.materialspec1Field = XTypedList<materialspec>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("materialspec", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<materialspec>(this.materialspec1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("label", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("label", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("materialspec", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<materialspec>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"), typeof(abbr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"), typeof(expan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"), typeof(@ref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"), typeof(extref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"), typeof(linkgrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"), typeof(bibref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"), typeof(title));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"), typeof(archref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"), typeof(num));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("materialspec", "urn:isbn:1-931666-22-9"), typeof(materialspec));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accruals1)+)
    /// </para>
    /// </summary>
    public partial class accruals : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accruals> accruals1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator accruals(XElement xe) { return XTypedServices.ToXTypedElement<accruals>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static accruals() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accruals1)+)
        /// </para>
        /// </summary>
        public accruals() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accruals1)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"));
                return ((head)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accruals1)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accruals1)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accruals1)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accruals1)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accruals1)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accruals1)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accruals1)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accruals1)+)
        /// </para>
        /// </summary>
        public virtual IList<accruals> accruals1 {
            get {
                if ((this.accruals1Field == null)) {
                    this.accruals1Field = new XTypedList<accruals>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"));
                }
                return this.accruals1Field;
            }
            set {
                if ((value == null)) {
                    this.accruals1Field = null;
                }
                else {
                    if ((this.accruals1Field == null)) {
                        this.accruals1Field = XTypedList<accruals>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<accruals>(this.accruals1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<accruals>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), typeof(head));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"), typeof(address));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"), typeof(chronlist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"), typeof(list));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"), typeof(table));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"), typeof(blockquote));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"), typeof(p));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"), typeof(accruals));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | legalstatus | accessrestrict1)+)
    /// </para>
    /// </summary>
    public partial class accessrestrict : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<legalstatus> legalstatusField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accessrestrict> accessrestrict1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator accessrestrict(XElement xe) { return XTypedServices.ToXTypedElement<accessrestrict>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static accessrestrict() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | legalstatus | accessrestrict1)+)
        /// </para>
        /// </summary>
        public accessrestrict() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | legalstatus | accessrestrict1)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"));
                return ((head)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | legalstatus | accessrestrict1)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | legalstatus | accessrestrict1)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | legalstatus | accessrestrict1)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | legalstatus | accessrestrict1)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | legalstatus | accessrestrict1)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | legalstatus | accessrestrict1)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | legalstatus | accessrestrict1)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | legalstatus | accessrestrict1)+)
        /// </para>
        /// </summary>
        public virtual IList<legalstatus> legalstatus {
            get {
                if ((this.legalstatusField == null)) {
                    this.legalstatusField = new XTypedList<legalstatus>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("legalstatus", "urn:isbn:1-931666-22-9"));
                }
                return this.legalstatusField;
            }
            set {
                if ((value == null)) {
                    this.legalstatusField = null;
                }
                else {
                    if ((this.legalstatusField == null)) {
                        this.legalstatusField = XTypedList<legalstatus>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("legalstatus", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<legalstatus>(this.legalstatusField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | legalstatus | accessrestrict1)+)
        /// </para>
        /// </summary>
        public virtual IList<accessrestrict> accessrestrict1 {
            get {
                if ((this.accessrestrict1Field == null)) {
                    this.accessrestrict1Field = new XTypedList<accessrestrict>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"));
                }
                return this.accessrestrict1Field;
            }
            set {
                if ((value == null)) {
                    this.accessrestrict1Field = null;
                }
                else {
                    if ((this.accessrestrict1Field == null)) {
                        this.accessrestrict1Field = XTypedList<accessrestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<accessrestrict>(this.accessrestrict1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<accessrestrict>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), typeof(head));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"), typeof(address));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"), typeof(chronlist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"), typeof(list));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"), typeof(table));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"), typeof(blockquote));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"), typeof(p));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("legalstatus", "urn:isbn:1-931666-22-9"), typeof(legalstatus));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"), typeof(accessrestrict));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | date)*
    /// </para>
    /// </summary>
    public partial class legalstatus : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<date> dateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator legalstatus(XElement xe) { return XTypedServices.ToXTypedElement<legalstatus>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static legalstatus() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | date)*
        /// </para>
        /// </summary>
        public legalstatus() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | date)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | date)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | date)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | date)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | date)*
        /// </para>
        /// </summary>
        public virtual IList<date> date {
            get {
                if ((this.dateField == null)) {
                    this.dateField = new XTypedList<date>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"));
                }
                return this.dateField;
            }
            set {
                if ((value == null)) {
                    this.dateField = null;
                }
                else {
                    if ((this.dateField == null)) {
                        this.dateField = XTypedList<date>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<date>(this.dateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("legalstatus", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<legalstatus>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"), typeof(date));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | acqinfo1)+)
    /// </para>
    /// </summary>
    public partial class acqinfo : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<acqinfo> acqinfo1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator acqinfo(XElement xe) { return XTypedServices.ToXTypedElement<acqinfo>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static acqinfo() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | acqinfo1)+)
        /// </para>
        /// </summary>
        public acqinfo() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | acqinfo1)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"));
                return ((head)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | acqinfo1)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | acqinfo1)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | acqinfo1)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | acqinfo1)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | acqinfo1)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | acqinfo1)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | acqinfo1)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | acqinfo1)+)
        /// </para>
        /// </summary>
        public virtual IList<acqinfo> acqinfo1 {
            get {
                if ((this.acqinfo1Field == null)) {
                    this.acqinfo1Field = new XTypedList<acqinfo>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"));
                }
                return this.acqinfo1Field;
            }
            set {
                if ((value == null)) {
                    this.acqinfo1Field = null;
                }
                else {
                    if ((this.acqinfo1Field == null)) {
                        this.acqinfo1Field = XTypedList<acqinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<acqinfo>(this.acqinfo1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<acqinfo>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), typeof(head));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"), typeof(address));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"), typeof(chronlist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"), typeof(list));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"), typeof(table));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"), typeof(blockquote));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"), typeof(p));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"), typeof(acqinfo));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | altformavail1)+)
    /// </para>
    /// </summary>
    public partial class altformavail : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<altformavail> altformavail1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator altformavail(XElement xe) { return XTypedServices.ToXTypedElement<altformavail>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static altformavail() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | altformavail1)+)
        /// </para>
        /// </summary>
        public altformavail() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | altformavail1)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"));
                return ((head)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | altformavail1)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | altformavail1)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | altformavail1)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | altformavail1)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | altformavail1)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | altformavail1)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | altformavail1)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | altformavail1)+)
        /// </para>
        /// </summary>
        public virtual IList<altformavail> altformavail1 {
            get {
                if ((this.altformavail1Field == null)) {
                    this.altformavail1Field = new XTypedList<altformavail>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"));
                }
                return this.altformavail1Field;
            }
            set {
                if ((value == null)) {
                    this.altformavail1Field = null;
                }
                else {
                    if ((this.altformavail1Field == null)) {
                        this.altformavail1Field = XTypedList<altformavail>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<altformavail>(this.altformavail1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<altformavail>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), typeof(head));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"), typeof(address));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"), typeof(chronlist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"), typeof(list));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"), typeof(table));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"), typeof(blockquote));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"), typeof(p));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"), typeof(altformavail));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | originalsloc1)+)
    /// </para>
    /// </summary>
    public partial class originalsloc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<originalsloc> originalsloc1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator originalsloc(XElement xe) { return XTypedServices.ToXTypedElement<originalsloc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static originalsloc() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | originalsloc1)+)
        /// </para>
        /// </summary>
        public originalsloc() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | originalsloc1)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"));
                return ((head)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | originalsloc1)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | originalsloc1)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | originalsloc1)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | originalsloc1)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | originalsloc1)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | originalsloc1)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | originalsloc1)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | originalsloc1)+)
        /// </para>
        /// </summary>
        public virtual IList<originalsloc> originalsloc1 {
            get {
                if ((this.originalsloc1Field == null)) {
                    this.originalsloc1Field = new XTypedList<originalsloc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"));
                }
                return this.originalsloc1Field;
            }
            set {
                if ((value == null)) {
                    this.originalsloc1Field = null;
                }
                else {
                    if ((this.originalsloc1Field == null)) {
                        this.originalsloc1Field = XTypedList<originalsloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<originalsloc>(this.originalsloc1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<originalsloc>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), typeof(head));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"), typeof(address));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"), typeof(chronlist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"), typeof(list));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"), typeof(table));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"), typeof(blockquote));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"), typeof(p));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"), typeof(originalsloc));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | phystech1)+)
    /// </para>
    /// </summary>
    public partial class phystech : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phystech> phystech1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator phystech(XElement xe) { return XTypedServices.ToXTypedElement<phystech>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static phystech() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | phystech1)+)
        /// </para>
        /// </summary>
        public phystech() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | phystech1)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"));
                return ((head)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | phystech1)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | phystech1)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | phystech1)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | phystech1)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | phystech1)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | phystech1)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | phystech1)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | phystech1)+)
        /// </para>
        /// </summary>
        public virtual IList<phystech> phystech1 {
            get {
                if ((this.phystech1Field == null)) {
                    this.phystech1Field = new XTypedList<phystech>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"));
                }
                return this.phystech1Field;
            }
            set {
                if ((value == null)) {
                    this.phystech1Field = null;
                }
                else {
                    if ((this.phystech1Field == null)) {
                        this.phystech1Field = XTypedList<phystech>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<phystech>(this.phystech1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<phystech>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), typeof(head));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"), typeof(address));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"), typeof(chronlist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"), typeof(list));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"), typeof(table));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"), typeof(blockquote));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"), typeof(p));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"), typeof(phystech));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | appraisal1)+)
    /// </para>
    /// </summary>
    public partial class appraisal : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<appraisal> appraisal1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator appraisal(XElement xe) { return XTypedServices.ToXTypedElement<appraisal>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static appraisal() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | appraisal1)+)
        /// </para>
        /// </summary>
        public appraisal() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | appraisal1)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"));
                return ((head)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | appraisal1)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | appraisal1)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | appraisal1)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | appraisal1)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | appraisal1)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | appraisal1)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | appraisal1)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | appraisal1)+)
        /// </para>
        /// </summary>
        public virtual IList<appraisal> appraisal1 {
            get {
                if ((this.appraisal1Field == null)) {
                    this.appraisal1Field = new XTypedList<appraisal>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"));
                }
                return this.appraisal1Field;
            }
            set {
                if ((value == null)) {
                    this.appraisal1Field = null;
                }
                else {
                    if ((this.appraisal1Field == null)) {
                        this.appraisal1Field = XTypedList<appraisal>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<appraisal>(this.appraisal1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<appraisal>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), typeof(head));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"), typeof(address));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"), typeof(chronlist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"), typeof(list));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"), typeof(table));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"), typeof(blockquote));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"), typeof(p));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"), typeof(appraisal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | custodhist1 | acqinfo)+)
    /// </para>
    /// </summary>
    public partial class custodhist : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<custodhist> custodhist1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<acqinfo> acqinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator custodhist(XElement xe) { return XTypedServices.ToXTypedElement<custodhist>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static custodhist() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | custodhist1 | acqinfo)+)
        /// </para>
        /// </summary>
        public custodhist() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | custodhist1 | acqinfo)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"));
                return ((head)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | custodhist1 | acqinfo)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | custodhist1 | acqinfo)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | custodhist1 | acqinfo)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | custodhist1 | acqinfo)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | custodhist1 | acqinfo)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | custodhist1 | acqinfo)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | custodhist1 | acqinfo)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | custodhist1 | acqinfo)+)
        /// </para>
        /// </summary>
        public virtual IList<custodhist> custodhist1 {
            get {
                if ((this.custodhist1Field == null)) {
                    this.custodhist1Field = new XTypedList<custodhist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"));
                }
                return this.custodhist1Field;
            }
            set {
                if ((value == null)) {
                    this.custodhist1Field = null;
                }
                else {
                    if ((this.custodhist1Field == null)) {
                        this.custodhist1Field = XTypedList<custodhist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<custodhist>(this.custodhist1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | custodhist1 | acqinfo)+)
        /// </para>
        /// </summary>
        public virtual IList<acqinfo> acqinfo {
            get {
                if ((this.acqinfoField == null)) {
                    this.acqinfoField = new XTypedList<acqinfo>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"));
                }
                return this.acqinfoField;
            }
            set {
                if ((value == null)) {
                    this.acqinfoField = null;
                }
                else {
                    if ((this.acqinfoField == null)) {
                        this.acqinfoField = XTypedList<acqinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<acqinfo>(this.acqinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<custodhist>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), typeof(head));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"), typeof(address));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"), typeof(chronlist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"), typeof(list));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"), typeof(table));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"), typeof(blockquote));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"), typeof(p));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"), typeof(custodhist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"), typeof(acqinfo));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | prefercite1)+)
    /// </para>
    /// </summary>
    public partial class prefercite : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<prefercite> prefercite1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator prefercite(XElement xe) { return XTypedServices.ToXTypedElement<prefercite>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static prefercite() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | prefercite1)+)
        /// </para>
        /// </summary>
        public prefercite() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | prefercite1)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"));
                return ((head)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | prefercite1)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | prefercite1)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | prefercite1)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | prefercite1)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | prefercite1)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | prefercite1)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | prefercite1)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | prefercite1)+)
        /// </para>
        /// </summary>
        public virtual IList<prefercite> prefercite1 {
            get {
                if ((this.prefercite1Field == null)) {
                    this.prefercite1Field = new XTypedList<prefercite>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"));
                }
                return this.prefercite1Field;
            }
            set {
                if ((value == null)) {
                    this.prefercite1Field = null;
                }
                else {
                    if ((this.prefercite1Field == null)) {
                        this.prefercite1Field = XTypedList<prefercite>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<prefercite>(this.prefercite1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<prefercite>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), typeof(head));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"), typeof(address));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"), typeof(chronlist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"), typeof(list));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"), typeof(table));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"), typeof(blockquote));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"), typeof(p));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"), typeof(prefercite));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | processinfo1)+)
    /// </para>
    /// </summary>
    public partial class processinfo : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<processinfo> processinfo1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator processinfo(XElement xe) { return XTypedServices.ToXTypedElement<processinfo>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static processinfo() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | processinfo1)+)
        /// </para>
        /// </summary>
        public processinfo() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | processinfo1)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"));
                return ((head)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | processinfo1)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | processinfo1)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | processinfo1)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | processinfo1)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | processinfo1)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | processinfo1)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | processinfo1)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | processinfo1)+)
        /// </para>
        /// </summary>
        public virtual IList<processinfo> processinfo1 {
            get {
                if ((this.processinfo1Field == null)) {
                    this.processinfo1Field = new XTypedList<processinfo>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"));
                }
                return this.processinfo1Field;
            }
            set {
                if ((value == null)) {
                    this.processinfo1Field = null;
                }
                else {
                    if ((this.processinfo1Field == null)) {
                        this.processinfo1Field = XTypedList<processinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<processinfo>(this.processinfo1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<processinfo>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), typeof(head));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"), typeof(address));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"), typeof(chronlist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"), typeof(list));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"), typeof(table));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"), typeof(blockquote));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"), typeof(p));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"), typeof(processinfo));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | userestrict1)+)
    /// </para>
    /// </summary>
    public partial class userestrict : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<userestrict> userestrict1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator userestrict(XElement xe) { return XTypedServices.ToXTypedElement<userestrict>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static userestrict() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | userestrict1)+)
        /// </para>
        /// </summary>
        public userestrict() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | userestrict1)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"));
                return ((head)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | userestrict1)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | userestrict1)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | userestrict1)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | userestrict1)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | userestrict1)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | userestrict1)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | userestrict1)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | userestrict1)+)
        /// </para>
        /// </summary>
        public virtual IList<userestrict> userestrict1 {
            get {
                if ((this.userestrict1Field == null)) {
                    this.userestrict1Field = new XTypedList<userestrict>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"));
                }
                return this.userestrict1Field;
            }
            set {
                if ((value == null)) {
                    this.userestrict1Field = null;
                }
                else {
                    if ((this.userestrict1Field == null)) {
                        this.userestrict1Field = XTypedList<userestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<userestrict>(this.userestrict1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<userestrict>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), typeof(head));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"), typeof(address));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"), typeof(chronlist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"), typeof(list));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"), typeof(table));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"), typeof(blockquote));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"), typeof(p));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"), typeof(userestrict));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | bioghist1 | dao | daogrp)+)
    /// </para>
    /// </summary>
    public partial class bioghist : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bioghist> bioghist1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dao> daoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<daogrp> daogrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator bioghist(XElement xe) { return XTypedServices.ToXTypedElement<bioghist>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static bioghist() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | bioghist1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public bioghist() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | bioghist1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"));
                return ((head)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | bioghist1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | bioghist1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | bioghist1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | bioghist1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | bioghist1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | bioghist1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | bioghist1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | bioghist1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual IList<bioghist> bioghist1 {
            get {
                if ((this.bioghist1Field == null)) {
                    this.bioghist1Field = new XTypedList<bioghist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"));
                }
                return this.bioghist1Field;
            }
            set {
                if ((value == null)) {
                    this.bioghist1Field = null;
                }
                else {
                    if ((this.bioghist1Field == null)) {
                        this.bioghist1Field = XTypedList<bioghist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bioghist>(this.bioghist1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | bioghist1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual IList<dao> dao {
            get {
                if ((this.daoField == null)) {
                    this.daoField = new XTypedList<dao>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"));
                }
                return this.daoField;
            }
            set {
                if ((value == null)) {
                    this.daoField = null;
                }
                else {
                    if ((this.daoField == null)) {
                        this.daoField = XTypedList<dao>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<dao>(this.daoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | bioghist1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual IList<daogrp> daogrp {
            get {
                if ((this.daogrpField == null)) {
                    this.daogrpField = new XTypedList<daogrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"));
                }
                return this.daogrpField;
            }
            set {
                if ((value == null)) {
                    this.daogrpField = null;
                }
                else {
                    if ((this.daogrpField == null)) {
                        this.daogrpField = XTypedList<daogrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<daogrp>(this.daogrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<bioghist>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), typeof(head));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"), typeof(address));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"), typeof(chronlist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"), typeof(list));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"), typeof(table));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"), typeof(blockquote));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"), typeof(p));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"), typeof(bioghist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"), typeof(dao));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"), typeof(daogrp));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | controlaccess1)+)
    /// </para>
    /// </summary>
    public partial class controlaccess : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<corpname> corpnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<famname> famnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<geogname> geognameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<name> nameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<occupation> occupationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<persname> persnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<subject> subjectField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<genreform> genreformField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<function> functionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<controlaccess> controlaccess1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator controlaccess(XElement xe) { return XTypedServices.ToXTypedElement<controlaccess>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static controlaccess() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | controlaccess1)+)
        /// </para>
        /// </summary>
        public controlaccess() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | controlaccess1)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"));
                return ((head)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | controlaccess1)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | controlaccess1)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | controlaccess1)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | controlaccess1)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | controlaccess1)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | controlaccess1)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | controlaccess1)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | controlaccess1)+)
        /// </para>
        /// </summary>
        public virtual IList<corpname> corpname {
            get {
                if ((this.corpnameField == null)) {
                    this.corpnameField = new XTypedList<corpname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"));
                }
                return this.corpnameField;
            }
            set {
                if ((value == null)) {
                    this.corpnameField = null;
                }
                else {
                    if ((this.corpnameField == null)) {
                        this.corpnameField = XTypedList<corpname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<corpname>(this.corpnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | controlaccess1)+)
        /// </para>
        /// </summary>
        public virtual IList<famname> famname {
            get {
                if ((this.famnameField == null)) {
                    this.famnameField = new XTypedList<famname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"));
                }
                return this.famnameField;
            }
            set {
                if ((value == null)) {
                    this.famnameField = null;
                }
                else {
                    if ((this.famnameField == null)) {
                        this.famnameField = XTypedList<famname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<famname>(this.famnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | controlaccess1)+)
        /// </para>
        /// </summary>
        public virtual IList<geogname> geogname {
            get {
                if ((this.geognameField == null)) {
                    this.geognameField = new XTypedList<geogname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"));
                }
                return this.geognameField;
            }
            set {
                if ((value == null)) {
                    this.geognameField = null;
                }
                else {
                    if ((this.geognameField == null)) {
                        this.geognameField = XTypedList<geogname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<geogname>(this.geognameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | controlaccess1)+)
        /// </para>
        /// </summary>
        public virtual IList<name> name {
            get {
                if ((this.nameField == null)) {
                    this.nameField = new XTypedList<name>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"));
                }
                return this.nameField;
            }
            set {
                if ((value == null)) {
                    this.nameField = null;
                }
                else {
                    if ((this.nameField == null)) {
                        this.nameField = XTypedList<name>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<name>(this.nameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | controlaccess1)+)
        /// </para>
        /// </summary>
        public virtual IList<occupation> occupation {
            get {
                if ((this.occupationField == null)) {
                    this.occupationField = new XTypedList<occupation>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"));
                }
                return this.occupationField;
            }
            set {
                if ((value == null)) {
                    this.occupationField = null;
                }
                else {
                    if ((this.occupationField == null)) {
                        this.occupationField = XTypedList<occupation>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<occupation>(this.occupationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | controlaccess1)+)
        /// </para>
        /// </summary>
        public virtual IList<persname> persname {
            get {
                if ((this.persnameField == null)) {
                    this.persnameField = new XTypedList<persname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"));
                }
                return this.persnameField;
            }
            set {
                if ((value == null)) {
                    this.persnameField = null;
                }
                else {
                    if ((this.persnameField == null)) {
                        this.persnameField = XTypedList<persname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<persname>(this.persnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | controlaccess1)+)
        /// </para>
        /// </summary>
        public virtual IList<subject> subject {
            get {
                if ((this.subjectField == null)) {
                    this.subjectField = new XTypedList<subject>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"));
                }
                return this.subjectField;
            }
            set {
                if ((value == null)) {
                    this.subjectField = null;
                }
                else {
                    if ((this.subjectField == null)) {
                        this.subjectField = XTypedList<subject>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<subject>(this.subjectField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | controlaccess1)+)
        /// </para>
        /// </summary>
        public virtual IList<genreform> genreform {
            get {
                if ((this.genreformField == null)) {
                    this.genreformField = new XTypedList<genreform>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"));
                }
                return this.genreformField;
            }
            set {
                if ((value == null)) {
                    this.genreformField = null;
                }
                else {
                    if ((this.genreformField == null)) {
                        this.genreformField = XTypedList<genreform>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<genreform>(this.genreformField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | controlaccess1)+)
        /// </para>
        /// </summary>
        public virtual IList<function> function {
            get {
                if ((this.functionField == null)) {
                    this.functionField = new XTypedList<function>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"));
                }
                return this.functionField;
            }
            set {
                if ((value == null)) {
                    this.functionField = null;
                }
                else {
                    if ((this.functionField == null)) {
                        this.functionField = XTypedList<function>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<function>(this.functionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | controlaccess1)+)
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | controlaccess1)+)
        /// </para>
        /// </summary>
        public virtual IList<controlaccess> controlaccess1 {
            get {
                if ((this.controlaccess1Field == null)) {
                    this.controlaccess1Field = new XTypedList<controlaccess>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"));
                }
                return this.controlaccess1Field;
            }
            set {
                if ((value == null)) {
                    this.controlaccess1Field = null;
                }
                else {
                    if ((this.controlaccess1Field == null)) {
                        this.controlaccess1Field = XTypedList<controlaccess>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<controlaccess>(this.controlaccess1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<controlaccess>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), typeof(head));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"), typeof(address));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"), typeof(chronlist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"), typeof(list));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"), typeof(table));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"), typeof(blockquote));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"), typeof(p));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"), typeof(corpname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"), typeof(famname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"), typeof(geogname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"), typeof(name));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"), typeof(occupation));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"), typeof(persname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"), typeof(subject));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"), typeof(genreform));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"), typeof(function));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"), typeof(title));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"), typeof(controlaccess));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | dao | daogrp | odd1)+)
    /// </para>
    /// </summary>
    public partial class odd : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dao> daoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<daogrp> daogrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<odd> odd1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator odd(XElement xe) { return XTypedServices.ToXTypedElement<odd>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static odd() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | dao | daogrp | odd1)+)
        /// </para>
        /// </summary>
        public odd() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | dao | daogrp | odd1)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"));
                return ((head)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | dao | daogrp | odd1)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | dao | daogrp | odd1)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | dao | daogrp | odd1)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | dao | daogrp | odd1)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | dao | daogrp | odd1)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | dao | daogrp | odd1)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | dao | daogrp | odd1)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | dao | daogrp | odd1)+)
        /// </para>
        /// </summary>
        public virtual IList<dao> dao {
            get {
                if ((this.daoField == null)) {
                    this.daoField = new XTypedList<dao>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"));
                }
                return this.daoField;
            }
            set {
                if ((value == null)) {
                    this.daoField = null;
                }
                else {
                    if ((this.daoField == null)) {
                        this.daoField = XTypedList<dao>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<dao>(this.daoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | dao | daogrp | odd1)+)
        /// </para>
        /// </summary>
        public virtual IList<daogrp> daogrp {
            get {
                if ((this.daogrpField == null)) {
                    this.daogrpField = new XTypedList<daogrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"));
                }
                return this.daogrpField;
            }
            set {
                if ((value == null)) {
                    this.daogrpField = null;
                }
                else {
                    if ((this.daogrpField == null)) {
                        this.daogrpField = XTypedList<daogrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<daogrp>(this.daogrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | dao | daogrp | odd1)+)
        /// </para>
        /// </summary>
        public virtual IList<odd> odd1 {
            get {
                if ((this.odd1Field == null)) {
                    this.odd1Field = new XTypedList<odd>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"));
                }
                return this.odd1Field;
            }
            set {
                if ((value == null)) {
                    this.odd1Field = null;
                }
                else {
                    if ((this.odd1Field == null)) {
                        this.odd1Field = XTypedList<odd>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<odd>(this.odd1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<odd>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), typeof(head));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"), typeof(address));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"), typeof(chronlist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"), typeof(list));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"), typeof(table));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"), typeof(blockquote));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"), typeof(p));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"), typeof(dao));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"), typeof(daogrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"), typeof(odd));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement | scopecontent1 | dao | daogrp)+)
    /// </para>
    /// </summary>
    public partial class scopecontent : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<arrangement> arrangementField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<scopecontent> scopecontent1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dao> daoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<daogrp> daogrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator scopecontent(XElement xe) { return XTypedServices.ToXTypedElement<scopecontent>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static scopecontent() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement | scopecontent1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public scopecontent() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement | scopecontent1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"));
                return ((head)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement | scopecontent1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement | scopecontent1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement | scopecontent1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement | scopecontent1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement | scopecontent1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement | scopecontent1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement | scopecontent1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement | scopecontent1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual IList<arrangement> arrangement {
            get {
                if ((this.arrangementField == null)) {
                    this.arrangementField = new XTypedList<arrangement>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"));
                }
                return this.arrangementField;
            }
            set {
                if ((value == null)) {
                    this.arrangementField = null;
                }
                else {
                    if ((this.arrangementField == null)) {
                        this.arrangementField = XTypedList<arrangement>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<arrangement>(this.arrangementField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement | scopecontent1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual IList<scopecontent> scopecontent1 {
            get {
                if ((this.scopecontent1Field == null)) {
                    this.scopecontent1Field = new XTypedList<scopecontent>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"));
                }
                return this.scopecontent1Field;
            }
            set {
                if ((value == null)) {
                    this.scopecontent1Field = null;
                }
                else {
                    if ((this.scopecontent1Field == null)) {
                        this.scopecontent1Field = XTypedList<scopecontent>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<scopecontent>(this.scopecontent1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement | scopecontent1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual IList<dao> dao {
            get {
                if ((this.daoField == null)) {
                    this.daoField = new XTypedList<dao>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"));
                }
                return this.daoField;
            }
            set {
                if ((value == null)) {
                    this.daoField = null;
                }
                else {
                    if ((this.daoField == null)) {
                        this.daoField = XTypedList<dao>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<dao>(this.daoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement | scopecontent1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual IList<daogrp> daogrp {
            get {
                if ((this.daogrpField == null)) {
                    this.daogrpField = new XTypedList<daogrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"));
                }
                return this.daogrpField;
            }
            set {
                if ((value == null)) {
                    this.daogrpField = null;
                }
                else {
                    if ((this.daogrpField == null)) {
                        this.daogrpField = XTypedList<daogrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<daogrp>(this.daogrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<scopecontent>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), typeof(head));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"), typeof(address));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"), typeof(chronlist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"), typeof(list));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"), typeof(table));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"), typeof(blockquote));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"), typeof(p));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"), typeof(arrangement));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"), typeof(scopecontent));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"), typeof(dao));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"), typeof(daogrp));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement1)+)
    /// </para>
    /// </summary>
    public partial class arrangement : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<arrangement> arrangement1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator arrangement(XElement xe) { return XTypedServices.ToXTypedElement<arrangement>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static arrangement() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement1)+)
        /// </para>
        /// </summary>
        public arrangement() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement1)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"));
                return ((head)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement1)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement1)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement1)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement1)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement1)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement1)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement1)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement1)+)
        /// </para>
        /// </summary>
        public virtual IList<arrangement> arrangement1 {
            get {
                if ((this.arrangement1Field == null)) {
                    this.arrangement1Field = new XTypedList<arrangement>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"));
                }
                return this.arrangement1Field;
            }
            set {
                if ((value == null)) {
                    this.arrangement1Field = null;
                }
                else {
                    if ((this.arrangement1Field == null)) {
                        this.arrangement1Field = XTypedList<arrangement>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<arrangement>(this.arrangement1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<arrangement>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), typeof(head));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"), typeof(address));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"), typeof(chronlist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"), typeof(list));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"), typeof(table));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"), typeof(blockquote));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"), typeof(p));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"), typeof(arrangement));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | bibliography1)+)
    /// </para>
    /// </summary>
    public partial class bibliography : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibliography> bibliography1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator bibliography(XElement xe) { return XTypedServices.ToXTypedElement<bibliography>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static bibliography() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | bibliography1)+)
        /// </para>
        /// </summary>
        public bibliography() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | bibliography1)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"));
                return ((head)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | bibliography1)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | bibliography1)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | bibliography1)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | bibliography1)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | bibliography1)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | bibliography1)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | bibliography1)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | bibliography1)+)
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | bibliography1)+)
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | bibliography1)+)
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | bibliography1)+)
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | bibliography1)+)
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | bibliography1)+)
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | bibliography1)+)
        /// </para>
        /// </summary>
        public virtual IList<bibliography> bibliography1 {
            get {
                if ((this.bibliography1Field == null)) {
                    this.bibliography1Field = new XTypedList<bibliography>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"));
                }
                return this.bibliography1Field;
            }
            set {
                if ((value == null)) {
                    this.bibliography1Field = null;
                }
                else {
                    if ((this.bibliography1Field == null)) {
                        this.bibliography1Field = XTypedList<bibliography>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibliography>(this.bibliography1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<bibliography>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), typeof(head));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"), typeof(address));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"), typeof(chronlist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"), typeof(list));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"), typeof(table));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"), typeof(blockquote));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"), typeof(p));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"), typeof(@ref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"), typeof(extref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"), typeof(linkgrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"), typeof(bibref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"), typeof(title));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"), typeof(archref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"), typeof(bibliography));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | fileplan1)+)
    /// </para>
    /// </summary>
    public partial class fileplan : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<fileplan> fileplan1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator fileplan(XElement xe) { return XTypedServices.ToXTypedElement<fileplan>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static fileplan() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | fileplan1)+)
        /// </para>
        /// </summary>
        public fileplan() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | fileplan1)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"));
                return ((head)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | fileplan1)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | fileplan1)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | fileplan1)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | fileplan1)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | fileplan1)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | fileplan1)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | fileplan1)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | fileplan1)+)
        /// </para>
        /// </summary>
        public virtual IList<fileplan> fileplan1 {
            get {
                if ((this.fileplan1Field == null)) {
                    this.fileplan1Field = new XTypedList<fileplan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"));
                }
                return this.fileplan1Field;
            }
            set {
                if ((value == null)) {
                    this.fileplan1Field = null;
                }
                else {
                    if ((this.fileplan1Field == null)) {
                        this.fileplan1Field = XTypedList<fileplan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<fileplan>(this.fileplan1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<fileplan>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), typeof(head));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"), typeof(address));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"), typeof(chronlist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"), typeof(list));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"), typeof(table));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"), typeof(blockquote));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"), typeof(p));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"), typeof(fileplan));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | relatedmaterial1)+)
    /// </para>
    /// </summary>
    public partial class relatedmaterial : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<relatedmaterial> relatedmaterial1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator relatedmaterial(XElement xe) { return XTypedServices.ToXTypedElement<relatedmaterial>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static relatedmaterial() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | relatedmaterial1)+)
        /// </para>
        /// </summary>
        public relatedmaterial() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | relatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"));
                return ((head)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | relatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | relatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | relatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | relatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | relatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | relatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | relatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | relatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | relatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | relatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | relatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | relatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | relatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | relatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<relatedmaterial> relatedmaterial1 {
            get {
                if ((this.relatedmaterial1Field == null)) {
                    this.relatedmaterial1Field = new XTypedList<relatedmaterial>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"));
                }
                return this.relatedmaterial1Field;
            }
            set {
                if ((value == null)) {
                    this.relatedmaterial1Field = null;
                }
                else {
                    if ((this.relatedmaterial1Field == null)) {
                        this.relatedmaterial1Field = XTypedList<relatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<relatedmaterial>(this.relatedmaterial1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<relatedmaterial>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), typeof(head));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"), typeof(address));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"), typeof(chronlist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"), typeof(list));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"), typeof(table));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"), typeof(blockquote));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"), typeof(p));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"), typeof(@ref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"), typeof(extref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"), typeof(linkgrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"), typeof(bibref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"), typeof(title));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"), typeof(archref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"), typeof(relatedmaterial));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | separatedmaterial1)+)
    /// </para>
    /// </summary>
    public partial class separatedmaterial : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<separatedmaterial> separatedmaterial1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator separatedmaterial(XElement xe) { return XTypedServices.ToXTypedElement<separatedmaterial>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static separatedmaterial() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | separatedmaterial1)+)
        /// </para>
        /// </summary>
        public separatedmaterial() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | separatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"));
                return ((head)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | separatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | separatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | separatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | separatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | separatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | separatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | separatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | separatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | separatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | separatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | separatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | separatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | separatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | separatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<separatedmaterial> separatedmaterial1 {
            get {
                if ((this.separatedmaterial1Field == null)) {
                    this.separatedmaterial1Field = new XTypedList<separatedmaterial>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"));
                }
                return this.separatedmaterial1Field;
            }
            set {
                if ((value == null)) {
                    this.separatedmaterial1Field = null;
                }
                else {
                    if ((this.separatedmaterial1Field == null)) {
                        this.separatedmaterial1Field = XTypedList<separatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<separatedmaterial>(this.separatedmaterial1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<separatedmaterial>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), typeof(head));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"), typeof(address));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"), typeof(chronlist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"), typeof(list));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"), typeof(table));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"), typeof(blockquote));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"), typeof(p));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"), typeof(@ref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"), typeof(extref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"), typeof(linkgrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"), typeof(bibref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"), typeof(title));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"), typeof(archref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"), typeof(separatedmaterial));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | otherfindaid1)+)
    /// </para>
    /// </summary>
    public partial class otherfindaid : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<otherfindaid> otherfindaid1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator otherfindaid(XElement xe) { return XTypedServices.ToXTypedElement<otherfindaid>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static otherfindaid() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | otherfindaid1)+)
        /// </para>
        /// </summary>
        public otherfindaid() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | otherfindaid1)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"));
                return ((head)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | otherfindaid1)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | otherfindaid1)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | otherfindaid1)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | otherfindaid1)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | otherfindaid1)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | otherfindaid1)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | otherfindaid1)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | otherfindaid1)+)
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | otherfindaid1)+)
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | otherfindaid1)+)
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | otherfindaid1)+)
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | otherfindaid1)+)
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | otherfindaid1)+)
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | otherfindaid1)+)
        /// </para>
        /// </summary>
        public virtual IList<otherfindaid> otherfindaid1 {
            get {
                if ((this.otherfindaid1Field == null)) {
                    this.otherfindaid1Field = new XTypedList<otherfindaid>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"));
                }
                return this.otherfindaid1Field;
            }
            set {
                if ((value == null)) {
                    this.otherfindaid1Field = null;
                }
                else {
                    if ((this.otherfindaid1Field == null)) {
                        this.otherfindaid1Field = XTypedList<otherfindaid>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<otherfindaid>(this.otherfindaid1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<otherfindaid>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), typeof(head));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"), typeof(address));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"), typeof(chronlist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"), typeof(list));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"), typeof(table));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"), typeof(blockquote));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"), typeof(p));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"), typeof(@ref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"), typeof(extref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"), typeof(linkgrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"), typeof(bibref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"), typeof(title));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"), typeof(archref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"), typeof(otherfindaid));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((listhead?, indexentry+)|index1+))
    /// </para>
    /// </summary>
    public partial class index : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<indexentry> indexentryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<index> index1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator index(XElement xe) { return XTypedServices.ToXTypedElement<index>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static index() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((listhead?, indexentry+)|index1+))
        /// </para>
        /// </summary>
        public index() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((listhead?, indexentry+)|index1+))
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"));
                return ((head)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((listhead?, indexentry+)|index1+))
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((listhead?, indexentry+)|index1+))
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((listhead?, indexentry+)|index1+))
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((listhead?, indexentry+)|index1+))
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((listhead?, indexentry+)|index1+))
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((listhead?, indexentry+)|index1+))
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((listhead?, indexentry+)|index1+))
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((listhead?, indexentry+)|index1+))
        /// </para>
        /// </summary>
        public virtual listhead listhead {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("listhead", "urn:isbn:1-931666-22-9"));
                return ((listhead)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("listhead", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((listhead?, indexentry+)|index1+))
        /// </para>
        /// </summary>
        public virtual IList<indexentry> indexentry {
            get {
                if ((this.indexentryField == null)) {
                    this.indexentryField = new XTypedList<indexentry>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("indexentry", "urn:isbn:1-931666-22-9"));
                }
                return this.indexentryField;
            }
            set {
                if ((value == null)) {
                    this.indexentryField = null;
                }
                else {
                    if ((this.indexentryField == null)) {
                        this.indexentryField = XTypedList<indexentry>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("indexentry", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<indexentry>(this.indexentryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((listhead?, indexentry+)|index1+))
        /// </para>
        /// </summary>
        public virtual IList<index> index1 {
            get {
                if ((this.index1Field == null)) {
                    this.index1Field = new XTypedList<index>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"));
                }
                return this.index1Field;
            }
            set {
                if ((value == null)) {
                    this.index1Field = null;
                }
                else {
                    if ((this.index1Field == null)) {
                        this.index1Field = XTypedList<index>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<index>(this.index1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<index>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), typeof(head));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"), typeof(address));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"), typeof(chronlist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"), typeof(list));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"), typeof(table));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"), typeof(blockquote));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"), typeof(p));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("listhead", "urn:isbn:1-931666-22-9"), typeof(listhead));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("indexentry", "urn:isbn:1-931666-22-9"), typeof(indexentry));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"), typeof(index));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((namegrp | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title), (ptrgrp | ptr | @ref)?, indexentry1*)
    /// </para>
    /// </summary>
    public partial class indexentry : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<indexentry> indexentry1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator indexentry(XElement xe) { return XTypedServices.ToXTypedElement<indexentry>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static indexentry() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((namegrp | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title), (ptrgrp | ptr | @ref)?, indexentry1*)
        /// </para>
        /// </summary>
        public indexentry() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((namegrp | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title), (ptrgrp | ptr | @ref)?, indexentry1*)
        /// </para>
        /// </summary>
        public virtual namegrp namegrp {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("namegrp", "urn:isbn:1-931666-22-9"));
                return ((namegrp)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("namegrp", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((namegrp | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title), (ptrgrp | ptr | @ref)?, indexentry1*)
        /// </para>
        /// </summary>
        public virtual corpname corpname {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"));
                return ((corpname)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((namegrp | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title), (ptrgrp | ptr | @ref)?, indexentry1*)
        /// </para>
        /// </summary>
        public virtual famname famname {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"));
                return ((famname)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((namegrp | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title), (ptrgrp | ptr | @ref)?, indexentry1*)
        /// </para>
        /// </summary>
        public virtual geogname geogname {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"));
                return ((geogname)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((namegrp | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title), (ptrgrp | ptr | @ref)?, indexentry1*)
        /// </para>
        /// </summary>
        public virtual name name {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"));
                return ((name)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((namegrp | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title), (ptrgrp | ptr | @ref)?, indexentry1*)
        /// </para>
        /// </summary>
        public virtual occupation occupation {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"));
                return ((occupation)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((namegrp | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title), (ptrgrp | ptr | @ref)?, indexentry1*)
        /// </para>
        /// </summary>
        public virtual persname persname {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"));
                return ((persname)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((namegrp | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title), (ptrgrp | ptr | @ref)?, indexentry1*)
        /// </para>
        /// </summary>
        public virtual subject subject {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"));
                return ((subject)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((namegrp | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title), (ptrgrp | ptr | @ref)?, indexentry1*)
        /// </para>
        /// </summary>
        public virtual genreform genreform {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"));
                return ((genreform)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((namegrp | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title), (ptrgrp | ptr | @ref)?, indexentry1*)
        /// </para>
        /// </summary>
        public virtual function function {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"));
                return ((function)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((namegrp | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title), (ptrgrp | ptr | @ref)?, indexentry1*)
        /// </para>
        /// </summary>
        public virtual title title {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                return ((title)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((namegrp | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title), (ptrgrp | ptr | @ref)?, indexentry1*)
        /// </para>
        /// </summary>
        public virtual ptrgrp ptrgrp {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("ptrgrp", "urn:isbn:1-931666-22-9"));
                return ((ptrgrp)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("ptrgrp", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((namegrp | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title), (ptrgrp | ptr | @ref)?, indexentry1*)
        /// </para>
        /// </summary>
        public virtual ptr ptr {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                return ((ptr)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((namegrp | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title), (ptrgrp | ptr | @ref)?, indexentry1*)
        /// </para>
        /// </summary>
        public virtual @ref @ref {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                return ((@ref)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((namegrp | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title), (ptrgrp | ptr | @ref)?, indexentry1*)
        /// </para>
        /// </summary>
        public virtual IList<indexentry> indexentry1 {
            get {
                if ((this.indexentry1Field == null)) {
                    this.indexentry1Field = new XTypedList<indexentry>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("indexentry", "urn:isbn:1-931666-22-9"));
                }
                return this.indexentry1Field;
            }
            set {
                if ((value == null)) {
                    this.indexentry1Field = null;
                }
                else {
                    if ((this.indexentry1Field == null)) {
                        this.indexentry1Field = XTypedList<indexentry>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("indexentry", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<indexentry>(this.indexentry1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("indexentry", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<indexentry>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("namegrp", "urn:isbn:1-931666-22-9"), typeof(namegrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"), typeof(corpname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"), typeof(famname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"), typeof(geogname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"), typeof(name));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"), typeof(occupation));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"), typeof(persname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"), typeof(subject));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"), typeof(genreform));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"), typeof(function));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"), typeof(title));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptrgrp", "urn:isbn:1-931666-22-9"), typeof(ptrgrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"), typeof(@ref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("indexentry", "urn:isbn:1-931666-22-9"), typeof(indexentry));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | note)+
    /// </para>
    /// </summary>
    public partial class namegrp : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<corpname> corpnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<famname> famnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<geogname> geognameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<name> nameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<occupation> occupationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<persname> persnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<subject> subjectField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<genreform> genreformField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<function> functionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator namegrp(XElement xe) { return XTypedServices.ToXTypedElement<namegrp>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static namegrp() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | note)+
        /// </para>
        /// </summary>
        public namegrp() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | note)+
        /// </para>
        /// </summary>
        public virtual IList<corpname> corpname {
            get {
                if ((this.corpnameField == null)) {
                    this.corpnameField = new XTypedList<corpname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"));
                }
                return this.corpnameField;
            }
            set {
                if ((value == null)) {
                    this.corpnameField = null;
                }
                else {
                    if ((this.corpnameField == null)) {
                        this.corpnameField = XTypedList<corpname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<corpname>(this.corpnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | note)+
        /// </para>
        /// </summary>
        public virtual IList<famname> famname {
            get {
                if ((this.famnameField == null)) {
                    this.famnameField = new XTypedList<famname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"));
                }
                return this.famnameField;
            }
            set {
                if ((value == null)) {
                    this.famnameField = null;
                }
                else {
                    if ((this.famnameField == null)) {
                        this.famnameField = XTypedList<famname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<famname>(this.famnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | note)+
        /// </para>
        /// </summary>
        public virtual IList<geogname> geogname {
            get {
                if ((this.geognameField == null)) {
                    this.geognameField = new XTypedList<geogname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"));
                }
                return this.geognameField;
            }
            set {
                if ((value == null)) {
                    this.geognameField = null;
                }
                else {
                    if ((this.geognameField == null)) {
                        this.geognameField = XTypedList<geogname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<geogname>(this.geognameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | note)+
        /// </para>
        /// </summary>
        public virtual IList<name> name {
            get {
                if ((this.nameField == null)) {
                    this.nameField = new XTypedList<name>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"));
                }
                return this.nameField;
            }
            set {
                if ((value == null)) {
                    this.nameField = null;
                }
                else {
                    if ((this.nameField == null)) {
                        this.nameField = XTypedList<name>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<name>(this.nameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | note)+
        /// </para>
        /// </summary>
        public virtual IList<occupation> occupation {
            get {
                if ((this.occupationField == null)) {
                    this.occupationField = new XTypedList<occupation>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"));
                }
                return this.occupationField;
            }
            set {
                if ((value == null)) {
                    this.occupationField = null;
                }
                else {
                    if ((this.occupationField == null)) {
                        this.occupationField = XTypedList<occupation>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<occupation>(this.occupationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | note)+
        /// </para>
        /// </summary>
        public virtual IList<persname> persname {
            get {
                if ((this.persnameField == null)) {
                    this.persnameField = new XTypedList<persname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"));
                }
                return this.persnameField;
            }
            set {
                if ((value == null)) {
                    this.persnameField = null;
                }
                else {
                    if ((this.persnameField == null)) {
                        this.persnameField = XTypedList<persname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<persname>(this.persnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | note)+
        /// </para>
        /// </summary>
        public virtual IList<subject> subject {
            get {
                if ((this.subjectField == null)) {
                    this.subjectField = new XTypedList<subject>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"));
                }
                return this.subjectField;
            }
            set {
                if ((value == null)) {
                    this.subjectField = null;
                }
                else {
                    if ((this.subjectField == null)) {
                        this.subjectField = XTypedList<subject>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<subject>(this.subjectField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | note)+
        /// </para>
        /// </summary>
        public virtual IList<genreform> genreform {
            get {
                if ((this.genreformField == null)) {
                    this.genreformField = new XTypedList<genreform>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"));
                }
                return this.genreformField;
            }
            set {
                if ((value == null)) {
                    this.genreformField = null;
                }
                else {
                    if ((this.genreformField == null)) {
                        this.genreformField = XTypedList<genreform>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<genreform>(this.genreformField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | note)+
        /// </para>
        /// </summary>
        public virtual IList<function> function {
            get {
                if ((this.functionField == null)) {
                    this.functionField = new XTypedList<function>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"));
                }
                return this.functionField;
            }
            set {
                if ((value == null)) {
                    this.functionField = null;
                }
                else {
                    if ((this.functionField == null)) {
                        this.functionField = XTypedList<function>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<function>(this.functionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | note)+
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | note)+
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("namegrp", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<namegrp>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"), typeof(corpname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"), typeof(famname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"), typeof(geogname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"), typeof(name));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"), typeof(occupation));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"), typeof(persname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"), typeof(subject));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"), typeof(genreform));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"), typeof(function));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"), typeof(title));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | @ref)+
    /// </para>
    /// </summary>
    public partial class ptrgrp : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator ptrgrp(XElement xe) { return XTypedServices.ToXTypedElement<ptrgrp>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ptrgrp() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | @ref)+
        /// </para>
        /// </summary>
        public ptrgrp() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | @ref)+
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | @ref)+
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("ptrgrp", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ptrgrp>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"), typeof(@ref));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((thead?, ((c, thead?)+|(c01, thead?)+))|dsc1*))
    /// </para>
    /// </summary>
    public partial class dsc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<thead> theadField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<c> cField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<c01> c01Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dsc> dsc1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator dsc(XElement xe) { return XTypedServices.ToXTypedElement<dsc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static dsc() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((thead?, ((c, thead?)+|(c01, thead?)+))|dsc1*))
        /// </para>
        /// </summary>
        public dsc() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((thead?, ((c, thead?)+|(c01, thead?)+))|dsc1*))
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"));
                return ((head)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((thead?, ((c, thead?)+|(c01, thead?)+))|dsc1*))
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((thead?, ((c, thead?)+|(c01, thead?)+))|dsc1*))
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((thead?, ((c, thead?)+|(c01, thead?)+))|dsc1*))
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((thead?, ((c, thead?)+|(c01, thead?)+))|dsc1*))
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((thead?, ((c, thead?)+|(c01, thead?)+))|dsc1*))
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((thead?, ((c, thead?)+|(c01, thead?)+))|dsc1*))
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((thead?, ((c, thead?)+|(c01, thead?)+))|dsc1*))
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((thead?, ((c, thead?)+|(c01, thead?)+))|dsc1*))
        /// </para>
        /// </summary>
        public virtual IList<thead> thead {
            get {
                if ((this.theadField == null)) {
                    this.theadField = new XTypedList<thead>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9"));
                }
                return this.theadField;
            }
            set {
                if ((value == null)) {
                    this.theadField = null;
                }
                else {
                    if ((this.theadField == null)) {
                        this.theadField = XTypedList<thead>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<thead>(this.theadField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((thead?, ((c, thead?)+|(c01, thead?)+))|dsc1*))
        /// </para>
        /// </summary>
        public virtual IList<c> c {
            get {
                if ((this.cField == null)) {
                    this.cField = new XTypedList<c>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("c", "urn:isbn:1-931666-22-9"));
                }
                return this.cField;
            }
            set {
                if ((value == null)) {
                    this.cField = null;
                }
                else {
                    if ((this.cField == null)) {
                        this.cField = XTypedList<c>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("c", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<c>(this.cField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((thead?, ((c, thead?)+|(c01, thead?)+))|dsc1*))
        /// </para>
        /// </summary>
        public virtual IList<c01> c01 {
            get {
                if ((this.c01Field == null)) {
                    this.c01Field = new XTypedList<c01>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("c01", "urn:isbn:1-931666-22-9"));
                }
                return this.c01Field;
            }
            set {
                if ((value == null)) {
                    this.c01Field = null;
                }
                else {
                    if ((this.c01Field == null)) {
                        this.c01Field = XTypedList<c01>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("c01", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<c01>(this.c01Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((thead?, ((c, thead?)+|(c01, thead?)+))|dsc1*))
        /// </para>
        /// </summary>
        public virtual IList<dsc> dsc1 {
            get {
                if ((this.dsc1Field == null)) {
                    this.dsc1Field = new XTypedList<dsc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"));
                }
                return this.dsc1Field;
            }
            set {
                if ((value == null)) {
                    this.dsc1Field = null;
                }
                else {
                    if ((this.dsc1Field == null)) {
                        this.dsc1Field = XTypedList<dsc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<dsc>(this.dsc1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string othertype {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("othertype", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("othertype", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string tpattern {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("tpattern", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("tpattern", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<dsc>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), typeof(head));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"), typeof(address));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"), typeof(chronlist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"), typeof(list));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"), typeof(table));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"), typeof(blockquote));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"), typeof(p));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9"), typeof(thead));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("c", "urn:isbn:1-931666-22-9"), typeof(c));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("c01", "urn:isbn:1-931666-22-9"), typeof(c01));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"), typeof(dsc));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
    /// </para>
    /// </summary>
    public partial class c : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accessrestrict> accessrestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accruals> accrualsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<acqinfo> acqinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<altformavail> altformavailField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<appraisal> appraisalField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<arrangement> arrangementField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibliography> bibliographyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bioghist> bioghistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<controlaccess> controlaccessField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<custodhist> custodhistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<descgrp> descgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<fileplan> fileplanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<index> indexField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<odd> oddField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<originalsloc> originalslocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<otherfindaid> otherfindaidField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phystech> phystechField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<prefercite> preferciteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<processinfo> processinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<relatedmaterial> relatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<scopecontent> scopecontentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<separatedmaterial> separatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<userestrict> userestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dsc> dscField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dao> daoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<daogrp> daogrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<thead> theadField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<c> c1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator c(XElement xe) { return XTypedServices.ToXTypedElement<c>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static c() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public c() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"));
                return ((head)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual did did {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9"));
                return ((did)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<accessrestrict> accessrestrict {
            get {
                if ((this.accessrestrictField == null)) {
                    this.accessrestrictField = new XTypedList<accessrestrict>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"));
                }
                return this.accessrestrictField;
            }
            set {
                if ((value == null)) {
                    this.accessrestrictField = null;
                }
                else {
                    if ((this.accessrestrictField == null)) {
                        this.accessrestrictField = XTypedList<accessrestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<accessrestrict>(this.accessrestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<accruals> accruals {
            get {
                if ((this.accrualsField == null)) {
                    this.accrualsField = new XTypedList<accruals>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"));
                }
                return this.accrualsField;
            }
            set {
                if ((value == null)) {
                    this.accrualsField = null;
                }
                else {
                    if ((this.accrualsField == null)) {
                        this.accrualsField = XTypedList<accruals>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<accruals>(this.accrualsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<acqinfo> acqinfo {
            get {
                if ((this.acqinfoField == null)) {
                    this.acqinfoField = new XTypedList<acqinfo>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"));
                }
                return this.acqinfoField;
            }
            set {
                if ((value == null)) {
                    this.acqinfoField = null;
                }
                else {
                    if ((this.acqinfoField == null)) {
                        this.acqinfoField = XTypedList<acqinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<acqinfo>(this.acqinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<altformavail> altformavail {
            get {
                if ((this.altformavailField == null)) {
                    this.altformavailField = new XTypedList<altformavail>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"));
                }
                return this.altformavailField;
            }
            set {
                if ((value == null)) {
                    this.altformavailField = null;
                }
                else {
                    if ((this.altformavailField == null)) {
                        this.altformavailField = XTypedList<altformavail>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<altformavail>(this.altformavailField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<appraisal> appraisal {
            get {
                if ((this.appraisalField == null)) {
                    this.appraisalField = new XTypedList<appraisal>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"));
                }
                return this.appraisalField;
            }
            set {
                if ((value == null)) {
                    this.appraisalField = null;
                }
                else {
                    if ((this.appraisalField == null)) {
                        this.appraisalField = XTypedList<appraisal>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<appraisal>(this.appraisalField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<arrangement> arrangement {
            get {
                if ((this.arrangementField == null)) {
                    this.arrangementField = new XTypedList<arrangement>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"));
                }
                return this.arrangementField;
            }
            set {
                if ((value == null)) {
                    this.arrangementField = null;
                }
                else {
                    if ((this.arrangementField == null)) {
                        this.arrangementField = XTypedList<arrangement>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<arrangement>(this.arrangementField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<bibliography> bibliography {
            get {
                if ((this.bibliographyField == null)) {
                    this.bibliographyField = new XTypedList<bibliography>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"));
                }
                return this.bibliographyField;
            }
            set {
                if ((value == null)) {
                    this.bibliographyField = null;
                }
                else {
                    if ((this.bibliographyField == null)) {
                        this.bibliographyField = XTypedList<bibliography>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibliography>(this.bibliographyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<bioghist> bioghist {
            get {
                if ((this.bioghistField == null)) {
                    this.bioghistField = new XTypedList<bioghist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"));
                }
                return this.bioghistField;
            }
            set {
                if ((value == null)) {
                    this.bioghistField = null;
                }
                else {
                    if ((this.bioghistField == null)) {
                        this.bioghistField = XTypedList<bioghist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bioghist>(this.bioghistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<controlaccess> controlaccess {
            get {
                if ((this.controlaccessField == null)) {
                    this.controlaccessField = new XTypedList<controlaccess>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"));
                }
                return this.controlaccessField;
            }
            set {
                if ((value == null)) {
                    this.controlaccessField = null;
                }
                else {
                    if ((this.controlaccessField == null)) {
                        this.controlaccessField = XTypedList<controlaccess>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<controlaccess>(this.controlaccessField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<custodhist> custodhist {
            get {
                if ((this.custodhistField == null)) {
                    this.custodhistField = new XTypedList<custodhist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"));
                }
                return this.custodhistField;
            }
            set {
                if ((value == null)) {
                    this.custodhistField = null;
                }
                else {
                    if ((this.custodhistField == null)) {
                        this.custodhistField = XTypedList<custodhist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<custodhist>(this.custodhistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<descgrp> descgrp {
            get {
                if ((this.descgrpField == null)) {
                    this.descgrpField = new XTypedList<descgrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"));
                }
                return this.descgrpField;
            }
            set {
                if ((value == null)) {
                    this.descgrpField = null;
                }
                else {
                    if ((this.descgrpField == null)) {
                        this.descgrpField = XTypedList<descgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<descgrp>(this.descgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<fileplan> fileplan {
            get {
                if ((this.fileplanField == null)) {
                    this.fileplanField = new XTypedList<fileplan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"));
                }
                return this.fileplanField;
            }
            set {
                if ((value == null)) {
                    this.fileplanField = null;
                }
                else {
                    if ((this.fileplanField == null)) {
                        this.fileplanField = XTypedList<fileplan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<fileplan>(this.fileplanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<index> index {
            get {
                if ((this.indexField == null)) {
                    this.indexField = new XTypedList<index>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"));
                }
                return this.indexField;
            }
            set {
                if ((value == null)) {
                    this.indexField = null;
                }
                else {
                    if ((this.indexField == null)) {
                        this.indexField = XTypedList<index>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<index>(this.indexField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<odd> odd {
            get {
                if ((this.oddField == null)) {
                    this.oddField = new XTypedList<odd>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"));
                }
                return this.oddField;
            }
            set {
                if ((value == null)) {
                    this.oddField = null;
                }
                else {
                    if ((this.oddField == null)) {
                        this.oddField = XTypedList<odd>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<odd>(this.oddField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<originalsloc> originalsloc {
            get {
                if ((this.originalslocField == null)) {
                    this.originalslocField = new XTypedList<originalsloc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"));
                }
                return this.originalslocField;
            }
            set {
                if ((value == null)) {
                    this.originalslocField = null;
                }
                else {
                    if ((this.originalslocField == null)) {
                        this.originalslocField = XTypedList<originalsloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<originalsloc>(this.originalslocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<otherfindaid> otherfindaid {
            get {
                if ((this.otherfindaidField == null)) {
                    this.otherfindaidField = new XTypedList<otherfindaid>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"));
                }
                return this.otherfindaidField;
            }
            set {
                if ((value == null)) {
                    this.otherfindaidField = null;
                }
                else {
                    if ((this.otherfindaidField == null)) {
                        this.otherfindaidField = XTypedList<otherfindaid>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<otherfindaid>(this.otherfindaidField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<phystech> phystech {
            get {
                if ((this.phystechField == null)) {
                    this.phystechField = new XTypedList<phystech>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"));
                }
                return this.phystechField;
            }
            set {
                if ((value == null)) {
                    this.phystechField = null;
                }
                else {
                    if ((this.phystechField == null)) {
                        this.phystechField = XTypedList<phystech>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<phystech>(this.phystechField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<prefercite> prefercite {
            get {
                if ((this.preferciteField == null)) {
                    this.preferciteField = new XTypedList<prefercite>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"));
                }
                return this.preferciteField;
            }
            set {
                if ((value == null)) {
                    this.preferciteField = null;
                }
                else {
                    if ((this.preferciteField == null)) {
                        this.preferciteField = XTypedList<prefercite>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<prefercite>(this.preferciteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<processinfo> processinfo {
            get {
                if ((this.processinfoField == null)) {
                    this.processinfoField = new XTypedList<processinfo>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"));
                }
                return this.processinfoField;
            }
            set {
                if ((value == null)) {
                    this.processinfoField = null;
                }
                else {
                    if ((this.processinfoField == null)) {
                        this.processinfoField = XTypedList<processinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<processinfo>(this.processinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<relatedmaterial> relatedmaterial {
            get {
                if ((this.relatedmaterialField == null)) {
                    this.relatedmaterialField = new XTypedList<relatedmaterial>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"));
                }
                return this.relatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.relatedmaterialField = null;
                }
                else {
                    if ((this.relatedmaterialField == null)) {
                        this.relatedmaterialField = XTypedList<relatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<relatedmaterial>(this.relatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<scopecontent> scopecontent {
            get {
                if ((this.scopecontentField == null)) {
                    this.scopecontentField = new XTypedList<scopecontent>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"));
                }
                return this.scopecontentField;
            }
            set {
                if ((value == null)) {
                    this.scopecontentField = null;
                }
                else {
                    if ((this.scopecontentField == null)) {
                        this.scopecontentField = XTypedList<scopecontent>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<scopecontent>(this.scopecontentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<separatedmaterial> separatedmaterial {
            get {
                if ((this.separatedmaterialField == null)) {
                    this.separatedmaterialField = new XTypedList<separatedmaterial>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"));
                }
                return this.separatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.separatedmaterialField = null;
                }
                else {
                    if ((this.separatedmaterialField == null)) {
                        this.separatedmaterialField = XTypedList<separatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<separatedmaterial>(this.separatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<userestrict> userestrict {
            get {
                if ((this.userestrictField == null)) {
                    this.userestrictField = new XTypedList<userestrict>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"));
                }
                return this.userestrictField;
            }
            set {
                if ((value == null)) {
                    this.userestrictField = null;
                }
                else {
                    if ((this.userestrictField == null)) {
                        this.userestrictField = XTypedList<userestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<userestrict>(this.userestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<dsc> dsc {
            get {
                if ((this.dscField == null)) {
                    this.dscField = new XTypedList<dsc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"));
                }
                return this.dscField;
            }
            set {
                if ((value == null)) {
                    this.dscField = null;
                }
                else {
                    if ((this.dscField == null)) {
                        this.dscField = XTypedList<dsc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<dsc>(this.dscField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<dao> dao {
            get {
                if ((this.daoField == null)) {
                    this.daoField = new XTypedList<dao>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"));
                }
                return this.daoField;
            }
            set {
                if ((value == null)) {
                    this.daoField = null;
                }
                else {
                    if ((this.daoField == null)) {
                        this.daoField = XTypedList<dao>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<dao>(this.daoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<daogrp> daogrp {
            get {
                if ((this.daogrpField == null)) {
                    this.daogrpField = new XTypedList<daogrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"));
                }
                return this.daogrpField;
            }
            set {
                if ((value == null)) {
                    this.daogrpField = null;
                }
                else {
                    if ((this.daogrpField == null)) {
                        this.daogrpField = XTypedList<daogrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<daogrp>(this.daogrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<thead> thead {
            get {
                if ((this.theadField == null)) {
                    this.theadField = new XTypedList<thead>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9"));
                }
                return this.theadField;
            }
            set {
                if ((value == null)) {
                    this.theadField = null;
                }
                else {
                    if ((this.theadField == null)) {
                        this.theadField = XTypedList<thead>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<thead>(this.theadField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<c> c1 {
            get {
                if ((this.c1Field == null)) {
                    this.c1Field = new XTypedList<c>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("c", "urn:isbn:1-931666-22-9"));
                }
                return this.c1Field;
            }
            set {
                if ((value == null)) {
                    this.c1Field = null;
                }
                else {
                    if ((this.c1Field == null)) {
                        this.c1Field = XTypedList<c>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("c", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<c>(this.c1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string level {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("level", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("level", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string otherlevel {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("otherlevel", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("otherlevel", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string tpattern {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("tpattern", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("tpattern", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("c", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<c>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), typeof(head));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9"), typeof(did));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"), typeof(accessrestrict));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"), typeof(accruals));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"), typeof(acqinfo));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"), typeof(altformavail));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"), typeof(appraisal));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"), typeof(arrangement));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"), typeof(bibliography));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"), typeof(bioghist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"), typeof(controlaccess));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"), typeof(custodhist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"), typeof(descgrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"), typeof(fileplan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"), typeof(index));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"), typeof(odd));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"), typeof(originalsloc));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"), typeof(otherfindaid));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"), typeof(phystech));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"), typeof(prefercite));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"), typeof(processinfo));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"), typeof(relatedmaterial));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"), typeof(scopecontent));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"), typeof(separatedmaterial));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"), typeof(userestrict));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"), typeof(dsc));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"), typeof(dao));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"), typeof(daogrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9"), typeof(thead));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("c", "urn:isbn:1-931666-22-9"), typeof(c));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
    /// </para>
    /// </summary>
    public partial class c01 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accessrestrict> accessrestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accruals> accrualsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<acqinfo> acqinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<altformavail> altformavailField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<appraisal> appraisalField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<arrangement> arrangementField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibliography> bibliographyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bioghist> bioghistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<controlaccess> controlaccessField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<custodhist> custodhistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<descgrp> descgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<fileplan> fileplanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<index> indexField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<odd> oddField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<originalsloc> originalslocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<otherfindaid> otherfindaidField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phystech> phystechField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<prefercite> preferciteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<processinfo> processinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<relatedmaterial> relatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<scopecontent> scopecontentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<separatedmaterial> separatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<userestrict> userestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dsc> dscField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dao> daoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<daogrp> daogrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<thead> theadField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<c02> c02Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator c01(XElement xe) { return XTypedServices.ToXTypedElement<c01>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static c01() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public c01() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"));
                return ((head)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual did did {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9"));
                return ((did)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<accessrestrict> accessrestrict {
            get {
                if ((this.accessrestrictField == null)) {
                    this.accessrestrictField = new XTypedList<accessrestrict>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"));
                }
                return this.accessrestrictField;
            }
            set {
                if ((value == null)) {
                    this.accessrestrictField = null;
                }
                else {
                    if ((this.accessrestrictField == null)) {
                        this.accessrestrictField = XTypedList<accessrestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<accessrestrict>(this.accessrestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<accruals> accruals {
            get {
                if ((this.accrualsField == null)) {
                    this.accrualsField = new XTypedList<accruals>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"));
                }
                return this.accrualsField;
            }
            set {
                if ((value == null)) {
                    this.accrualsField = null;
                }
                else {
                    if ((this.accrualsField == null)) {
                        this.accrualsField = XTypedList<accruals>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<accruals>(this.accrualsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<acqinfo> acqinfo {
            get {
                if ((this.acqinfoField == null)) {
                    this.acqinfoField = new XTypedList<acqinfo>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"));
                }
                return this.acqinfoField;
            }
            set {
                if ((value == null)) {
                    this.acqinfoField = null;
                }
                else {
                    if ((this.acqinfoField == null)) {
                        this.acqinfoField = XTypedList<acqinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<acqinfo>(this.acqinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<altformavail> altformavail {
            get {
                if ((this.altformavailField == null)) {
                    this.altformavailField = new XTypedList<altformavail>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"));
                }
                return this.altformavailField;
            }
            set {
                if ((value == null)) {
                    this.altformavailField = null;
                }
                else {
                    if ((this.altformavailField == null)) {
                        this.altformavailField = XTypedList<altformavail>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<altformavail>(this.altformavailField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<appraisal> appraisal {
            get {
                if ((this.appraisalField == null)) {
                    this.appraisalField = new XTypedList<appraisal>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"));
                }
                return this.appraisalField;
            }
            set {
                if ((value == null)) {
                    this.appraisalField = null;
                }
                else {
                    if ((this.appraisalField == null)) {
                        this.appraisalField = XTypedList<appraisal>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<appraisal>(this.appraisalField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<arrangement> arrangement {
            get {
                if ((this.arrangementField == null)) {
                    this.arrangementField = new XTypedList<arrangement>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"));
                }
                return this.arrangementField;
            }
            set {
                if ((value == null)) {
                    this.arrangementField = null;
                }
                else {
                    if ((this.arrangementField == null)) {
                        this.arrangementField = XTypedList<arrangement>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<arrangement>(this.arrangementField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<bibliography> bibliography {
            get {
                if ((this.bibliographyField == null)) {
                    this.bibliographyField = new XTypedList<bibliography>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"));
                }
                return this.bibliographyField;
            }
            set {
                if ((value == null)) {
                    this.bibliographyField = null;
                }
                else {
                    if ((this.bibliographyField == null)) {
                        this.bibliographyField = XTypedList<bibliography>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibliography>(this.bibliographyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<bioghist> bioghist {
            get {
                if ((this.bioghistField == null)) {
                    this.bioghistField = new XTypedList<bioghist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"));
                }
                return this.bioghistField;
            }
            set {
                if ((value == null)) {
                    this.bioghistField = null;
                }
                else {
                    if ((this.bioghistField == null)) {
                        this.bioghistField = XTypedList<bioghist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bioghist>(this.bioghistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<controlaccess> controlaccess {
            get {
                if ((this.controlaccessField == null)) {
                    this.controlaccessField = new XTypedList<controlaccess>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"));
                }
                return this.controlaccessField;
            }
            set {
                if ((value == null)) {
                    this.controlaccessField = null;
                }
                else {
                    if ((this.controlaccessField == null)) {
                        this.controlaccessField = XTypedList<controlaccess>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<controlaccess>(this.controlaccessField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<custodhist> custodhist {
            get {
                if ((this.custodhistField == null)) {
                    this.custodhistField = new XTypedList<custodhist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"));
                }
                return this.custodhistField;
            }
            set {
                if ((value == null)) {
                    this.custodhistField = null;
                }
                else {
                    if ((this.custodhistField == null)) {
                        this.custodhistField = XTypedList<custodhist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<custodhist>(this.custodhistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<descgrp> descgrp {
            get {
                if ((this.descgrpField == null)) {
                    this.descgrpField = new XTypedList<descgrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"));
                }
                return this.descgrpField;
            }
            set {
                if ((value == null)) {
                    this.descgrpField = null;
                }
                else {
                    if ((this.descgrpField == null)) {
                        this.descgrpField = XTypedList<descgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<descgrp>(this.descgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<fileplan> fileplan {
            get {
                if ((this.fileplanField == null)) {
                    this.fileplanField = new XTypedList<fileplan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"));
                }
                return this.fileplanField;
            }
            set {
                if ((value == null)) {
                    this.fileplanField = null;
                }
                else {
                    if ((this.fileplanField == null)) {
                        this.fileplanField = XTypedList<fileplan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<fileplan>(this.fileplanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<index> index {
            get {
                if ((this.indexField == null)) {
                    this.indexField = new XTypedList<index>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"));
                }
                return this.indexField;
            }
            set {
                if ((value == null)) {
                    this.indexField = null;
                }
                else {
                    if ((this.indexField == null)) {
                        this.indexField = XTypedList<index>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<index>(this.indexField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<odd> odd {
            get {
                if ((this.oddField == null)) {
                    this.oddField = new XTypedList<odd>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"));
                }
                return this.oddField;
            }
            set {
                if ((value == null)) {
                    this.oddField = null;
                }
                else {
                    if ((this.oddField == null)) {
                        this.oddField = XTypedList<odd>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<odd>(this.oddField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<originalsloc> originalsloc {
            get {
                if ((this.originalslocField == null)) {
                    this.originalslocField = new XTypedList<originalsloc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"));
                }
                return this.originalslocField;
            }
            set {
                if ((value == null)) {
                    this.originalslocField = null;
                }
                else {
                    if ((this.originalslocField == null)) {
                        this.originalslocField = XTypedList<originalsloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<originalsloc>(this.originalslocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<otherfindaid> otherfindaid {
            get {
                if ((this.otherfindaidField == null)) {
                    this.otherfindaidField = new XTypedList<otherfindaid>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"));
                }
                return this.otherfindaidField;
            }
            set {
                if ((value == null)) {
                    this.otherfindaidField = null;
                }
                else {
                    if ((this.otherfindaidField == null)) {
                        this.otherfindaidField = XTypedList<otherfindaid>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<otherfindaid>(this.otherfindaidField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<phystech> phystech {
            get {
                if ((this.phystechField == null)) {
                    this.phystechField = new XTypedList<phystech>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"));
                }
                return this.phystechField;
            }
            set {
                if ((value == null)) {
                    this.phystechField = null;
                }
                else {
                    if ((this.phystechField == null)) {
                        this.phystechField = XTypedList<phystech>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<phystech>(this.phystechField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<prefercite> prefercite {
            get {
                if ((this.preferciteField == null)) {
                    this.preferciteField = new XTypedList<prefercite>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"));
                }
                return this.preferciteField;
            }
            set {
                if ((value == null)) {
                    this.preferciteField = null;
                }
                else {
                    if ((this.preferciteField == null)) {
                        this.preferciteField = XTypedList<prefercite>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<prefercite>(this.preferciteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<processinfo> processinfo {
            get {
                if ((this.processinfoField == null)) {
                    this.processinfoField = new XTypedList<processinfo>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"));
                }
                return this.processinfoField;
            }
            set {
                if ((value == null)) {
                    this.processinfoField = null;
                }
                else {
                    if ((this.processinfoField == null)) {
                        this.processinfoField = XTypedList<processinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<processinfo>(this.processinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<relatedmaterial> relatedmaterial {
            get {
                if ((this.relatedmaterialField == null)) {
                    this.relatedmaterialField = new XTypedList<relatedmaterial>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"));
                }
                return this.relatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.relatedmaterialField = null;
                }
                else {
                    if ((this.relatedmaterialField == null)) {
                        this.relatedmaterialField = XTypedList<relatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<relatedmaterial>(this.relatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<scopecontent> scopecontent {
            get {
                if ((this.scopecontentField == null)) {
                    this.scopecontentField = new XTypedList<scopecontent>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"));
                }
                return this.scopecontentField;
            }
            set {
                if ((value == null)) {
                    this.scopecontentField = null;
                }
                else {
                    if ((this.scopecontentField == null)) {
                        this.scopecontentField = XTypedList<scopecontent>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<scopecontent>(this.scopecontentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<separatedmaterial> separatedmaterial {
            get {
                if ((this.separatedmaterialField == null)) {
                    this.separatedmaterialField = new XTypedList<separatedmaterial>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"));
                }
                return this.separatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.separatedmaterialField = null;
                }
                else {
                    if ((this.separatedmaterialField == null)) {
                        this.separatedmaterialField = XTypedList<separatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<separatedmaterial>(this.separatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<userestrict> userestrict {
            get {
                if ((this.userestrictField == null)) {
                    this.userestrictField = new XTypedList<userestrict>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"));
                }
                return this.userestrictField;
            }
            set {
                if ((value == null)) {
                    this.userestrictField = null;
                }
                else {
                    if ((this.userestrictField == null)) {
                        this.userestrictField = XTypedList<userestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<userestrict>(this.userestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<dsc> dsc {
            get {
                if ((this.dscField == null)) {
                    this.dscField = new XTypedList<dsc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"));
                }
                return this.dscField;
            }
            set {
                if ((value == null)) {
                    this.dscField = null;
                }
                else {
                    if ((this.dscField == null)) {
                        this.dscField = XTypedList<dsc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<dsc>(this.dscField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<dao> dao {
            get {
                if ((this.daoField == null)) {
                    this.daoField = new XTypedList<dao>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"));
                }
                return this.daoField;
            }
            set {
                if ((value == null)) {
                    this.daoField = null;
                }
                else {
                    if ((this.daoField == null)) {
                        this.daoField = XTypedList<dao>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<dao>(this.daoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<daogrp> daogrp {
            get {
                if ((this.daogrpField == null)) {
                    this.daogrpField = new XTypedList<daogrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"));
                }
                return this.daogrpField;
            }
            set {
                if ((value == null)) {
                    this.daogrpField = null;
                }
                else {
                    if ((this.daogrpField == null)) {
                        this.daogrpField = XTypedList<daogrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<daogrp>(this.daogrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<thead> thead {
            get {
                if ((this.theadField == null)) {
                    this.theadField = new XTypedList<thead>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9"));
                }
                return this.theadField;
            }
            set {
                if ((value == null)) {
                    this.theadField = null;
                }
                else {
                    if ((this.theadField == null)) {
                        this.theadField = XTypedList<thead>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<thead>(this.theadField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<c02> c02 {
            get {
                if ((this.c02Field == null)) {
                    this.c02Field = new XTypedList<c02>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("c02", "urn:isbn:1-931666-22-9"));
                }
                return this.c02Field;
            }
            set {
                if ((value == null)) {
                    this.c02Field = null;
                }
                else {
                    if ((this.c02Field == null)) {
                        this.c02Field = XTypedList<c02>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("c02", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<c02>(this.c02Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string level {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("level", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("level", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string otherlevel {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("otherlevel", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("otherlevel", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string tpattern {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("tpattern", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("tpattern", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("c01", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<c01>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), typeof(head));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9"), typeof(did));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"), typeof(accessrestrict));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"), typeof(accruals));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"), typeof(acqinfo));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"), typeof(altformavail));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"), typeof(appraisal));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"), typeof(arrangement));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"), typeof(bibliography));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"), typeof(bioghist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"), typeof(controlaccess));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"), typeof(custodhist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"), typeof(descgrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"), typeof(fileplan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"), typeof(index));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"), typeof(odd));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"), typeof(originalsloc));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"), typeof(otherfindaid));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"), typeof(phystech));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"), typeof(prefercite));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"), typeof(processinfo));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"), typeof(relatedmaterial));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"), typeof(scopecontent));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"), typeof(separatedmaterial));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"), typeof(userestrict));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"), typeof(dsc));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"), typeof(dao));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"), typeof(daogrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9"), typeof(thead));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("c02", "urn:isbn:1-931666-22-9"), typeof(c02));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
    /// </para>
    /// </summary>
    public partial class c02 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accessrestrict> accessrestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accruals> accrualsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<acqinfo> acqinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<altformavail> altformavailField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<appraisal> appraisalField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<arrangement> arrangementField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibliography> bibliographyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bioghist> bioghistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<controlaccess> controlaccessField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<custodhist> custodhistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<descgrp> descgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<fileplan> fileplanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<index> indexField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<odd> oddField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<originalsloc> originalslocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<otherfindaid> otherfindaidField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phystech> phystechField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<prefercite> preferciteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<processinfo> processinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<relatedmaterial> relatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<scopecontent> scopecontentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<separatedmaterial> separatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<userestrict> userestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dsc> dscField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dao> daoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<daogrp> daogrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<thead> theadField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<c03> c03Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator c02(XElement xe) { return XTypedServices.ToXTypedElement<c02>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static c02() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public c02() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"));
                return ((head)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual did did {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9"));
                return ((did)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<accessrestrict> accessrestrict {
            get {
                if ((this.accessrestrictField == null)) {
                    this.accessrestrictField = new XTypedList<accessrestrict>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"));
                }
                return this.accessrestrictField;
            }
            set {
                if ((value == null)) {
                    this.accessrestrictField = null;
                }
                else {
                    if ((this.accessrestrictField == null)) {
                        this.accessrestrictField = XTypedList<accessrestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<accessrestrict>(this.accessrestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<accruals> accruals {
            get {
                if ((this.accrualsField == null)) {
                    this.accrualsField = new XTypedList<accruals>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"));
                }
                return this.accrualsField;
            }
            set {
                if ((value == null)) {
                    this.accrualsField = null;
                }
                else {
                    if ((this.accrualsField == null)) {
                        this.accrualsField = XTypedList<accruals>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<accruals>(this.accrualsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<acqinfo> acqinfo {
            get {
                if ((this.acqinfoField == null)) {
                    this.acqinfoField = new XTypedList<acqinfo>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"));
                }
                return this.acqinfoField;
            }
            set {
                if ((value == null)) {
                    this.acqinfoField = null;
                }
                else {
                    if ((this.acqinfoField == null)) {
                        this.acqinfoField = XTypedList<acqinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<acqinfo>(this.acqinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<altformavail> altformavail {
            get {
                if ((this.altformavailField == null)) {
                    this.altformavailField = new XTypedList<altformavail>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"));
                }
                return this.altformavailField;
            }
            set {
                if ((value == null)) {
                    this.altformavailField = null;
                }
                else {
                    if ((this.altformavailField == null)) {
                        this.altformavailField = XTypedList<altformavail>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<altformavail>(this.altformavailField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<appraisal> appraisal {
            get {
                if ((this.appraisalField == null)) {
                    this.appraisalField = new XTypedList<appraisal>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"));
                }
                return this.appraisalField;
            }
            set {
                if ((value == null)) {
                    this.appraisalField = null;
                }
                else {
                    if ((this.appraisalField == null)) {
                        this.appraisalField = XTypedList<appraisal>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<appraisal>(this.appraisalField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<arrangement> arrangement {
            get {
                if ((this.arrangementField == null)) {
                    this.arrangementField = new XTypedList<arrangement>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"));
                }
                return this.arrangementField;
            }
            set {
                if ((value == null)) {
                    this.arrangementField = null;
                }
                else {
                    if ((this.arrangementField == null)) {
                        this.arrangementField = XTypedList<arrangement>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<arrangement>(this.arrangementField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<bibliography> bibliography {
            get {
                if ((this.bibliographyField == null)) {
                    this.bibliographyField = new XTypedList<bibliography>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"));
                }
                return this.bibliographyField;
            }
            set {
                if ((value == null)) {
                    this.bibliographyField = null;
                }
                else {
                    if ((this.bibliographyField == null)) {
                        this.bibliographyField = XTypedList<bibliography>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibliography>(this.bibliographyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<bioghist> bioghist {
            get {
                if ((this.bioghistField == null)) {
                    this.bioghistField = new XTypedList<bioghist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"));
                }
                return this.bioghistField;
            }
            set {
                if ((value == null)) {
                    this.bioghistField = null;
                }
                else {
                    if ((this.bioghistField == null)) {
                        this.bioghistField = XTypedList<bioghist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bioghist>(this.bioghistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<controlaccess> controlaccess {
            get {
                if ((this.controlaccessField == null)) {
                    this.controlaccessField = new XTypedList<controlaccess>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"));
                }
                return this.controlaccessField;
            }
            set {
                if ((value == null)) {
                    this.controlaccessField = null;
                }
                else {
                    if ((this.controlaccessField == null)) {
                        this.controlaccessField = XTypedList<controlaccess>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<controlaccess>(this.controlaccessField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<custodhist> custodhist {
            get {
                if ((this.custodhistField == null)) {
                    this.custodhistField = new XTypedList<custodhist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"));
                }
                return this.custodhistField;
            }
            set {
                if ((value == null)) {
                    this.custodhistField = null;
                }
                else {
                    if ((this.custodhistField == null)) {
                        this.custodhistField = XTypedList<custodhist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<custodhist>(this.custodhistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<descgrp> descgrp {
            get {
                if ((this.descgrpField == null)) {
                    this.descgrpField = new XTypedList<descgrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"));
                }
                return this.descgrpField;
            }
            set {
                if ((value == null)) {
                    this.descgrpField = null;
                }
                else {
                    if ((this.descgrpField == null)) {
                        this.descgrpField = XTypedList<descgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<descgrp>(this.descgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<fileplan> fileplan {
            get {
                if ((this.fileplanField == null)) {
                    this.fileplanField = new XTypedList<fileplan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"));
                }
                return this.fileplanField;
            }
            set {
                if ((value == null)) {
                    this.fileplanField = null;
                }
                else {
                    if ((this.fileplanField == null)) {
                        this.fileplanField = XTypedList<fileplan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<fileplan>(this.fileplanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<index> index {
            get {
                if ((this.indexField == null)) {
                    this.indexField = new XTypedList<index>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"));
                }
                return this.indexField;
            }
            set {
                if ((value == null)) {
                    this.indexField = null;
                }
                else {
                    if ((this.indexField == null)) {
                        this.indexField = XTypedList<index>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<index>(this.indexField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<odd> odd {
            get {
                if ((this.oddField == null)) {
                    this.oddField = new XTypedList<odd>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"));
                }
                return this.oddField;
            }
            set {
                if ((value == null)) {
                    this.oddField = null;
                }
                else {
                    if ((this.oddField == null)) {
                        this.oddField = XTypedList<odd>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<odd>(this.oddField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<originalsloc> originalsloc {
            get {
                if ((this.originalslocField == null)) {
                    this.originalslocField = new XTypedList<originalsloc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"));
                }
                return this.originalslocField;
            }
            set {
                if ((value == null)) {
                    this.originalslocField = null;
                }
                else {
                    if ((this.originalslocField == null)) {
                        this.originalslocField = XTypedList<originalsloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<originalsloc>(this.originalslocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<otherfindaid> otherfindaid {
            get {
                if ((this.otherfindaidField == null)) {
                    this.otherfindaidField = new XTypedList<otherfindaid>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"));
                }
                return this.otherfindaidField;
            }
            set {
                if ((value == null)) {
                    this.otherfindaidField = null;
                }
                else {
                    if ((this.otherfindaidField == null)) {
                        this.otherfindaidField = XTypedList<otherfindaid>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<otherfindaid>(this.otherfindaidField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<phystech> phystech {
            get {
                if ((this.phystechField == null)) {
                    this.phystechField = new XTypedList<phystech>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"));
                }
                return this.phystechField;
            }
            set {
                if ((value == null)) {
                    this.phystechField = null;
                }
                else {
                    if ((this.phystechField == null)) {
                        this.phystechField = XTypedList<phystech>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<phystech>(this.phystechField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<prefercite> prefercite {
            get {
                if ((this.preferciteField == null)) {
                    this.preferciteField = new XTypedList<prefercite>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"));
                }
                return this.preferciteField;
            }
            set {
                if ((value == null)) {
                    this.preferciteField = null;
                }
                else {
                    if ((this.preferciteField == null)) {
                        this.preferciteField = XTypedList<prefercite>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<prefercite>(this.preferciteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<processinfo> processinfo {
            get {
                if ((this.processinfoField == null)) {
                    this.processinfoField = new XTypedList<processinfo>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"));
                }
                return this.processinfoField;
            }
            set {
                if ((value == null)) {
                    this.processinfoField = null;
                }
                else {
                    if ((this.processinfoField == null)) {
                        this.processinfoField = XTypedList<processinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<processinfo>(this.processinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<relatedmaterial> relatedmaterial {
            get {
                if ((this.relatedmaterialField == null)) {
                    this.relatedmaterialField = new XTypedList<relatedmaterial>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"));
                }
                return this.relatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.relatedmaterialField = null;
                }
                else {
                    if ((this.relatedmaterialField == null)) {
                        this.relatedmaterialField = XTypedList<relatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<relatedmaterial>(this.relatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<scopecontent> scopecontent {
            get {
                if ((this.scopecontentField == null)) {
                    this.scopecontentField = new XTypedList<scopecontent>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"));
                }
                return this.scopecontentField;
            }
            set {
                if ((value == null)) {
                    this.scopecontentField = null;
                }
                else {
                    if ((this.scopecontentField == null)) {
                        this.scopecontentField = XTypedList<scopecontent>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<scopecontent>(this.scopecontentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<separatedmaterial> separatedmaterial {
            get {
                if ((this.separatedmaterialField == null)) {
                    this.separatedmaterialField = new XTypedList<separatedmaterial>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"));
                }
                return this.separatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.separatedmaterialField = null;
                }
                else {
                    if ((this.separatedmaterialField == null)) {
                        this.separatedmaterialField = XTypedList<separatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<separatedmaterial>(this.separatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<userestrict> userestrict {
            get {
                if ((this.userestrictField == null)) {
                    this.userestrictField = new XTypedList<userestrict>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"));
                }
                return this.userestrictField;
            }
            set {
                if ((value == null)) {
                    this.userestrictField = null;
                }
                else {
                    if ((this.userestrictField == null)) {
                        this.userestrictField = XTypedList<userestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<userestrict>(this.userestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<dsc> dsc {
            get {
                if ((this.dscField == null)) {
                    this.dscField = new XTypedList<dsc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"));
                }
                return this.dscField;
            }
            set {
                if ((value == null)) {
                    this.dscField = null;
                }
                else {
                    if ((this.dscField == null)) {
                        this.dscField = XTypedList<dsc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<dsc>(this.dscField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<dao> dao {
            get {
                if ((this.daoField == null)) {
                    this.daoField = new XTypedList<dao>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"));
                }
                return this.daoField;
            }
            set {
                if ((value == null)) {
                    this.daoField = null;
                }
                else {
                    if ((this.daoField == null)) {
                        this.daoField = XTypedList<dao>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<dao>(this.daoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<daogrp> daogrp {
            get {
                if ((this.daogrpField == null)) {
                    this.daogrpField = new XTypedList<daogrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"));
                }
                return this.daogrpField;
            }
            set {
                if ((value == null)) {
                    this.daogrpField = null;
                }
                else {
                    if ((this.daogrpField == null)) {
                        this.daogrpField = XTypedList<daogrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<daogrp>(this.daogrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<thead> thead {
            get {
                if ((this.theadField == null)) {
                    this.theadField = new XTypedList<thead>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9"));
                }
                return this.theadField;
            }
            set {
                if ((value == null)) {
                    this.theadField = null;
                }
                else {
                    if ((this.theadField == null)) {
                        this.theadField = XTypedList<thead>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<thead>(this.theadField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<c03> c03 {
            get {
                if ((this.c03Field == null)) {
                    this.c03Field = new XTypedList<c03>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("c03", "urn:isbn:1-931666-22-9"));
                }
                return this.c03Field;
            }
            set {
                if ((value == null)) {
                    this.c03Field = null;
                }
                else {
                    if ((this.c03Field == null)) {
                        this.c03Field = XTypedList<c03>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("c03", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<c03>(this.c03Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string level {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("level", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("level", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string otherlevel {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("otherlevel", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("otherlevel", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string tpattern {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("tpattern", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("tpattern", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("c02", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<c02>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), typeof(head));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9"), typeof(did));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"), typeof(accessrestrict));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"), typeof(accruals));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"), typeof(acqinfo));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"), typeof(altformavail));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"), typeof(appraisal));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"), typeof(arrangement));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"), typeof(bibliography));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"), typeof(bioghist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"), typeof(controlaccess));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"), typeof(custodhist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"), typeof(descgrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"), typeof(fileplan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"), typeof(index));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"), typeof(odd));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"), typeof(originalsloc));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"), typeof(otherfindaid));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"), typeof(phystech));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"), typeof(prefercite));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"), typeof(processinfo));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"), typeof(relatedmaterial));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"), typeof(scopecontent));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"), typeof(separatedmaterial));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"), typeof(userestrict));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"), typeof(dsc));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"), typeof(dao));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"), typeof(daogrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9"), typeof(thead));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("c03", "urn:isbn:1-931666-22-9"), typeof(c03));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
    /// </para>
    /// </summary>
    public partial class c03 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accessrestrict> accessrestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accruals> accrualsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<acqinfo> acqinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<altformavail> altformavailField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<appraisal> appraisalField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<arrangement> arrangementField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibliography> bibliographyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bioghist> bioghistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<controlaccess> controlaccessField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<custodhist> custodhistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<descgrp> descgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<fileplan> fileplanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<index> indexField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<odd> oddField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<originalsloc> originalslocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<otherfindaid> otherfindaidField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phystech> phystechField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<prefercite> preferciteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<processinfo> processinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<relatedmaterial> relatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<scopecontent> scopecontentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<separatedmaterial> separatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<userestrict> userestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dsc> dscField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dao> daoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<daogrp> daogrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<thead> theadField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<c04> c04Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator c03(XElement xe) { return XTypedServices.ToXTypedElement<c03>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static c03() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public c03() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"));
                return ((head)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual did did {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9"));
                return ((did)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<accessrestrict> accessrestrict {
            get {
                if ((this.accessrestrictField == null)) {
                    this.accessrestrictField = new XTypedList<accessrestrict>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"));
                }
                return this.accessrestrictField;
            }
            set {
                if ((value == null)) {
                    this.accessrestrictField = null;
                }
                else {
                    if ((this.accessrestrictField == null)) {
                        this.accessrestrictField = XTypedList<accessrestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<accessrestrict>(this.accessrestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<accruals> accruals {
            get {
                if ((this.accrualsField == null)) {
                    this.accrualsField = new XTypedList<accruals>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"));
                }
                return this.accrualsField;
            }
            set {
                if ((value == null)) {
                    this.accrualsField = null;
                }
                else {
                    if ((this.accrualsField == null)) {
                        this.accrualsField = XTypedList<accruals>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<accruals>(this.accrualsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<acqinfo> acqinfo {
            get {
                if ((this.acqinfoField == null)) {
                    this.acqinfoField = new XTypedList<acqinfo>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"));
                }
                return this.acqinfoField;
            }
            set {
                if ((value == null)) {
                    this.acqinfoField = null;
                }
                else {
                    if ((this.acqinfoField == null)) {
                        this.acqinfoField = XTypedList<acqinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<acqinfo>(this.acqinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<altformavail> altformavail {
            get {
                if ((this.altformavailField == null)) {
                    this.altformavailField = new XTypedList<altformavail>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"));
                }
                return this.altformavailField;
            }
            set {
                if ((value == null)) {
                    this.altformavailField = null;
                }
                else {
                    if ((this.altformavailField == null)) {
                        this.altformavailField = XTypedList<altformavail>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<altformavail>(this.altformavailField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<appraisal> appraisal {
            get {
                if ((this.appraisalField == null)) {
                    this.appraisalField = new XTypedList<appraisal>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"));
                }
                return this.appraisalField;
            }
            set {
                if ((value == null)) {
                    this.appraisalField = null;
                }
                else {
                    if ((this.appraisalField == null)) {
                        this.appraisalField = XTypedList<appraisal>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<appraisal>(this.appraisalField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<arrangement> arrangement {
            get {
                if ((this.arrangementField == null)) {
                    this.arrangementField = new XTypedList<arrangement>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"));
                }
                return this.arrangementField;
            }
            set {
                if ((value == null)) {
                    this.arrangementField = null;
                }
                else {
                    if ((this.arrangementField == null)) {
                        this.arrangementField = XTypedList<arrangement>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<arrangement>(this.arrangementField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<bibliography> bibliography {
            get {
                if ((this.bibliographyField == null)) {
                    this.bibliographyField = new XTypedList<bibliography>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"));
                }
                return this.bibliographyField;
            }
            set {
                if ((value == null)) {
                    this.bibliographyField = null;
                }
                else {
                    if ((this.bibliographyField == null)) {
                        this.bibliographyField = XTypedList<bibliography>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibliography>(this.bibliographyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<bioghist> bioghist {
            get {
                if ((this.bioghistField == null)) {
                    this.bioghistField = new XTypedList<bioghist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"));
                }
                return this.bioghistField;
            }
            set {
                if ((value == null)) {
                    this.bioghistField = null;
                }
                else {
                    if ((this.bioghistField == null)) {
                        this.bioghistField = XTypedList<bioghist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bioghist>(this.bioghistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<controlaccess> controlaccess {
            get {
                if ((this.controlaccessField == null)) {
                    this.controlaccessField = new XTypedList<controlaccess>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"));
                }
                return this.controlaccessField;
            }
            set {
                if ((value == null)) {
                    this.controlaccessField = null;
                }
                else {
                    if ((this.controlaccessField == null)) {
                        this.controlaccessField = XTypedList<controlaccess>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<controlaccess>(this.controlaccessField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<custodhist> custodhist {
            get {
                if ((this.custodhistField == null)) {
                    this.custodhistField = new XTypedList<custodhist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"));
                }
                return this.custodhistField;
            }
            set {
                if ((value == null)) {
                    this.custodhistField = null;
                }
                else {
                    if ((this.custodhistField == null)) {
                        this.custodhistField = XTypedList<custodhist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<custodhist>(this.custodhistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<descgrp> descgrp {
            get {
                if ((this.descgrpField == null)) {
                    this.descgrpField = new XTypedList<descgrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"));
                }
                return this.descgrpField;
            }
            set {
                if ((value == null)) {
                    this.descgrpField = null;
                }
                else {
                    if ((this.descgrpField == null)) {
                        this.descgrpField = XTypedList<descgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<descgrp>(this.descgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<fileplan> fileplan {
            get {
                if ((this.fileplanField == null)) {
                    this.fileplanField = new XTypedList<fileplan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"));
                }
                return this.fileplanField;
            }
            set {
                if ((value == null)) {
                    this.fileplanField = null;
                }
                else {
                    if ((this.fileplanField == null)) {
                        this.fileplanField = XTypedList<fileplan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<fileplan>(this.fileplanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<index> index {
            get {
                if ((this.indexField == null)) {
                    this.indexField = new XTypedList<index>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"));
                }
                return this.indexField;
            }
            set {
                if ((value == null)) {
                    this.indexField = null;
                }
                else {
                    if ((this.indexField == null)) {
                        this.indexField = XTypedList<index>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<index>(this.indexField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<odd> odd {
            get {
                if ((this.oddField == null)) {
                    this.oddField = new XTypedList<odd>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"));
                }
                return this.oddField;
            }
            set {
                if ((value == null)) {
                    this.oddField = null;
                }
                else {
                    if ((this.oddField == null)) {
                        this.oddField = XTypedList<odd>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<odd>(this.oddField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<originalsloc> originalsloc {
            get {
                if ((this.originalslocField == null)) {
                    this.originalslocField = new XTypedList<originalsloc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"));
                }
                return this.originalslocField;
            }
            set {
                if ((value == null)) {
                    this.originalslocField = null;
                }
                else {
                    if ((this.originalslocField == null)) {
                        this.originalslocField = XTypedList<originalsloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<originalsloc>(this.originalslocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<otherfindaid> otherfindaid {
            get {
                if ((this.otherfindaidField == null)) {
                    this.otherfindaidField = new XTypedList<otherfindaid>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"));
                }
                return this.otherfindaidField;
            }
            set {
                if ((value == null)) {
                    this.otherfindaidField = null;
                }
                else {
                    if ((this.otherfindaidField == null)) {
                        this.otherfindaidField = XTypedList<otherfindaid>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<otherfindaid>(this.otherfindaidField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<phystech> phystech {
            get {
                if ((this.phystechField == null)) {
                    this.phystechField = new XTypedList<phystech>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"));
                }
                return this.phystechField;
            }
            set {
                if ((value == null)) {
                    this.phystechField = null;
                }
                else {
                    if ((this.phystechField == null)) {
                        this.phystechField = XTypedList<phystech>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<phystech>(this.phystechField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<prefercite> prefercite {
            get {
                if ((this.preferciteField == null)) {
                    this.preferciteField = new XTypedList<prefercite>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"));
                }
                return this.preferciteField;
            }
            set {
                if ((value == null)) {
                    this.preferciteField = null;
                }
                else {
                    if ((this.preferciteField == null)) {
                        this.preferciteField = XTypedList<prefercite>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<prefercite>(this.preferciteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<processinfo> processinfo {
            get {
                if ((this.processinfoField == null)) {
                    this.processinfoField = new XTypedList<processinfo>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"));
                }
                return this.processinfoField;
            }
            set {
                if ((value == null)) {
                    this.processinfoField = null;
                }
                else {
                    if ((this.processinfoField == null)) {
                        this.processinfoField = XTypedList<processinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<processinfo>(this.processinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<relatedmaterial> relatedmaterial {
            get {
                if ((this.relatedmaterialField == null)) {
                    this.relatedmaterialField = new XTypedList<relatedmaterial>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"));
                }
                return this.relatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.relatedmaterialField = null;
                }
                else {
                    if ((this.relatedmaterialField == null)) {
                        this.relatedmaterialField = XTypedList<relatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<relatedmaterial>(this.relatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<scopecontent> scopecontent {
            get {
                if ((this.scopecontentField == null)) {
                    this.scopecontentField = new XTypedList<scopecontent>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"));
                }
                return this.scopecontentField;
            }
            set {
                if ((value == null)) {
                    this.scopecontentField = null;
                }
                else {
                    if ((this.scopecontentField == null)) {
                        this.scopecontentField = XTypedList<scopecontent>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<scopecontent>(this.scopecontentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<separatedmaterial> separatedmaterial {
            get {
                if ((this.separatedmaterialField == null)) {
                    this.separatedmaterialField = new XTypedList<separatedmaterial>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"));
                }
                return this.separatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.separatedmaterialField = null;
                }
                else {
                    if ((this.separatedmaterialField == null)) {
                        this.separatedmaterialField = XTypedList<separatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<separatedmaterial>(this.separatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<userestrict> userestrict {
            get {
                if ((this.userestrictField == null)) {
                    this.userestrictField = new XTypedList<userestrict>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"));
                }
                return this.userestrictField;
            }
            set {
                if ((value == null)) {
                    this.userestrictField = null;
                }
                else {
                    if ((this.userestrictField == null)) {
                        this.userestrictField = XTypedList<userestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<userestrict>(this.userestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<dsc> dsc {
            get {
                if ((this.dscField == null)) {
                    this.dscField = new XTypedList<dsc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"));
                }
                return this.dscField;
            }
            set {
                if ((value == null)) {
                    this.dscField = null;
                }
                else {
                    if ((this.dscField == null)) {
                        this.dscField = XTypedList<dsc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<dsc>(this.dscField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<dao> dao {
            get {
                if ((this.daoField == null)) {
                    this.daoField = new XTypedList<dao>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"));
                }
                return this.daoField;
            }
            set {
                if ((value == null)) {
                    this.daoField = null;
                }
                else {
                    if ((this.daoField == null)) {
                        this.daoField = XTypedList<dao>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<dao>(this.daoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<daogrp> daogrp {
            get {
                if ((this.daogrpField == null)) {
                    this.daogrpField = new XTypedList<daogrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"));
                }
                return this.daogrpField;
            }
            set {
                if ((value == null)) {
                    this.daogrpField = null;
                }
                else {
                    if ((this.daogrpField == null)) {
                        this.daogrpField = XTypedList<daogrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<daogrp>(this.daogrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<thead> thead {
            get {
                if ((this.theadField == null)) {
                    this.theadField = new XTypedList<thead>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9"));
                }
                return this.theadField;
            }
            set {
                if ((value == null)) {
                    this.theadField = null;
                }
                else {
                    if ((this.theadField == null)) {
                        this.theadField = XTypedList<thead>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<thead>(this.theadField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<c04> c04 {
            get {
                if ((this.c04Field == null)) {
                    this.c04Field = new XTypedList<c04>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("c04", "urn:isbn:1-931666-22-9"));
                }
                return this.c04Field;
            }
            set {
                if ((value == null)) {
                    this.c04Field = null;
                }
                else {
                    if ((this.c04Field == null)) {
                        this.c04Field = XTypedList<c04>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("c04", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<c04>(this.c04Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string level {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("level", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("level", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string otherlevel {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("otherlevel", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("otherlevel", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string tpattern {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("tpattern", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("tpattern", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("c03", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<c03>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), typeof(head));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9"), typeof(did));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"), typeof(accessrestrict));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"), typeof(accruals));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"), typeof(acqinfo));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"), typeof(altformavail));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"), typeof(appraisal));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"), typeof(arrangement));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"), typeof(bibliography));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"), typeof(bioghist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"), typeof(controlaccess));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"), typeof(custodhist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"), typeof(descgrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"), typeof(fileplan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"), typeof(index));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"), typeof(odd));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"), typeof(originalsloc));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"), typeof(otherfindaid));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"), typeof(phystech));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"), typeof(prefercite));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"), typeof(processinfo));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"), typeof(relatedmaterial));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"), typeof(scopecontent));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"), typeof(separatedmaterial));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"), typeof(userestrict));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"), typeof(dsc));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"), typeof(dao));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"), typeof(daogrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9"), typeof(thead));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("c04", "urn:isbn:1-931666-22-9"), typeof(c04));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
    /// </para>
    /// </summary>
    public partial class c04 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accessrestrict> accessrestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accruals> accrualsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<acqinfo> acqinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<altformavail> altformavailField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<appraisal> appraisalField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<arrangement> arrangementField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibliography> bibliographyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bioghist> bioghistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<controlaccess> controlaccessField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<custodhist> custodhistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<descgrp> descgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<fileplan> fileplanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<index> indexField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<odd> oddField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<originalsloc> originalslocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<otherfindaid> otherfindaidField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phystech> phystechField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<prefercite> preferciteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<processinfo> processinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<relatedmaterial> relatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<scopecontent> scopecontentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<separatedmaterial> separatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<userestrict> userestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dsc> dscField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dao> daoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<daogrp> daogrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<thead> theadField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<c05> c05Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator c04(XElement xe) { return XTypedServices.ToXTypedElement<c04>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static c04() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public c04() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"));
                return ((head)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual did did {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9"));
                return ((did)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<accessrestrict> accessrestrict {
            get {
                if ((this.accessrestrictField == null)) {
                    this.accessrestrictField = new XTypedList<accessrestrict>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"));
                }
                return this.accessrestrictField;
            }
            set {
                if ((value == null)) {
                    this.accessrestrictField = null;
                }
                else {
                    if ((this.accessrestrictField == null)) {
                        this.accessrestrictField = XTypedList<accessrestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<accessrestrict>(this.accessrestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<accruals> accruals {
            get {
                if ((this.accrualsField == null)) {
                    this.accrualsField = new XTypedList<accruals>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"));
                }
                return this.accrualsField;
            }
            set {
                if ((value == null)) {
                    this.accrualsField = null;
                }
                else {
                    if ((this.accrualsField == null)) {
                        this.accrualsField = XTypedList<accruals>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<accruals>(this.accrualsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<acqinfo> acqinfo {
            get {
                if ((this.acqinfoField == null)) {
                    this.acqinfoField = new XTypedList<acqinfo>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"));
                }
                return this.acqinfoField;
            }
            set {
                if ((value == null)) {
                    this.acqinfoField = null;
                }
                else {
                    if ((this.acqinfoField == null)) {
                        this.acqinfoField = XTypedList<acqinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<acqinfo>(this.acqinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<altformavail> altformavail {
            get {
                if ((this.altformavailField == null)) {
                    this.altformavailField = new XTypedList<altformavail>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"));
                }
                return this.altformavailField;
            }
            set {
                if ((value == null)) {
                    this.altformavailField = null;
                }
                else {
                    if ((this.altformavailField == null)) {
                        this.altformavailField = XTypedList<altformavail>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<altformavail>(this.altformavailField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<appraisal> appraisal {
            get {
                if ((this.appraisalField == null)) {
                    this.appraisalField = new XTypedList<appraisal>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"));
                }
                return this.appraisalField;
            }
            set {
                if ((value == null)) {
                    this.appraisalField = null;
                }
                else {
                    if ((this.appraisalField == null)) {
                        this.appraisalField = XTypedList<appraisal>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<appraisal>(this.appraisalField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<arrangement> arrangement {
            get {
                if ((this.arrangementField == null)) {
                    this.arrangementField = new XTypedList<arrangement>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"));
                }
                return this.arrangementField;
            }
            set {
                if ((value == null)) {
                    this.arrangementField = null;
                }
                else {
                    if ((this.arrangementField == null)) {
                        this.arrangementField = XTypedList<arrangement>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<arrangement>(this.arrangementField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<bibliography> bibliography {
            get {
                if ((this.bibliographyField == null)) {
                    this.bibliographyField = new XTypedList<bibliography>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"));
                }
                return this.bibliographyField;
            }
            set {
                if ((value == null)) {
                    this.bibliographyField = null;
                }
                else {
                    if ((this.bibliographyField == null)) {
                        this.bibliographyField = XTypedList<bibliography>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibliography>(this.bibliographyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<bioghist> bioghist {
            get {
                if ((this.bioghistField == null)) {
                    this.bioghistField = new XTypedList<bioghist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"));
                }
                return this.bioghistField;
            }
            set {
                if ((value == null)) {
                    this.bioghistField = null;
                }
                else {
                    if ((this.bioghistField == null)) {
                        this.bioghistField = XTypedList<bioghist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bioghist>(this.bioghistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<controlaccess> controlaccess {
            get {
                if ((this.controlaccessField == null)) {
                    this.controlaccessField = new XTypedList<controlaccess>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"));
                }
                return this.controlaccessField;
            }
            set {
                if ((value == null)) {
                    this.controlaccessField = null;
                }
                else {
                    if ((this.controlaccessField == null)) {
                        this.controlaccessField = XTypedList<controlaccess>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<controlaccess>(this.controlaccessField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<custodhist> custodhist {
            get {
                if ((this.custodhistField == null)) {
                    this.custodhistField = new XTypedList<custodhist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"));
                }
                return this.custodhistField;
            }
            set {
                if ((value == null)) {
                    this.custodhistField = null;
                }
                else {
                    if ((this.custodhistField == null)) {
                        this.custodhistField = XTypedList<custodhist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<custodhist>(this.custodhistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<descgrp> descgrp {
            get {
                if ((this.descgrpField == null)) {
                    this.descgrpField = new XTypedList<descgrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"));
                }
                return this.descgrpField;
            }
            set {
                if ((value == null)) {
                    this.descgrpField = null;
                }
                else {
                    if ((this.descgrpField == null)) {
                        this.descgrpField = XTypedList<descgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<descgrp>(this.descgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<fileplan> fileplan {
            get {
                if ((this.fileplanField == null)) {
                    this.fileplanField = new XTypedList<fileplan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"));
                }
                return this.fileplanField;
            }
            set {
                if ((value == null)) {
                    this.fileplanField = null;
                }
                else {
                    if ((this.fileplanField == null)) {
                        this.fileplanField = XTypedList<fileplan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<fileplan>(this.fileplanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<index> index {
            get {
                if ((this.indexField == null)) {
                    this.indexField = new XTypedList<index>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"));
                }
                return this.indexField;
            }
            set {
                if ((value == null)) {
                    this.indexField = null;
                }
                else {
                    if ((this.indexField == null)) {
                        this.indexField = XTypedList<index>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<index>(this.indexField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<odd> odd {
            get {
                if ((this.oddField == null)) {
                    this.oddField = new XTypedList<odd>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"));
                }
                return this.oddField;
            }
            set {
                if ((value == null)) {
                    this.oddField = null;
                }
                else {
                    if ((this.oddField == null)) {
                        this.oddField = XTypedList<odd>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<odd>(this.oddField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<originalsloc> originalsloc {
            get {
                if ((this.originalslocField == null)) {
                    this.originalslocField = new XTypedList<originalsloc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"));
                }
                return this.originalslocField;
            }
            set {
                if ((value == null)) {
                    this.originalslocField = null;
                }
                else {
                    if ((this.originalslocField == null)) {
                        this.originalslocField = XTypedList<originalsloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<originalsloc>(this.originalslocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<otherfindaid> otherfindaid {
            get {
                if ((this.otherfindaidField == null)) {
                    this.otherfindaidField = new XTypedList<otherfindaid>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"));
                }
                return this.otherfindaidField;
            }
            set {
                if ((value == null)) {
                    this.otherfindaidField = null;
                }
                else {
                    if ((this.otherfindaidField == null)) {
                        this.otherfindaidField = XTypedList<otherfindaid>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<otherfindaid>(this.otherfindaidField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<phystech> phystech {
            get {
                if ((this.phystechField == null)) {
                    this.phystechField = new XTypedList<phystech>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"));
                }
                return this.phystechField;
            }
            set {
                if ((value == null)) {
                    this.phystechField = null;
                }
                else {
                    if ((this.phystechField == null)) {
                        this.phystechField = XTypedList<phystech>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<phystech>(this.phystechField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<prefercite> prefercite {
            get {
                if ((this.preferciteField == null)) {
                    this.preferciteField = new XTypedList<prefercite>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"));
                }
                return this.preferciteField;
            }
            set {
                if ((value == null)) {
                    this.preferciteField = null;
                }
                else {
                    if ((this.preferciteField == null)) {
                        this.preferciteField = XTypedList<prefercite>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<prefercite>(this.preferciteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<processinfo> processinfo {
            get {
                if ((this.processinfoField == null)) {
                    this.processinfoField = new XTypedList<processinfo>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"));
                }
                return this.processinfoField;
            }
            set {
                if ((value == null)) {
                    this.processinfoField = null;
                }
                else {
                    if ((this.processinfoField == null)) {
                        this.processinfoField = XTypedList<processinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<processinfo>(this.processinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<relatedmaterial> relatedmaterial {
            get {
                if ((this.relatedmaterialField == null)) {
                    this.relatedmaterialField = new XTypedList<relatedmaterial>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"));
                }
                return this.relatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.relatedmaterialField = null;
                }
                else {
                    if ((this.relatedmaterialField == null)) {
                        this.relatedmaterialField = XTypedList<relatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<relatedmaterial>(this.relatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<scopecontent> scopecontent {
            get {
                if ((this.scopecontentField == null)) {
                    this.scopecontentField = new XTypedList<scopecontent>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"));
                }
                return this.scopecontentField;
            }
            set {
                if ((value == null)) {
                    this.scopecontentField = null;
                }
                else {
                    if ((this.scopecontentField == null)) {
                        this.scopecontentField = XTypedList<scopecontent>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<scopecontent>(this.scopecontentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<separatedmaterial> separatedmaterial {
            get {
                if ((this.separatedmaterialField == null)) {
                    this.separatedmaterialField = new XTypedList<separatedmaterial>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"));
                }
                return this.separatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.separatedmaterialField = null;
                }
                else {
                    if ((this.separatedmaterialField == null)) {
                        this.separatedmaterialField = XTypedList<separatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<separatedmaterial>(this.separatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<userestrict> userestrict {
            get {
                if ((this.userestrictField == null)) {
                    this.userestrictField = new XTypedList<userestrict>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"));
                }
                return this.userestrictField;
            }
            set {
                if ((value == null)) {
                    this.userestrictField = null;
                }
                else {
                    if ((this.userestrictField == null)) {
                        this.userestrictField = XTypedList<userestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<userestrict>(this.userestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<dsc> dsc {
            get {
                if ((this.dscField == null)) {
                    this.dscField = new XTypedList<dsc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"));
                }
                return this.dscField;
            }
            set {
                if ((value == null)) {
                    this.dscField = null;
                }
                else {
                    if ((this.dscField == null)) {
                        this.dscField = XTypedList<dsc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<dsc>(this.dscField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<dao> dao {
            get {
                if ((this.daoField == null)) {
                    this.daoField = new XTypedList<dao>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"));
                }
                return this.daoField;
            }
            set {
                if ((value == null)) {
                    this.daoField = null;
                }
                else {
                    if ((this.daoField == null)) {
                        this.daoField = XTypedList<dao>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<dao>(this.daoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<daogrp> daogrp {
            get {
                if ((this.daogrpField == null)) {
                    this.daogrpField = new XTypedList<daogrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"));
                }
                return this.daogrpField;
            }
            set {
                if ((value == null)) {
                    this.daogrpField = null;
                }
                else {
                    if ((this.daogrpField == null)) {
                        this.daogrpField = XTypedList<daogrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<daogrp>(this.daogrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<thead> thead {
            get {
                if ((this.theadField == null)) {
                    this.theadField = new XTypedList<thead>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9"));
                }
                return this.theadField;
            }
            set {
                if ((value == null)) {
                    this.theadField = null;
                }
                else {
                    if ((this.theadField == null)) {
                        this.theadField = XTypedList<thead>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<thead>(this.theadField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<c05> c05 {
            get {
                if ((this.c05Field == null)) {
                    this.c05Field = new XTypedList<c05>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("c05", "urn:isbn:1-931666-22-9"));
                }
                return this.c05Field;
            }
            set {
                if ((value == null)) {
                    this.c05Field = null;
                }
                else {
                    if ((this.c05Field == null)) {
                        this.c05Field = XTypedList<c05>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("c05", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<c05>(this.c05Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string level {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("level", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("level", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string otherlevel {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("otherlevel", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("otherlevel", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string tpattern {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("tpattern", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("tpattern", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("c04", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<c04>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), typeof(head));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9"), typeof(did));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"), typeof(accessrestrict));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"), typeof(accruals));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"), typeof(acqinfo));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"), typeof(altformavail));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"), typeof(appraisal));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"), typeof(arrangement));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"), typeof(bibliography));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"), typeof(bioghist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"), typeof(controlaccess));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"), typeof(custodhist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"), typeof(descgrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"), typeof(fileplan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"), typeof(index));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"), typeof(odd));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"), typeof(originalsloc));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"), typeof(otherfindaid));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"), typeof(phystech));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"), typeof(prefercite));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"), typeof(processinfo));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"), typeof(relatedmaterial));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"), typeof(scopecontent));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"), typeof(separatedmaterial));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"), typeof(userestrict));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"), typeof(dsc));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"), typeof(dao));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"), typeof(daogrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9"), typeof(thead));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("c05", "urn:isbn:1-931666-22-9"), typeof(c05));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
    /// </para>
    /// </summary>
    public partial class c05 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accessrestrict> accessrestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accruals> accrualsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<acqinfo> acqinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<altformavail> altformavailField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<appraisal> appraisalField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<arrangement> arrangementField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibliography> bibliographyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bioghist> bioghistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<controlaccess> controlaccessField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<custodhist> custodhistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<descgrp> descgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<fileplan> fileplanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<index> indexField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<odd> oddField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<originalsloc> originalslocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<otherfindaid> otherfindaidField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phystech> phystechField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<prefercite> preferciteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<processinfo> processinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<relatedmaterial> relatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<scopecontent> scopecontentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<separatedmaterial> separatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<userestrict> userestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dsc> dscField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dao> daoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<daogrp> daogrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<thead> theadField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<c06> c06Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator c05(XElement xe) { return XTypedServices.ToXTypedElement<c05>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static c05() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public c05() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"));
                return ((head)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual did did {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9"));
                return ((did)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<accessrestrict> accessrestrict {
            get {
                if ((this.accessrestrictField == null)) {
                    this.accessrestrictField = new XTypedList<accessrestrict>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"));
                }
                return this.accessrestrictField;
            }
            set {
                if ((value == null)) {
                    this.accessrestrictField = null;
                }
                else {
                    if ((this.accessrestrictField == null)) {
                        this.accessrestrictField = XTypedList<accessrestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<accessrestrict>(this.accessrestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<accruals> accruals {
            get {
                if ((this.accrualsField == null)) {
                    this.accrualsField = new XTypedList<accruals>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"));
                }
                return this.accrualsField;
            }
            set {
                if ((value == null)) {
                    this.accrualsField = null;
                }
                else {
                    if ((this.accrualsField == null)) {
                        this.accrualsField = XTypedList<accruals>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<accruals>(this.accrualsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<acqinfo> acqinfo {
            get {
                if ((this.acqinfoField == null)) {
                    this.acqinfoField = new XTypedList<acqinfo>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"));
                }
                return this.acqinfoField;
            }
            set {
                if ((value == null)) {
                    this.acqinfoField = null;
                }
                else {
                    if ((this.acqinfoField == null)) {
                        this.acqinfoField = XTypedList<acqinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<acqinfo>(this.acqinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<altformavail> altformavail {
            get {
                if ((this.altformavailField == null)) {
                    this.altformavailField = new XTypedList<altformavail>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"));
                }
                return this.altformavailField;
            }
            set {
                if ((value == null)) {
                    this.altformavailField = null;
                }
                else {
                    if ((this.altformavailField == null)) {
                        this.altformavailField = XTypedList<altformavail>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<altformavail>(this.altformavailField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<appraisal> appraisal {
            get {
                if ((this.appraisalField == null)) {
                    this.appraisalField = new XTypedList<appraisal>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"));
                }
                return this.appraisalField;
            }
            set {
                if ((value == null)) {
                    this.appraisalField = null;
                }
                else {
                    if ((this.appraisalField == null)) {
                        this.appraisalField = XTypedList<appraisal>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<appraisal>(this.appraisalField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<arrangement> arrangement {
            get {
                if ((this.arrangementField == null)) {
                    this.arrangementField = new XTypedList<arrangement>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"));
                }
                return this.arrangementField;
            }
            set {
                if ((value == null)) {
                    this.arrangementField = null;
                }
                else {
                    if ((this.arrangementField == null)) {
                        this.arrangementField = XTypedList<arrangement>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<arrangement>(this.arrangementField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<bibliography> bibliography {
            get {
                if ((this.bibliographyField == null)) {
                    this.bibliographyField = new XTypedList<bibliography>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"));
                }
                return this.bibliographyField;
            }
            set {
                if ((value == null)) {
                    this.bibliographyField = null;
                }
                else {
                    if ((this.bibliographyField == null)) {
                        this.bibliographyField = XTypedList<bibliography>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibliography>(this.bibliographyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<bioghist> bioghist {
            get {
                if ((this.bioghistField == null)) {
                    this.bioghistField = new XTypedList<bioghist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"));
                }
                return this.bioghistField;
            }
            set {
                if ((value == null)) {
                    this.bioghistField = null;
                }
                else {
                    if ((this.bioghistField == null)) {
                        this.bioghistField = XTypedList<bioghist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bioghist>(this.bioghistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<controlaccess> controlaccess {
            get {
                if ((this.controlaccessField == null)) {
                    this.controlaccessField = new XTypedList<controlaccess>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"));
                }
                return this.controlaccessField;
            }
            set {
                if ((value == null)) {
                    this.controlaccessField = null;
                }
                else {
                    if ((this.controlaccessField == null)) {
                        this.controlaccessField = XTypedList<controlaccess>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<controlaccess>(this.controlaccessField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<custodhist> custodhist {
            get {
                if ((this.custodhistField == null)) {
                    this.custodhistField = new XTypedList<custodhist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"));
                }
                return this.custodhistField;
            }
            set {
                if ((value == null)) {
                    this.custodhistField = null;
                }
                else {
                    if ((this.custodhistField == null)) {
                        this.custodhistField = XTypedList<custodhist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<custodhist>(this.custodhistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<descgrp> descgrp {
            get {
                if ((this.descgrpField == null)) {
                    this.descgrpField = new XTypedList<descgrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"));
                }
                return this.descgrpField;
            }
            set {
                if ((value == null)) {
                    this.descgrpField = null;
                }
                else {
                    if ((this.descgrpField == null)) {
                        this.descgrpField = XTypedList<descgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<descgrp>(this.descgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<fileplan> fileplan {
            get {
                if ((this.fileplanField == null)) {
                    this.fileplanField = new XTypedList<fileplan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"));
                }
                return this.fileplanField;
            }
            set {
                if ((value == null)) {
                    this.fileplanField = null;
                }
                else {
                    if ((this.fileplanField == null)) {
                        this.fileplanField = XTypedList<fileplan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<fileplan>(this.fileplanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<index> index {
            get {
                if ((this.indexField == null)) {
                    this.indexField = new XTypedList<index>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"));
                }
                return this.indexField;
            }
            set {
                if ((value == null)) {
                    this.indexField = null;
                }
                else {
                    if ((this.indexField == null)) {
                        this.indexField = XTypedList<index>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<index>(this.indexField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<odd> odd {
            get {
                if ((this.oddField == null)) {
                    this.oddField = new XTypedList<odd>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"));
                }
                return this.oddField;
            }
            set {
                if ((value == null)) {
                    this.oddField = null;
                }
                else {
                    if ((this.oddField == null)) {
                        this.oddField = XTypedList<odd>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<odd>(this.oddField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<originalsloc> originalsloc {
            get {
                if ((this.originalslocField == null)) {
                    this.originalslocField = new XTypedList<originalsloc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"));
                }
                return this.originalslocField;
            }
            set {
                if ((value == null)) {
                    this.originalslocField = null;
                }
                else {
                    if ((this.originalslocField == null)) {
                        this.originalslocField = XTypedList<originalsloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<originalsloc>(this.originalslocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<otherfindaid> otherfindaid {
            get {
                if ((this.otherfindaidField == null)) {
                    this.otherfindaidField = new XTypedList<otherfindaid>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"));
                }
                return this.otherfindaidField;
            }
            set {
                if ((value == null)) {
                    this.otherfindaidField = null;
                }
                else {
                    if ((this.otherfindaidField == null)) {
                        this.otherfindaidField = XTypedList<otherfindaid>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<otherfindaid>(this.otherfindaidField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<phystech> phystech {
            get {
                if ((this.phystechField == null)) {
                    this.phystechField = new XTypedList<phystech>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"));
                }
                return this.phystechField;
            }
            set {
                if ((value == null)) {
                    this.phystechField = null;
                }
                else {
                    if ((this.phystechField == null)) {
                        this.phystechField = XTypedList<phystech>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<phystech>(this.phystechField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<prefercite> prefercite {
            get {
                if ((this.preferciteField == null)) {
                    this.preferciteField = new XTypedList<prefercite>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"));
                }
                return this.preferciteField;
            }
            set {
                if ((value == null)) {
                    this.preferciteField = null;
                }
                else {
                    if ((this.preferciteField == null)) {
                        this.preferciteField = XTypedList<prefercite>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<prefercite>(this.preferciteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<processinfo> processinfo {
            get {
                if ((this.processinfoField == null)) {
                    this.processinfoField = new XTypedList<processinfo>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"));
                }
                return this.processinfoField;
            }
            set {
                if ((value == null)) {
                    this.processinfoField = null;
                }
                else {
                    if ((this.processinfoField == null)) {
                        this.processinfoField = XTypedList<processinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<processinfo>(this.processinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<relatedmaterial> relatedmaterial {
            get {
                if ((this.relatedmaterialField == null)) {
                    this.relatedmaterialField = new XTypedList<relatedmaterial>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"));
                }
                return this.relatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.relatedmaterialField = null;
                }
                else {
                    if ((this.relatedmaterialField == null)) {
                        this.relatedmaterialField = XTypedList<relatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<relatedmaterial>(this.relatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<scopecontent> scopecontent {
            get {
                if ((this.scopecontentField == null)) {
                    this.scopecontentField = new XTypedList<scopecontent>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"));
                }
                return this.scopecontentField;
            }
            set {
                if ((value == null)) {
                    this.scopecontentField = null;
                }
                else {
                    if ((this.scopecontentField == null)) {
                        this.scopecontentField = XTypedList<scopecontent>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<scopecontent>(this.scopecontentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<separatedmaterial> separatedmaterial {
            get {
                if ((this.separatedmaterialField == null)) {
                    this.separatedmaterialField = new XTypedList<separatedmaterial>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"));
                }
                return this.separatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.separatedmaterialField = null;
                }
                else {
                    if ((this.separatedmaterialField == null)) {
                        this.separatedmaterialField = XTypedList<separatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<separatedmaterial>(this.separatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<userestrict> userestrict {
            get {
                if ((this.userestrictField == null)) {
                    this.userestrictField = new XTypedList<userestrict>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"));
                }
                return this.userestrictField;
            }
            set {
                if ((value == null)) {
                    this.userestrictField = null;
                }
                else {
                    if ((this.userestrictField == null)) {
                        this.userestrictField = XTypedList<userestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<userestrict>(this.userestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<dsc> dsc {
            get {
                if ((this.dscField == null)) {
                    this.dscField = new XTypedList<dsc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"));
                }
                return this.dscField;
            }
            set {
                if ((value == null)) {
                    this.dscField = null;
                }
                else {
                    if ((this.dscField == null)) {
                        this.dscField = XTypedList<dsc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<dsc>(this.dscField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<dao> dao {
            get {
                if ((this.daoField == null)) {
                    this.daoField = new XTypedList<dao>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"));
                }
                return this.daoField;
            }
            set {
                if ((value == null)) {
                    this.daoField = null;
                }
                else {
                    if ((this.daoField == null)) {
                        this.daoField = XTypedList<dao>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<dao>(this.daoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<daogrp> daogrp {
            get {
                if ((this.daogrpField == null)) {
                    this.daogrpField = new XTypedList<daogrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"));
                }
                return this.daogrpField;
            }
            set {
                if ((value == null)) {
                    this.daogrpField = null;
                }
                else {
                    if ((this.daogrpField == null)) {
                        this.daogrpField = XTypedList<daogrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<daogrp>(this.daogrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<thead> thead {
            get {
                if ((this.theadField == null)) {
                    this.theadField = new XTypedList<thead>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9"));
                }
                return this.theadField;
            }
            set {
                if ((value == null)) {
                    this.theadField = null;
                }
                else {
                    if ((this.theadField == null)) {
                        this.theadField = XTypedList<thead>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<thead>(this.theadField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<c06> c06 {
            get {
                if ((this.c06Field == null)) {
                    this.c06Field = new XTypedList<c06>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("c06", "urn:isbn:1-931666-22-9"));
                }
                return this.c06Field;
            }
            set {
                if ((value == null)) {
                    this.c06Field = null;
                }
                else {
                    if ((this.c06Field == null)) {
                        this.c06Field = XTypedList<c06>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("c06", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<c06>(this.c06Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string level {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("level", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("level", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string otherlevel {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("otherlevel", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("otherlevel", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string tpattern {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("tpattern", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("tpattern", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("c05", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<c05>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), typeof(head));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9"), typeof(did));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"), typeof(accessrestrict));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"), typeof(accruals));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"), typeof(acqinfo));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"), typeof(altformavail));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"), typeof(appraisal));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"), typeof(arrangement));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"), typeof(bibliography));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"), typeof(bioghist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"), typeof(controlaccess));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"), typeof(custodhist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"), typeof(descgrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"), typeof(fileplan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"), typeof(index));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"), typeof(odd));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"), typeof(originalsloc));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"), typeof(otherfindaid));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"), typeof(phystech));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"), typeof(prefercite));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"), typeof(processinfo));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"), typeof(relatedmaterial));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"), typeof(scopecontent));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"), typeof(separatedmaterial));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"), typeof(userestrict));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"), typeof(dsc));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"), typeof(dao));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"), typeof(daogrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9"), typeof(thead));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("c06", "urn:isbn:1-931666-22-9"), typeof(c06));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
    /// </para>
    /// </summary>
    public partial class c06 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accessrestrict> accessrestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accruals> accrualsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<acqinfo> acqinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<altformavail> altformavailField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<appraisal> appraisalField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<arrangement> arrangementField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibliography> bibliographyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bioghist> bioghistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<controlaccess> controlaccessField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<custodhist> custodhistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<descgrp> descgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<fileplan> fileplanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<index> indexField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<odd> oddField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<originalsloc> originalslocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<otherfindaid> otherfindaidField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phystech> phystechField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<prefercite> preferciteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<processinfo> processinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<relatedmaterial> relatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<scopecontent> scopecontentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<separatedmaterial> separatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<userestrict> userestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dsc> dscField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dao> daoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<daogrp> daogrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<thead> theadField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<c07> c07Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator c06(XElement xe) { return XTypedServices.ToXTypedElement<c06>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static c06() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public c06() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"));
                return ((head)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual did did {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9"));
                return ((did)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<accessrestrict> accessrestrict {
            get {
                if ((this.accessrestrictField == null)) {
                    this.accessrestrictField = new XTypedList<accessrestrict>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"));
                }
                return this.accessrestrictField;
            }
            set {
                if ((value == null)) {
                    this.accessrestrictField = null;
                }
                else {
                    if ((this.accessrestrictField == null)) {
                        this.accessrestrictField = XTypedList<accessrestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<accessrestrict>(this.accessrestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<accruals> accruals {
            get {
                if ((this.accrualsField == null)) {
                    this.accrualsField = new XTypedList<accruals>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"));
                }
                return this.accrualsField;
            }
            set {
                if ((value == null)) {
                    this.accrualsField = null;
                }
                else {
                    if ((this.accrualsField == null)) {
                        this.accrualsField = XTypedList<accruals>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<accruals>(this.accrualsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<acqinfo> acqinfo {
            get {
                if ((this.acqinfoField == null)) {
                    this.acqinfoField = new XTypedList<acqinfo>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"));
                }
                return this.acqinfoField;
            }
            set {
                if ((value == null)) {
                    this.acqinfoField = null;
                }
                else {
                    if ((this.acqinfoField == null)) {
                        this.acqinfoField = XTypedList<acqinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<acqinfo>(this.acqinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<altformavail> altformavail {
            get {
                if ((this.altformavailField == null)) {
                    this.altformavailField = new XTypedList<altformavail>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"));
                }
                return this.altformavailField;
            }
            set {
                if ((value == null)) {
                    this.altformavailField = null;
                }
                else {
                    if ((this.altformavailField == null)) {
                        this.altformavailField = XTypedList<altformavail>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<altformavail>(this.altformavailField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<appraisal> appraisal {
            get {
                if ((this.appraisalField == null)) {
                    this.appraisalField = new XTypedList<appraisal>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"));
                }
                return this.appraisalField;
            }
            set {
                if ((value == null)) {
                    this.appraisalField = null;
                }
                else {
                    if ((this.appraisalField == null)) {
                        this.appraisalField = XTypedList<appraisal>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<appraisal>(this.appraisalField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<arrangement> arrangement {
            get {
                if ((this.arrangementField == null)) {
                    this.arrangementField = new XTypedList<arrangement>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"));
                }
                return this.arrangementField;
            }
            set {
                if ((value == null)) {
                    this.arrangementField = null;
                }
                else {
                    if ((this.arrangementField == null)) {
                        this.arrangementField = XTypedList<arrangement>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<arrangement>(this.arrangementField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<bibliography> bibliography {
            get {
                if ((this.bibliographyField == null)) {
                    this.bibliographyField = new XTypedList<bibliography>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"));
                }
                return this.bibliographyField;
            }
            set {
                if ((value == null)) {
                    this.bibliographyField = null;
                }
                else {
                    if ((this.bibliographyField == null)) {
                        this.bibliographyField = XTypedList<bibliography>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibliography>(this.bibliographyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<bioghist> bioghist {
            get {
                if ((this.bioghistField == null)) {
                    this.bioghistField = new XTypedList<bioghist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"));
                }
                return this.bioghistField;
            }
            set {
                if ((value == null)) {
                    this.bioghistField = null;
                }
                else {
                    if ((this.bioghistField == null)) {
                        this.bioghistField = XTypedList<bioghist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bioghist>(this.bioghistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<controlaccess> controlaccess {
            get {
                if ((this.controlaccessField == null)) {
                    this.controlaccessField = new XTypedList<controlaccess>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"));
                }
                return this.controlaccessField;
            }
            set {
                if ((value == null)) {
                    this.controlaccessField = null;
                }
                else {
                    if ((this.controlaccessField == null)) {
                        this.controlaccessField = XTypedList<controlaccess>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<controlaccess>(this.controlaccessField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<custodhist> custodhist {
            get {
                if ((this.custodhistField == null)) {
                    this.custodhistField = new XTypedList<custodhist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"));
                }
                return this.custodhistField;
            }
            set {
                if ((value == null)) {
                    this.custodhistField = null;
                }
                else {
                    if ((this.custodhistField == null)) {
                        this.custodhistField = XTypedList<custodhist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<custodhist>(this.custodhistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<descgrp> descgrp {
            get {
                if ((this.descgrpField == null)) {
                    this.descgrpField = new XTypedList<descgrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"));
                }
                return this.descgrpField;
            }
            set {
                if ((value == null)) {
                    this.descgrpField = null;
                }
                else {
                    if ((this.descgrpField == null)) {
                        this.descgrpField = XTypedList<descgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<descgrp>(this.descgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<fileplan> fileplan {
            get {
                if ((this.fileplanField == null)) {
                    this.fileplanField = new XTypedList<fileplan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"));
                }
                return this.fileplanField;
            }
            set {
                if ((value == null)) {
                    this.fileplanField = null;
                }
                else {
                    if ((this.fileplanField == null)) {
                        this.fileplanField = XTypedList<fileplan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<fileplan>(this.fileplanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<index> index {
            get {
                if ((this.indexField == null)) {
                    this.indexField = new XTypedList<index>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"));
                }
                return this.indexField;
            }
            set {
                if ((value == null)) {
                    this.indexField = null;
                }
                else {
                    if ((this.indexField == null)) {
                        this.indexField = XTypedList<index>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<index>(this.indexField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<odd> odd {
            get {
                if ((this.oddField == null)) {
                    this.oddField = new XTypedList<odd>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"));
                }
                return this.oddField;
            }
            set {
                if ((value == null)) {
                    this.oddField = null;
                }
                else {
                    if ((this.oddField == null)) {
                        this.oddField = XTypedList<odd>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<odd>(this.oddField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<originalsloc> originalsloc {
            get {
                if ((this.originalslocField == null)) {
                    this.originalslocField = new XTypedList<originalsloc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"));
                }
                return this.originalslocField;
            }
            set {
                if ((value == null)) {
                    this.originalslocField = null;
                }
                else {
                    if ((this.originalslocField == null)) {
                        this.originalslocField = XTypedList<originalsloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<originalsloc>(this.originalslocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<otherfindaid> otherfindaid {
            get {
                if ((this.otherfindaidField == null)) {
                    this.otherfindaidField = new XTypedList<otherfindaid>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"));
                }
                return this.otherfindaidField;
            }
            set {
                if ((value == null)) {
                    this.otherfindaidField = null;
                }
                else {
                    if ((this.otherfindaidField == null)) {
                        this.otherfindaidField = XTypedList<otherfindaid>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<otherfindaid>(this.otherfindaidField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<phystech> phystech {
            get {
                if ((this.phystechField == null)) {
                    this.phystechField = new XTypedList<phystech>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"));
                }
                return this.phystechField;
            }
            set {
                if ((value == null)) {
                    this.phystechField = null;
                }
                else {
                    if ((this.phystechField == null)) {
                        this.phystechField = XTypedList<phystech>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<phystech>(this.phystechField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<prefercite> prefercite {
            get {
                if ((this.preferciteField == null)) {
                    this.preferciteField = new XTypedList<prefercite>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"));
                }
                return this.preferciteField;
            }
            set {
                if ((value == null)) {
                    this.preferciteField = null;
                }
                else {
                    if ((this.preferciteField == null)) {
                        this.preferciteField = XTypedList<prefercite>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<prefercite>(this.preferciteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<processinfo> processinfo {
            get {
                if ((this.processinfoField == null)) {
                    this.processinfoField = new XTypedList<processinfo>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"));
                }
                return this.processinfoField;
            }
            set {
                if ((value == null)) {
                    this.processinfoField = null;
                }
                else {
                    if ((this.processinfoField == null)) {
                        this.processinfoField = XTypedList<processinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<processinfo>(this.processinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<relatedmaterial> relatedmaterial {
            get {
                if ((this.relatedmaterialField == null)) {
                    this.relatedmaterialField = new XTypedList<relatedmaterial>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"));
                }
                return this.relatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.relatedmaterialField = null;
                }
                else {
                    if ((this.relatedmaterialField == null)) {
                        this.relatedmaterialField = XTypedList<relatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<relatedmaterial>(this.relatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<scopecontent> scopecontent {
            get {
                if ((this.scopecontentField == null)) {
                    this.scopecontentField = new XTypedList<scopecontent>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"));
                }
                return this.scopecontentField;
            }
            set {
                if ((value == null)) {
                    this.scopecontentField = null;
                }
                else {
                    if ((this.scopecontentField == null)) {
                        this.scopecontentField = XTypedList<scopecontent>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<scopecontent>(this.scopecontentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<separatedmaterial> separatedmaterial {
            get {
                if ((this.separatedmaterialField == null)) {
                    this.separatedmaterialField = new XTypedList<separatedmaterial>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"));
                }
                return this.separatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.separatedmaterialField = null;
                }
                else {
                    if ((this.separatedmaterialField == null)) {
                        this.separatedmaterialField = XTypedList<separatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<separatedmaterial>(this.separatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<userestrict> userestrict {
            get {
                if ((this.userestrictField == null)) {
                    this.userestrictField = new XTypedList<userestrict>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"));
                }
                return this.userestrictField;
            }
            set {
                if ((value == null)) {
                    this.userestrictField = null;
                }
                else {
                    if ((this.userestrictField == null)) {
                        this.userestrictField = XTypedList<userestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<userestrict>(this.userestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<dsc> dsc {
            get {
                if ((this.dscField == null)) {
                    this.dscField = new XTypedList<dsc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"));
                }
                return this.dscField;
            }
            set {
                if ((value == null)) {
                    this.dscField = null;
                }
                else {
                    if ((this.dscField == null)) {
                        this.dscField = XTypedList<dsc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<dsc>(this.dscField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<dao> dao {
            get {
                if ((this.daoField == null)) {
                    this.daoField = new XTypedList<dao>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"));
                }
                return this.daoField;
            }
            set {
                if ((value == null)) {
                    this.daoField = null;
                }
                else {
                    if ((this.daoField == null)) {
                        this.daoField = XTypedList<dao>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<dao>(this.daoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<daogrp> daogrp {
            get {
                if ((this.daogrpField == null)) {
                    this.daogrpField = new XTypedList<daogrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"));
                }
                return this.daogrpField;
            }
            set {
                if ((value == null)) {
                    this.daogrpField = null;
                }
                else {
                    if ((this.daogrpField == null)) {
                        this.daogrpField = XTypedList<daogrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<daogrp>(this.daogrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<thead> thead {
            get {
                if ((this.theadField == null)) {
                    this.theadField = new XTypedList<thead>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9"));
                }
                return this.theadField;
            }
            set {
                if ((value == null)) {
                    this.theadField = null;
                }
                else {
                    if ((this.theadField == null)) {
                        this.theadField = XTypedList<thead>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<thead>(this.theadField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<c07> c07 {
            get {
                if ((this.c07Field == null)) {
                    this.c07Field = new XTypedList<c07>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("c07", "urn:isbn:1-931666-22-9"));
                }
                return this.c07Field;
            }
            set {
                if ((value == null)) {
                    this.c07Field = null;
                }
                else {
                    if ((this.c07Field == null)) {
                        this.c07Field = XTypedList<c07>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("c07", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<c07>(this.c07Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string level {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("level", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("level", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string otherlevel {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("otherlevel", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("otherlevel", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string tpattern {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("tpattern", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("tpattern", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("c06", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<c06>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), typeof(head));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9"), typeof(did));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"), typeof(accessrestrict));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"), typeof(accruals));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"), typeof(acqinfo));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"), typeof(altformavail));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"), typeof(appraisal));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"), typeof(arrangement));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"), typeof(bibliography));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"), typeof(bioghist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"), typeof(controlaccess));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"), typeof(custodhist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"), typeof(descgrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"), typeof(fileplan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"), typeof(index));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"), typeof(odd));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"), typeof(originalsloc));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"), typeof(otherfindaid));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"), typeof(phystech));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"), typeof(prefercite));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"), typeof(processinfo));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"), typeof(relatedmaterial));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"), typeof(scopecontent));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"), typeof(separatedmaterial));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"), typeof(userestrict));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"), typeof(dsc));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"), typeof(dao));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"), typeof(daogrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9"), typeof(thead));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("c07", "urn:isbn:1-931666-22-9"), typeof(c07));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
    /// </para>
    /// </summary>
    public partial class c07 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accessrestrict> accessrestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accruals> accrualsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<acqinfo> acqinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<altformavail> altformavailField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<appraisal> appraisalField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<arrangement> arrangementField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibliography> bibliographyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bioghist> bioghistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<controlaccess> controlaccessField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<custodhist> custodhistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<descgrp> descgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<fileplan> fileplanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<index> indexField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<odd> oddField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<originalsloc> originalslocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<otherfindaid> otherfindaidField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phystech> phystechField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<prefercite> preferciteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<processinfo> processinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<relatedmaterial> relatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<scopecontent> scopecontentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<separatedmaterial> separatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<userestrict> userestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dsc> dscField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dao> daoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<daogrp> daogrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<thead> theadField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<c08> c08Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator c07(XElement xe) { return XTypedServices.ToXTypedElement<c07>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static c07() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public c07() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"));
                return ((head)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual did did {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9"));
                return ((did)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<accessrestrict> accessrestrict {
            get {
                if ((this.accessrestrictField == null)) {
                    this.accessrestrictField = new XTypedList<accessrestrict>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"));
                }
                return this.accessrestrictField;
            }
            set {
                if ((value == null)) {
                    this.accessrestrictField = null;
                }
                else {
                    if ((this.accessrestrictField == null)) {
                        this.accessrestrictField = XTypedList<accessrestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<accessrestrict>(this.accessrestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<accruals> accruals {
            get {
                if ((this.accrualsField == null)) {
                    this.accrualsField = new XTypedList<accruals>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"));
                }
                return this.accrualsField;
            }
            set {
                if ((value == null)) {
                    this.accrualsField = null;
                }
                else {
                    if ((this.accrualsField == null)) {
                        this.accrualsField = XTypedList<accruals>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<accruals>(this.accrualsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<acqinfo> acqinfo {
            get {
                if ((this.acqinfoField == null)) {
                    this.acqinfoField = new XTypedList<acqinfo>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"));
                }
                return this.acqinfoField;
            }
            set {
                if ((value == null)) {
                    this.acqinfoField = null;
                }
                else {
                    if ((this.acqinfoField == null)) {
                        this.acqinfoField = XTypedList<acqinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<acqinfo>(this.acqinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<altformavail> altformavail {
            get {
                if ((this.altformavailField == null)) {
                    this.altformavailField = new XTypedList<altformavail>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"));
                }
                return this.altformavailField;
            }
            set {
                if ((value == null)) {
                    this.altformavailField = null;
                }
                else {
                    if ((this.altformavailField == null)) {
                        this.altformavailField = XTypedList<altformavail>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<altformavail>(this.altformavailField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<appraisal> appraisal {
            get {
                if ((this.appraisalField == null)) {
                    this.appraisalField = new XTypedList<appraisal>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"));
                }
                return this.appraisalField;
            }
            set {
                if ((value == null)) {
                    this.appraisalField = null;
                }
                else {
                    if ((this.appraisalField == null)) {
                        this.appraisalField = XTypedList<appraisal>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<appraisal>(this.appraisalField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<arrangement> arrangement {
            get {
                if ((this.arrangementField == null)) {
                    this.arrangementField = new XTypedList<arrangement>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"));
                }
                return this.arrangementField;
            }
            set {
                if ((value == null)) {
                    this.arrangementField = null;
                }
                else {
                    if ((this.arrangementField == null)) {
                        this.arrangementField = XTypedList<arrangement>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<arrangement>(this.arrangementField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<bibliography> bibliography {
            get {
                if ((this.bibliographyField == null)) {
                    this.bibliographyField = new XTypedList<bibliography>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"));
                }
                return this.bibliographyField;
            }
            set {
                if ((value == null)) {
                    this.bibliographyField = null;
                }
                else {
                    if ((this.bibliographyField == null)) {
                        this.bibliographyField = XTypedList<bibliography>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibliography>(this.bibliographyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<bioghist> bioghist {
            get {
                if ((this.bioghistField == null)) {
                    this.bioghistField = new XTypedList<bioghist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"));
                }
                return this.bioghistField;
            }
            set {
                if ((value == null)) {
                    this.bioghistField = null;
                }
                else {
                    if ((this.bioghistField == null)) {
                        this.bioghistField = XTypedList<bioghist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bioghist>(this.bioghistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<controlaccess> controlaccess {
            get {
                if ((this.controlaccessField == null)) {
                    this.controlaccessField = new XTypedList<controlaccess>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"));
                }
                return this.controlaccessField;
            }
            set {
                if ((value == null)) {
                    this.controlaccessField = null;
                }
                else {
                    if ((this.controlaccessField == null)) {
                        this.controlaccessField = XTypedList<controlaccess>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<controlaccess>(this.controlaccessField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<custodhist> custodhist {
            get {
                if ((this.custodhistField == null)) {
                    this.custodhistField = new XTypedList<custodhist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"));
                }
                return this.custodhistField;
            }
            set {
                if ((value == null)) {
                    this.custodhistField = null;
                }
                else {
                    if ((this.custodhistField == null)) {
                        this.custodhistField = XTypedList<custodhist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<custodhist>(this.custodhistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<descgrp> descgrp {
            get {
                if ((this.descgrpField == null)) {
                    this.descgrpField = new XTypedList<descgrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"));
                }
                return this.descgrpField;
            }
            set {
                if ((value == null)) {
                    this.descgrpField = null;
                }
                else {
                    if ((this.descgrpField == null)) {
                        this.descgrpField = XTypedList<descgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<descgrp>(this.descgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<fileplan> fileplan {
            get {
                if ((this.fileplanField == null)) {
                    this.fileplanField = new XTypedList<fileplan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"));
                }
                return this.fileplanField;
            }
            set {
                if ((value == null)) {
                    this.fileplanField = null;
                }
                else {
                    if ((this.fileplanField == null)) {
                        this.fileplanField = XTypedList<fileplan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<fileplan>(this.fileplanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<index> index {
            get {
                if ((this.indexField == null)) {
                    this.indexField = new XTypedList<index>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"));
                }
                return this.indexField;
            }
            set {
                if ((value == null)) {
                    this.indexField = null;
                }
                else {
                    if ((this.indexField == null)) {
                        this.indexField = XTypedList<index>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<index>(this.indexField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<odd> odd {
            get {
                if ((this.oddField == null)) {
                    this.oddField = new XTypedList<odd>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"));
                }
                return this.oddField;
            }
            set {
                if ((value == null)) {
                    this.oddField = null;
                }
                else {
                    if ((this.oddField == null)) {
                        this.oddField = XTypedList<odd>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<odd>(this.oddField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<originalsloc> originalsloc {
            get {
                if ((this.originalslocField == null)) {
                    this.originalslocField = new XTypedList<originalsloc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"));
                }
                return this.originalslocField;
            }
            set {
                if ((value == null)) {
                    this.originalslocField = null;
                }
                else {
                    if ((this.originalslocField == null)) {
                        this.originalslocField = XTypedList<originalsloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<originalsloc>(this.originalslocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<otherfindaid> otherfindaid {
            get {
                if ((this.otherfindaidField == null)) {
                    this.otherfindaidField = new XTypedList<otherfindaid>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"));
                }
                return this.otherfindaidField;
            }
            set {
                if ((value == null)) {
                    this.otherfindaidField = null;
                }
                else {
                    if ((this.otherfindaidField == null)) {
                        this.otherfindaidField = XTypedList<otherfindaid>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<otherfindaid>(this.otherfindaidField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<phystech> phystech {
            get {
                if ((this.phystechField == null)) {
                    this.phystechField = new XTypedList<phystech>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"));
                }
                return this.phystechField;
            }
            set {
                if ((value == null)) {
                    this.phystechField = null;
                }
                else {
                    if ((this.phystechField == null)) {
                        this.phystechField = XTypedList<phystech>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<phystech>(this.phystechField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<prefercite> prefercite {
            get {
                if ((this.preferciteField == null)) {
                    this.preferciteField = new XTypedList<prefercite>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"));
                }
                return this.preferciteField;
            }
            set {
                if ((value == null)) {
                    this.preferciteField = null;
                }
                else {
                    if ((this.preferciteField == null)) {
                        this.preferciteField = XTypedList<prefercite>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<prefercite>(this.preferciteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<processinfo> processinfo {
            get {
                if ((this.processinfoField == null)) {
                    this.processinfoField = new XTypedList<processinfo>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"));
                }
                return this.processinfoField;
            }
            set {
                if ((value == null)) {
                    this.processinfoField = null;
                }
                else {
                    if ((this.processinfoField == null)) {
                        this.processinfoField = XTypedList<processinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<processinfo>(this.processinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<relatedmaterial> relatedmaterial {
            get {
                if ((this.relatedmaterialField == null)) {
                    this.relatedmaterialField = new XTypedList<relatedmaterial>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"));
                }
                return this.relatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.relatedmaterialField = null;
                }
                else {
                    if ((this.relatedmaterialField == null)) {
                        this.relatedmaterialField = XTypedList<relatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<relatedmaterial>(this.relatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<scopecontent> scopecontent {
            get {
                if ((this.scopecontentField == null)) {
                    this.scopecontentField = new XTypedList<scopecontent>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"));
                }
                return this.scopecontentField;
            }
            set {
                if ((value == null)) {
                    this.scopecontentField = null;
                }
                else {
                    if ((this.scopecontentField == null)) {
                        this.scopecontentField = XTypedList<scopecontent>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<scopecontent>(this.scopecontentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<separatedmaterial> separatedmaterial {
            get {
                if ((this.separatedmaterialField == null)) {
                    this.separatedmaterialField = new XTypedList<separatedmaterial>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"));
                }
                return this.separatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.separatedmaterialField = null;
                }
                else {
                    if ((this.separatedmaterialField == null)) {
                        this.separatedmaterialField = XTypedList<separatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<separatedmaterial>(this.separatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<userestrict> userestrict {
            get {
                if ((this.userestrictField == null)) {
                    this.userestrictField = new XTypedList<userestrict>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"));
                }
                return this.userestrictField;
            }
            set {
                if ((value == null)) {
                    this.userestrictField = null;
                }
                else {
                    if ((this.userestrictField == null)) {
                        this.userestrictField = XTypedList<userestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<userestrict>(this.userestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<dsc> dsc {
            get {
                if ((this.dscField == null)) {
                    this.dscField = new XTypedList<dsc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"));
                }
                return this.dscField;
            }
            set {
                if ((value == null)) {
                    this.dscField = null;
                }
                else {
                    if ((this.dscField == null)) {
                        this.dscField = XTypedList<dsc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<dsc>(this.dscField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<dao> dao {
            get {
                if ((this.daoField == null)) {
                    this.daoField = new XTypedList<dao>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"));
                }
                return this.daoField;
            }
            set {
                if ((value == null)) {
                    this.daoField = null;
                }
                else {
                    if ((this.daoField == null)) {
                        this.daoField = XTypedList<dao>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<dao>(this.daoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<daogrp> daogrp {
            get {
                if ((this.daogrpField == null)) {
                    this.daogrpField = new XTypedList<daogrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"));
                }
                return this.daogrpField;
            }
            set {
                if ((value == null)) {
                    this.daogrpField = null;
                }
                else {
                    if ((this.daogrpField == null)) {
                        this.daogrpField = XTypedList<daogrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<daogrp>(this.daogrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<thead> thead {
            get {
                if ((this.theadField == null)) {
                    this.theadField = new XTypedList<thead>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9"));
                }
                return this.theadField;
            }
            set {
                if ((value == null)) {
                    this.theadField = null;
                }
                else {
                    if ((this.theadField == null)) {
                        this.theadField = XTypedList<thead>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<thead>(this.theadField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<c08> c08 {
            get {
                if ((this.c08Field == null)) {
                    this.c08Field = new XTypedList<c08>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("c08", "urn:isbn:1-931666-22-9"));
                }
                return this.c08Field;
            }
            set {
                if ((value == null)) {
                    this.c08Field = null;
                }
                else {
                    if ((this.c08Field == null)) {
                        this.c08Field = XTypedList<c08>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("c08", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<c08>(this.c08Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string level {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("level", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("level", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string otherlevel {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("otherlevel", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("otherlevel", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string tpattern {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("tpattern", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("tpattern", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("c07", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<c07>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), typeof(head));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9"), typeof(did));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"), typeof(accessrestrict));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"), typeof(accruals));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"), typeof(acqinfo));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"), typeof(altformavail));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"), typeof(appraisal));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"), typeof(arrangement));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"), typeof(bibliography));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"), typeof(bioghist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"), typeof(controlaccess));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"), typeof(custodhist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"), typeof(descgrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"), typeof(fileplan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"), typeof(index));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"), typeof(odd));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"), typeof(originalsloc));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"), typeof(otherfindaid));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"), typeof(phystech));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"), typeof(prefercite));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"), typeof(processinfo));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"), typeof(relatedmaterial));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"), typeof(scopecontent));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"), typeof(separatedmaterial));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"), typeof(userestrict));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"), typeof(dsc));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"), typeof(dao));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"), typeof(daogrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9"), typeof(thead));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("c08", "urn:isbn:1-931666-22-9"), typeof(c08));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
    /// </para>
    /// </summary>
    public partial class c08 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accessrestrict> accessrestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accruals> accrualsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<acqinfo> acqinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<altformavail> altformavailField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<appraisal> appraisalField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<arrangement> arrangementField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibliography> bibliographyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bioghist> bioghistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<controlaccess> controlaccessField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<custodhist> custodhistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<descgrp> descgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<fileplan> fileplanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<index> indexField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<odd> oddField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<originalsloc> originalslocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<otherfindaid> otherfindaidField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phystech> phystechField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<prefercite> preferciteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<processinfo> processinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<relatedmaterial> relatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<scopecontent> scopecontentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<separatedmaterial> separatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<userestrict> userestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dsc> dscField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dao> daoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<daogrp> daogrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<thead> theadField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<c09> c09Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator c08(XElement xe) { return XTypedServices.ToXTypedElement<c08>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static c08() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public c08() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"));
                return ((head)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual did did {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9"));
                return ((did)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<accessrestrict> accessrestrict {
            get {
                if ((this.accessrestrictField == null)) {
                    this.accessrestrictField = new XTypedList<accessrestrict>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"));
                }
                return this.accessrestrictField;
            }
            set {
                if ((value == null)) {
                    this.accessrestrictField = null;
                }
                else {
                    if ((this.accessrestrictField == null)) {
                        this.accessrestrictField = XTypedList<accessrestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<accessrestrict>(this.accessrestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<accruals> accruals {
            get {
                if ((this.accrualsField == null)) {
                    this.accrualsField = new XTypedList<accruals>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"));
                }
                return this.accrualsField;
            }
            set {
                if ((value == null)) {
                    this.accrualsField = null;
                }
                else {
                    if ((this.accrualsField == null)) {
                        this.accrualsField = XTypedList<accruals>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<accruals>(this.accrualsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<acqinfo> acqinfo {
            get {
                if ((this.acqinfoField == null)) {
                    this.acqinfoField = new XTypedList<acqinfo>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"));
                }
                return this.acqinfoField;
            }
            set {
                if ((value == null)) {
                    this.acqinfoField = null;
                }
                else {
                    if ((this.acqinfoField == null)) {
                        this.acqinfoField = XTypedList<acqinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<acqinfo>(this.acqinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<altformavail> altformavail {
            get {
                if ((this.altformavailField == null)) {
                    this.altformavailField = new XTypedList<altformavail>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"));
                }
                return this.altformavailField;
            }
            set {
                if ((value == null)) {
                    this.altformavailField = null;
                }
                else {
                    if ((this.altformavailField == null)) {
                        this.altformavailField = XTypedList<altformavail>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<altformavail>(this.altformavailField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<appraisal> appraisal {
            get {
                if ((this.appraisalField == null)) {
                    this.appraisalField = new XTypedList<appraisal>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"));
                }
                return this.appraisalField;
            }
            set {
                if ((value == null)) {
                    this.appraisalField = null;
                }
                else {
                    if ((this.appraisalField == null)) {
                        this.appraisalField = XTypedList<appraisal>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<appraisal>(this.appraisalField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<arrangement> arrangement {
            get {
                if ((this.arrangementField == null)) {
                    this.arrangementField = new XTypedList<arrangement>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"));
                }
                return this.arrangementField;
            }
            set {
                if ((value == null)) {
                    this.arrangementField = null;
                }
                else {
                    if ((this.arrangementField == null)) {
                        this.arrangementField = XTypedList<arrangement>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<arrangement>(this.arrangementField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<bibliography> bibliography {
            get {
                if ((this.bibliographyField == null)) {
                    this.bibliographyField = new XTypedList<bibliography>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"));
                }
                return this.bibliographyField;
            }
            set {
                if ((value == null)) {
                    this.bibliographyField = null;
                }
                else {
                    if ((this.bibliographyField == null)) {
                        this.bibliographyField = XTypedList<bibliography>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibliography>(this.bibliographyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<bioghist> bioghist {
            get {
                if ((this.bioghistField == null)) {
                    this.bioghistField = new XTypedList<bioghist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"));
                }
                return this.bioghistField;
            }
            set {
                if ((value == null)) {
                    this.bioghistField = null;
                }
                else {
                    if ((this.bioghistField == null)) {
                        this.bioghistField = XTypedList<bioghist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bioghist>(this.bioghistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<controlaccess> controlaccess {
            get {
                if ((this.controlaccessField == null)) {
                    this.controlaccessField = new XTypedList<controlaccess>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"));
                }
                return this.controlaccessField;
            }
            set {
                if ((value == null)) {
                    this.controlaccessField = null;
                }
                else {
                    if ((this.controlaccessField == null)) {
                        this.controlaccessField = XTypedList<controlaccess>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<controlaccess>(this.controlaccessField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<custodhist> custodhist {
            get {
                if ((this.custodhistField == null)) {
                    this.custodhistField = new XTypedList<custodhist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"));
                }
                return this.custodhistField;
            }
            set {
                if ((value == null)) {
                    this.custodhistField = null;
                }
                else {
                    if ((this.custodhistField == null)) {
                        this.custodhistField = XTypedList<custodhist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<custodhist>(this.custodhistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<descgrp> descgrp {
            get {
                if ((this.descgrpField == null)) {
                    this.descgrpField = new XTypedList<descgrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"));
                }
                return this.descgrpField;
            }
            set {
                if ((value == null)) {
                    this.descgrpField = null;
                }
                else {
                    if ((this.descgrpField == null)) {
                        this.descgrpField = XTypedList<descgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<descgrp>(this.descgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<fileplan> fileplan {
            get {
                if ((this.fileplanField == null)) {
                    this.fileplanField = new XTypedList<fileplan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"));
                }
                return this.fileplanField;
            }
            set {
                if ((value == null)) {
                    this.fileplanField = null;
                }
                else {
                    if ((this.fileplanField == null)) {
                        this.fileplanField = XTypedList<fileplan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<fileplan>(this.fileplanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<index> index {
            get {
                if ((this.indexField == null)) {
                    this.indexField = new XTypedList<index>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"));
                }
                return this.indexField;
            }
            set {
                if ((value == null)) {
                    this.indexField = null;
                }
                else {
                    if ((this.indexField == null)) {
                        this.indexField = XTypedList<index>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<index>(this.indexField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<odd> odd {
            get {
                if ((this.oddField == null)) {
                    this.oddField = new XTypedList<odd>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"));
                }
                return this.oddField;
            }
            set {
                if ((value == null)) {
                    this.oddField = null;
                }
                else {
                    if ((this.oddField == null)) {
                        this.oddField = XTypedList<odd>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<odd>(this.oddField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<originalsloc> originalsloc {
            get {
                if ((this.originalslocField == null)) {
                    this.originalslocField = new XTypedList<originalsloc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"));
                }
                return this.originalslocField;
            }
            set {
                if ((value == null)) {
                    this.originalslocField = null;
                }
                else {
                    if ((this.originalslocField == null)) {
                        this.originalslocField = XTypedList<originalsloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<originalsloc>(this.originalslocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<otherfindaid> otherfindaid {
            get {
                if ((this.otherfindaidField == null)) {
                    this.otherfindaidField = new XTypedList<otherfindaid>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"));
                }
                return this.otherfindaidField;
            }
            set {
                if ((value == null)) {
                    this.otherfindaidField = null;
                }
                else {
                    if ((this.otherfindaidField == null)) {
                        this.otherfindaidField = XTypedList<otherfindaid>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<otherfindaid>(this.otherfindaidField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<phystech> phystech {
            get {
                if ((this.phystechField == null)) {
                    this.phystechField = new XTypedList<phystech>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"));
                }
                return this.phystechField;
            }
            set {
                if ((value == null)) {
                    this.phystechField = null;
                }
                else {
                    if ((this.phystechField == null)) {
                        this.phystechField = XTypedList<phystech>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<phystech>(this.phystechField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<prefercite> prefercite {
            get {
                if ((this.preferciteField == null)) {
                    this.preferciteField = new XTypedList<prefercite>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"));
                }
                return this.preferciteField;
            }
            set {
                if ((value == null)) {
                    this.preferciteField = null;
                }
                else {
                    if ((this.preferciteField == null)) {
                        this.preferciteField = XTypedList<prefercite>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<prefercite>(this.preferciteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<processinfo> processinfo {
            get {
                if ((this.processinfoField == null)) {
                    this.processinfoField = new XTypedList<processinfo>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"));
                }
                return this.processinfoField;
            }
            set {
                if ((value == null)) {
                    this.processinfoField = null;
                }
                else {
                    if ((this.processinfoField == null)) {
                        this.processinfoField = XTypedList<processinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<processinfo>(this.processinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<relatedmaterial> relatedmaterial {
            get {
                if ((this.relatedmaterialField == null)) {
                    this.relatedmaterialField = new XTypedList<relatedmaterial>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"));
                }
                return this.relatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.relatedmaterialField = null;
                }
                else {
                    if ((this.relatedmaterialField == null)) {
                        this.relatedmaterialField = XTypedList<relatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<relatedmaterial>(this.relatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<scopecontent> scopecontent {
            get {
                if ((this.scopecontentField == null)) {
                    this.scopecontentField = new XTypedList<scopecontent>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"));
                }
                return this.scopecontentField;
            }
            set {
                if ((value == null)) {
                    this.scopecontentField = null;
                }
                else {
                    if ((this.scopecontentField == null)) {
                        this.scopecontentField = XTypedList<scopecontent>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<scopecontent>(this.scopecontentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<separatedmaterial> separatedmaterial {
            get {
                if ((this.separatedmaterialField == null)) {
                    this.separatedmaterialField = new XTypedList<separatedmaterial>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"));
                }
                return this.separatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.separatedmaterialField = null;
                }
                else {
                    if ((this.separatedmaterialField == null)) {
                        this.separatedmaterialField = XTypedList<separatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<separatedmaterial>(this.separatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<userestrict> userestrict {
            get {
                if ((this.userestrictField == null)) {
                    this.userestrictField = new XTypedList<userestrict>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"));
                }
                return this.userestrictField;
            }
            set {
                if ((value == null)) {
                    this.userestrictField = null;
                }
                else {
                    if ((this.userestrictField == null)) {
                        this.userestrictField = XTypedList<userestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<userestrict>(this.userestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<dsc> dsc {
            get {
                if ((this.dscField == null)) {
                    this.dscField = new XTypedList<dsc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"));
                }
                return this.dscField;
            }
            set {
                if ((value == null)) {
                    this.dscField = null;
                }
                else {
                    if ((this.dscField == null)) {
                        this.dscField = XTypedList<dsc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<dsc>(this.dscField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<dao> dao {
            get {
                if ((this.daoField == null)) {
                    this.daoField = new XTypedList<dao>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"));
                }
                return this.daoField;
            }
            set {
                if ((value == null)) {
                    this.daoField = null;
                }
                else {
                    if ((this.daoField == null)) {
                        this.daoField = XTypedList<dao>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<dao>(this.daoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<daogrp> daogrp {
            get {
                if ((this.daogrpField == null)) {
                    this.daogrpField = new XTypedList<daogrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"));
                }
                return this.daogrpField;
            }
            set {
                if ((value == null)) {
                    this.daogrpField = null;
                }
                else {
                    if ((this.daogrpField == null)) {
                        this.daogrpField = XTypedList<daogrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<daogrp>(this.daogrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<thead> thead {
            get {
                if ((this.theadField == null)) {
                    this.theadField = new XTypedList<thead>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9"));
                }
                return this.theadField;
            }
            set {
                if ((value == null)) {
                    this.theadField = null;
                }
                else {
                    if ((this.theadField == null)) {
                        this.theadField = XTypedList<thead>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<thead>(this.theadField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<c09> c09 {
            get {
                if ((this.c09Field == null)) {
                    this.c09Field = new XTypedList<c09>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("c09", "urn:isbn:1-931666-22-9"));
                }
                return this.c09Field;
            }
            set {
                if ((value == null)) {
                    this.c09Field = null;
                }
                else {
                    if ((this.c09Field == null)) {
                        this.c09Field = XTypedList<c09>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("c09", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<c09>(this.c09Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string level {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("level", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("level", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string otherlevel {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("otherlevel", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("otherlevel", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string tpattern {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("tpattern", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("tpattern", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("c08", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<c08>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), typeof(head));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9"), typeof(did));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"), typeof(accessrestrict));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"), typeof(accruals));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"), typeof(acqinfo));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"), typeof(altformavail));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"), typeof(appraisal));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"), typeof(arrangement));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"), typeof(bibliography));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"), typeof(bioghist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"), typeof(controlaccess));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"), typeof(custodhist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"), typeof(descgrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"), typeof(fileplan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"), typeof(index));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"), typeof(odd));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"), typeof(originalsloc));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"), typeof(otherfindaid));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"), typeof(phystech));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"), typeof(prefercite));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"), typeof(processinfo));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"), typeof(relatedmaterial));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"), typeof(scopecontent));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"), typeof(separatedmaterial));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"), typeof(userestrict));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"), typeof(dsc));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"), typeof(dao));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"), typeof(daogrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9"), typeof(thead));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("c09", "urn:isbn:1-931666-22-9"), typeof(c09));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
    /// </para>
    /// </summary>
    public partial class c09 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accessrestrict> accessrestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accruals> accrualsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<acqinfo> acqinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<altformavail> altformavailField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<appraisal> appraisalField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<arrangement> arrangementField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibliography> bibliographyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bioghist> bioghistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<controlaccess> controlaccessField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<custodhist> custodhistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<descgrp> descgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<fileplan> fileplanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<index> indexField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<odd> oddField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<originalsloc> originalslocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<otherfindaid> otherfindaidField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phystech> phystechField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<prefercite> preferciteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<processinfo> processinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<relatedmaterial> relatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<scopecontent> scopecontentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<separatedmaterial> separatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<userestrict> userestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dsc> dscField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dao> daoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<daogrp> daogrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<thead> theadField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<c10> c10Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator c09(XElement xe) { return XTypedServices.ToXTypedElement<c09>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static c09() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public c09() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"));
                return ((head)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual did did {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9"));
                return ((did)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<accessrestrict> accessrestrict {
            get {
                if ((this.accessrestrictField == null)) {
                    this.accessrestrictField = new XTypedList<accessrestrict>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"));
                }
                return this.accessrestrictField;
            }
            set {
                if ((value == null)) {
                    this.accessrestrictField = null;
                }
                else {
                    if ((this.accessrestrictField == null)) {
                        this.accessrestrictField = XTypedList<accessrestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<accessrestrict>(this.accessrestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<accruals> accruals {
            get {
                if ((this.accrualsField == null)) {
                    this.accrualsField = new XTypedList<accruals>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"));
                }
                return this.accrualsField;
            }
            set {
                if ((value == null)) {
                    this.accrualsField = null;
                }
                else {
                    if ((this.accrualsField == null)) {
                        this.accrualsField = XTypedList<accruals>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<accruals>(this.accrualsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<acqinfo> acqinfo {
            get {
                if ((this.acqinfoField == null)) {
                    this.acqinfoField = new XTypedList<acqinfo>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"));
                }
                return this.acqinfoField;
            }
            set {
                if ((value == null)) {
                    this.acqinfoField = null;
                }
                else {
                    if ((this.acqinfoField == null)) {
                        this.acqinfoField = XTypedList<acqinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<acqinfo>(this.acqinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<altformavail> altformavail {
            get {
                if ((this.altformavailField == null)) {
                    this.altformavailField = new XTypedList<altformavail>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"));
                }
                return this.altformavailField;
            }
            set {
                if ((value == null)) {
                    this.altformavailField = null;
                }
                else {
                    if ((this.altformavailField == null)) {
                        this.altformavailField = XTypedList<altformavail>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<altformavail>(this.altformavailField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<appraisal> appraisal {
            get {
                if ((this.appraisalField == null)) {
                    this.appraisalField = new XTypedList<appraisal>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"));
                }
                return this.appraisalField;
            }
            set {
                if ((value == null)) {
                    this.appraisalField = null;
                }
                else {
                    if ((this.appraisalField == null)) {
                        this.appraisalField = XTypedList<appraisal>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<appraisal>(this.appraisalField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<arrangement> arrangement {
            get {
                if ((this.arrangementField == null)) {
                    this.arrangementField = new XTypedList<arrangement>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"));
                }
                return this.arrangementField;
            }
            set {
                if ((value == null)) {
                    this.arrangementField = null;
                }
                else {
                    if ((this.arrangementField == null)) {
                        this.arrangementField = XTypedList<arrangement>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<arrangement>(this.arrangementField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<bibliography> bibliography {
            get {
                if ((this.bibliographyField == null)) {
                    this.bibliographyField = new XTypedList<bibliography>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"));
                }
                return this.bibliographyField;
            }
            set {
                if ((value == null)) {
                    this.bibliographyField = null;
                }
                else {
                    if ((this.bibliographyField == null)) {
                        this.bibliographyField = XTypedList<bibliography>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibliography>(this.bibliographyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<bioghist> bioghist {
            get {
                if ((this.bioghistField == null)) {
                    this.bioghistField = new XTypedList<bioghist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"));
                }
                return this.bioghistField;
            }
            set {
                if ((value == null)) {
                    this.bioghistField = null;
                }
                else {
                    if ((this.bioghistField == null)) {
                        this.bioghistField = XTypedList<bioghist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bioghist>(this.bioghistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<controlaccess> controlaccess {
            get {
                if ((this.controlaccessField == null)) {
                    this.controlaccessField = new XTypedList<controlaccess>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"));
                }
                return this.controlaccessField;
            }
            set {
                if ((value == null)) {
                    this.controlaccessField = null;
                }
                else {
                    if ((this.controlaccessField == null)) {
                        this.controlaccessField = XTypedList<controlaccess>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<controlaccess>(this.controlaccessField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<custodhist> custodhist {
            get {
                if ((this.custodhistField == null)) {
                    this.custodhistField = new XTypedList<custodhist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"));
                }
                return this.custodhistField;
            }
            set {
                if ((value == null)) {
                    this.custodhistField = null;
                }
                else {
                    if ((this.custodhistField == null)) {
                        this.custodhistField = XTypedList<custodhist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<custodhist>(this.custodhistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<descgrp> descgrp {
            get {
                if ((this.descgrpField == null)) {
                    this.descgrpField = new XTypedList<descgrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"));
                }
                return this.descgrpField;
            }
            set {
                if ((value == null)) {
                    this.descgrpField = null;
                }
                else {
                    if ((this.descgrpField == null)) {
                        this.descgrpField = XTypedList<descgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<descgrp>(this.descgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<fileplan> fileplan {
            get {
                if ((this.fileplanField == null)) {
                    this.fileplanField = new XTypedList<fileplan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"));
                }
                return this.fileplanField;
            }
            set {
                if ((value == null)) {
                    this.fileplanField = null;
                }
                else {
                    if ((this.fileplanField == null)) {
                        this.fileplanField = XTypedList<fileplan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<fileplan>(this.fileplanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<index> index {
            get {
                if ((this.indexField == null)) {
                    this.indexField = new XTypedList<index>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"));
                }
                return this.indexField;
            }
            set {
                if ((value == null)) {
                    this.indexField = null;
                }
                else {
                    if ((this.indexField == null)) {
                        this.indexField = XTypedList<index>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<index>(this.indexField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<odd> odd {
            get {
                if ((this.oddField == null)) {
                    this.oddField = new XTypedList<odd>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"));
                }
                return this.oddField;
            }
            set {
                if ((value == null)) {
                    this.oddField = null;
                }
                else {
                    if ((this.oddField == null)) {
                        this.oddField = XTypedList<odd>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<odd>(this.oddField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<originalsloc> originalsloc {
            get {
                if ((this.originalslocField == null)) {
                    this.originalslocField = new XTypedList<originalsloc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"));
                }
                return this.originalslocField;
            }
            set {
                if ((value == null)) {
                    this.originalslocField = null;
                }
                else {
                    if ((this.originalslocField == null)) {
                        this.originalslocField = XTypedList<originalsloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<originalsloc>(this.originalslocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<otherfindaid> otherfindaid {
            get {
                if ((this.otherfindaidField == null)) {
                    this.otherfindaidField = new XTypedList<otherfindaid>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"));
                }
                return this.otherfindaidField;
            }
            set {
                if ((value == null)) {
                    this.otherfindaidField = null;
                }
                else {
                    if ((this.otherfindaidField == null)) {
                        this.otherfindaidField = XTypedList<otherfindaid>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<otherfindaid>(this.otherfindaidField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<phystech> phystech {
            get {
                if ((this.phystechField == null)) {
                    this.phystechField = new XTypedList<phystech>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"));
                }
                return this.phystechField;
            }
            set {
                if ((value == null)) {
                    this.phystechField = null;
                }
                else {
                    if ((this.phystechField == null)) {
                        this.phystechField = XTypedList<phystech>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<phystech>(this.phystechField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<prefercite> prefercite {
            get {
                if ((this.preferciteField == null)) {
                    this.preferciteField = new XTypedList<prefercite>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"));
                }
                return this.preferciteField;
            }
            set {
                if ((value == null)) {
                    this.preferciteField = null;
                }
                else {
                    if ((this.preferciteField == null)) {
                        this.preferciteField = XTypedList<prefercite>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<prefercite>(this.preferciteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<processinfo> processinfo {
            get {
                if ((this.processinfoField == null)) {
                    this.processinfoField = new XTypedList<processinfo>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"));
                }
                return this.processinfoField;
            }
            set {
                if ((value == null)) {
                    this.processinfoField = null;
                }
                else {
                    if ((this.processinfoField == null)) {
                        this.processinfoField = XTypedList<processinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<processinfo>(this.processinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<relatedmaterial> relatedmaterial {
            get {
                if ((this.relatedmaterialField == null)) {
                    this.relatedmaterialField = new XTypedList<relatedmaterial>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"));
                }
                return this.relatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.relatedmaterialField = null;
                }
                else {
                    if ((this.relatedmaterialField == null)) {
                        this.relatedmaterialField = XTypedList<relatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<relatedmaterial>(this.relatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<scopecontent> scopecontent {
            get {
                if ((this.scopecontentField == null)) {
                    this.scopecontentField = new XTypedList<scopecontent>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"));
                }
                return this.scopecontentField;
            }
            set {
                if ((value == null)) {
                    this.scopecontentField = null;
                }
                else {
                    if ((this.scopecontentField == null)) {
                        this.scopecontentField = XTypedList<scopecontent>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<scopecontent>(this.scopecontentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<separatedmaterial> separatedmaterial {
            get {
                if ((this.separatedmaterialField == null)) {
                    this.separatedmaterialField = new XTypedList<separatedmaterial>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"));
                }
                return this.separatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.separatedmaterialField = null;
                }
                else {
                    if ((this.separatedmaterialField == null)) {
                        this.separatedmaterialField = XTypedList<separatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<separatedmaterial>(this.separatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<userestrict> userestrict {
            get {
                if ((this.userestrictField == null)) {
                    this.userestrictField = new XTypedList<userestrict>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"));
                }
                return this.userestrictField;
            }
            set {
                if ((value == null)) {
                    this.userestrictField = null;
                }
                else {
                    if ((this.userestrictField == null)) {
                        this.userestrictField = XTypedList<userestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<userestrict>(this.userestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<dsc> dsc {
            get {
                if ((this.dscField == null)) {
                    this.dscField = new XTypedList<dsc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"));
                }
                return this.dscField;
            }
            set {
                if ((value == null)) {
                    this.dscField = null;
                }
                else {
                    if ((this.dscField == null)) {
                        this.dscField = XTypedList<dsc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<dsc>(this.dscField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<dao> dao {
            get {
                if ((this.daoField == null)) {
                    this.daoField = new XTypedList<dao>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"));
                }
                return this.daoField;
            }
            set {
                if ((value == null)) {
                    this.daoField = null;
                }
                else {
                    if ((this.daoField == null)) {
                        this.daoField = XTypedList<dao>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<dao>(this.daoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<daogrp> daogrp {
            get {
                if ((this.daogrpField == null)) {
                    this.daogrpField = new XTypedList<daogrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"));
                }
                return this.daogrpField;
            }
            set {
                if ((value == null)) {
                    this.daogrpField = null;
                }
                else {
                    if ((this.daogrpField == null)) {
                        this.daogrpField = XTypedList<daogrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<daogrp>(this.daogrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<thead> thead {
            get {
                if ((this.theadField == null)) {
                    this.theadField = new XTypedList<thead>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9"));
                }
                return this.theadField;
            }
            set {
                if ((value == null)) {
                    this.theadField = null;
                }
                else {
                    if ((this.theadField == null)) {
                        this.theadField = XTypedList<thead>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<thead>(this.theadField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<c10> c10 {
            get {
                if ((this.c10Field == null)) {
                    this.c10Field = new XTypedList<c10>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("c10", "urn:isbn:1-931666-22-9"));
                }
                return this.c10Field;
            }
            set {
                if ((value == null)) {
                    this.c10Field = null;
                }
                else {
                    if ((this.c10Field == null)) {
                        this.c10Field = XTypedList<c10>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("c10", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<c10>(this.c10Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string level {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("level", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("level", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string otherlevel {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("otherlevel", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("otherlevel", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string tpattern {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("tpattern", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("tpattern", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("c09", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<c09>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), typeof(head));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9"), typeof(did));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"), typeof(accessrestrict));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"), typeof(accruals));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"), typeof(acqinfo));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"), typeof(altformavail));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"), typeof(appraisal));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"), typeof(arrangement));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"), typeof(bibliography));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"), typeof(bioghist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"), typeof(controlaccess));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"), typeof(custodhist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"), typeof(descgrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"), typeof(fileplan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"), typeof(index));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"), typeof(odd));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"), typeof(originalsloc));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"), typeof(otherfindaid));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"), typeof(phystech));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"), typeof(prefercite));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"), typeof(processinfo));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"), typeof(relatedmaterial));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"), typeof(scopecontent));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"), typeof(separatedmaterial));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"), typeof(userestrict));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"), typeof(dsc));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"), typeof(dao));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"), typeof(daogrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9"), typeof(thead));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("c10", "urn:isbn:1-931666-22-9"), typeof(c10));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
    /// </para>
    /// </summary>
    public partial class c10 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accessrestrict> accessrestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accruals> accrualsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<acqinfo> acqinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<altformavail> altformavailField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<appraisal> appraisalField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<arrangement> arrangementField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibliography> bibliographyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bioghist> bioghistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<controlaccess> controlaccessField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<custodhist> custodhistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<descgrp> descgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<fileplan> fileplanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<index> indexField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<odd> oddField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<originalsloc> originalslocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<otherfindaid> otherfindaidField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phystech> phystechField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<prefercite> preferciteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<processinfo> processinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<relatedmaterial> relatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<scopecontent> scopecontentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<separatedmaterial> separatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<userestrict> userestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dsc> dscField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dao> daoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<daogrp> daogrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<thead> theadField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<c11> c11Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator c10(XElement xe) { return XTypedServices.ToXTypedElement<c10>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static c10() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public c10() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"));
                return ((head)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual did did {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9"));
                return ((did)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<accessrestrict> accessrestrict {
            get {
                if ((this.accessrestrictField == null)) {
                    this.accessrestrictField = new XTypedList<accessrestrict>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"));
                }
                return this.accessrestrictField;
            }
            set {
                if ((value == null)) {
                    this.accessrestrictField = null;
                }
                else {
                    if ((this.accessrestrictField == null)) {
                        this.accessrestrictField = XTypedList<accessrestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<accessrestrict>(this.accessrestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<accruals> accruals {
            get {
                if ((this.accrualsField == null)) {
                    this.accrualsField = new XTypedList<accruals>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"));
                }
                return this.accrualsField;
            }
            set {
                if ((value == null)) {
                    this.accrualsField = null;
                }
                else {
                    if ((this.accrualsField == null)) {
                        this.accrualsField = XTypedList<accruals>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<accruals>(this.accrualsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<acqinfo> acqinfo {
            get {
                if ((this.acqinfoField == null)) {
                    this.acqinfoField = new XTypedList<acqinfo>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"));
                }
                return this.acqinfoField;
            }
            set {
                if ((value == null)) {
                    this.acqinfoField = null;
                }
                else {
                    if ((this.acqinfoField == null)) {
                        this.acqinfoField = XTypedList<acqinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<acqinfo>(this.acqinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<altformavail> altformavail {
            get {
                if ((this.altformavailField == null)) {
                    this.altformavailField = new XTypedList<altformavail>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"));
                }
                return this.altformavailField;
            }
            set {
                if ((value == null)) {
                    this.altformavailField = null;
                }
                else {
                    if ((this.altformavailField == null)) {
                        this.altformavailField = XTypedList<altformavail>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<altformavail>(this.altformavailField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<appraisal> appraisal {
            get {
                if ((this.appraisalField == null)) {
                    this.appraisalField = new XTypedList<appraisal>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"));
                }
                return this.appraisalField;
            }
            set {
                if ((value == null)) {
                    this.appraisalField = null;
                }
                else {
                    if ((this.appraisalField == null)) {
                        this.appraisalField = XTypedList<appraisal>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<appraisal>(this.appraisalField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<arrangement> arrangement {
            get {
                if ((this.arrangementField == null)) {
                    this.arrangementField = new XTypedList<arrangement>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"));
                }
                return this.arrangementField;
            }
            set {
                if ((value == null)) {
                    this.arrangementField = null;
                }
                else {
                    if ((this.arrangementField == null)) {
                        this.arrangementField = XTypedList<arrangement>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<arrangement>(this.arrangementField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<bibliography> bibliography {
            get {
                if ((this.bibliographyField == null)) {
                    this.bibliographyField = new XTypedList<bibliography>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"));
                }
                return this.bibliographyField;
            }
            set {
                if ((value == null)) {
                    this.bibliographyField = null;
                }
                else {
                    if ((this.bibliographyField == null)) {
                        this.bibliographyField = XTypedList<bibliography>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibliography>(this.bibliographyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<bioghist> bioghist {
            get {
                if ((this.bioghistField == null)) {
                    this.bioghistField = new XTypedList<bioghist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"));
                }
                return this.bioghistField;
            }
            set {
                if ((value == null)) {
                    this.bioghistField = null;
                }
                else {
                    if ((this.bioghistField == null)) {
                        this.bioghistField = XTypedList<bioghist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bioghist>(this.bioghistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<controlaccess> controlaccess {
            get {
                if ((this.controlaccessField == null)) {
                    this.controlaccessField = new XTypedList<controlaccess>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"));
                }
                return this.controlaccessField;
            }
            set {
                if ((value == null)) {
                    this.controlaccessField = null;
                }
                else {
                    if ((this.controlaccessField == null)) {
                        this.controlaccessField = XTypedList<controlaccess>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<controlaccess>(this.controlaccessField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<custodhist> custodhist {
            get {
                if ((this.custodhistField == null)) {
                    this.custodhistField = new XTypedList<custodhist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"));
                }
                return this.custodhistField;
            }
            set {
                if ((value == null)) {
                    this.custodhistField = null;
                }
                else {
                    if ((this.custodhistField == null)) {
                        this.custodhistField = XTypedList<custodhist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<custodhist>(this.custodhistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<descgrp> descgrp {
            get {
                if ((this.descgrpField == null)) {
                    this.descgrpField = new XTypedList<descgrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"));
                }
                return this.descgrpField;
            }
            set {
                if ((value == null)) {
                    this.descgrpField = null;
                }
                else {
                    if ((this.descgrpField == null)) {
                        this.descgrpField = XTypedList<descgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<descgrp>(this.descgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<fileplan> fileplan {
            get {
                if ((this.fileplanField == null)) {
                    this.fileplanField = new XTypedList<fileplan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"));
                }
                return this.fileplanField;
            }
            set {
                if ((value == null)) {
                    this.fileplanField = null;
                }
                else {
                    if ((this.fileplanField == null)) {
                        this.fileplanField = XTypedList<fileplan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<fileplan>(this.fileplanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<index> index {
            get {
                if ((this.indexField == null)) {
                    this.indexField = new XTypedList<index>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"));
                }
                return this.indexField;
            }
            set {
                if ((value == null)) {
                    this.indexField = null;
                }
                else {
                    if ((this.indexField == null)) {
                        this.indexField = XTypedList<index>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<index>(this.indexField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<odd> odd {
            get {
                if ((this.oddField == null)) {
                    this.oddField = new XTypedList<odd>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"));
                }
                return this.oddField;
            }
            set {
                if ((value == null)) {
                    this.oddField = null;
                }
                else {
                    if ((this.oddField == null)) {
                        this.oddField = XTypedList<odd>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<odd>(this.oddField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<originalsloc> originalsloc {
            get {
                if ((this.originalslocField == null)) {
                    this.originalslocField = new XTypedList<originalsloc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"));
                }
                return this.originalslocField;
            }
            set {
                if ((value == null)) {
                    this.originalslocField = null;
                }
                else {
                    if ((this.originalslocField == null)) {
                        this.originalslocField = XTypedList<originalsloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<originalsloc>(this.originalslocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<otherfindaid> otherfindaid {
            get {
                if ((this.otherfindaidField == null)) {
                    this.otherfindaidField = new XTypedList<otherfindaid>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"));
                }
                return this.otherfindaidField;
            }
            set {
                if ((value == null)) {
                    this.otherfindaidField = null;
                }
                else {
                    if ((this.otherfindaidField == null)) {
                        this.otherfindaidField = XTypedList<otherfindaid>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<otherfindaid>(this.otherfindaidField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<phystech> phystech {
            get {
                if ((this.phystechField == null)) {
                    this.phystechField = new XTypedList<phystech>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"));
                }
                return this.phystechField;
            }
            set {
                if ((value == null)) {
                    this.phystechField = null;
                }
                else {
                    if ((this.phystechField == null)) {
                        this.phystechField = XTypedList<phystech>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<phystech>(this.phystechField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<prefercite> prefercite {
            get {
                if ((this.preferciteField == null)) {
                    this.preferciteField = new XTypedList<prefercite>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"));
                }
                return this.preferciteField;
            }
            set {
                if ((value == null)) {
                    this.preferciteField = null;
                }
                else {
                    if ((this.preferciteField == null)) {
                        this.preferciteField = XTypedList<prefercite>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<prefercite>(this.preferciteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<processinfo> processinfo {
            get {
                if ((this.processinfoField == null)) {
                    this.processinfoField = new XTypedList<processinfo>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"));
                }
                return this.processinfoField;
            }
            set {
                if ((value == null)) {
                    this.processinfoField = null;
                }
                else {
                    if ((this.processinfoField == null)) {
                        this.processinfoField = XTypedList<processinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<processinfo>(this.processinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<relatedmaterial> relatedmaterial {
            get {
                if ((this.relatedmaterialField == null)) {
                    this.relatedmaterialField = new XTypedList<relatedmaterial>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"));
                }
                return this.relatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.relatedmaterialField = null;
                }
                else {
                    if ((this.relatedmaterialField == null)) {
                        this.relatedmaterialField = XTypedList<relatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<relatedmaterial>(this.relatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<scopecontent> scopecontent {
            get {
                if ((this.scopecontentField == null)) {
                    this.scopecontentField = new XTypedList<scopecontent>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"));
                }
                return this.scopecontentField;
            }
            set {
                if ((value == null)) {
                    this.scopecontentField = null;
                }
                else {
                    if ((this.scopecontentField == null)) {
                        this.scopecontentField = XTypedList<scopecontent>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<scopecontent>(this.scopecontentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<separatedmaterial> separatedmaterial {
            get {
                if ((this.separatedmaterialField == null)) {
                    this.separatedmaterialField = new XTypedList<separatedmaterial>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"));
                }
                return this.separatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.separatedmaterialField = null;
                }
                else {
                    if ((this.separatedmaterialField == null)) {
                        this.separatedmaterialField = XTypedList<separatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<separatedmaterial>(this.separatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<userestrict> userestrict {
            get {
                if ((this.userestrictField == null)) {
                    this.userestrictField = new XTypedList<userestrict>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"));
                }
                return this.userestrictField;
            }
            set {
                if ((value == null)) {
                    this.userestrictField = null;
                }
                else {
                    if ((this.userestrictField == null)) {
                        this.userestrictField = XTypedList<userestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<userestrict>(this.userestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<dsc> dsc {
            get {
                if ((this.dscField == null)) {
                    this.dscField = new XTypedList<dsc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"));
                }
                return this.dscField;
            }
            set {
                if ((value == null)) {
                    this.dscField = null;
                }
                else {
                    if ((this.dscField == null)) {
                        this.dscField = XTypedList<dsc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<dsc>(this.dscField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<dao> dao {
            get {
                if ((this.daoField == null)) {
                    this.daoField = new XTypedList<dao>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"));
                }
                return this.daoField;
            }
            set {
                if ((value == null)) {
                    this.daoField = null;
                }
                else {
                    if ((this.daoField == null)) {
                        this.daoField = XTypedList<dao>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<dao>(this.daoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<daogrp> daogrp {
            get {
                if ((this.daogrpField == null)) {
                    this.daogrpField = new XTypedList<daogrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"));
                }
                return this.daogrpField;
            }
            set {
                if ((value == null)) {
                    this.daogrpField = null;
                }
                else {
                    if ((this.daogrpField == null)) {
                        this.daogrpField = XTypedList<daogrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<daogrp>(this.daogrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<thead> thead {
            get {
                if ((this.theadField == null)) {
                    this.theadField = new XTypedList<thead>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9"));
                }
                return this.theadField;
            }
            set {
                if ((value == null)) {
                    this.theadField = null;
                }
                else {
                    if ((this.theadField == null)) {
                        this.theadField = XTypedList<thead>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<thead>(this.theadField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<c11> c11 {
            get {
                if ((this.c11Field == null)) {
                    this.c11Field = new XTypedList<c11>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("c11", "urn:isbn:1-931666-22-9"));
                }
                return this.c11Field;
            }
            set {
                if ((value == null)) {
                    this.c11Field = null;
                }
                else {
                    if ((this.c11Field == null)) {
                        this.c11Field = XTypedList<c11>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("c11", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<c11>(this.c11Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string level {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("level", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("level", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string otherlevel {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("otherlevel", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("otherlevel", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string tpattern {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("tpattern", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("tpattern", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("c10", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<c10>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), typeof(head));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9"), typeof(did));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"), typeof(accessrestrict));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"), typeof(accruals));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"), typeof(acqinfo));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"), typeof(altformavail));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"), typeof(appraisal));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"), typeof(arrangement));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"), typeof(bibliography));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"), typeof(bioghist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"), typeof(controlaccess));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"), typeof(custodhist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"), typeof(descgrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"), typeof(fileplan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"), typeof(index));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"), typeof(odd));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"), typeof(originalsloc));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"), typeof(otherfindaid));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"), typeof(phystech));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"), typeof(prefercite));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"), typeof(processinfo));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"), typeof(relatedmaterial));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"), typeof(scopecontent));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"), typeof(separatedmaterial));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"), typeof(userestrict));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"), typeof(dsc));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"), typeof(dao));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"), typeof(daogrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9"), typeof(thead));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("c11", "urn:isbn:1-931666-22-9"), typeof(c11));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
    /// </para>
    /// </summary>
    public partial class c11 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accessrestrict> accessrestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accruals> accrualsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<acqinfo> acqinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<altformavail> altformavailField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<appraisal> appraisalField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<arrangement> arrangementField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibliography> bibliographyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bioghist> bioghistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<controlaccess> controlaccessField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<custodhist> custodhistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<descgrp> descgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<fileplan> fileplanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<index> indexField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<odd> oddField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<originalsloc> originalslocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<otherfindaid> otherfindaidField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phystech> phystechField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<prefercite> preferciteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<processinfo> processinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<relatedmaterial> relatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<scopecontent> scopecontentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<separatedmaterial> separatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<userestrict> userestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dsc> dscField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dao> daoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<daogrp> daogrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<thead> theadField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<c12> c12Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator c11(XElement xe) { return XTypedServices.ToXTypedElement<c11>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static c11() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public c11() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"));
                return ((head)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual did did {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9"));
                return ((did)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<accessrestrict> accessrestrict {
            get {
                if ((this.accessrestrictField == null)) {
                    this.accessrestrictField = new XTypedList<accessrestrict>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"));
                }
                return this.accessrestrictField;
            }
            set {
                if ((value == null)) {
                    this.accessrestrictField = null;
                }
                else {
                    if ((this.accessrestrictField == null)) {
                        this.accessrestrictField = XTypedList<accessrestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<accessrestrict>(this.accessrestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<accruals> accruals {
            get {
                if ((this.accrualsField == null)) {
                    this.accrualsField = new XTypedList<accruals>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"));
                }
                return this.accrualsField;
            }
            set {
                if ((value == null)) {
                    this.accrualsField = null;
                }
                else {
                    if ((this.accrualsField == null)) {
                        this.accrualsField = XTypedList<accruals>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<accruals>(this.accrualsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<acqinfo> acqinfo {
            get {
                if ((this.acqinfoField == null)) {
                    this.acqinfoField = new XTypedList<acqinfo>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"));
                }
                return this.acqinfoField;
            }
            set {
                if ((value == null)) {
                    this.acqinfoField = null;
                }
                else {
                    if ((this.acqinfoField == null)) {
                        this.acqinfoField = XTypedList<acqinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<acqinfo>(this.acqinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<altformavail> altformavail {
            get {
                if ((this.altformavailField == null)) {
                    this.altformavailField = new XTypedList<altformavail>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"));
                }
                return this.altformavailField;
            }
            set {
                if ((value == null)) {
                    this.altformavailField = null;
                }
                else {
                    if ((this.altformavailField == null)) {
                        this.altformavailField = XTypedList<altformavail>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<altformavail>(this.altformavailField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<appraisal> appraisal {
            get {
                if ((this.appraisalField == null)) {
                    this.appraisalField = new XTypedList<appraisal>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"));
                }
                return this.appraisalField;
            }
            set {
                if ((value == null)) {
                    this.appraisalField = null;
                }
                else {
                    if ((this.appraisalField == null)) {
                        this.appraisalField = XTypedList<appraisal>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<appraisal>(this.appraisalField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<arrangement> arrangement {
            get {
                if ((this.arrangementField == null)) {
                    this.arrangementField = new XTypedList<arrangement>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"));
                }
                return this.arrangementField;
            }
            set {
                if ((value == null)) {
                    this.arrangementField = null;
                }
                else {
                    if ((this.arrangementField == null)) {
                        this.arrangementField = XTypedList<arrangement>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<arrangement>(this.arrangementField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<bibliography> bibliography {
            get {
                if ((this.bibliographyField == null)) {
                    this.bibliographyField = new XTypedList<bibliography>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"));
                }
                return this.bibliographyField;
            }
            set {
                if ((value == null)) {
                    this.bibliographyField = null;
                }
                else {
                    if ((this.bibliographyField == null)) {
                        this.bibliographyField = XTypedList<bibliography>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibliography>(this.bibliographyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<bioghist> bioghist {
            get {
                if ((this.bioghistField == null)) {
                    this.bioghistField = new XTypedList<bioghist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"));
                }
                return this.bioghistField;
            }
            set {
                if ((value == null)) {
                    this.bioghistField = null;
                }
                else {
                    if ((this.bioghistField == null)) {
                        this.bioghistField = XTypedList<bioghist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bioghist>(this.bioghistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<controlaccess> controlaccess {
            get {
                if ((this.controlaccessField == null)) {
                    this.controlaccessField = new XTypedList<controlaccess>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"));
                }
                return this.controlaccessField;
            }
            set {
                if ((value == null)) {
                    this.controlaccessField = null;
                }
                else {
                    if ((this.controlaccessField == null)) {
                        this.controlaccessField = XTypedList<controlaccess>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<controlaccess>(this.controlaccessField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<custodhist> custodhist {
            get {
                if ((this.custodhistField == null)) {
                    this.custodhistField = new XTypedList<custodhist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"));
                }
                return this.custodhistField;
            }
            set {
                if ((value == null)) {
                    this.custodhistField = null;
                }
                else {
                    if ((this.custodhistField == null)) {
                        this.custodhistField = XTypedList<custodhist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<custodhist>(this.custodhistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<descgrp> descgrp {
            get {
                if ((this.descgrpField == null)) {
                    this.descgrpField = new XTypedList<descgrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"));
                }
                return this.descgrpField;
            }
            set {
                if ((value == null)) {
                    this.descgrpField = null;
                }
                else {
                    if ((this.descgrpField == null)) {
                        this.descgrpField = XTypedList<descgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<descgrp>(this.descgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<fileplan> fileplan {
            get {
                if ((this.fileplanField == null)) {
                    this.fileplanField = new XTypedList<fileplan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"));
                }
                return this.fileplanField;
            }
            set {
                if ((value == null)) {
                    this.fileplanField = null;
                }
                else {
                    if ((this.fileplanField == null)) {
                        this.fileplanField = XTypedList<fileplan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<fileplan>(this.fileplanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<index> index {
            get {
                if ((this.indexField == null)) {
                    this.indexField = new XTypedList<index>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"));
                }
                return this.indexField;
            }
            set {
                if ((value == null)) {
                    this.indexField = null;
                }
                else {
                    if ((this.indexField == null)) {
                        this.indexField = XTypedList<index>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<index>(this.indexField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<odd> odd {
            get {
                if ((this.oddField == null)) {
                    this.oddField = new XTypedList<odd>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"));
                }
                return this.oddField;
            }
            set {
                if ((value == null)) {
                    this.oddField = null;
                }
                else {
                    if ((this.oddField == null)) {
                        this.oddField = XTypedList<odd>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<odd>(this.oddField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<originalsloc> originalsloc {
            get {
                if ((this.originalslocField == null)) {
                    this.originalslocField = new XTypedList<originalsloc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"));
                }
                return this.originalslocField;
            }
            set {
                if ((value == null)) {
                    this.originalslocField = null;
                }
                else {
                    if ((this.originalslocField == null)) {
                        this.originalslocField = XTypedList<originalsloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<originalsloc>(this.originalslocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<otherfindaid> otherfindaid {
            get {
                if ((this.otherfindaidField == null)) {
                    this.otherfindaidField = new XTypedList<otherfindaid>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"));
                }
                return this.otherfindaidField;
            }
            set {
                if ((value == null)) {
                    this.otherfindaidField = null;
                }
                else {
                    if ((this.otherfindaidField == null)) {
                        this.otherfindaidField = XTypedList<otherfindaid>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<otherfindaid>(this.otherfindaidField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<phystech> phystech {
            get {
                if ((this.phystechField == null)) {
                    this.phystechField = new XTypedList<phystech>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"));
                }
                return this.phystechField;
            }
            set {
                if ((value == null)) {
                    this.phystechField = null;
                }
                else {
                    if ((this.phystechField == null)) {
                        this.phystechField = XTypedList<phystech>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<phystech>(this.phystechField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<prefercite> prefercite {
            get {
                if ((this.preferciteField == null)) {
                    this.preferciteField = new XTypedList<prefercite>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"));
                }
                return this.preferciteField;
            }
            set {
                if ((value == null)) {
                    this.preferciteField = null;
                }
                else {
                    if ((this.preferciteField == null)) {
                        this.preferciteField = XTypedList<prefercite>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<prefercite>(this.preferciteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<processinfo> processinfo {
            get {
                if ((this.processinfoField == null)) {
                    this.processinfoField = new XTypedList<processinfo>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"));
                }
                return this.processinfoField;
            }
            set {
                if ((value == null)) {
                    this.processinfoField = null;
                }
                else {
                    if ((this.processinfoField == null)) {
                        this.processinfoField = XTypedList<processinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<processinfo>(this.processinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<relatedmaterial> relatedmaterial {
            get {
                if ((this.relatedmaterialField == null)) {
                    this.relatedmaterialField = new XTypedList<relatedmaterial>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"));
                }
                return this.relatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.relatedmaterialField = null;
                }
                else {
                    if ((this.relatedmaterialField == null)) {
                        this.relatedmaterialField = XTypedList<relatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<relatedmaterial>(this.relatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<scopecontent> scopecontent {
            get {
                if ((this.scopecontentField == null)) {
                    this.scopecontentField = new XTypedList<scopecontent>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"));
                }
                return this.scopecontentField;
            }
            set {
                if ((value == null)) {
                    this.scopecontentField = null;
                }
                else {
                    if ((this.scopecontentField == null)) {
                        this.scopecontentField = XTypedList<scopecontent>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<scopecontent>(this.scopecontentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<separatedmaterial> separatedmaterial {
            get {
                if ((this.separatedmaterialField == null)) {
                    this.separatedmaterialField = new XTypedList<separatedmaterial>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"));
                }
                return this.separatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.separatedmaterialField = null;
                }
                else {
                    if ((this.separatedmaterialField == null)) {
                        this.separatedmaterialField = XTypedList<separatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<separatedmaterial>(this.separatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<userestrict> userestrict {
            get {
                if ((this.userestrictField == null)) {
                    this.userestrictField = new XTypedList<userestrict>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"));
                }
                return this.userestrictField;
            }
            set {
                if ((value == null)) {
                    this.userestrictField = null;
                }
                else {
                    if ((this.userestrictField == null)) {
                        this.userestrictField = XTypedList<userestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<userestrict>(this.userestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<dsc> dsc {
            get {
                if ((this.dscField == null)) {
                    this.dscField = new XTypedList<dsc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"));
                }
                return this.dscField;
            }
            set {
                if ((value == null)) {
                    this.dscField = null;
                }
                else {
                    if ((this.dscField == null)) {
                        this.dscField = XTypedList<dsc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<dsc>(this.dscField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<dao> dao {
            get {
                if ((this.daoField == null)) {
                    this.daoField = new XTypedList<dao>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"));
                }
                return this.daoField;
            }
            set {
                if ((value == null)) {
                    this.daoField = null;
                }
                else {
                    if ((this.daoField == null)) {
                        this.daoField = XTypedList<dao>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<dao>(this.daoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<daogrp> daogrp {
            get {
                if ((this.daogrpField == null)) {
                    this.daogrpField = new XTypedList<daogrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"));
                }
                return this.daogrpField;
            }
            set {
                if ((value == null)) {
                    this.daogrpField = null;
                }
                else {
                    if ((this.daogrpField == null)) {
                        this.daogrpField = XTypedList<daogrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<daogrp>(this.daogrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<thead> thead {
            get {
                if ((this.theadField == null)) {
                    this.theadField = new XTypedList<thead>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9"));
                }
                return this.theadField;
            }
            set {
                if ((value == null)) {
                    this.theadField = null;
                }
                else {
                    if ((this.theadField == null)) {
                        this.theadField = XTypedList<thead>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<thead>(this.theadField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<c12> c12 {
            get {
                if ((this.c12Field == null)) {
                    this.c12Field = new XTypedList<c12>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("c12", "urn:isbn:1-931666-22-9"));
                }
                return this.c12Field;
            }
            set {
                if ((value == null)) {
                    this.c12Field = null;
                }
                else {
                    if ((this.c12Field == null)) {
                        this.c12Field = XTypedList<c12>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("c12", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<c12>(this.c12Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string level {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("level", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("level", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string otherlevel {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("otherlevel", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("otherlevel", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string tpattern {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("tpattern", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("tpattern", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("c11", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<c11>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), typeof(head));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9"), typeof(did));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"), typeof(accessrestrict));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"), typeof(accruals));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"), typeof(acqinfo));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"), typeof(altformavail));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"), typeof(appraisal));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"), typeof(arrangement));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"), typeof(bibliography));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"), typeof(bioghist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"), typeof(controlaccess));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"), typeof(custodhist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"), typeof(descgrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"), typeof(fileplan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"), typeof(index));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"), typeof(odd));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"), typeof(originalsloc));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"), typeof(otherfindaid));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"), typeof(phystech));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"), typeof(prefercite));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"), typeof(processinfo));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"), typeof(relatedmaterial));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"), typeof(scopecontent));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"), typeof(separatedmaterial));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"), typeof(userestrict));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"), typeof(dsc));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"), typeof(dao));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"), typeof(daogrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9"), typeof(thead));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("c12", "urn:isbn:1-931666-22-9"), typeof(c12));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
    /// </para>
    /// </summary>
    public partial class c12 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accessrestrict> accessrestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accruals> accrualsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<acqinfo> acqinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<altformavail> altformavailField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<appraisal> appraisalField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<arrangement> arrangementField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibliography> bibliographyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bioghist> bioghistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<controlaccess> controlaccessField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<custodhist> custodhistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<descgrp> descgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<fileplan> fileplanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<index> indexField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<odd> oddField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<originalsloc> originalslocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<otherfindaid> otherfindaidField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phystech> phystechField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<prefercite> preferciteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<processinfo> processinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<relatedmaterial> relatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<scopecontent> scopecontentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<separatedmaterial> separatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<userestrict> userestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dsc> dscField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dao> daoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<daogrp> daogrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator c12(XElement xe) { return XTypedServices.ToXTypedElement<c12>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static c12() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public c12() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"));
                return ((head)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual did did {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9"));
                return ((did)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<accessrestrict> accessrestrict {
            get {
                if ((this.accessrestrictField == null)) {
                    this.accessrestrictField = new XTypedList<accessrestrict>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"));
                }
                return this.accessrestrictField;
            }
            set {
                if ((value == null)) {
                    this.accessrestrictField = null;
                }
                else {
                    if ((this.accessrestrictField == null)) {
                        this.accessrestrictField = XTypedList<accessrestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<accessrestrict>(this.accessrestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<accruals> accruals {
            get {
                if ((this.accrualsField == null)) {
                    this.accrualsField = new XTypedList<accruals>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"));
                }
                return this.accrualsField;
            }
            set {
                if ((value == null)) {
                    this.accrualsField = null;
                }
                else {
                    if ((this.accrualsField == null)) {
                        this.accrualsField = XTypedList<accruals>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<accruals>(this.accrualsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<acqinfo> acqinfo {
            get {
                if ((this.acqinfoField == null)) {
                    this.acqinfoField = new XTypedList<acqinfo>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"));
                }
                return this.acqinfoField;
            }
            set {
                if ((value == null)) {
                    this.acqinfoField = null;
                }
                else {
                    if ((this.acqinfoField == null)) {
                        this.acqinfoField = XTypedList<acqinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<acqinfo>(this.acqinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<altformavail> altformavail {
            get {
                if ((this.altformavailField == null)) {
                    this.altformavailField = new XTypedList<altformavail>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"));
                }
                return this.altformavailField;
            }
            set {
                if ((value == null)) {
                    this.altformavailField = null;
                }
                else {
                    if ((this.altformavailField == null)) {
                        this.altformavailField = XTypedList<altformavail>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<altformavail>(this.altformavailField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<appraisal> appraisal {
            get {
                if ((this.appraisalField == null)) {
                    this.appraisalField = new XTypedList<appraisal>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"));
                }
                return this.appraisalField;
            }
            set {
                if ((value == null)) {
                    this.appraisalField = null;
                }
                else {
                    if ((this.appraisalField == null)) {
                        this.appraisalField = XTypedList<appraisal>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<appraisal>(this.appraisalField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<arrangement> arrangement {
            get {
                if ((this.arrangementField == null)) {
                    this.arrangementField = new XTypedList<arrangement>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"));
                }
                return this.arrangementField;
            }
            set {
                if ((value == null)) {
                    this.arrangementField = null;
                }
                else {
                    if ((this.arrangementField == null)) {
                        this.arrangementField = XTypedList<arrangement>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<arrangement>(this.arrangementField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<bibliography> bibliography {
            get {
                if ((this.bibliographyField == null)) {
                    this.bibliographyField = new XTypedList<bibliography>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"));
                }
                return this.bibliographyField;
            }
            set {
                if ((value == null)) {
                    this.bibliographyField = null;
                }
                else {
                    if ((this.bibliographyField == null)) {
                        this.bibliographyField = XTypedList<bibliography>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibliography>(this.bibliographyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<bioghist> bioghist {
            get {
                if ((this.bioghistField == null)) {
                    this.bioghistField = new XTypedList<bioghist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"));
                }
                return this.bioghistField;
            }
            set {
                if ((value == null)) {
                    this.bioghistField = null;
                }
                else {
                    if ((this.bioghistField == null)) {
                        this.bioghistField = XTypedList<bioghist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bioghist>(this.bioghistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<controlaccess> controlaccess {
            get {
                if ((this.controlaccessField == null)) {
                    this.controlaccessField = new XTypedList<controlaccess>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"));
                }
                return this.controlaccessField;
            }
            set {
                if ((value == null)) {
                    this.controlaccessField = null;
                }
                else {
                    if ((this.controlaccessField == null)) {
                        this.controlaccessField = XTypedList<controlaccess>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<controlaccess>(this.controlaccessField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<custodhist> custodhist {
            get {
                if ((this.custodhistField == null)) {
                    this.custodhistField = new XTypedList<custodhist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"));
                }
                return this.custodhistField;
            }
            set {
                if ((value == null)) {
                    this.custodhistField = null;
                }
                else {
                    if ((this.custodhistField == null)) {
                        this.custodhistField = XTypedList<custodhist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<custodhist>(this.custodhistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<descgrp> descgrp {
            get {
                if ((this.descgrpField == null)) {
                    this.descgrpField = new XTypedList<descgrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"));
                }
                return this.descgrpField;
            }
            set {
                if ((value == null)) {
                    this.descgrpField = null;
                }
                else {
                    if ((this.descgrpField == null)) {
                        this.descgrpField = XTypedList<descgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<descgrp>(this.descgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<fileplan> fileplan {
            get {
                if ((this.fileplanField == null)) {
                    this.fileplanField = new XTypedList<fileplan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"));
                }
                return this.fileplanField;
            }
            set {
                if ((value == null)) {
                    this.fileplanField = null;
                }
                else {
                    if ((this.fileplanField == null)) {
                        this.fileplanField = XTypedList<fileplan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<fileplan>(this.fileplanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<index> index {
            get {
                if ((this.indexField == null)) {
                    this.indexField = new XTypedList<index>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"));
                }
                return this.indexField;
            }
            set {
                if ((value == null)) {
                    this.indexField = null;
                }
                else {
                    if ((this.indexField == null)) {
                        this.indexField = XTypedList<index>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<index>(this.indexField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<odd> odd {
            get {
                if ((this.oddField == null)) {
                    this.oddField = new XTypedList<odd>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"));
                }
                return this.oddField;
            }
            set {
                if ((value == null)) {
                    this.oddField = null;
                }
                else {
                    if ((this.oddField == null)) {
                        this.oddField = XTypedList<odd>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<odd>(this.oddField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<originalsloc> originalsloc {
            get {
                if ((this.originalslocField == null)) {
                    this.originalslocField = new XTypedList<originalsloc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"));
                }
                return this.originalslocField;
            }
            set {
                if ((value == null)) {
                    this.originalslocField = null;
                }
                else {
                    if ((this.originalslocField == null)) {
                        this.originalslocField = XTypedList<originalsloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<originalsloc>(this.originalslocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<otherfindaid> otherfindaid {
            get {
                if ((this.otherfindaidField == null)) {
                    this.otherfindaidField = new XTypedList<otherfindaid>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"));
                }
                return this.otherfindaidField;
            }
            set {
                if ((value == null)) {
                    this.otherfindaidField = null;
                }
                else {
                    if ((this.otherfindaidField == null)) {
                        this.otherfindaidField = XTypedList<otherfindaid>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<otherfindaid>(this.otherfindaidField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<phystech> phystech {
            get {
                if ((this.phystechField == null)) {
                    this.phystechField = new XTypedList<phystech>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"));
                }
                return this.phystechField;
            }
            set {
                if ((value == null)) {
                    this.phystechField = null;
                }
                else {
                    if ((this.phystechField == null)) {
                        this.phystechField = XTypedList<phystech>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<phystech>(this.phystechField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<prefercite> prefercite {
            get {
                if ((this.preferciteField == null)) {
                    this.preferciteField = new XTypedList<prefercite>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"));
                }
                return this.preferciteField;
            }
            set {
                if ((value == null)) {
                    this.preferciteField = null;
                }
                else {
                    if ((this.preferciteField == null)) {
                        this.preferciteField = XTypedList<prefercite>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<prefercite>(this.preferciteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<processinfo> processinfo {
            get {
                if ((this.processinfoField == null)) {
                    this.processinfoField = new XTypedList<processinfo>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"));
                }
                return this.processinfoField;
            }
            set {
                if ((value == null)) {
                    this.processinfoField = null;
                }
                else {
                    if ((this.processinfoField == null)) {
                        this.processinfoField = XTypedList<processinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<processinfo>(this.processinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<relatedmaterial> relatedmaterial {
            get {
                if ((this.relatedmaterialField == null)) {
                    this.relatedmaterialField = new XTypedList<relatedmaterial>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"));
                }
                return this.relatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.relatedmaterialField = null;
                }
                else {
                    if ((this.relatedmaterialField == null)) {
                        this.relatedmaterialField = XTypedList<relatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<relatedmaterial>(this.relatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<scopecontent> scopecontent {
            get {
                if ((this.scopecontentField == null)) {
                    this.scopecontentField = new XTypedList<scopecontent>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"));
                }
                return this.scopecontentField;
            }
            set {
                if ((value == null)) {
                    this.scopecontentField = null;
                }
                else {
                    if ((this.scopecontentField == null)) {
                        this.scopecontentField = XTypedList<scopecontent>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<scopecontent>(this.scopecontentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<separatedmaterial> separatedmaterial {
            get {
                if ((this.separatedmaterialField == null)) {
                    this.separatedmaterialField = new XTypedList<separatedmaterial>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"));
                }
                return this.separatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.separatedmaterialField = null;
                }
                else {
                    if ((this.separatedmaterialField == null)) {
                        this.separatedmaterialField = XTypedList<separatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<separatedmaterial>(this.separatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<userestrict> userestrict {
            get {
                if ((this.userestrictField == null)) {
                    this.userestrictField = new XTypedList<userestrict>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"));
                }
                return this.userestrictField;
            }
            set {
                if ((value == null)) {
                    this.userestrictField = null;
                }
                else {
                    if ((this.userestrictField == null)) {
                        this.userestrictField = XTypedList<userestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<userestrict>(this.userestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<dsc> dsc {
            get {
                if ((this.dscField == null)) {
                    this.dscField = new XTypedList<dsc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"));
                }
                return this.dscField;
            }
            set {
                if ((value == null)) {
                    this.dscField = null;
                }
                else {
                    if ((this.dscField == null)) {
                        this.dscField = XTypedList<dsc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<dsc>(this.dscField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<dao> dao {
            get {
                if ((this.daoField == null)) {
                    this.daoField = new XTypedList<dao>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"));
                }
                return this.daoField;
            }
            set {
                if ((value == null)) {
                    this.daoField = null;
                }
                else {
                    if ((this.daoField == null)) {
                        this.daoField = XTypedList<dao>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<dao>(this.daoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<daogrp> daogrp {
            get {
                if ((this.daogrpField == null)) {
                    this.daogrpField = new XTypedList<daogrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"));
                }
                return this.daogrpField;
            }
            set {
                if ((value == null)) {
                    this.daogrpField = null;
                }
                else {
                    if ((this.daogrpField == null)) {
                        this.daogrpField = XTypedList<daogrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<daogrp>(this.daogrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string level {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("level", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("level", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string otherlevel {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("otherlevel", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("otherlevel", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string tpattern {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("tpattern", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("tpattern", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("c12", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<c12>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), typeof(head));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9"), typeof(did));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"), typeof(accessrestrict));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"), typeof(accruals));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"), typeof(acqinfo));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"), typeof(altformavail));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"), typeof(appraisal));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"), typeof(arrangement));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"), typeof(bibliography));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"), typeof(bioghist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"), typeof(controlaccess));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"), typeof(custodhist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"), typeof(descgrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"), typeof(fileplan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"), typeof(index));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"), typeof(odd));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"), typeof(originalsloc));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"), typeof(otherfindaid));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"), typeof(phystech));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"), typeof(prefercite));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"), typeof(processinfo));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"), typeof(relatedmaterial));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"), typeof(scopecontent));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"), typeof(separatedmaterial));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"), typeof(userestrict));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"), typeof(dsc));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"), typeof(dao));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"), typeof(daogrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb)*
    /// </para>
    /// </summary>
    public partial class head : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator head(XElement xe) { return XTypedServices.ToXTypedElement<head>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static head() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public head() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string althead {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("althead", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("althead", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<head>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
    /// </para>
    /// </summary>
    public partial class p : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<corpname> corpnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<famname> famnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<geogname> geognameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<name> nameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<occupation> occupationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<persname> persnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<subject> subjectField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<genreform> genreformField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<function> functionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<date> dateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<num> numField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<origination> originationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<repository> repositoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unitdate> unitdateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unittitle> unittitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator p(XElement xe) { return XTypedServices.ToXTypedElement<p>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static p() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public p() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<corpname> corpname {
            get {
                if ((this.corpnameField == null)) {
                    this.corpnameField = new XTypedList<corpname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"));
                }
                return this.corpnameField;
            }
            set {
                if ((value == null)) {
                    this.corpnameField = null;
                }
                else {
                    if ((this.corpnameField == null)) {
                        this.corpnameField = XTypedList<corpname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<corpname>(this.corpnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<famname> famname {
            get {
                if ((this.famnameField == null)) {
                    this.famnameField = new XTypedList<famname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"));
                }
                return this.famnameField;
            }
            set {
                if ((value == null)) {
                    this.famnameField = null;
                }
                else {
                    if ((this.famnameField == null)) {
                        this.famnameField = XTypedList<famname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<famname>(this.famnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<geogname> geogname {
            get {
                if ((this.geognameField == null)) {
                    this.geognameField = new XTypedList<geogname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"));
                }
                return this.geognameField;
            }
            set {
                if ((value == null)) {
                    this.geognameField = null;
                }
                else {
                    if ((this.geognameField == null)) {
                        this.geognameField = XTypedList<geogname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<geogname>(this.geognameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<name> name {
            get {
                if ((this.nameField == null)) {
                    this.nameField = new XTypedList<name>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"));
                }
                return this.nameField;
            }
            set {
                if ((value == null)) {
                    this.nameField = null;
                }
                else {
                    if ((this.nameField == null)) {
                        this.nameField = XTypedList<name>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<name>(this.nameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<occupation> occupation {
            get {
                if ((this.occupationField == null)) {
                    this.occupationField = new XTypedList<occupation>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"));
                }
                return this.occupationField;
            }
            set {
                if ((value == null)) {
                    this.occupationField = null;
                }
                else {
                    if ((this.occupationField == null)) {
                        this.occupationField = XTypedList<occupation>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<occupation>(this.occupationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<persname> persname {
            get {
                if ((this.persnameField == null)) {
                    this.persnameField = new XTypedList<persname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"));
                }
                return this.persnameField;
            }
            set {
                if ((value == null)) {
                    this.persnameField = null;
                }
                else {
                    if ((this.persnameField == null)) {
                        this.persnameField = XTypedList<persname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<persname>(this.persnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<subject> subject {
            get {
                if ((this.subjectField == null)) {
                    this.subjectField = new XTypedList<subject>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"));
                }
                return this.subjectField;
            }
            set {
                if ((value == null)) {
                    this.subjectField = null;
                }
                else {
                    if ((this.subjectField == null)) {
                        this.subjectField = XTypedList<subject>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<subject>(this.subjectField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<genreform> genreform {
            get {
                if ((this.genreformField == null)) {
                    this.genreformField = new XTypedList<genreform>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"));
                }
                return this.genreformField;
            }
            set {
                if ((value == null)) {
                    this.genreformField = null;
                }
                else {
                    if ((this.genreformField == null)) {
                        this.genreformField = XTypedList<genreform>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<genreform>(this.genreformField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<function> function {
            get {
                if ((this.functionField == null)) {
                    this.functionField = new XTypedList<function>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"));
                }
                return this.functionField;
            }
            set {
                if ((value == null)) {
                    this.functionField = null;
                }
                else {
                    if ((this.functionField == null)) {
                        this.functionField = XTypedList<function>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<function>(this.functionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<date> date {
            get {
                if ((this.dateField == null)) {
                    this.dateField = new XTypedList<date>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"));
                }
                return this.dateField;
            }
            set {
                if ((value == null)) {
                    this.dateField = null;
                }
                else {
                    if ((this.dateField == null)) {
                        this.dateField = XTypedList<date>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<date>(this.dateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<num> num {
            get {
                if ((this.numField == null)) {
                    this.numField = new XTypedList<num>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"));
                }
                return this.numField;
            }
            set {
                if ((value == null)) {
                    this.numField = null;
                }
                else {
                    if ((this.numField == null)) {
                        this.numField = XTypedList<num>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<num>(this.numField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<origination> origination {
            get {
                if ((this.originationField == null)) {
                    this.originationField = new XTypedList<origination>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9"));
                }
                return this.originationField;
            }
            set {
                if ((value == null)) {
                    this.originationField = null;
                }
                else {
                    if ((this.originationField == null)) {
                        this.originationField = XTypedList<origination>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<origination>(this.originationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<repository> repository {
            get {
                if ((this.repositoryField == null)) {
                    this.repositoryField = new XTypedList<repository>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9"));
                }
                return this.repositoryField;
            }
            set {
                if ((value == null)) {
                    this.repositoryField = null;
                }
                else {
                    if ((this.repositoryField == null)) {
                        this.repositoryField = XTypedList<repository>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<repository>(this.repositoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<unitdate> unitdate {
            get {
                if ((this.unitdateField == null)) {
                    this.unitdateField = new XTypedList<unitdate>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9"));
                }
                return this.unitdateField;
            }
            set {
                if ((value == null)) {
                    this.unitdateField = null;
                }
                else {
                    if ((this.unitdateField == null)) {
                        this.unitdateField = XTypedList<unitdate>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<unitdate>(this.unitdateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<unittitle> unittitle {
            get {
                if ((this.unittitleField == null)) {
                    this.unittitleField = new XTypedList<unittitle>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9"));
                }
                return this.unittitleField;
            }
            set {
                if ((value == null)) {
                    this.unittitleField = null;
                }
                else {
                    if ((this.unittitleField == null)) {
                        this.unittitleField = XTypedList<unittitle>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<unittitle>(this.unittitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<p>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"), typeof(abbr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"), typeof(expan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"), typeof(corpname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"), typeof(famname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"), typeof(geogname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"), typeof(name));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"), typeof(occupation));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"), typeof(persname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"), typeof(subject));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"), typeof(genreform));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"), typeof(function));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"), typeof(date));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"), typeof(num));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9"), typeof(origination));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9"), typeof(repository));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9"), typeof(unitdate));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9"), typeof(unittitle));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"), typeof(@ref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"), typeof(extref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"), typeof(linkgrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"), typeof(bibref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"), typeof(title));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"), typeof(archref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"), typeof(address));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"), typeof(chronlist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"), typeof(list));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"), typeof(table));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"), typeof(blockquote));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (daodesc?)
    /// </para>
    /// </summary>
    public partial class dao : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string typeFixedValue = "simple";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator dao(XElement xe) { return XTypedServices.ToXTypedElement<dao>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static dao() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("daodesc", "urn:isbn:1-931666-22-9")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (daodesc?)
        /// </para>
        /// </summary>
        public dao() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (daodesc?)
        /// </para>
        /// </summary>
        public virtual daodesc daodesc {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("daodesc", "urn:isbn:1-931666-22-9"));
                return ((daodesc)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("daodesc", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string entityref {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("entityref", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Entity).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("entityref", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Entity).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string xpointer {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("xpointer", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("xpointer", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                return typeFixedValue;
            }
            set {
                if (value.Equals(typeFixedValue)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, typeFixedValue);
                }
                this.SetAttribute(System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri href {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("href", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("href", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string arcrole {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("arcrole", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("arcrole", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string show {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("show", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("show", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string actuate {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("actuate", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("actuate", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<dao>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("daodesc", "urn:isbn:1-931666-22-9"), typeof(daodesc));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)+)
    /// </para>
    /// </summary>
    public partial class daodesc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator daodesc(XElement xe) { return XTypedServices.ToXTypedElement<daodesc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static daodesc() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)+)
        /// </para>
        /// </summary>
        public daodesc() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"));
                return ((head)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("daodesc", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<daodesc>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), typeof(head));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"), typeof(address));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"), typeof(chronlist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"), typeof(list));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"), typeof(table));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"), typeof(blockquote));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"), typeof(p));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (daodesc?, (daoloc | resource | arc | ptrloc | extptrloc | refloc | extrefloc)+)
    /// </para>
    /// </summary>
    public partial class daogrp : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<daoloc> daolocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<resource> resourceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<arc> arcField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptrloc> ptrlocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptrloc> extptrlocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<refloc> reflocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extrefloc> extreflocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string typeFixedValue = "extended";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator daogrp(XElement xe) { return XTypedServices.ToXTypedElement<daogrp>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static daogrp() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (daodesc?, (daoloc | resource | arc | ptrloc | extptrloc | refloc | extrefloc)+)
        /// </para>
        /// </summary>
        public daogrp() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (daodesc?, (daoloc | resource | arc | ptrloc | extptrloc | refloc | extrefloc)+)
        /// </para>
        /// </summary>
        public virtual daodesc daodesc {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("daodesc", "urn:isbn:1-931666-22-9"));
                return ((daodesc)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("daodesc", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (daodesc?, (daoloc | resource | arc | ptrloc | extptrloc | refloc | extrefloc)+)
        /// </para>
        /// </summary>
        public virtual IList<daoloc> daoloc {
            get {
                if ((this.daolocField == null)) {
                    this.daolocField = new XTypedList<daoloc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("daoloc", "urn:isbn:1-931666-22-9"));
                }
                return this.daolocField;
            }
            set {
                if ((value == null)) {
                    this.daolocField = null;
                }
                else {
                    if ((this.daolocField == null)) {
                        this.daolocField = XTypedList<daoloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("daoloc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<daoloc>(this.daolocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (daodesc?, (daoloc | resource | arc | ptrloc | extptrloc | refloc | extrefloc)+)
        /// </para>
        /// </summary>
        public virtual IList<resource> resource {
            get {
                if ((this.resourceField == null)) {
                    this.resourceField = new XTypedList<resource>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("resource", "urn:isbn:1-931666-22-9"));
                }
                return this.resourceField;
            }
            set {
                if ((value == null)) {
                    this.resourceField = null;
                }
                else {
                    if ((this.resourceField == null)) {
                        this.resourceField = XTypedList<resource>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("resource", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<resource>(this.resourceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (daodesc?, (daoloc | resource | arc | ptrloc | extptrloc | refloc | extrefloc)+)
        /// </para>
        /// </summary>
        public virtual IList<arc> arc {
            get {
                if ((this.arcField == null)) {
                    this.arcField = new XTypedList<arc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("arc", "urn:isbn:1-931666-22-9"));
                }
                return this.arcField;
            }
            set {
                if ((value == null)) {
                    this.arcField = null;
                }
                else {
                    if ((this.arcField == null)) {
                        this.arcField = XTypedList<arc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("arc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<arc>(this.arcField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (daodesc?, (daoloc | resource | arc | ptrloc | extptrloc | refloc | extrefloc)+)
        /// </para>
        /// </summary>
        public virtual IList<ptrloc> ptrloc {
            get {
                if ((this.ptrlocField == null)) {
                    this.ptrlocField = new XTypedList<ptrloc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptrloc", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrlocField;
            }
            set {
                if ((value == null)) {
                    this.ptrlocField = null;
                }
                else {
                    if ((this.ptrlocField == null)) {
                        this.ptrlocField = XTypedList<ptrloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptrloc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptrloc>(this.ptrlocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (daodesc?, (daoloc | resource | arc | ptrloc | extptrloc | refloc | extrefloc)+)
        /// </para>
        /// </summary>
        public virtual IList<extptrloc> extptrloc {
            get {
                if ((this.extptrlocField == null)) {
                    this.extptrlocField = new XTypedList<extptrloc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptrloc", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrlocField;
            }
            set {
                if ((value == null)) {
                    this.extptrlocField = null;
                }
                else {
                    if ((this.extptrlocField == null)) {
                        this.extptrlocField = XTypedList<extptrloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptrloc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptrloc>(this.extptrlocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (daodesc?, (daoloc | resource | arc | ptrloc | extptrloc | refloc | extrefloc)+)
        /// </para>
        /// </summary>
        public virtual IList<refloc> refloc {
            get {
                if ((this.reflocField == null)) {
                    this.reflocField = new XTypedList<refloc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("refloc", "urn:isbn:1-931666-22-9"));
                }
                return this.reflocField;
            }
            set {
                if ((value == null)) {
                    this.reflocField = null;
                }
                else {
                    if ((this.reflocField == null)) {
                        this.reflocField = XTypedList<refloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("refloc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<refloc>(this.reflocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (daodesc?, (daoloc | resource | arc | ptrloc | extptrloc | refloc | extrefloc)+)
        /// </para>
        /// </summary>
        public virtual IList<extrefloc> extrefloc {
            get {
                if ((this.extreflocField == null)) {
                    this.extreflocField = new XTypedList<extrefloc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extrefloc", "urn:isbn:1-931666-22-9"));
                }
                return this.extreflocField;
            }
            set {
                if ((value == null)) {
                    this.extreflocField = null;
                }
                else {
                    if ((this.extreflocField == null)) {
                        this.extreflocField = XTypedList<extrefloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extrefloc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extrefloc>(this.extreflocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                return typeFixedValue;
            }
            set {
                if (value.Equals(typeFixedValue)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, typeFixedValue);
                }
                this.SetAttribute(System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<daogrp>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("daodesc", "urn:isbn:1-931666-22-9"), typeof(daodesc));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("daoloc", "urn:isbn:1-931666-22-9"), typeof(daoloc));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("resource", "urn:isbn:1-931666-22-9"), typeof(resource));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("arc", "urn:isbn:1-931666-22-9"), typeof(arc));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptrloc", "urn:isbn:1-931666-22-9"), typeof(ptrloc));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptrloc", "urn:isbn:1-931666-22-9"), typeof(extptrloc));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("refloc", "urn:isbn:1-931666-22-9"), typeof(refloc));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extrefloc", "urn:isbn:1-931666-22-9"), typeof(extrefloc));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (daodesc?)
    /// </para>
    /// </summary>
    public partial class daoloc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string typeFixedValue = "locator";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator daoloc(XElement xe) { return XTypedServices.ToXTypedElement<daoloc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static daoloc() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("daodesc", "urn:isbn:1-931666-22-9")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (daodesc?)
        /// </para>
        /// </summary>
        public daoloc() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (daodesc?)
        /// </para>
        /// </summary>
        public virtual daodesc daodesc {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("daodesc", "urn:isbn:1-931666-22-9"));
                return ((daodesc)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("daodesc", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                return typeFixedValue;
            }
            set {
                if (value.Equals(typeFixedValue)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, typeFixedValue);
                }
                this.SetAttribute(System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual System.Uri href {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("href", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("href", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("label", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("label", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string entityref {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("entityref", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Entity).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("entityref", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Entity).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string xpointer {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("xpointer", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("xpointer", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("daoloc", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<daoloc>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("daodesc", "urn:isbn:1-931666-22-9"), typeof(daodesc));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class ptr : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string typeFixedValue = "simple";
        
		public static explicit operator ptr(XElement xe) { return XTypedServices.ToXTypedElement<ptr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ptr() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string target {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("target", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("target", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string xpointer {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("xpointer", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("xpointer", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                return typeFixedValue;
            }
            set {
                if (value.Equals(typeFixedValue)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, typeFixedValue);
                }
                this.SetAttribute(System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri href {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("href", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("href", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string arcrole {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("arcrole", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("arcrole", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string show {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("show", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("show", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string actuate {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("actuate", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("actuate", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ptr>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
    /// </para>
    /// </summary>
    public partial class @ref : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<corpname> corpnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<famname> famnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<geogname> geognameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<name> nameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<occupation> occupationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<persname> persnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<subject> subjectField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<genreform> genreformField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<function> functionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<date> dateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<num> numField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<origination> originationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<repository> repositoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unitdate> unitdateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unittitle> unittitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string typeFixedValue = "simple";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator @ref(XElement xe) { return XTypedServices.ToXTypedElement<@ref>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static @ref() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public @ref() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<corpname> corpname {
            get {
                if ((this.corpnameField == null)) {
                    this.corpnameField = new XTypedList<corpname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"));
                }
                return this.corpnameField;
            }
            set {
                if ((value == null)) {
                    this.corpnameField = null;
                }
                else {
                    if ((this.corpnameField == null)) {
                        this.corpnameField = XTypedList<corpname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<corpname>(this.corpnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<famname> famname {
            get {
                if ((this.famnameField == null)) {
                    this.famnameField = new XTypedList<famname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"));
                }
                return this.famnameField;
            }
            set {
                if ((value == null)) {
                    this.famnameField = null;
                }
                else {
                    if ((this.famnameField == null)) {
                        this.famnameField = XTypedList<famname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<famname>(this.famnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<geogname> geogname {
            get {
                if ((this.geognameField == null)) {
                    this.geognameField = new XTypedList<geogname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"));
                }
                return this.geognameField;
            }
            set {
                if ((value == null)) {
                    this.geognameField = null;
                }
                else {
                    if ((this.geognameField == null)) {
                        this.geognameField = XTypedList<geogname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<geogname>(this.geognameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<name> name {
            get {
                if ((this.nameField == null)) {
                    this.nameField = new XTypedList<name>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"));
                }
                return this.nameField;
            }
            set {
                if ((value == null)) {
                    this.nameField = null;
                }
                else {
                    if ((this.nameField == null)) {
                        this.nameField = XTypedList<name>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<name>(this.nameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<occupation> occupation {
            get {
                if ((this.occupationField == null)) {
                    this.occupationField = new XTypedList<occupation>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"));
                }
                return this.occupationField;
            }
            set {
                if ((value == null)) {
                    this.occupationField = null;
                }
                else {
                    if ((this.occupationField == null)) {
                        this.occupationField = XTypedList<occupation>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<occupation>(this.occupationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<persname> persname {
            get {
                if ((this.persnameField == null)) {
                    this.persnameField = new XTypedList<persname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"));
                }
                return this.persnameField;
            }
            set {
                if ((value == null)) {
                    this.persnameField = null;
                }
                else {
                    if ((this.persnameField == null)) {
                        this.persnameField = XTypedList<persname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<persname>(this.persnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<subject> subject {
            get {
                if ((this.subjectField == null)) {
                    this.subjectField = new XTypedList<subject>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"));
                }
                return this.subjectField;
            }
            set {
                if ((value == null)) {
                    this.subjectField = null;
                }
                else {
                    if ((this.subjectField == null)) {
                        this.subjectField = XTypedList<subject>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<subject>(this.subjectField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<genreform> genreform {
            get {
                if ((this.genreformField == null)) {
                    this.genreformField = new XTypedList<genreform>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"));
                }
                return this.genreformField;
            }
            set {
                if ((value == null)) {
                    this.genreformField = null;
                }
                else {
                    if ((this.genreformField == null)) {
                        this.genreformField = XTypedList<genreform>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<genreform>(this.genreformField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<function> function {
            get {
                if ((this.functionField == null)) {
                    this.functionField = new XTypedList<function>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"));
                }
                return this.functionField;
            }
            set {
                if ((value == null)) {
                    this.functionField = null;
                }
                else {
                    if ((this.functionField == null)) {
                        this.functionField = XTypedList<function>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<function>(this.functionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<date> date {
            get {
                if ((this.dateField == null)) {
                    this.dateField = new XTypedList<date>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"));
                }
                return this.dateField;
            }
            set {
                if ((value == null)) {
                    this.dateField = null;
                }
                else {
                    if ((this.dateField == null)) {
                        this.dateField = XTypedList<date>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<date>(this.dateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<num> num {
            get {
                if ((this.numField == null)) {
                    this.numField = new XTypedList<num>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"));
                }
                return this.numField;
            }
            set {
                if ((value == null)) {
                    this.numField = null;
                }
                else {
                    if ((this.numField == null)) {
                        this.numField = XTypedList<num>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<num>(this.numField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<origination> origination {
            get {
                if ((this.originationField == null)) {
                    this.originationField = new XTypedList<origination>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9"));
                }
                return this.originationField;
            }
            set {
                if ((value == null)) {
                    this.originationField = null;
                }
                else {
                    if ((this.originationField == null)) {
                        this.originationField = XTypedList<origination>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<origination>(this.originationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<repository> repository {
            get {
                if ((this.repositoryField == null)) {
                    this.repositoryField = new XTypedList<repository>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9"));
                }
                return this.repositoryField;
            }
            set {
                if ((value == null)) {
                    this.repositoryField = null;
                }
                else {
                    if ((this.repositoryField == null)) {
                        this.repositoryField = XTypedList<repository>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<repository>(this.repositoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<unitdate> unitdate {
            get {
                if ((this.unitdateField == null)) {
                    this.unitdateField = new XTypedList<unitdate>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9"));
                }
                return this.unitdateField;
            }
            set {
                if ((value == null)) {
                    this.unitdateField = null;
                }
                else {
                    if ((this.unitdateField == null)) {
                        this.unitdateField = XTypedList<unitdate>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<unitdate>(this.unitdateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<unittitle> unittitle {
            get {
                if ((this.unittitleField == null)) {
                    this.unittitleField = new XTypedList<unittitle>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9"));
                }
                return this.unittitleField;
            }
            set {
                if ((value == null)) {
                    this.unittitleField = null;
                }
                else {
                    if ((this.unittitleField == null)) {
                        this.unittitleField = XTypedList<unittitle>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<unittitle>(this.unittitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string target {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("target", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("target", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string xpointer {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("xpointer", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("xpointer", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                return typeFixedValue;
            }
            set {
                if (value.Equals(typeFixedValue)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, typeFixedValue);
                }
                this.SetAttribute(System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri href {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("href", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("href", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string arcrole {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("arcrole", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("arcrole", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title1 {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string show {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("show", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("show", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string actuate {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("actuate", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("actuate", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<@ref>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"), typeof(abbr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"), typeof(expan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"), typeof(corpname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"), typeof(famname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"), typeof(geogname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"), typeof(name));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"), typeof(occupation));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"), typeof(persname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"), typeof(subject));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"), typeof(genreform));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"), typeof(function));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"), typeof(date));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"), typeof(num));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9"), typeof(origination));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9"), typeof(repository));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9"), typeof(unitdate));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9"), typeof(unittitle));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"), typeof(address));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"), typeof(chronlist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"), typeof(list));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"), typeof(table));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"), typeof(blockquote));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"), typeof(bibref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"), typeof(title));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"), typeof(extref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"), typeof(archref));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
    /// </para>
    /// </summary>
    public partial class extref : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<corpname> corpnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<famname> famnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<geogname> geognameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<name> nameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<occupation> occupationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<persname> persnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<subject> subjectField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<genreform> genreformField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<function> functionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<date> dateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<num> numField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<origination> originationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<repository> repositoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unitdate> unitdateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unittitle> unittitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string typeFixedValue = "simple";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator extref(XElement xe) { return XTypedServices.ToXTypedElement<extref>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static extref() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public extref() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<corpname> corpname {
            get {
                if ((this.corpnameField == null)) {
                    this.corpnameField = new XTypedList<corpname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"));
                }
                return this.corpnameField;
            }
            set {
                if ((value == null)) {
                    this.corpnameField = null;
                }
                else {
                    if ((this.corpnameField == null)) {
                        this.corpnameField = XTypedList<corpname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<corpname>(this.corpnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<famname> famname {
            get {
                if ((this.famnameField == null)) {
                    this.famnameField = new XTypedList<famname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"));
                }
                return this.famnameField;
            }
            set {
                if ((value == null)) {
                    this.famnameField = null;
                }
                else {
                    if ((this.famnameField == null)) {
                        this.famnameField = XTypedList<famname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<famname>(this.famnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<geogname> geogname {
            get {
                if ((this.geognameField == null)) {
                    this.geognameField = new XTypedList<geogname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"));
                }
                return this.geognameField;
            }
            set {
                if ((value == null)) {
                    this.geognameField = null;
                }
                else {
                    if ((this.geognameField == null)) {
                        this.geognameField = XTypedList<geogname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<geogname>(this.geognameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<name> name {
            get {
                if ((this.nameField == null)) {
                    this.nameField = new XTypedList<name>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"));
                }
                return this.nameField;
            }
            set {
                if ((value == null)) {
                    this.nameField = null;
                }
                else {
                    if ((this.nameField == null)) {
                        this.nameField = XTypedList<name>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<name>(this.nameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<occupation> occupation {
            get {
                if ((this.occupationField == null)) {
                    this.occupationField = new XTypedList<occupation>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"));
                }
                return this.occupationField;
            }
            set {
                if ((value == null)) {
                    this.occupationField = null;
                }
                else {
                    if ((this.occupationField == null)) {
                        this.occupationField = XTypedList<occupation>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<occupation>(this.occupationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<persname> persname {
            get {
                if ((this.persnameField == null)) {
                    this.persnameField = new XTypedList<persname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"));
                }
                return this.persnameField;
            }
            set {
                if ((value == null)) {
                    this.persnameField = null;
                }
                else {
                    if ((this.persnameField == null)) {
                        this.persnameField = XTypedList<persname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<persname>(this.persnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<subject> subject {
            get {
                if ((this.subjectField == null)) {
                    this.subjectField = new XTypedList<subject>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"));
                }
                return this.subjectField;
            }
            set {
                if ((value == null)) {
                    this.subjectField = null;
                }
                else {
                    if ((this.subjectField == null)) {
                        this.subjectField = XTypedList<subject>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<subject>(this.subjectField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<genreform> genreform {
            get {
                if ((this.genreformField == null)) {
                    this.genreformField = new XTypedList<genreform>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"));
                }
                return this.genreformField;
            }
            set {
                if ((value == null)) {
                    this.genreformField = null;
                }
                else {
                    if ((this.genreformField == null)) {
                        this.genreformField = XTypedList<genreform>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<genreform>(this.genreformField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<function> function {
            get {
                if ((this.functionField == null)) {
                    this.functionField = new XTypedList<function>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"));
                }
                return this.functionField;
            }
            set {
                if ((value == null)) {
                    this.functionField = null;
                }
                else {
                    if ((this.functionField == null)) {
                        this.functionField = XTypedList<function>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<function>(this.functionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<date> date {
            get {
                if ((this.dateField == null)) {
                    this.dateField = new XTypedList<date>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"));
                }
                return this.dateField;
            }
            set {
                if ((value == null)) {
                    this.dateField = null;
                }
                else {
                    if ((this.dateField == null)) {
                        this.dateField = XTypedList<date>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<date>(this.dateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<num> num {
            get {
                if ((this.numField == null)) {
                    this.numField = new XTypedList<num>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"));
                }
                return this.numField;
            }
            set {
                if ((value == null)) {
                    this.numField = null;
                }
                else {
                    if ((this.numField == null)) {
                        this.numField = XTypedList<num>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<num>(this.numField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<origination> origination {
            get {
                if ((this.originationField == null)) {
                    this.originationField = new XTypedList<origination>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9"));
                }
                return this.originationField;
            }
            set {
                if ((value == null)) {
                    this.originationField = null;
                }
                else {
                    if ((this.originationField == null)) {
                        this.originationField = XTypedList<origination>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<origination>(this.originationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<repository> repository {
            get {
                if ((this.repositoryField == null)) {
                    this.repositoryField = new XTypedList<repository>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9"));
                }
                return this.repositoryField;
            }
            set {
                if ((value == null)) {
                    this.repositoryField = null;
                }
                else {
                    if ((this.repositoryField == null)) {
                        this.repositoryField = XTypedList<repository>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<repository>(this.repositoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<unitdate> unitdate {
            get {
                if ((this.unitdateField == null)) {
                    this.unitdateField = new XTypedList<unitdate>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9"));
                }
                return this.unitdateField;
            }
            set {
                if ((value == null)) {
                    this.unitdateField = null;
                }
                else {
                    if ((this.unitdateField == null)) {
                        this.unitdateField = XTypedList<unitdate>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<unitdate>(this.unitdateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<unittitle> unittitle {
            get {
                if ((this.unittitleField == null)) {
                    this.unittitleField = new XTypedList<unittitle>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9"));
                }
                return this.unittitleField;
            }
            set {
                if ((value == null)) {
                    this.unittitleField = null;
                }
                else {
                    if ((this.unittitleField == null)) {
                        this.unittitleField = XTypedList<unittitle>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<unittitle>(this.unittitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string entityref {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("entityref", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Entity).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("entityref", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Entity).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string xpointer {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("xpointer", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("xpointer", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                return typeFixedValue;
            }
            set {
                if (value.Equals(typeFixedValue)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, typeFixedValue);
                }
                this.SetAttribute(System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri href {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("href", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("href", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string arcrole {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("arcrole", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("arcrole", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title1 {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string show {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("show", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("show", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string actuate {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("actuate", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("actuate", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<extref>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"), typeof(abbr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"), typeof(expan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"), typeof(corpname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"), typeof(famname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"), typeof(geogname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"), typeof(name));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"), typeof(occupation));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"), typeof(persname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"), typeof(subject));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"), typeof(genreform));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"), typeof(function));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"), typeof(date));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"), typeof(num));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9"), typeof(origination));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9"), typeof(repository));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9"), typeof(unitdate));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9"), typeof(unittitle));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"), typeof(address));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"), typeof(chronlist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"), typeof(list));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"), typeof(table));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"), typeof(blockquote));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"), typeof(bibref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"), typeof(title));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"), typeof(archref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"), typeof(@ref));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | date | num)*
    /// </para>
    /// </summary>
    public partial class title : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<date> dateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<num> numField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string type1FixedValue = "simple";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator title(XElement xe) { return XTypedServices.ToXTypedElement<title>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static title() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | date | num)*
        /// </para>
        /// </summary>
        public title() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | date | num)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | date | num)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | date | num)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | date | num)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | date | num)*
        /// </para>
        /// </summary>
        public virtual IList<date> date {
            get {
                if ((this.dateField == null)) {
                    this.dateField = new XTypedList<date>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"));
                }
                return this.dateField;
            }
            set {
                if ((value == null)) {
                    this.dateField = null;
                }
                else {
                    if ((this.dateField == null)) {
                        this.dateField = XTypedList<date>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<date>(this.dateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | date | num)*
        /// </para>
        /// </summary>
        public virtual IList<num> num {
            get {
                if ((this.numField == null)) {
                    this.numField = new XTypedList<num>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"));
                }
                return this.numField;
            }
            set {
                if ((value == null)) {
                    this.numField = null;
                }
                else {
                    if ((this.numField == null)) {
                        this.numField = XTypedList<num>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<num>(this.numField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string render {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("render", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("render", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("source", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("source", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string rules {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("rules", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("rules", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string authfilenumber {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("authfilenumber", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("authfilenumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string normal {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("normal", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("normal", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string entityref {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("entityref", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Entity).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("entityref", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Entity).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string xpointer {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("xpointer", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("xpointer", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type1 {
            get {
                return type1FixedValue;
            }
            set {
                if (value.Equals(type1FixedValue)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, type1FixedValue);
                }
                this.SetAttribute(System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri href {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("href", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("href", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string arcrole {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("arcrole", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("arcrole", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title1 {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string show {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("show", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("show", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string actuate {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("actuate", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("actuate", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<title>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"), typeof(date));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"), typeof(num));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
    /// </para>
    /// </summary>
    public partial class archref : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@abstract> @abstractField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<container> containerField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dao> daoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<daogrp> daogrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<langmaterial> langmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<materialspec> materialspecField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<origination> originationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<physdesc> physdescField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<physloc> physlocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<repository> repositoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unitdate> unitdateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unitid> unitidField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unittitle> unittitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string typeFixedValue = "simple";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator archref(XElement xe) { return XTypedServices.ToXTypedElement<archref>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static archref() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public archref() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<@abstract> @abstract {
            get {
                if ((this.@abstractField == null)) {
                    this.@abstractField = new XTypedList<@abstract>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("abstract", "urn:isbn:1-931666-22-9"));
                }
                return this.@abstractField;
            }
            set {
                if ((value == null)) {
                    this.@abstractField = null;
                }
                else {
                    if ((this.@abstractField == null)) {
                        this.@abstractField = XTypedList<@abstract>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("abstract", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<@abstract>(this.@abstractField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<container> container {
            get {
                if ((this.containerField == null)) {
                    this.containerField = new XTypedList<container>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("container", "urn:isbn:1-931666-22-9"));
                }
                return this.containerField;
            }
            set {
                if ((value == null)) {
                    this.containerField = null;
                }
                else {
                    if ((this.containerField == null)) {
                        this.containerField = XTypedList<container>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("container", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<container>(this.containerField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<dao> dao {
            get {
                if ((this.daoField == null)) {
                    this.daoField = new XTypedList<dao>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"));
                }
                return this.daoField;
            }
            set {
                if ((value == null)) {
                    this.daoField = null;
                }
                else {
                    if ((this.daoField == null)) {
                        this.daoField = XTypedList<dao>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<dao>(this.daoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<daogrp> daogrp {
            get {
                if ((this.daogrpField == null)) {
                    this.daogrpField = new XTypedList<daogrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"));
                }
                return this.daogrpField;
            }
            set {
                if ((value == null)) {
                    this.daogrpField = null;
                }
                else {
                    if ((this.daogrpField == null)) {
                        this.daogrpField = XTypedList<daogrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<daogrp>(this.daogrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<langmaterial> langmaterial {
            get {
                if ((this.langmaterialField == null)) {
                    this.langmaterialField = new XTypedList<langmaterial>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("langmaterial", "urn:isbn:1-931666-22-9"));
                }
                return this.langmaterialField;
            }
            set {
                if ((value == null)) {
                    this.langmaterialField = null;
                }
                else {
                    if ((this.langmaterialField == null)) {
                        this.langmaterialField = XTypedList<langmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("langmaterial", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<langmaterial>(this.langmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<materialspec> materialspec {
            get {
                if ((this.materialspecField == null)) {
                    this.materialspecField = new XTypedList<materialspec>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("materialspec", "urn:isbn:1-931666-22-9"));
                }
                return this.materialspecField;
            }
            set {
                if ((value == null)) {
                    this.materialspecField = null;
                }
                else {
                    if ((this.materialspecField == null)) {
                        this.materialspecField = XTypedList<materialspec>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("materialspec", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<materialspec>(this.materialspecField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<origination> origination {
            get {
                if ((this.originationField == null)) {
                    this.originationField = new XTypedList<origination>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9"));
                }
                return this.originationField;
            }
            set {
                if ((value == null)) {
                    this.originationField = null;
                }
                else {
                    if ((this.originationField == null)) {
                        this.originationField = XTypedList<origination>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<origination>(this.originationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<physdesc> physdesc {
            get {
                if ((this.physdescField == null)) {
                    this.physdescField = new XTypedList<physdesc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("physdesc", "urn:isbn:1-931666-22-9"));
                }
                return this.physdescField;
            }
            set {
                if ((value == null)) {
                    this.physdescField = null;
                }
                else {
                    if ((this.physdescField == null)) {
                        this.physdescField = XTypedList<physdesc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("physdesc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<physdesc>(this.physdescField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<physloc> physloc {
            get {
                if ((this.physlocField == null)) {
                    this.physlocField = new XTypedList<physloc>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("physloc", "urn:isbn:1-931666-22-9"));
                }
                return this.physlocField;
            }
            set {
                if ((value == null)) {
                    this.physlocField = null;
                }
                else {
                    if ((this.physlocField == null)) {
                        this.physlocField = XTypedList<physloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("physloc", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<physloc>(this.physlocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<repository> repository {
            get {
                if ((this.repositoryField == null)) {
                    this.repositoryField = new XTypedList<repository>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9"));
                }
                return this.repositoryField;
            }
            set {
                if ((value == null)) {
                    this.repositoryField = null;
                }
                else {
                    if ((this.repositoryField == null)) {
                        this.repositoryField = XTypedList<repository>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<repository>(this.repositoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<unitdate> unitdate {
            get {
                if ((this.unitdateField == null)) {
                    this.unitdateField = new XTypedList<unitdate>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9"));
                }
                return this.unitdateField;
            }
            set {
                if ((value == null)) {
                    this.unitdateField = null;
                }
                else {
                    if ((this.unitdateField == null)) {
                        this.unitdateField = XTypedList<unitdate>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<unitdate>(this.unitdateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<unitid> unitid {
            get {
                if ((this.unitidField == null)) {
                    this.unitidField = new XTypedList<unitid>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("unitid", "urn:isbn:1-931666-22-9"));
                }
                return this.unitidField;
            }
            set {
                if ((value == null)) {
                    this.unitidField = null;
                }
                else {
                    if ((this.unitidField == null)) {
                        this.unitidField = XTypedList<unitid>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("unitid", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<unitid>(this.unitidField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<unittitle> unittitle {
            get {
                if ((this.unittitleField == null)) {
                    this.unittitleField = new XTypedList<unittitle>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9"));
                }
                return this.unittitleField;
            }
            set {
                if ((value == null)) {
                    this.unittitleField = null;
                }
                else {
                    if ((this.unittitleField == null)) {
                        this.unittitleField = XTypedList<unittitle>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<unittitle>(this.unittitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string entityref {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("entityref", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Entity).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("entityref", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Entity).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string xpointer {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("xpointer", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("xpointer", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                return typeFixedValue;
            }
            set {
                if (value.Equals(typeFixedValue)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, typeFixedValue);
                }
                this.SetAttribute(System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri href {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("href", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("href", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string arcrole {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("arcrole", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("arcrole", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title1 {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string show {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("show", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("show", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string actuate {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("actuate", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("actuate", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<archref>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"), typeof(abbr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"), typeof(expan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"), typeof(bibref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"), typeof(@ref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"), typeof(title));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"), typeof(extref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("abstract", "urn:isbn:1-931666-22-9"), typeof(@abstract));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("container", "urn:isbn:1-931666-22-9"), typeof(container));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"), typeof(dao));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"), typeof(daogrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("langmaterial", "urn:isbn:1-931666-22-9"), typeof(langmaterial));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("materialspec", "urn:isbn:1-931666-22-9"), typeof(materialspec));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9"), typeof(origination));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("physdesc", "urn:isbn:1-931666-22-9"), typeof(physdesc));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("physloc", "urn:isbn:1-931666-22-9"), typeof(physloc));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9"), typeof(repository));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9"), typeof(unitdate));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("unitid", "urn:isbn:1-931666-22-9"), typeof(unitid));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9"), typeof(unittitle));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | edition | imprint | name | num | bibseries | @ref | title | famname | persname | corpname | extref | archref)*
    /// </para>
    /// </summary>
    public partial class bibref : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<edition> editionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<imprint> imprintField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<name> nameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<num> numField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibseries> bibseriesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<famname> famnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<persname> persnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<corpname> corpnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string typeFixedValue = "simple";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator bibref(XElement xe) { return XTypedServices.ToXTypedElement<bibref>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static bibref() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | edition | imprint | name | num | bibseries | @ref | title | famname | persname | corpname | extref | archref)*
        /// </para>
        /// </summary>
        public bibref() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | edition | imprint | name | num | bibseries | @ref | title | famname | persname | corpname | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | edition | imprint | name | num | bibseries | @ref | title | famname | persname | corpname | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | edition | imprint | name | num | bibseries | @ref | title | famname | persname | corpname | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | edition | imprint | name | num | bibseries | @ref | title | famname | persname | corpname | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | edition | imprint | name | num | bibseries | @ref | title | famname | persname | corpname | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | edition | imprint | name | num | bibseries | @ref | title | famname | persname | corpname | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | edition | imprint | name | num | bibseries | @ref | title | famname | persname | corpname | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<edition> edition {
            get {
                if ((this.editionField == null)) {
                    this.editionField = new XTypedList<edition>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("edition", "urn:isbn:1-931666-22-9"));
                }
                return this.editionField;
            }
            set {
                if ((value == null)) {
                    this.editionField = null;
                }
                else {
                    if ((this.editionField == null)) {
                        this.editionField = XTypedList<edition>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("edition", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<edition>(this.editionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | edition | imprint | name | num | bibseries | @ref | title | famname | persname | corpname | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<imprint> imprint {
            get {
                if ((this.imprintField == null)) {
                    this.imprintField = new XTypedList<imprint>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("imprint", "urn:isbn:1-931666-22-9"));
                }
                return this.imprintField;
            }
            set {
                if ((value == null)) {
                    this.imprintField = null;
                }
                else {
                    if ((this.imprintField == null)) {
                        this.imprintField = XTypedList<imprint>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("imprint", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<imprint>(this.imprintField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | edition | imprint | name | num | bibseries | @ref | title | famname | persname | corpname | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<name> name {
            get {
                if ((this.nameField == null)) {
                    this.nameField = new XTypedList<name>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"));
                }
                return this.nameField;
            }
            set {
                if ((value == null)) {
                    this.nameField = null;
                }
                else {
                    if ((this.nameField == null)) {
                        this.nameField = XTypedList<name>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<name>(this.nameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | edition | imprint | name | num | bibseries | @ref | title | famname | persname | corpname | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<num> num {
            get {
                if ((this.numField == null)) {
                    this.numField = new XTypedList<num>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"));
                }
                return this.numField;
            }
            set {
                if ((value == null)) {
                    this.numField = null;
                }
                else {
                    if ((this.numField == null)) {
                        this.numField = XTypedList<num>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<num>(this.numField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | edition | imprint | name | num | bibseries | @ref | title | famname | persname | corpname | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<bibseries> bibseries {
            get {
                if ((this.bibseriesField == null)) {
                    this.bibseriesField = new XTypedList<bibseries>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibseries", "urn:isbn:1-931666-22-9"));
                }
                return this.bibseriesField;
            }
            set {
                if ((value == null)) {
                    this.bibseriesField = null;
                }
                else {
                    if ((this.bibseriesField == null)) {
                        this.bibseriesField = XTypedList<bibseries>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibseries", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibseries>(this.bibseriesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | edition | imprint | name | num | bibseries | @ref | title | famname | persname | corpname | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | edition | imprint | name | num | bibseries | @ref | title | famname | persname | corpname | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | edition | imprint | name | num | bibseries | @ref | title | famname | persname | corpname | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<famname> famname {
            get {
                if ((this.famnameField == null)) {
                    this.famnameField = new XTypedList<famname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"));
                }
                return this.famnameField;
            }
            set {
                if ((value == null)) {
                    this.famnameField = null;
                }
                else {
                    if ((this.famnameField == null)) {
                        this.famnameField = XTypedList<famname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<famname>(this.famnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | edition | imprint | name | num | bibseries | @ref | title | famname | persname | corpname | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<persname> persname {
            get {
                if ((this.persnameField == null)) {
                    this.persnameField = new XTypedList<persname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"));
                }
                return this.persnameField;
            }
            set {
                if ((value == null)) {
                    this.persnameField = null;
                }
                else {
                    if ((this.persnameField == null)) {
                        this.persnameField = XTypedList<persname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<persname>(this.persnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | edition | imprint | name | num | bibseries | @ref | title | famname | persname | corpname | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<corpname> corpname {
            get {
                if ((this.corpnameField == null)) {
                    this.corpnameField = new XTypedList<corpname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"));
                }
                return this.corpnameField;
            }
            set {
                if ((value == null)) {
                    this.corpnameField = null;
                }
                else {
                    if ((this.corpnameField == null)) {
                        this.corpnameField = XTypedList<corpname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<corpname>(this.corpnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | edition | imprint | name | num | bibseries | @ref | title | famname | persname | corpname | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | edition | imprint | name | num | bibseries | @ref | title | famname | persname | corpname | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string entityref {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("entityref", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Entity).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("entityref", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Entity).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string xpointer {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("xpointer", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("xpointer", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                return typeFixedValue;
            }
            set {
                if (value.Equals(typeFixedValue)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, typeFixedValue);
                }
                this.SetAttribute(System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri href {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("href", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("href", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string arcrole {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("arcrole", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("arcrole", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title1 {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string show {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("show", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("show", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string actuate {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("actuate", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("actuate", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<bibref>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"), typeof(abbr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"), typeof(expan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("edition", "urn:isbn:1-931666-22-9"), typeof(edition));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("imprint", "urn:isbn:1-931666-22-9"), typeof(imprint));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"), typeof(name));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"), typeof(num));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibseries", "urn:isbn:1-931666-22-9"), typeof(bibseries));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"), typeof(@ref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"), typeof(title));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"), typeof(famname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"), typeof(persname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"), typeof(corpname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"), typeof(extref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"), typeof(archref));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb)*
    /// </para>
    /// </summary>
    public partial class edition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator edition(XElement xe) { return XTypedServices.ToXTypedElement<edition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static edition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public edition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("edition", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<edition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | title | num)*
    /// </para>
    /// </summary>
    public partial class bibseries : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<num> numField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator bibseries(XElement xe) { return XTypedServices.ToXTypedElement<bibseries>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static bibseries() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | title | num)*
        /// </para>
        /// </summary>
        public bibseries() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | title | num)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | title | num)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | title | num)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | title | num)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | title | num)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | title | num)*
        /// </para>
        /// </summary>
        public virtual IList<num> num {
            get {
                if ((this.numField == null)) {
                    this.numField = new XTypedList<num>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"));
                }
                return this.numField;
            }
            set {
                if ((value == null)) {
                    this.numField = null;
                }
                else {
                    if ((this.numField == null)) {
                        this.numField = XTypedList<num>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<num>(this.numField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("bibseries", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<bibseries>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"), typeof(title));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"), typeof(num));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | publisher | geogname | date)*
    /// </para>
    /// </summary>
    public partial class imprint : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<publisher> publisherField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<geogname> geognameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<date> dateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator imprint(XElement xe) { return XTypedServices.ToXTypedElement<imprint>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static imprint() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | publisher | geogname | date)*
        /// </para>
        /// </summary>
        public imprint() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | publisher | geogname | date)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | publisher | geogname | date)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | publisher | geogname | date)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | publisher | geogname | date)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | publisher | geogname | date)*
        /// </para>
        /// </summary>
        public virtual IList<publisher> publisher {
            get {
                if ((this.publisherField == null)) {
                    this.publisherField = new XTypedList<publisher>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("publisher", "urn:isbn:1-931666-22-9"));
                }
                return this.publisherField;
            }
            set {
                if ((value == null)) {
                    this.publisherField = null;
                }
                else {
                    if ((this.publisherField == null)) {
                        this.publisherField = XTypedList<publisher>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("publisher", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<publisher>(this.publisherField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | publisher | geogname | date)*
        /// </para>
        /// </summary>
        public virtual IList<geogname> geogname {
            get {
                if ((this.geognameField == null)) {
                    this.geognameField = new XTypedList<geogname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"));
                }
                return this.geognameField;
            }
            set {
                if ((value == null)) {
                    this.geognameField = null;
                }
                else {
                    if ((this.geognameField == null)) {
                        this.geognameField = XTypedList<geogname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<geogname>(this.geognameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | publisher | geogname | date)*
        /// </para>
        /// </summary>
        public virtual IList<date> date {
            get {
                if ((this.dateField == null)) {
                    this.dateField = new XTypedList<date>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"));
                }
                return this.dateField;
            }
            set {
                if ((value == null)) {
                    this.dateField = null;
                }
                else {
                    if ((this.dateField == null)) {
                        this.dateField = XTypedList<date>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<date>(this.dateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("imprint", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<imprint>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("publisher", "urn:isbn:1-931666-22-9"), typeof(publisher));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"), typeof(geogname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"), typeof(date));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb)*
    /// </para>
    /// </summary>
    public partial class publisher : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator publisher(XElement xe) { return XTypedServices.ToXTypedElement<publisher>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static publisher() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public publisher() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("publisher", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<publisher>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | subarea)*
    /// </para>
    /// </summary>
    public partial class corpname : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<subarea> subareaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator corpname(XElement xe) { return XTypedServices.ToXTypedElement<corpname>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static corpname() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | subarea)*
        /// </para>
        /// </summary>
        public corpname() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | subarea)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | subarea)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | subarea)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | subarea)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | subarea)*
        /// </para>
        /// </summary>
        public virtual IList<subarea> subarea {
            get {
                if ((this.subareaField == null)) {
                    this.subareaField = new XTypedList<subarea>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("subarea", "urn:isbn:1-931666-22-9"));
                }
                return this.subareaField;
            }
            set {
                if ((value == null)) {
                    this.subareaField = null;
                }
                else {
                    if ((this.subareaField == null)) {
                        this.subareaField = XTypedList<subarea>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("subarea", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<subarea>(this.subareaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("source", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("source", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string rules {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("rules", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("rules", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string authfilenumber {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("authfilenumber", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("authfilenumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string normal {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("normal", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("normal", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("role", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("role", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<corpname>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("subarea", "urn:isbn:1-931666-22-9"), typeof(subarea));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb)*
    /// </para>
    /// </summary>
    public partial class famname : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator famname(XElement xe) { return XTypedServices.ToXTypedElement<famname>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static famname() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public famname() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("source", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("source", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string rules {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("rules", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("rules", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string authfilenumber {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("authfilenumber", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("authfilenumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string normal {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("normal", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("normal", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("role", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("role", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<famname>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb)*
    /// </para>
    /// </summary>
    public partial class geogname : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator geogname(XElement xe) { return XTypedServices.ToXTypedElement<geogname>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static geogname() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public geogname() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("source", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("source", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string rules {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("rules", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("rules", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string authfilenumber {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("authfilenumber", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("authfilenumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string normal {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("normal", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("normal", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("role", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("role", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<geogname>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb)*
    /// </para>
    /// </summary>
    public partial class name : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator name(XElement xe) { return XTypedServices.ToXTypedElement<name>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static name() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public name() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("source", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("source", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string rules {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("rules", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("rules", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string authfilenumber {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("authfilenumber", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("authfilenumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string normal {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("normal", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("normal", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("role", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("role", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<name>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb)*
    /// </para>
    /// </summary>
    public partial class persname : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator persname(XElement xe) { return XTypedServices.ToXTypedElement<persname>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static persname() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public persname() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("source", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("source", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string rules {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("rules", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("rules", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string authfilenumber {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("authfilenumber", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("authfilenumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string normal {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("normal", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("normal", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("role", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("role", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<persname>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb)*
    /// </para>
    /// </summary>
    public partial class date : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string eraDefaultValue = "ce";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string calendarDefaultValue = "gregorian";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator date(XElement xe) { return XTypedServices.ToXTypedElement<date>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static date() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public date() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string era {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("era", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, eraDefaultValue);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("era", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string calendar {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("calendar", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, calendarDefaultValue);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("calendar", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string normal {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("normal", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("normal", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string certainty {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("certainty", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("certainty", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<date>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb)*
    /// </para>
    /// </summary>
    public partial class num : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator num(XElement xe) { return XTypedServices.ToXTypedElement<num>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static num() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public num() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<num>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class abbr : XTypedElement, IXMetaData {
        
		public static explicit operator abbr(XElement xe) { return XTypedServices.ToXTypedElement<abbr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public abbr() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string expan {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("expan", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("expan", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<abbr>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class expan : XTypedElement, IXMetaData {
        
		public static explicit operator expan(XElement xe) { return XTypedServices.ToXTypedElement<expan>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public expan() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string abbr {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("abbr", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("abbr", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<expan>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (addressline+)
    /// </para>
    /// </summary>
    public partial class address : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<addressline> addresslineField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator address(XElement xe) { return XTypedServices.ToXTypedElement<address>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static address() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("addressline", "urn:isbn:1-931666-22-9")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (addressline+)
        /// </para>
        /// </summary>
        public address() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (addressline+)
        /// </para>
        /// </summary>
        public virtual IList<addressline> addressline {
            get {
                if ((this.addresslineField == null)) {
                    this.addresslineField = new XTypedList<addressline>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("addressline", "urn:isbn:1-931666-22-9"));
                }
                return this.addresslineField;
            }
            set {
                if ((value == null)) {
                    this.addresslineField = null;
                }
                else {
                    if ((this.addresslineField == null)) {
                        this.addresslineField = XTypedList<addressline>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("addressline", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<addressline>(this.addresslineField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<address>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("addressline", "urn:isbn:1-931666-22-9"), typeof(addressline));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb)*
    /// </para>
    /// </summary>
    public partial class addressline : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator addressline(XElement xe) { return XTypedServices.ToXTypedElement<addressline>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static addressline() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public addressline() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("addressline", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<addressline>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
    /// </para>
    /// </summary>
    public partial class @event : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<corpname> corpnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<famname> famnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<geogname> geognameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<name> nameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<occupation> occupationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<persname> persnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<subject> subjectField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<genreform> genreformField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<function> functionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<date> dateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<num> numField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<origination> originationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<repository> repositoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unitdate> unitdateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unittitle> unittitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator @event(XElement xe) { return XTypedServices.ToXTypedElement<@event>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static @event() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public @event() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<corpname> corpname {
            get {
                if ((this.corpnameField == null)) {
                    this.corpnameField = new XTypedList<corpname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"));
                }
                return this.corpnameField;
            }
            set {
                if ((value == null)) {
                    this.corpnameField = null;
                }
                else {
                    if ((this.corpnameField == null)) {
                        this.corpnameField = XTypedList<corpname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<corpname>(this.corpnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<famname> famname {
            get {
                if ((this.famnameField == null)) {
                    this.famnameField = new XTypedList<famname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"));
                }
                return this.famnameField;
            }
            set {
                if ((value == null)) {
                    this.famnameField = null;
                }
                else {
                    if ((this.famnameField == null)) {
                        this.famnameField = XTypedList<famname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<famname>(this.famnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<geogname> geogname {
            get {
                if ((this.geognameField == null)) {
                    this.geognameField = new XTypedList<geogname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"));
                }
                return this.geognameField;
            }
            set {
                if ((value == null)) {
                    this.geognameField = null;
                }
                else {
                    if ((this.geognameField == null)) {
                        this.geognameField = XTypedList<geogname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<geogname>(this.geognameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<name> name {
            get {
                if ((this.nameField == null)) {
                    this.nameField = new XTypedList<name>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"));
                }
                return this.nameField;
            }
            set {
                if ((value == null)) {
                    this.nameField = null;
                }
                else {
                    if ((this.nameField == null)) {
                        this.nameField = XTypedList<name>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<name>(this.nameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<occupation> occupation {
            get {
                if ((this.occupationField == null)) {
                    this.occupationField = new XTypedList<occupation>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"));
                }
                return this.occupationField;
            }
            set {
                if ((value == null)) {
                    this.occupationField = null;
                }
                else {
                    if ((this.occupationField == null)) {
                        this.occupationField = XTypedList<occupation>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<occupation>(this.occupationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<persname> persname {
            get {
                if ((this.persnameField == null)) {
                    this.persnameField = new XTypedList<persname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"));
                }
                return this.persnameField;
            }
            set {
                if ((value == null)) {
                    this.persnameField = null;
                }
                else {
                    if ((this.persnameField == null)) {
                        this.persnameField = XTypedList<persname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<persname>(this.persnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<subject> subject {
            get {
                if ((this.subjectField == null)) {
                    this.subjectField = new XTypedList<subject>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"));
                }
                return this.subjectField;
            }
            set {
                if ((value == null)) {
                    this.subjectField = null;
                }
                else {
                    if ((this.subjectField == null)) {
                        this.subjectField = XTypedList<subject>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<subject>(this.subjectField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<genreform> genreform {
            get {
                if ((this.genreformField == null)) {
                    this.genreformField = new XTypedList<genreform>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"));
                }
                return this.genreformField;
            }
            set {
                if ((value == null)) {
                    this.genreformField = null;
                }
                else {
                    if ((this.genreformField == null)) {
                        this.genreformField = XTypedList<genreform>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<genreform>(this.genreformField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<function> function {
            get {
                if ((this.functionField == null)) {
                    this.functionField = new XTypedList<function>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"));
                }
                return this.functionField;
            }
            set {
                if ((value == null)) {
                    this.functionField = null;
                }
                else {
                    if ((this.functionField == null)) {
                        this.functionField = XTypedList<function>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<function>(this.functionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<date> date {
            get {
                if ((this.dateField == null)) {
                    this.dateField = new XTypedList<date>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"));
                }
                return this.dateField;
            }
            set {
                if ((value == null)) {
                    this.dateField = null;
                }
                else {
                    if ((this.dateField == null)) {
                        this.dateField = XTypedList<date>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<date>(this.dateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<num> num {
            get {
                if ((this.numField == null)) {
                    this.numField = new XTypedList<num>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"));
                }
                return this.numField;
            }
            set {
                if ((value == null)) {
                    this.numField = null;
                }
                else {
                    if ((this.numField == null)) {
                        this.numField = XTypedList<num>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<num>(this.numField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<origination> origination {
            get {
                if ((this.originationField == null)) {
                    this.originationField = new XTypedList<origination>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9"));
                }
                return this.originationField;
            }
            set {
                if ((value == null)) {
                    this.originationField = null;
                }
                else {
                    if ((this.originationField == null)) {
                        this.originationField = XTypedList<origination>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<origination>(this.originationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<repository> repository {
            get {
                if ((this.repositoryField == null)) {
                    this.repositoryField = new XTypedList<repository>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9"));
                }
                return this.repositoryField;
            }
            set {
                if ((value == null)) {
                    this.repositoryField = null;
                }
                else {
                    if ((this.repositoryField == null)) {
                        this.repositoryField = XTypedList<repository>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<repository>(this.repositoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<unitdate> unitdate {
            get {
                if ((this.unitdateField == null)) {
                    this.unitdateField = new XTypedList<unitdate>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9"));
                }
                return this.unitdateField;
            }
            set {
                if ((value == null)) {
                    this.unitdateField = null;
                }
                else {
                    if ((this.unitdateField == null)) {
                        this.unitdateField = XTypedList<unitdate>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<unitdate>(this.unitdateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<unittitle> unittitle {
            get {
                if ((this.unittitleField == null)) {
                    this.unittitleField = new XTypedList<unittitle>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9"));
                }
                return this.unittitleField;
            }
            set {
                if ((value == null)) {
                    this.unittitleField = null;
                }
                else {
                    if ((this.unittitleField == null)) {
                        this.unittitleField = XTypedList<unittitle>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<unittitle>(this.unittitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("event", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<@event>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"), typeof(abbr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"), typeof(expan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"), typeof(corpname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"), typeof(famname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"), typeof(geogname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"), typeof(name));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"), typeof(occupation));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"), typeof(persname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"), typeof(subject));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"), typeof(genreform));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"), typeof(function));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"), typeof(date));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"), typeof(num));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9"), typeof(origination));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9"), typeof(repository));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9"), typeof(unitdate));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9"), typeof(unittitle));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"), typeof(@ref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"), typeof(extref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"), typeof(linkgrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"), typeof(bibref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"), typeof(title));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"), typeof(archref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"), typeof(address));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"), typeof(chronlist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"), typeof(list));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"), typeof(table));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"), typeof(blockquote));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (item+ | (listhead?, defitem+)))
    /// </para>
    /// </summary>
    public partial class list : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<item> itemField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<defitem> defitemField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator list(XElement xe) { return XTypedServices.ToXTypedElement<list>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static list() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (item+ | (listhead?, defitem+)))
        /// </para>
        /// </summary>
        public list() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (item+ | (listhead?, defitem+)))
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"));
                return ((head)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (item+ | (listhead?, defitem+)))
        /// </para>
        /// </summary>
        public virtual IList<item> item {
            get {
                if ((this.itemField == null)) {
                    this.itemField = new XTypedList<item>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("item", "urn:isbn:1-931666-22-9"));
                }
                return this.itemField;
            }
            set {
                if ((value == null)) {
                    this.itemField = null;
                }
                else {
                    if ((this.itemField == null)) {
                        this.itemField = XTypedList<item>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("item", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<item>(this.itemField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (item+ | (listhead?, defitem+)))
        /// </para>
        /// </summary>
        public virtual listhead listhead {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("listhead", "urn:isbn:1-931666-22-9"));
                return ((listhead)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("listhead", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (item+ | (listhead?, defitem+)))
        /// </para>
        /// </summary>
        public virtual IList<defitem> defitem {
            get {
                if ((this.defitemField == null)) {
                    this.defitemField = new XTypedList<defitem>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("defitem", "urn:isbn:1-931666-22-9"));
                }
                return this.defitemField;
            }
            set {
                if ((value == null)) {
                    this.defitemField = null;
                }
                else {
                    if ((this.defitemField == null)) {
                        this.defitemField = XTypedList<defitem>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("defitem", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<defitem>(this.defitemField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mark {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("mark", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("mark", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string numeration {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("numeration", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("numeration", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string continuation {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("continuation", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("continuation", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<list>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), typeof(head));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("item", "urn:isbn:1-931666-22-9"), typeof(item));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("listhead", "urn:isbn:1-931666-22-9"), typeof(listhead));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("defitem", "urn:isbn:1-931666-22-9"), typeof(defitem));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (label, item)
    /// </para>
    /// </summary>
    public partial class defitem : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator defitem(XElement xe) { return XTypedServices.ToXTypedElement<defitem>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static defitem() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("label", "urn:isbn:1-931666-22-9")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("item", "urn:isbn:1-931666-22-9")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (label, item)
        /// </para>
        /// </summary>
        public defitem() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (label, item)
        /// </para>
        /// </summary>
        public virtual label label {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("label", "urn:isbn:1-931666-22-9"));
                return ((label)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("label", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (label, item)
        /// </para>
        /// </summary>
        public virtual item item {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("item", "urn:isbn:1-931666-22-9"));
                return ((item)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("item", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("defitem", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<defitem>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("label", "urn:isbn:1-931666-22-9"), typeof(label));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("item", "urn:isbn:1-931666-22-9"), typeof(item));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
    /// </para>
    /// </summary>
    public partial class label : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<corpname> corpnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<famname> famnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<geogname> geognameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<name> nameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<occupation> occupationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<persname> persnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<subject> subjectField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<genreform> genreformField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<function> functionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<date> dateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<num> numField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<origination> originationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<repository> repositoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unitdate> unitdateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unittitle> unittitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator label(XElement xe) { return XTypedServices.ToXTypedElement<label>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static label() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public label() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<corpname> corpname {
            get {
                if ((this.corpnameField == null)) {
                    this.corpnameField = new XTypedList<corpname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"));
                }
                return this.corpnameField;
            }
            set {
                if ((value == null)) {
                    this.corpnameField = null;
                }
                else {
                    if ((this.corpnameField == null)) {
                        this.corpnameField = XTypedList<corpname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<corpname>(this.corpnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<famname> famname {
            get {
                if ((this.famnameField == null)) {
                    this.famnameField = new XTypedList<famname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"));
                }
                return this.famnameField;
            }
            set {
                if ((value == null)) {
                    this.famnameField = null;
                }
                else {
                    if ((this.famnameField == null)) {
                        this.famnameField = XTypedList<famname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<famname>(this.famnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<geogname> geogname {
            get {
                if ((this.geognameField == null)) {
                    this.geognameField = new XTypedList<geogname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"));
                }
                return this.geognameField;
            }
            set {
                if ((value == null)) {
                    this.geognameField = null;
                }
                else {
                    if ((this.geognameField == null)) {
                        this.geognameField = XTypedList<geogname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<geogname>(this.geognameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<name> name {
            get {
                if ((this.nameField == null)) {
                    this.nameField = new XTypedList<name>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"));
                }
                return this.nameField;
            }
            set {
                if ((value == null)) {
                    this.nameField = null;
                }
                else {
                    if ((this.nameField == null)) {
                        this.nameField = XTypedList<name>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<name>(this.nameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<occupation> occupation {
            get {
                if ((this.occupationField == null)) {
                    this.occupationField = new XTypedList<occupation>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"));
                }
                return this.occupationField;
            }
            set {
                if ((value == null)) {
                    this.occupationField = null;
                }
                else {
                    if ((this.occupationField == null)) {
                        this.occupationField = XTypedList<occupation>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<occupation>(this.occupationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<persname> persname {
            get {
                if ((this.persnameField == null)) {
                    this.persnameField = new XTypedList<persname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"));
                }
                return this.persnameField;
            }
            set {
                if ((value == null)) {
                    this.persnameField = null;
                }
                else {
                    if ((this.persnameField == null)) {
                        this.persnameField = XTypedList<persname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<persname>(this.persnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<subject> subject {
            get {
                if ((this.subjectField == null)) {
                    this.subjectField = new XTypedList<subject>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"));
                }
                return this.subjectField;
            }
            set {
                if ((value == null)) {
                    this.subjectField = null;
                }
                else {
                    if ((this.subjectField == null)) {
                        this.subjectField = XTypedList<subject>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<subject>(this.subjectField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<genreform> genreform {
            get {
                if ((this.genreformField == null)) {
                    this.genreformField = new XTypedList<genreform>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"));
                }
                return this.genreformField;
            }
            set {
                if ((value == null)) {
                    this.genreformField = null;
                }
                else {
                    if ((this.genreformField == null)) {
                        this.genreformField = XTypedList<genreform>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<genreform>(this.genreformField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<function> function {
            get {
                if ((this.functionField == null)) {
                    this.functionField = new XTypedList<function>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"));
                }
                return this.functionField;
            }
            set {
                if ((value == null)) {
                    this.functionField = null;
                }
                else {
                    if ((this.functionField == null)) {
                        this.functionField = XTypedList<function>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<function>(this.functionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<date> date {
            get {
                if ((this.dateField == null)) {
                    this.dateField = new XTypedList<date>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"));
                }
                return this.dateField;
            }
            set {
                if ((value == null)) {
                    this.dateField = null;
                }
                else {
                    if ((this.dateField == null)) {
                        this.dateField = XTypedList<date>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<date>(this.dateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<num> num {
            get {
                if ((this.numField == null)) {
                    this.numField = new XTypedList<num>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"));
                }
                return this.numField;
            }
            set {
                if ((value == null)) {
                    this.numField = null;
                }
                else {
                    if ((this.numField == null)) {
                        this.numField = XTypedList<num>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<num>(this.numField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<origination> origination {
            get {
                if ((this.originationField == null)) {
                    this.originationField = new XTypedList<origination>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9"));
                }
                return this.originationField;
            }
            set {
                if ((value == null)) {
                    this.originationField = null;
                }
                else {
                    if ((this.originationField == null)) {
                        this.originationField = XTypedList<origination>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<origination>(this.originationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<repository> repository {
            get {
                if ((this.repositoryField == null)) {
                    this.repositoryField = new XTypedList<repository>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9"));
                }
                return this.repositoryField;
            }
            set {
                if ((value == null)) {
                    this.repositoryField = null;
                }
                else {
                    if ((this.repositoryField == null)) {
                        this.repositoryField = XTypedList<repository>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<repository>(this.repositoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<unitdate> unitdate {
            get {
                if ((this.unitdateField == null)) {
                    this.unitdateField = new XTypedList<unitdate>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9"));
                }
                return this.unitdateField;
            }
            set {
                if ((value == null)) {
                    this.unitdateField = null;
                }
                else {
                    if ((this.unitdateField == null)) {
                        this.unitdateField = XTypedList<unitdate>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<unitdate>(this.unitdateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<unittitle> unittitle {
            get {
                if ((this.unittitleField == null)) {
                    this.unittitleField = new XTypedList<unittitle>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9"));
                }
                return this.unittitleField;
            }
            set {
                if ((value == null)) {
                    this.unittitleField = null;
                }
                else {
                    if ((this.unittitleField == null)) {
                        this.unittitleField = XTypedList<unittitle>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<unittitle>(this.unittitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("label", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<label>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"), typeof(abbr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"), typeof(expan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"), typeof(corpname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"), typeof(famname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"), typeof(geogname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"), typeof(name));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"), typeof(occupation));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"), typeof(persname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"), typeof(subject));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"), typeof(genreform));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"), typeof(function));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"), typeof(date));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"), typeof(num));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9"), typeof(origination));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9"), typeof(repository));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9"), typeof(unitdate));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9"), typeof(unittitle));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"), typeof(@ref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"), typeof(extref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"), typeof(linkgrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"), typeof(bibref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"), typeof(title));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"), typeof(archref));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head01?, head02?)
    /// </para>
    /// </summary>
    public partial class listhead : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator listhead(XElement xe) { return XTypedServices.ToXTypedElement<listhead>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static listhead() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("head01", "urn:isbn:1-931666-22-9")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("head02", "urn:isbn:1-931666-22-9")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head01?, head02?)
        /// </para>
        /// </summary>
        public listhead() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head01?, head02?)
        /// </para>
        /// </summary>
        public virtual head01 head01 {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head01", "urn:isbn:1-931666-22-9"));
                return ((head01)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head01", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head01?, head02?)
        /// </para>
        /// </summary>
        public virtual head02 head02 {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("head02", "urn:isbn:1-931666-22-9"));
                return ((head02)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("head02", "urn:isbn:1-931666-22-9"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("listhead", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<listhead>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head01", "urn:isbn:1-931666-22-9"), typeof(head01));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("head02", "urn:isbn:1-931666-22-9"), typeof(head02));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb)*
    /// </para>
    /// </summary>
    public partial class head01 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator head01(XElement xe) { return XTypedServices.ToXTypedElement<head01>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static head01() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public head01() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("head01", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<head01>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb)*
    /// </para>
    /// </summary>
    public partial class head02 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator head02(XElement xe) { return XTypedServices.ToXTypedElement<head02>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static head02() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public head02() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("head02", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<head02>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
    /// </para>
    /// </summary>
    public partial class item : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<corpname> corpnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<famname> famnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<geogname> geognameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<name> nameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<occupation> occupationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<persname> persnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<subject> subjectField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<genreform> genreformField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<function> functionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<date> dateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<num> numField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<origination> originationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<repository> repositoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unitdate> unitdateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unittitle> unittitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator item(XElement xe) { return XTypedServices.ToXTypedElement<item>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static item() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public item() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<corpname> corpname {
            get {
                if ((this.corpnameField == null)) {
                    this.corpnameField = new XTypedList<corpname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"));
                }
                return this.corpnameField;
            }
            set {
                if ((value == null)) {
                    this.corpnameField = null;
                }
                else {
                    if ((this.corpnameField == null)) {
                        this.corpnameField = XTypedList<corpname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<corpname>(this.corpnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<famname> famname {
            get {
                if ((this.famnameField == null)) {
                    this.famnameField = new XTypedList<famname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"));
                }
                return this.famnameField;
            }
            set {
                if ((value == null)) {
                    this.famnameField = null;
                }
                else {
                    if ((this.famnameField == null)) {
                        this.famnameField = XTypedList<famname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<famname>(this.famnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<geogname> geogname {
            get {
                if ((this.geognameField == null)) {
                    this.geognameField = new XTypedList<geogname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"));
                }
                return this.geognameField;
            }
            set {
                if ((value == null)) {
                    this.geognameField = null;
                }
                else {
                    if ((this.geognameField == null)) {
                        this.geognameField = XTypedList<geogname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<geogname>(this.geognameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<name> name {
            get {
                if ((this.nameField == null)) {
                    this.nameField = new XTypedList<name>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"));
                }
                return this.nameField;
            }
            set {
                if ((value == null)) {
                    this.nameField = null;
                }
                else {
                    if ((this.nameField == null)) {
                        this.nameField = XTypedList<name>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<name>(this.nameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<occupation> occupation {
            get {
                if ((this.occupationField == null)) {
                    this.occupationField = new XTypedList<occupation>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"));
                }
                return this.occupationField;
            }
            set {
                if ((value == null)) {
                    this.occupationField = null;
                }
                else {
                    if ((this.occupationField == null)) {
                        this.occupationField = XTypedList<occupation>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<occupation>(this.occupationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<persname> persname {
            get {
                if ((this.persnameField == null)) {
                    this.persnameField = new XTypedList<persname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"));
                }
                return this.persnameField;
            }
            set {
                if ((value == null)) {
                    this.persnameField = null;
                }
                else {
                    if ((this.persnameField == null)) {
                        this.persnameField = XTypedList<persname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<persname>(this.persnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<subject> subject {
            get {
                if ((this.subjectField == null)) {
                    this.subjectField = new XTypedList<subject>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"));
                }
                return this.subjectField;
            }
            set {
                if ((value == null)) {
                    this.subjectField = null;
                }
                else {
                    if ((this.subjectField == null)) {
                        this.subjectField = XTypedList<subject>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<subject>(this.subjectField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<genreform> genreform {
            get {
                if ((this.genreformField == null)) {
                    this.genreformField = new XTypedList<genreform>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"));
                }
                return this.genreformField;
            }
            set {
                if ((value == null)) {
                    this.genreformField = null;
                }
                else {
                    if ((this.genreformField == null)) {
                        this.genreformField = XTypedList<genreform>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<genreform>(this.genreformField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<function> function {
            get {
                if ((this.functionField == null)) {
                    this.functionField = new XTypedList<function>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"));
                }
                return this.functionField;
            }
            set {
                if ((value == null)) {
                    this.functionField = null;
                }
                else {
                    if ((this.functionField == null)) {
                        this.functionField = XTypedList<function>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<function>(this.functionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<date> date {
            get {
                if ((this.dateField == null)) {
                    this.dateField = new XTypedList<date>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"));
                }
                return this.dateField;
            }
            set {
                if ((value == null)) {
                    this.dateField = null;
                }
                else {
                    if ((this.dateField == null)) {
                        this.dateField = XTypedList<date>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<date>(this.dateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<num> num {
            get {
                if ((this.numField == null)) {
                    this.numField = new XTypedList<num>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"));
                }
                return this.numField;
            }
            set {
                if ((value == null)) {
                    this.numField = null;
                }
                else {
                    if ((this.numField == null)) {
                        this.numField = XTypedList<num>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<num>(this.numField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<origination> origination {
            get {
                if ((this.originationField == null)) {
                    this.originationField = new XTypedList<origination>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9"));
                }
                return this.originationField;
            }
            set {
                if ((value == null)) {
                    this.originationField = null;
                }
                else {
                    if ((this.originationField == null)) {
                        this.originationField = XTypedList<origination>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<origination>(this.originationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<repository> repository {
            get {
                if ((this.repositoryField == null)) {
                    this.repositoryField = new XTypedList<repository>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9"));
                }
                return this.repositoryField;
            }
            set {
                if ((value == null)) {
                    this.repositoryField = null;
                }
                else {
                    if ((this.repositoryField == null)) {
                        this.repositoryField = XTypedList<repository>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<repository>(this.repositoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<unitdate> unitdate {
            get {
                if ((this.unitdateField == null)) {
                    this.unitdateField = new XTypedList<unitdate>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9"));
                }
                return this.unitdateField;
            }
            set {
                if ((value == null)) {
                    this.unitdateField = null;
                }
                else {
                    if ((this.unitdateField == null)) {
                        this.unitdateField = XTypedList<unitdate>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<unitdate>(this.unitdateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<unittitle> unittitle {
            get {
                if ((this.unittitleField == null)) {
                    this.unittitleField = new XTypedList<unittitle>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9"));
                }
                return this.unittitleField;
            }
            set {
                if ((value == null)) {
                    this.unittitleField = null;
                }
                else {
                    if ((this.unittitleField == null)) {
                        this.unittitleField = XTypedList<unittitle>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<unittitle>(this.unittitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("item", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<item>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"), typeof(abbr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"), typeof(expan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"), typeof(corpname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"), typeof(famname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"), typeof(geogname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"), typeof(name));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"), typeof(occupation));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"), typeof(persname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"), typeof(subject));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"), typeof(genreform));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"), typeof(function));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"), typeof(date));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"), typeof(num));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9"), typeof(origination));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9"), typeof(repository));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9"), typeof(unitdate));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9"), typeof(unittitle));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"), typeof(@ref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"), typeof(extref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"), typeof(linkgrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"), typeof(bibref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"), typeof(title));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"), typeof(archref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"), typeof(address));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"), typeof(chronlist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"), typeof(list));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"), typeof(table));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"), typeof(blockquote));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (address | chronlist | list | note1 | table | blockquote | p)+
    /// </para>
    /// </summary>
    public partial class note : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> note1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator note(XElement xe) { return XTypedServices.ToXTypedElement<note>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static note() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (address | chronlist | list | note1 | table | blockquote | p)+
        /// </para>
        /// </summary>
        public note() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note1 | table | blockquote | p)+
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note1 | table | blockquote | p)+
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note1 | table | blockquote | p)+
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note1 | table | blockquote | p)+
        /// </para>
        /// </summary>
        public virtual IList<note> note1 {
            get {
                if ((this.note1Field == null)) {
                    this.note1Field = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.note1Field;
            }
            set {
                if ((value == null)) {
                    this.note1Field = null;
                }
                else {
                    if ((this.note1Field == null)) {
                        this.note1Field = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.note1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note1 | table | blockquote | p)+
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note1 | table | blockquote | p)+
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note1 | table | blockquote | p)+
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("label", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("label", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string show {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("show", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("show", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string actuate {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("actuate", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("actuate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("encodinganalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("encodinganalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<note>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"), typeof(address));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"), typeof(chronlist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"), typeof(list));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"), typeof(table));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"), typeof(blockquote));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"), typeof(p));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (row+)
    /// </para>
    /// </summary>
    public partial class thead : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<row> rowField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator thead(XElement xe) { return XTypedServices.ToXTypedElement<thead>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static thead() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("row", "urn:isbn:1-931666-22-9")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (row+)
        /// </para>
        /// </summary>
        public thead() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (row+)
        /// </para>
        /// </summary>
        public virtual IList<row> row {
            get {
                if ((this.rowField == null)) {
                    this.rowField = new XTypedList<row>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("row", "urn:isbn:1-931666-22-9"));
                }
                return this.rowField;
            }
            set {
                if ((value == null)) {
                    this.rowField = null;
                }
                else {
                    if ((this.rowField == null)) {
                        this.rowField = XTypedList<row>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("row", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<row>(this.rowField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string valign {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("valign", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("valign", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<thead>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("row", "urn:isbn:1-931666-22-9"), typeof(row));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (entry+)
    /// </para>
    /// </summary>
    public partial class row : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<entry> entryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator row(XElement xe) { return XTypedServices.ToXTypedElement<row>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static row() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("entry", "urn:isbn:1-931666-22-9")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (entry+)
        /// </para>
        /// </summary>
        public row() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (entry+)
        /// </para>
        /// </summary>
        public virtual IList<entry> entry {
            get {
                if ((this.entryField == null)) {
                    this.entryField = new XTypedList<entry>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("entry", "urn:isbn:1-931666-22-9"));
                }
                return this.entryField;
            }
            set {
                if ((value == null)) {
                    this.entryField = null;
                }
                else {
                    if ((this.entryField == null)) {
                        this.entryField = XTypedList<entry>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("entry", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<entry>(this.entryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string rowsep {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("rowsep", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("rowsep", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string valign {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("valign", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("valign", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("row", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<row>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("entry", "urn:isbn:1-931666-22-9"), typeof(entry));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
    /// </para>
    /// </summary>
    public partial class entry : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<corpname> corpnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<famname> famnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<geogname> geognameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<name> nameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<occupation> occupationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<persname> persnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<subject> subjectField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<genreform> genreformField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<function> functionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<date> dateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<num> numField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<origination> originationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<repository> repositoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unitdate> unitdateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unittitle> unittitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator entry(XElement xe) { return XTypedServices.ToXTypedElement<entry>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static entry() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public entry() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<corpname> corpname {
            get {
                if ((this.corpnameField == null)) {
                    this.corpnameField = new XTypedList<corpname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"));
                }
                return this.corpnameField;
            }
            set {
                if ((value == null)) {
                    this.corpnameField = null;
                }
                else {
                    if ((this.corpnameField == null)) {
                        this.corpnameField = XTypedList<corpname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<corpname>(this.corpnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<famname> famname {
            get {
                if ((this.famnameField == null)) {
                    this.famnameField = new XTypedList<famname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"));
                }
                return this.famnameField;
            }
            set {
                if ((value == null)) {
                    this.famnameField = null;
                }
                else {
                    if ((this.famnameField == null)) {
                        this.famnameField = XTypedList<famname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<famname>(this.famnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<geogname> geogname {
            get {
                if ((this.geognameField == null)) {
                    this.geognameField = new XTypedList<geogname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"));
                }
                return this.geognameField;
            }
            set {
                if ((value == null)) {
                    this.geognameField = null;
                }
                else {
                    if ((this.geognameField == null)) {
                        this.geognameField = XTypedList<geogname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<geogname>(this.geognameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<name> name {
            get {
                if ((this.nameField == null)) {
                    this.nameField = new XTypedList<name>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"));
                }
                return this.nameField;
            }
            set {
                if ((value == null)) {
                    this.nameField = null;
                }
                else {
                    if ((this.nameField == null)) {
                        this.nameField = XTypedList<name>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<name>(this.nameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<occupation> occupation {
            get {
                if ((this.occupationField == null)) {
                    this.occupationField = new XTypedList<occupation>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"));
                }
                return this.occupationField;
            }
            set {
                if ((value == null)) {
                    this.occupationField = null;
                }
                else {
                    if ((this.occupationField == null)) {
                        this.occupationField = XTypedList<occupation>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<occupation>(this.occupationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<persname> persname {
            get {
                if ((this.persnameField == null)) {
                    this.persnameField = new XTypedList<persname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"));
                }
                return this.persnameField;
            }
            set {
                if ((value == null)) {
                    this.persnameField = null;
                }
                else {
                    if ((this.persnameField == null)) {
                        this.persnameField = XTypedList<persname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<persname>(this.persnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<subject> subject {
            get {
                if ((this.subjectField == null)) {
                    this.subjectField = new XTypedList<subject>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"));
                }
                return this.subjectField;
            }
            set {
                if ((value == null)) {
                    this.subjectField = null;
                }
                else {
                    if ((this.subjectField == null)) {
                        this.subjectField = XTypedList<subject>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<subject>(this.subjectField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<genreform> genreform {
            get {
                if ((this.genreformField == null)) {
                    this.genreformField = new XTypedList<genreform>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"));
                }
                return this.genreformField;
            }
            set {
                if ((value == null)) {
                    this.genreformField = null;
                }
                else {
                    if ((this.genreformField == null)) {
                        this.genreformField = XTypedList<genreform>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<genreform>(this.genreformField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<function> function {
            get {
                if ((this.functionField == null)) {
                    this.functionField = new XTypedList<function>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"));
                }
                return this.functionField;
            }
            set {
                if ((value == null)) {
                    this.functionField = null;
                }
                else {
                    if ((this.functionField == null)) {
                        this.functionField = XTypedList<function>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<function>(this.functionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<date> date {
            get {
                if ((this.dateField == null)) {
                    this.dateField = new XTypedList<date>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"));
                }
                return this.dateField;
            }
            set {
                if ((value == null)) {
                    this.dateField = null;
                }
                else {
                    if ((this.dateField == null)) {
                        this.dateField = XTypedList<date>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<date>(this.dateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<num> num {
            get {
                if ((this.numField == null)) {
                    this.numField = new XTypedList<num>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"));
                }
                return this.numField;
            }
            set {
                if ((value == null)) {
                    this.numField = null;
                }
                else {
                    if ((this.numField == null)) {
                        this.numField = XTypedList<num>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<num>(this.numField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<origination> origination {
            get {
                if ((this.originationField == null)) {
                    this.originationField = new XTypedList<origination>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9"));
                }
                return this.originationField;
            }
            set {
                if ((value == null)) {
                    this.originationField = null;
                }
                else {
                    if ((this.originationField == null)) {
                        this.originationField = XTypedList<origination>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<origination>(this.originationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<repository> repository {
            get {
                if ((this.repositoryField == null)) {
                    this.repositoryField = new XTypedList<repository>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9"));
                }
                return this.repositoryField;
            }
            set {
                if ((value == null)) {
                    this.repositoryField = null;
                }
                else {
                    if ((this.repositoryField == null)) {
                        this.repositoryField = XTypedList<repository>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<repository>(this.repositoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<unitdate> unitdate {
            get {
                if ((this.unitdateField == null)) {
                    this.unitdateField = new XTypedList<unitdate>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9"));
                }
                return this.unitdateField;
            }
            set {
                if ((value == null)) {
                    this.unitdateField = null;
                }
                else {
                    if ((this.unitdateField == null)) {
                        this.unitdateField = XTypedList<unitdate>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<unitdate>(this.unitdateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<unittitle> unittitle {
            get {
                if ((this.unittitleField == null)) {
                    this.unittitleField = new XTypedList<unittitle>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9"));
                }
                return this.unittitleField;
            }
            set {
                if ((value == null)) {
                    this.unittitleField = null;
                }
                else {
                    if ((this.unittitleField == null)) {
                        this.unittitleField = XTypedList<unittitle>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<unittitle>(this.unittitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string colname {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("colname", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("colname", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string namest {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("namest", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("namest", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string nameend {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("nameend", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("nameend", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string morerows {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("morerows", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("morerows", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string colsep {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("colsep", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("colsep", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string rowsep {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("rowsep", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("rowsep", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string align {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("align", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("align", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string @char {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("char", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("char", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string charoff {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("charoff", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("charoff", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string valign {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("valign", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("valign", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("entry", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<entry>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"), typeof(abbr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"), typeof(expan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"), typeof(corpname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"), typeof(famname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"), typeof(geogname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"), typeof(name));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"), typeof(occupation));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"), typeof(persname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"), typeof(subject));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"), typeof(genreform));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"), typeof(function));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"), typeof(date));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"), typeof(num));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9"), typeof(origination));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9"), typeof(repository));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9"), typeof(unitdate));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9"), typeof(unittitle));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"), typeof(@ref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"), typeof(extref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"), typeof(linkgrp));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"), typeof(bibref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"), typeof(title));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"), typeof(archref));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"), typeof(address));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"), typeof(list));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ptrloc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string typeFixedValue = "locator";
        
		public static explicit operator ptrloc(XElement xe) { return XTypedServices.ToXTypedElement<ptrloc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ptrloc() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                return typeFixedValue;
            }
            set {
                if (value.Equals(typeFixedValue)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, typeFixedValue);
                }
                this.SetAttribute(System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual System.Uri href {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("href", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("href", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("label", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("label", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string target {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("target", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("target", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string xpointer {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("xpointer", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("xpointer", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("ptrloc", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ptrloc>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class extptrloc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string typeFixedValue = "locator";
        
		public static explicit operator extptrloc(XElement xe) { return XTypedServices.ToXTypedElement<extptrloc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public extptrloc() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                return typeFixedValue;
            }
            set {
                if (value.Equals(typeFixedValue)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, typeFixedValue);
                }
                this.SetAttribute(System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual System.Uri href {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("href", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("href", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("label", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("label", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string entityref {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("entityref", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Entity).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("entityref", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Entity).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string xpointer {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("xpointer", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("xpointer", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("extptrloc", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<extptrloc>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
    /// </para>
    /// </summary>
    public partial class refloc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<corpname> corpnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<famname> famnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<geogname> geognameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<name> nameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<occupation> occupationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<persname> persnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<subject> subjectField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<genreform> genreformField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<function> functionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<date> dateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<num> numField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<origination> originationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<repository> repositoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unitdate> unitdateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unittitle> unittitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string typeFixedValue = "locator";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator refloc(XElement xe) { return XTypedServices.ToXTypedElement<refloc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static refloc() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public refloc() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<corpname> corpname {
            get {
                if ((this.corpnameField == null)) {
                    this.corpnameField = new XTypedList<corpname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"));
                }
                return this.corpnameField;
            }
            set {
                if ((value == null)) {
                    this.corpnameField = null;
                }
                else {
                    if ((this.corpnameField == null)) {
                        this.corpnameField = XTypedList<corpname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<corpname>(this.corpnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<famname> famname {
            get {
                if ((this.famnameField == null)) {
                    this.famnameField = new XTypedList<famname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"));
                }
                return this.famnameField;
            }
            set {
                if ((value == null)) {
                    this.famnameField = null;
                }
                else {
                    if ((this.famnameField == null)) {
                        this.famnameField = XTypedList<famname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<famname>(this.famnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<geogname> geogname {
            get {
                if ((this.geognameField == null)) {
                    this.geognameField = new XTypedList<geogname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"));
                }
                return this.geognameField;
            }
            set {
                if ((value == null)) {
                    this.geognameField = null;
                }
                else {
                    if ((this.geognameField == null)) {
                        this.geognameField = XTypedList<geogname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<geogname>(this.geognameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<name> name {
            get {
                if ((this.nameField == null)) {
                    this.nameField = new XTypedList<name>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"));
                }
                return this.nameField;
            }
            set {
                if ((value == null)) {
                    this.nameField = null;
                }
                else {
                    if ((this.nameField == null)) {
                        this.nameField = XTypedList<name>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<name>(this.nameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<occupation> occupation {
            get {
                if ((this.occupationField == null)) {
                    this.occupationField = new XTypedList<occupation>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"));
                }
                return this.occupationField;
            }
            set {
                if ((value == null)) {
                    this.occupationField = null;
                }
                else {
                    if ((this.occupationField == null)) {
                        this.occupationField = XTypedList<occupation>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<occupation>(this.occupationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<persname> persname {
            get {
                if ((this.persnameField == null)) {
                    this.persnameField = new XTypedList<persname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"));
                }
                return this.persnameField;
            }
            set {
                if ((value == null)) {
                    this.persnameField = null;
                }
                else {
                    if ((this.persnameField == null)) {
                        this.persnameField = XTypedList<persname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<persname>(this.persnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<subject> subject {
            get {
                if ((this.subjectField == null)) {
                    this.subjectField = new XTypedList<subject>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"));
                }
                return this.subjectField;
            }
            set {
                if ((value == null)) {
                    this.subjectField = null;
                }
                else {
                    if ((this.subjectField == null)) {
                        this.subjectField = XTypedList<subject>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<subject>(this.subjectField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<genreform> genreform {
            get {
                if ((this.genreformField == null)) {
                    this.genreformField = new XTypedList<genreform>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"));
                }
                return this.genreformField;
            }
            set {
                if ((value == null)) {
                    this.genreformField = null;
                }
                else {
                    if ((this.genreformField == null)) {
                        this.genreformField = XTypedList<genreform>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<genreform>(this.genreformField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<function> function {
            get {
                if ((this.functionField == null)) {
                    this.functionField = new XTypedList<function>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"));
                }
                return this.functionField;
            }
            set {
                if ((value == null)) {
                    this.functionField = null;
                }
                else {
                    if ((this.functionField == null)) {
                        this.functionField = XTypedList<function>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<function>(this.functionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<date> date {
            get {
                if ((this.dateField == null)) {
                    this.dateField = new XTypedList<date>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"));
                }
                return this.dateField;
            }
            set {
                if ((value == null)) {
                    this.dateField = null;
                }
                else {
                    if ((this.dateField == null)) {
                        this.dateField = XTypedList<date>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<date>(this.dateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<num> num {
            get {
                if ((this.numField == null)) {
                    this.numField = new XTypedList<num>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"));
                }
                return this.numField;
            }
            set {
                if ((value == null)) {
                    this.numField = null;
                }
                else {
                    if ((this.numField == null)) {
                        this.numField = XTypedList<num>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<num>(this.numField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<origination> origination {
            get {
                if ((this.originationField == null)) {
                    this.originationField = new XTypedList<origination>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9"));
                }
                return this.originationField;
            }
            set {
                if ((value == null)) {
                    this.originationField = null;
                }
                else {
                    if ((this.originationField == null)) {
                        this.originationField = XTypedList<origination>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<origination>(this.originationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<repository> repository {
            get {
                if ((this.repositoryField == null)) {
                    this.repositoryField = new XTypedList<repository>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9"));
                }
                return this.repositoryField;
            }
            set {
                if ((value == null)) {
                    this.repositoryField = null;
                }
                else {
                    if ((this.repositoryField == null)) {
                        this.repositoryField = XTypedList<repository>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<repository>(this.repositoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<unitdate> unitdate {
            get {
                if ((this.unitdateField == null)) {
                    this.unitdateField = new XTypedList<unitdate>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9"));
                }
                return this.unitdateField;
            }
            set {
                if ((value == null)) {
                    this.unitdateField = null;
                }
                else {
                    if ((this.unitdateField == null)) {
                        this.unitdateField = XTypedList<unitdate>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<unitdate>(this.unitdateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<unittitle> unittitle {
            get {
                if ((this.unittitleField == null)) {
                    this.unittitleField = new XTypedList<unittitle>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9"));
                }
                return this.unittitleField;
            }
            set {
                if ((value == null)) {
                    this.unittitleField = null;
                }
                else {
                    if ((this.unittitleField == null)) {
                        this.unittitleField = XTypedList<unittitle>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<unittitle>(this.unittitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                return typeFixedValue;
            }
            set {
                if (value.Equals(typeFixedValue)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, typeFixedValue);
                }
                this.SetAttribute(System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual System.Uri href {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("href", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("href", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("label", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("label", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string target {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("target", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("target", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string xpointer {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("xpointer", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("xpointer", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("refloc", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<refloc>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"), typeof(abbr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"), typeof(expan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"), typeof(corpname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"), typeof(famname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"), typeof(geogname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"), typeof(name));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"), typeof(occupation));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"), typeof(persname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"), typeof(subject));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"), typeof(genreform));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"), typeof(function));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"), typeof(date));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"), typeof(num));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9"), typeof(origination));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9"), typeof(repository));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9"), typeof(unitdate));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9"), typeof(unittitle));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"), typeof(address));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"), typeof(chronlist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"), typeof(list));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"), typeof(table));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"), typeof(blockquote));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
    /// </para>
    /// </summary>
    public partial class extrefloc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<corpname> corpnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<famname> famnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<geogname> geognameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<name> nameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<occupation> occupationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<persname> persnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<subject> subjectField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<genreform> genreformField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<function> functionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<date> dateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<num> numField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<origination> originationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<repository> repositoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unitdate> unitdateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unittitle> unittitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string typeFixedValue = "locator";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator extrefloc(XElement xe) { return XTypedServices.ToXTypedElement<extrefloc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static extrefloc() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public extrefloc() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<corpname> corpname {
            get {
                if ((this.corpnameField == null)) {
                    this.corpnameField = new XTypedList<corpname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"));
                }
                return this.corpnameField;
            }
            set {
                if ((value == null)) {
                    this.corpnameField = null;
                }
                else {
                    if ((this.corpnameField == null)) {
                        this.corpnameField = XTypedList<corpname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<corpname>(this.corpnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<famname> famname {
            get {
                if ((this.famnameField == null)) {
                    this.famnameField = new XTypedList<famname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"));
                }
                return this.famnameField;
            }
            set {
                if ((value == null)) {
                    this.famnameField = null;
                }
                else {
                    if ((this.famnameField == null)) {
                        this.famnameField = XTypedList<famname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<famname>(this.famnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<geogname> geogname {
            get {
                if ((this.geognameField == null)) {
                    this.geognameField = new XTypedList<geogname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"));
                }
                return this.geognameField;
            }
            set {
                if ((value == null)) {
                    this.geognameField = null;
                }
                else {
                    if ((this.geognameField == null)) {
                        this.geognameField = XTypedList<geogname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<geogname>(this.geognameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<name> name {
            get {
                if ((this.nameField == null)) {
                    this.nameField = new XTypedList<name>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"));
                }
                return this.nameField;
            }
            set {
                if ((value == null)) {
                    this.nameField = null;
                }
                else {
                    if ((this.nameField == null)) {
                        this.nameField = XTypedList<name>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<name>(this.nameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<occupation> occupation {
            get {
                if ((this.occupationField == null)) {
                    this.occupationField = new XTypedList<occupation>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"));
                }
                return this.occupationField;
            }
            set {
                if ((value == null)) {
                    this.occupationField = null;
                }
                else {
                    if ((this.occupationField == null)) {
                        this.occupationField = XTypedList<occupation>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<occupation>(this.occupationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<persname> persname {
            get {
                if ((this.persnameField == null)) {
                    this.persnameField = new XTypedList<persname>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"));
                }
                return this.persnameField;
            }
            set {
                if ((value == null)) {
                    this.persnameField = null;
                }
                else {
                    if ((this.persnameField == null)) {
                        this.persnameField = XTypedList<persname>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<persname>(this.persnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<subject> subject {
            get {
                if ((this.subjectField == null)) {
                    this.subjectField = new XTypedList<subject>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"));
                }
                return this.subjectField;
            }
            set {
                if ((value == null)) {
                    this.subjectField = null;
                }
                else {
                    if ((this.subjectField == null)) {
                        this.subjectField = XTypedList<subject>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<subject>(this.subjectField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<genreform> genreform {
            get {
                if ((this.genreformField == null)) {
                    this.genreformField = new XTypedList<genreform>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"));
                }
                return this.genreformField;
            }
            set {
                if ((value == null)) {
                    this.genreformField = null;
                }
                else {
                    if ((this.genreformField == null)) {
                        this.genreformField = XTypedList<genreform>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<genreform>(this.genreformField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<function> function {
            get {
                if ((this.functionField == null)) {
                    this.functionField = new XTypedList<function>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"));
                }
                return this.functionField;
            }
            set {
                if ((value == null)) {
                    this.functionField = null;
                }
                else {
                    if ((this.functionField == null)) {
                        this.functionField = XTypedList<function>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<function>(this.functionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<date> date {
            get {
                if ((this.dateField == null)) {
                    this.dateField = new XTypedList<date>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"));
                }
                return this.dateField;
            }
            set {
                if ((value == null)) {
                    this.dateField = null;
                }
                else {
                    if ((this.dateField == null)) {
                        this.dateField = XTypedList<date>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<date>(this.dateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<num> num {
            get {
                if ((this.numField == null)) {
                    this.numField = new XTypedList<num>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"));
                }
                return this.numField;
            }
            set {
                if ((value == null)) {
                    this.numField = null;
                }
                else {
                    if ((this.numField == null)) {
                        this.numField = XTypedList<num>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<num>(this.numField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<origination> origination {
            get {
                if ((this.originationField == null)) {
                    this.originationField = new XTypedList<origination>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9"));
                }
                return this.originationField;
            }
            set {
                if ((value == null)) {
                    this.originationField = null;
                }
                else {
                    if ((this.originationField == null)) {
                        this.originationField = XTypedList<origination>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<origination>(this.originationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<repository> repository {
            get {
                if ((this.repositoryField == null)) {
                    this.repositoryField = new XTypedList<repository>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9"));
                }
                return this.repositoryField;
            }
            set {
                if ((value == null)) {
                    this.repositoryField = null;
                }
                else {
                    if ((this.repositoryField == null)) {
                        this.repositoryField = XTypedList<repository>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<repository>(this.repositoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<unitdate> unitdate {
            get {
                if ((this.unitdateField == null)) {
                    this.unitdateField = new XTypedList<unitdate>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9"));
                }
                return this.unitdateField;
            }
            set {
                if ((value == null)) {
                    this.unitdateField = null;
                }
                else {
                    if ((this.unitdateField == null)) {
                        this.unitdateField = XTypedList<unitdate>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<unitdate>(this.unitdateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<unittitle> unittitle {
            get {
                if ((this.unittitleField == null)) {
                    this.unittitleField = new XTypedList<unittitle>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9"));
                }
                return this.unittitleField;
            }
            set {
                if ((value == null)) {
                    this.unittitleField = null;
                }
                else {
                    if ((this.unittitleField == null)) {
                        this.unittitleField = XTypedList<unittitle>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<unittitle>(this.unittitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                return typeFixedValue;
            }
            set {
                if (value.Equals(typeFixedValue)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, typeFixedValue);
                }
                this.SetAttribute(System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual System.Uri href {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("href", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("href", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("label", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("label", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string entityref {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("entityref", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Entity).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("entityref", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Entity).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string xpointer {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("xpointer", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("xpointer", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("extrefloc", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<extrefloc>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(ptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(extptr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"), typeof(abbr));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"), typeof(expan));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"), typeof(corpname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"), typeof(famname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"), typeof(geogname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"), typeof(name));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"), typeof(occupation));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"), typeof(persname));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"), typeof(subject));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"), typeof(genreform));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"), typeof(function));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"), typeof(date));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"), typeof(num));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9"), typeof(origination));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9"), typeof(repository));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9"), typeof(unitdate));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9"), typeof(unittitle));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"), typeof(address));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"), typeof(chronlist));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"), typeof(list));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(note));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"), typeof(table));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"), typeof(blockquote));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class arc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string typeFixedValue = "arc";
        
		public static explicit operator arc(XElement xe) { return XTypedServices.ToXTypedElement<arc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public arc() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                return typeFixedValue;
            }
            set {
                if (value.Equals(typeFixedValue)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, typeFixedValue);
                }
                this.SetAttribute(System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string arcrole {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("arcrole", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("arcrole", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string show {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("show", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("show", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string actuate {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("actuate", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("actuate", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string from {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("from", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("from", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string to {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("to", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("to", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("arc", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<arc>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (emph | lb)*
    /// </para>
    /// </summary>
    public partial class resource : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string typeFixedValue = "resource";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator resource(XElement xe) { return XTypedServices.ToXTypedElement<resource>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static resource() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (emph | lb)*
        /// </para>
        /// </summary>
        public resource() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"));
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("altrender", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("altrender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("audience", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("audience", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                return typeFixedValue;
            }
            set {
                if (value.Equals(typeFixedValue)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, typeFixedValue);
                }
                this.SetAttribute(System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("label", "http://www.w3.org/1999/xlink"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("label", "http://www.w3.org/1999/xlink"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("resource", "urn:isbn:1-931666-22-9");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<resource>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(emph));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(lb));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> typeDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> elementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.emph));
            typeDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.lb));
            typeDictionary.Add(System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.linkgrp));
            typeDictionary.Add(System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.occupation));
            typeDictionary.Add(System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.subject));
            typeDictionary.Add(System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.genreform));
            typeDictionary.Add(System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.function));
            typeDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.extptr));
            typeDictionary.Add(System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.chronlist));
            typeDictionary.Add(System.Xml.Linq.XName.Get("chronitem", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.chronitem));
            typeDictionary.Add(System.Xml.Linq.XName.Get("eventgrp", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.eventgrp));
            typeDictionary.Add(System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.table));
            typeDictionary.Add(System.Xml.Linq.XName.Get("tgroup", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.tgroup));
            typeDictionary.Add(System.Xml.Linq.XName.Get("colspec", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.colspec));
            typeDictionary.Add(System.Xml.Linq.XName.Get("tbody", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.tbody));
            typeDictionary.Add(System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.blockquote));
            typeDictionary.Add(System.Xml.Linq.XName.Get("abstract", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.@abstract));
            typeDictionary.Add(System.Xml.Linq.XName.Get("container", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.container));
            typeDictionary.Add(System.Xml.Linq.XName.Get("langmaterial", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.langmaterial));
            typeDictionary.Add(System.Xml.Linq.XName.Get("physdesc", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.physdesc));
            typeDictionary.Add(System.Xml.Linq.XName.Get("physfacet", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.physfacet));
            typeDictionary.Add(System.Xml.Linq.XName.Get("extent", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.extent));
            typeDictionary.Add(System.Xml.Linq.XName.Get("physloc", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.physloc));
            typeDictionary.Add(System.Xml.Linq.XName.Get("unitid", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.unitid));
            typeDictionary.Add(System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.descgrp));
            typeDictionary.Add(System.Xml.Linq.XName.Get("eadheader", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.eadheader));
            typeDictionary.Add(System.Xml.Linq.XName.Get("eadid", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.eadid));
            typeDictionary.Add(System.Xml.Linq.XName.Get("filedesc", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.filedesc));
            typeDictionary.Add(System.Xml.Linq.XName.Get("titlestmt", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.titlestmt));
            typeDictionary.Add(System.Xml.Linq.XName.Get("editionstmt", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.editionstmt));
            typeDictionary.Add(System.Xml.Linq.XName.Get("publicationstmt", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.publicationstmt));
            typeDictionary.Add(System.Xml.Linq.XName.Get("seriesstmt", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.seriesstmt));
            typeDictionary.Add(System.Xml.Linq.XName.Get("notestmt", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.notestmt));
            typeDictionary.Add(System.Xml.Linq.XName.Get("profiledesc", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.profiledesc));
            typeDictionary.Add(System.Xml.Linq.XName.Get("creation", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.creation));
            typeDictionary.Add(System.Xml.Linq.XName.Get("langusage", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.langusage));
            typeDictionary.Add(System.Xml.Linq.XName.Get("descrules", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.descrules));
            typeDictionary.Add(System.Xml.Linq.XName.Get("revisiondesc", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.revisiondesc));
            typeDictionary.Add(System.Xml.Linq.XName.Get("change", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.change));
            typeDictionary.Add(System.Xml.Linq.XName.Get("frontmatter", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.frontmatter));
            typeDictionary.Add(System.Xml.Linq.XName.Get("titlepage", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.titlepage));
            typeDictionary.Add(System.Xml.Linq.XName.Get("archdesc", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.archdesc));
            typeDictionary.Add(System.Xml.Linq.XName.Get("runner", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.runner));
            typeDictionary.Add(System.Xml.Linq.XName.Get("titleproper", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.titleproper));
            typeDictionary.Add(System.Xml.Linq.XName.Get("subtitle", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.subtitle));
            typeDictionary.Add(System.Xml.Linq.XName.Get("author", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.author));
            typeDictionary.Add(System.Xml.Linq.XName.Get("sponsor", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.sponsor));
            typeDictionary.Add(System.Xml.Linq.XName.Get("div", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.div));
            typeDictionary.Add(System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.did));
            typeDictionary.Add(System.Xml.Linq.XName.Get("dimensions", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.dimensions));
            typeDictionary.Add(System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.origination));
            typeDictionary.Add(System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.repository));
            typeDictionary.Add(System.Xml.Linq.XName.Get("subarea", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.subarea));
            typeDictionary.Add(System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.unitdate));
            typeDictionary.Add(System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.unittitle));
            typeDictionary.Add(System.Xml.Linq.XName.Get("language", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.language));
            typeDictionary.Add(System.Xml.Linq.XName.Get("materialspec", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.materialspec));
            typeDictionary.Add(System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.accruals));
            typeDictionary.Add(System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.accessrestrict));
            typeDictionary.Add(System.Xml.Linq.XName.Get("legalstatus", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.legalstatus));
            typeDictionary.Add(System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.acqinfo));
            typeDictionary.Add(System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.altformavail));
            typeDictionary.Add(System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.originalsloc));
            typeDictionary.Add(System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.phystech));
            typeDictionary.Add(System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.appraisal));
            typeDictionary.Add(System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.custodhist));
            typeDictionary.Add(System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.prefercite));
            typeDictionary.Add(System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.processinfo));
            typeDictionary.Add(System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.userestrict));
            typeDictionary.Add(System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.bioghist));
            typeDictionary.Add(System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.controlaccess));
            typeDictionary.Add(System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.odd));
            typeDictionary.Add(System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.scopecontent));
            typeDictionary.Add(System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.arrangement));
            typeDictionary.Add(System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.bibliography));
            typeDictionary.Add(System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.fileplan));
            typeDictionary.Add(System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.relatedmaterial));
            typeDictionary.Add(System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.separatedmaterial));
            typeDictionary.Add(System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.otherfindaid));
            typeDictionary.Add(System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.index));
            typeDictionary.Add(System.Xml.Linq.XName.Get("indexentry", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.indexentry));
            typeDictionary.Add(System.Xml.Linq.XName.Get("namegrp", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.namegrp));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ptrgrp", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.ptrgrp));
            typeDictionary.Add(System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.dsc));
            typeDictionary.Add(System.Xml.Linq.XName.Get("c", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.c));
            typeDictionary.Add(System.Xml.Linq.XName.Get("c01", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.c01));
            typeDictionary.Add(System.Xml.Linq.XName.Get("c02", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.c02));
            typeDictionary.Add(System.Xml.Linq.XName.Get("c03", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.c03));
            typeDictionary.Add(System.Xml.Linq.XName.Get("c04", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.c04));
            typeDictionary.Add(System.Xml.Linq.XName.Get("c05", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.c05));
            typeDictionary.Add(System.Xml.Linq.XName.Get("c06", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.c06));
            typeDictionary.Add(System.Xml.Linq.XName.Get("c07", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.c07));
            typeDictionary.Add(System.Xml.Linq.XName.Get("c08", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.c08));
            typeDictionary.Add(System.Xml.Linq.XName.Get("c09", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.c09));
            typeDictionary.Add(System.Xml.Linq.XName.Get("c10", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.c10));
            typeDictionary.Add(System.Xml.Linq.XName.Get("c11", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.c11));
            typeDictionary.Add(System.Xml.Linq.XName.Get("c12", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.c12));
            typeDictionary.Add(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.head));
            typeDictionary.Add(System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.p));
            typeDictionary.Add(System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.dao));
            typeDictionary.Add(System.Xml.Linq.XName.Get("daodesc", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.daodesc));
            typeDictionary.Add(System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.daogrp));
            typeDictionary.Add(System.Xml.Linq.XName.Get("daoloc", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.daoloc));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.ptr));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.@ref));
            typeDictionary.Add(System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.extref));
            typeDictionary.Add(System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.title));
            typeDictionary.Add(System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.archref));
            typeDictionary.Add(System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.bibref));
            typeDictionary.Add(System.Xml.Linq.XName.Get("edition", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.edition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("bibseries", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.bibseries));
            typeDictionary.Add(System.Xml.Linq.XName.Get("imprint", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.imprint));
            typeDictionary.Add(System.Xml.Linq.XName.Get("publisher", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.publisher));
            typeDictionary.Add(System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.corpname));
            typeDictionary.Add(System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.famname));
            typeDictionary.Add(System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.geogname));
            typeDictionary.Add(System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.name));
            typeDictionary.Add(System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.persname));
            typeDictionary.Add(System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.date));
            typeDictionary.Add(System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.num));
            typeDictionary.Add(System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.abbr));
            typeDictionary.Add(System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.expan));
            typeDictionary.Add(System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.address));
            typeDictionary.Add(System.Xml.Linq.XName.Get("addressline", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.addressline));
            typeDictionary.Add(System.Xml.Linq.XName.Get("event", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.@event));
            typeDictionary.Add(System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.list));
            typeDictionary.Add(System.Xml.Linq.XName.Get("defitem", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.defitem));
            typeDictionary.Add(System.Xml.Linq.XName.Get("label", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.label));
            typeDictionary.Add(System.Xml.Linq.XName.Get("listhead", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.listhead));
            typeDictionary.Add(System.Xml.Linq.XName.Get("head01", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.head01));
            typeDictionary.Add(System.Xml.Linq.XName.Get("head02", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.head02));
            typeDictionary.Add(System.Xml.Linq.XName.Get("item", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.item));
            typeDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.note));
            typeDictionary.Add(System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.thead));
            typeDictionary.Add(System.Xml.Linq.XName.Get("row", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.row));
            typeDictionary.Add(System.Xml.Linq.XName.Get("entry", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.entry));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ptrloc", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.ptrloc));
            typeDictionary.Add(System.Xml.Linq.XName.Get("extptrloc", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.extptrloc));
            typeDictionary.Add(System.Xml.Linq.XName.Get("refloc", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.refloc));
            typeDictionary.Add(System.Xml.Linq.XName.Get("extrefloc", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.extrefloc));
            typeDictionary.Add(System.Xml.Linq.XName.Get("arc", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.arc));
            typeDictionary.Add(System.Xml.Linq.XName.Get("resource", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.resource));
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(System.Xml.Linq.XName.Get("ead", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.ead));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[System.Xml.Linq.XName.Get("ead", "urn:isbn:1-931666-22-9")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public ead ead {  get {return rootObject as ead; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(ead root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public global::LibraryOfCongress.EAD.ead ead {  get {return rootObject as global::LibraryOfCongress.EAD.ead; } }
        
        private XRoot() {
        }
        
        public XRoot(global::LibraryOfCongress.EAD.ead root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
