//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LibraryOfCongress.EAD {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (eadheader, frontmatter?, archdesc)
    /// </para>
    /// </summary>
    public partial class ead : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName eadheaderXName = System.Xml.Linq.XName.Get("eadheader", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName frontmatterXName = System.Xml.Linq.XName.Get("frontmatter", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName archdescXName = System.Xml.Linq.XName.Get("archdesc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName relatedencodingXName = System.Xml.Linq.XName.Get("relatedencoding", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ead", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ead(XElement xe) { return XTypedServices.ToXTypedElement<ead>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ead() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(eadheaderXName), new NamedContentModelEntity(frontmatterXName), new NamedContentModelEntity(archdescXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (eadheader, frontmatter?, archdesc)
        /// </para>
        /// </summary>
        public ead() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (eadheader, frontmatter?, archdesc)
        /// </para>
        /// </summary>
        public virtual eadheader eadheader {
            get {
                XElement x = this.GetElement(eadheaderXName);
                return ((eadheader)(x));
            }
            set {
                this.SetElement(eadheaderXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (eadheader, frontmatter?, archdesc)
        /// </para>
        /// </summary>
        public virtual frontmatter frontmatter {
            get {
                XElement x = this.GetElement(frontmatterXName);
                return ((frontmatter)(x));
            }
            set {
                this.SetElement(frontmatterXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (eadheader, frontmatter?, archdesc)
        /// </para>
        /// </summary>
        public virtual archdesc archdesc {
            get {
                XElement x = this.GetElement(archdescXName);
                return ((archdesc)(x));
            }
            set {
                this.SetElement(archdescXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string relatedencoding {
            get {
                XAttribute x = this.Attribute(relatedencodingXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(relatedencodingXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ead Load(string xmlFile) {
            return XTypedServices.Load<ead>(xmlFile);
        }
        
        public static ead Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ead>(xmlFile);
        }
        
        public static ead Parse(string xml) {
            return XTypedServices.Parse<ead>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ead>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(eadheaderXName, typeof(eadheader));
            localElementDictionary.Add(frontmatterXName, typeof(frontmatter));
            localElementDictionary.Add(archdescXName, typeof(archdesc));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public sealed class datarepositorycode {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        @"((AF|AX|AL|DZ|AS|AD|AO|AI|AQ|AG|AR|AM|AW|AU|AT|AZ|BS|BH|BD|BB|BY|BE|BZ|BJ|BM|BT|BO|BA|BW|BV|BR|IO|BN|BG|BF|BI|KH|CM|CA|CV|KY|CF|TD|CL|CN|CX|CC|CO|KM|CG|CD|CK|CR|CI|HR|CU|CY|CZ|DK|DJ|DM|DO|EC|EG|SV|GQ|ER|EE|ET|FK|FO|FJ|FI|FR|GF|PF|TF|GA|GM|GE|DE|GH|GI|GR|GL|GD|GP|GU|GT|GN|GW|GY|HT|HM|VA|HN|HK|HU|IS|IN|ID|IR|IQ|IE|IL|IT|JM|JP|JO|KZ|KE|KI|KP|KR|KW|KG|LA|LV|LB|LS|LR|LY|LI|LT|LU|MO|MK|MG|MW|MY|MV|ML|MT|MH|MQ|MR|MU|YT|MX|FM|MD|MC|MN|MS|MA|MZ|MM|NA|NR|NP|NL|AN|NC|NZ|NI|NE|NG|NU|NF|MP|NO|OM|PK|PW|PS|PA|PG|PY|PE|PH|PN|PL|PT|PR|QA|RE|RO|RU|RW|SH|KN|LC|PM|VC|WS|SM|ST|SA|SN|CS|SC|SL|SG|SK|SI|SB|SO|ZA|GS|ES|LK|SD|SR|SJ|SZ|SE|CH|SY|TW|TJ|TZ|TH|TL|TG|TK|TO|TT|TN|TR|TM|TC|TV|UG|UA|AE|GB|US|UM|UY|UZ|VU|VE|VN|VG|VI|WF|EH|YE|ZM|ZW)|([a-zA-Z]{1})|([a-zA-Z]{3,4}))(-[a-zA-Z0-9:/\-]{1,11})"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private datarepositorycode() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph1 | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
    /// </para>
    /// </summary>
    public partial class emph : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emph1XName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emph1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName abbrXName = System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName expanXName = System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @refXName = System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extrefXName = System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName linkgrpXName = System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibrefXName = System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName archrefXName = System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName renderXName = System.Xml.Linq.XName.Get("render", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator emph(XElement xe) { return XTypedServices.ToXTypedElement<emph>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static emph() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emph1XName), new NamedContentModelEntity(lbXName), new NamedContentModelEntity(abbrXName), new NamedContentModelEntity(expanXName), new NamedContentModelEntity(@refXName), new NamedContentModelEntity(extrefXName), new NamedContentModelEntity(linkgrpXName), new NamedContentModelEntity(bibrefXName), new NamedContentModelEntity(titleXName), new NamedContentModelEntity(archrefXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph1 | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public emph() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph1 | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph1 | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph1 | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph1 {
            get {
                if ((this.emph1Field == null)) {
                    this.emph1Field = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emph1XName);
                }
                return this.emph1Field;
            }
            set {
                if ((value == null)) {
                    this.emph1Field = null;
                }
                else {
                    if ((this.emph1Field == null)) {
                        this.emph1Field = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emph1XName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emph1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph1 | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph1 | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, abbrXName);
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, abbrXName);
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph1 | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, expanXName);
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, expanXName);
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph1 | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, @refXName);
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, @refXName);
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph1 | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, extrefXName);
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, extrefXName);
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph1 | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, linkgrpXName);
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, linkgrpXName);
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph1 | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, bibrefXName);
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibrefXName);
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph1 | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, titleXName);
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, titleXName);
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph1 | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, archrefXName);
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, archrefXName);
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LibraryOfCongress.EAD.avrender? render {
            get {
                XAttribute x = this.Attribute(renderXName);
                if ((x == null)) {
                    return null;
                }
                return ((LibraryOfCongress.EAD.avrender)(Enum.Parse(typeof(LibraryOfCongress.EAD.avrender), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(renderXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<emph>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emph1XName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
            localElementDictionary.Add(abbrXName, typeof(abbr));
            localElementDictionary.Add(expanXName, typeof(expan));
            localElementDictionary.Add(@refXName, typeof(@ref));
            localElementDictionary.Add(extrefXName, typeof(extref));
            localElementDictionary.Add(linkgrpXName, typeof(linkgrp));
            localElementDictionary.Add(bibrefXName, typeof(bibref));
            localElementDictionary.Add(titleXName, typeof(title));
            localElementDictionary.Add(archrefXName, typeof(archref));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class lb : XTypedElement, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
		public static explicit operator lb(XElement xe) { return XTypedServices.ToXTypedElement<lb>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public lb() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<lb>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (resource | arc | ptrloc | extptrloc | refloc | extrefloc)+
    /// </para>
    /// </summary>
    public partial class linkgrp : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName resourceXName = System.Xml.Linq.XName.Get("resource", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<resource> resourceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arcXName = System.Xml.Linq.XName.Get("arc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<arc> arcField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrlocXName = System.Xml.Linq.XName.Get("ptrloc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptrloc> ptrlocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrlocXName = System.Xml.Linq.XName.Get("extptrloc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptrloc> extptrlocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName reflocXName = System.Xml.Linq.XName.Get("refloc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<refloc> reflocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extreflocXName = System.Xml.Linq.XName.Get("extrefloc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extrefloc> extreflocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string typeFixedValue = "extended";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator linkgrp(XElement xe) { return XTypedServices.ToXTypedElement<linkgrp>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static linkgrp() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(resourceXName), new NamedContentModelEntity(arcXName), new NamedContentModelEntity(ptrlocXName), new NamedContentModelEntity(extptrlocXName), new NamedContentModelEntity(reflocXName), new NamedContentModelEntity(extreflocXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (resource | arc | ptrloc | extptrloc | refloc | extrefloc)+
        /// </para>
        /// </summary>
        public linkgrp() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (resource | arc | ptrloc | extptrloc | refloc | extrefloc)+
        /// </para>
        /// </summary>
        public virtual IList<resource> resource {
            get {
                if ((this.resourceField == null)) {
                    this.resourceField = new XTypedList<resource>(this, LinqToXsdTypeManager.Instance, resourceXName);
                }
                return this.resourceField;
            }
            set {
                if ((value == null)) {
                    this.resourceField = null;
                }
                else {
                    if ((this.resourceField == null)) {
                        this.resourceField = XTypedList<resource>.Initialize(this, LinqToXsdTypeManager.Instance, value, resourceXName);
                    }
                    else {
                        XTypedServices.SetList<resource>(this.resourceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (resource | arc | ptrloc | extptrloc | refloc | extrefloc)+
        /// </para>
        /// </summary>
        public virtual IList<arc> arc {
            get {
                if ((this.arcField == null)) {
                    this.arcField = new XTypedList<arc>(this, LinqToXsdTypeManager.Instance, arcXName);
                }
                return this.arcField;
            }
            set {
                if ((value == null)) {
                    this.arcField = null;
                }
                else {
                    if ((this.arcField == null)) {
                        this.arcField = XTypedList<arc>.Initialize(this, LinqToXsdTypeManager.Instance, value, arcXName);
                    }
                    else {
                        XTypedServices.SetList<arc>(this.arcField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (resource | arc | ptrloc | extptrloc | refloc | extrefloc)+
        /// </para>
        /// </summary>
        public virtual IList<ptrloc> ptrloc {
            get {
                if ((this.ptrlocField == null)) {
                    this.ptrlocField = new XTypedList<ptrloc>(this, LinqToXsdTypeManager.Instance, ptrlocXName);
                }
                return this.ptrlocField;
            }
            set {
                if ((value == null)) {
                    this.ptrlocField = null;
                }
                else {
                    if ((this.ptrlocField == null)) {
                        this.ptrlocField = XTypedList<ptrloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrlocXName);
                    }
                    else {
                        XTypedServices.SetList<ptrloc>(this.ptrlocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (resource | arc | ptrloc | extptrloc | refloc | extrefloc)+
        /// </para>
        /// </summary>
        public virtual IList<extptrloc> extptrloc {
            get {
                if ((this.extptrlocField == null)) {
                    this.extptrlocField = new XTypedList<extptrloc>(this, LinqToXsdTypeManager.Instance, extptrlocXName);
                }
                return this.extptrlocField;
            }
            set {
                if ((value == null)) {
                    this.extptrlocField = null;
                }
                else {
                    if ((this.extptrlocField == null)) {
                        this.extptrlocField = XTypedList<extptrloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrlocXName);
                    }
                    else {
                        XTypedServices.SetList<extptrloc>(this.extptrlocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (resource | arc | ptrloc | extptrloc | refloc | extrefloc)+
        /// </para>
        /// </summary>
        public virtual IList<refloc> refloc {
            get {
                if ((this.reflocField == null)) {
                    this.reflocField = new XTypedList<refloc>(this, LinqToXsdTypeManager.Instance, reflocXName);
                }
                return this.reflocField;
            }
            set {
                if ((value == null)) {
                    this.reflocField = null;
                }
                else {
                    if ((this.reflocField == null)) {
                        this.reflocField = XTypedList<refloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, reflocXName);
                    }
                    else {
                        XTypedServices.SetList<refloc>(this.reflocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (resource | arc | ptrloc | extptrloc | refloc | extrefloc)+
        /// </para>
        /// </summary>
        public virtual IList<extrefloc> extrefloc {
            get {
                if ((this.extreflocField == null)) {
                    this.extreflocField = new XTypedList<extrefloc>(this, LinqToXsdTypeManager.Instance, extreflocXName);
                }
                return this.extreflocField;
            }
            set {
                if ((value == null)) {
                    this.extreflocField = null;
                }
                else {
                    if ((this.extreflocField == null)) {
                        this.extreflocField = XTypedList<extrefloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, extreflocXName);
                    }
                    else {
                        XTypedServices.SetList<extrefloc>(this.extreflocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                return typeFixedValue;
            }
            set {
                if (value.Equals(typeFixedValue)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, typeFixedValue);
                }
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title {
            get {
                XAttribute x = this.Attribute(titleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(titleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<linkgrp>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(resourceXName, typeof(resource));
            localElementDictionary.Add(arcXName, typeof(arc));
            localElementDictionary.Add(ptrlocXName, typeof(ptrloc));
            localElementDictionary.Add(extptrlocXName, typeof(extptrloc));
            localElementDictionary.Add(reflocXName, typeof(refloc));
            localElementDictionary.Add(extreflocXName, typeof(extrefloc));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb)*
    /// </para>
    /// </summary>
    public partial class occupation : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rulesXName = System.Xml.Linq.XName.Get("rules", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName authfilenumberXName = System.Xml.Linq.XName.Get("authfilenumber", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName normalXName = System.Xml.Linq.XName.Get("normal", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator occupation(XElement xe) { return XTypedServices.ToXTypedElement<occupation>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static occupation() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public occupation() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string rules {
            get {
                XAttribute x = this.Attribute(rulesXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(rulesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string authfilenumber {
            get {
                XAttribute x = this.Attribute(authfilenumberXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(authfilenumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string normal {
            get {
                XAttribute x = this.Attribute(normalXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(normalXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<occupation>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb)*
    /// </para>
    /// </summary>
    public partial class subject : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rulesXName = System.Xml.Linq.XName.Get("rules", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName authfilenumberXName = System.Xml.Linq.XName.Get("authfilenumber", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName normalXName = System.Xml.Linq.XName.Get("normal", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator subject(XElement xe) { return XTypedServices.ToXTypedElement<subject>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static subject() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public subject() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string rules {
            get {
                XAttribute x = this.Attribute(rulesXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(rulesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string authfilenumber {
            get {
                XAttribute x = this.Attribute(authfilenumberXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(authfilenumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string normal {
            get {
                XAttribute x = this.Attribute(normalXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(normalXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<subject>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb)*
    /// </para>
    /// </summary>
    public partial class genreform : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rulesXName = System.Xml.Linq.XName.Get("rules", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName authfilenumberXName = System.Xml.Linq.XName.Get("authfilenumber", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName normalXName = System.Xml.Linq.XName.Get("normal", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator genreform(XElement xe) { return XTypedServices.ToXTypedElement<genreform>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static genreform() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public genreform() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string rules {
            get {
                XAttribute x = this.Attribute(rulesXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(rulesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string authfilenumber {
            get {
                XAttribute x = this.Attribute(authfilenumberXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(authfilenumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string normal {
            get {
                XAttribute x = this.Attribute(normalXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(normalXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<genreform>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb)*
    /// </para>
    /// </summary>
    public partial class function : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rulesXName = System.Xml.Linq.XName.Get("rules", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName authfilenumberXName = System.Xml.Linq.XName.Get("authfilenumber", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName normalXName = System.Xml.Linq.XName.Get("normal", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator function(XElement xe) { return XTypedServices.ToXTypedElement<function>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static function() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public function() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string rules {
            get {
                XAttribute x = this.Attribute(rulesXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(rulesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string authfilenumber {
            get {
                XAttribute x = this.Attribute(authfilenumberXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(authfilenumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string normal {
            get {
                XAttribute x = this.Attribute(normalXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(normalXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<function>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class extptr : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName entityrefXName = System.Xml.Linq.XName.Get("entityref", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName xpointerXName = System.Xml.Linq.XName.Get("xpointer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string typeFixedValue = "simple";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName hrefXName = System.Xml.Linq.XName.Get("href", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arcroleXName = System.Xml.Linq.XName.Get("arcrole", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName showXName = System.Xml.Linq.XName.Get("show", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName actuateXName = System.Xml.Linq.XName.Get("actuate", "http://www.w3.org/1999/xlink");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
		public static explicit operator extptr(XElement xe) { return XTypedServices.ToXTypedElement<extptr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public extptr() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string entityref {
            get {
                XAttribute x = this.Attribute(entityrefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Entity).Datatype);
            }
            set {
                this.SetAttribute(entityrefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Entity).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string xpointer {
            get {
                XAttribute x = this.Attribute(xpointerXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(xpointerXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                return typeFixedValue;
            }
            set {
                if (value.Equals(typeFixedValue)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, typeFixedValue);
                }
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri href {
            get {
                XAttribute x = this.Attribute(hrefXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(hrefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string arcrole {
            get {
                XAttribute x = this.Attribute(arcroleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(arcroleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title {
            get {
                XAttribute x = this.Attribute(titleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(titleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string show {
            get {
                XAttribute x = this.Attribute(showXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(showXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LibraryOfCongress.EAD.ActuateEnum? actuate {
            get {
                XAttribute x = this.Attribute(actuateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LibraryOfCongress.EAD.ActuateEnum)(Enum.Parse(typeof(LibraryOfCongress.EAD.ActuateEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(actuateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<extptr>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, listhead?, chronitem+)
    /// </para>
    /// </summary>
    public partial class chronlist : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listheadXName = System.Xml.Linq.XName.Get("listhead", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName chronitemXName = System.Xml.Linq.XName.Get("chronitem", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronitem> chronitemField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator chronlist(XElement xe) { return XTypedServices.ToXTypedElement<chronlist>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static chronlist() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new NamedContentModelEntity(listheadXName), new NamedContentModelEntity(chronitemXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, listhead?, chronitem+)
        /// </para>
        /// </summary>
        public chronlist() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, listhead?, chronitem+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, listhead?, chronitem+)
        /// </para>
        /// </summary>
        public virtual listhead listhead {
            get {
                XElement x = this.GetElement(listheadXName);
                return ((listhead)(x));
            }
            set {
                this.SetElement(listheadXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (head?, listhead?, chronitem+)
        /// </para>
        /// </summary>
        public virtual IList<chronitem> chronitem {
            get {
                if ((this.chronitemField == null)) {
                    this.chronitemField = new XTypedList<chronitem>(this, LinqToXsdTypeManager.Instance, chronitemXName);
                }
                return this.chronitemField;
            }
            set {
                if ((value == null)) {
                    this.chronitemField = null;
                }
                else {
                    if ((this.chronitemField == null)) {
                        this.chronitemField = XTypedList<chronitem>.Initialize(this, LinqToXsdTypeManager.Instance, value, chronitemXName);
                    }
                    else {
                        XTypedServices.SetList<chronitem>(this.chronitemField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<chronlist>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(listheadXName, typeof(listhead));
            localElementDictionary.Add(chronitemXName, typeof(chronitem));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (date, (@event | eventgrp))
    /// </para>
    /// </summary>
    public partial class chronitem : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dateXName = System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @eventXName = System.Xml.Linq.XName.Get("event", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName eventgrpXName = System.Xml.Linq.XName.Get("eventgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("chronitem", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator chronitem(XElement xe) { return XTypedServices.ToXTypedElement<chronitem>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static chronitem() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(dateXName), new ChoiceContentModelEntity(new NamedContentModelEntity(@eventXName), new NamedContentModelEntity(eventgrpXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (date, (@event | eventgrp))
        /// </para>
        /// </summary>
        public chronitem() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (date, (@event | eventgrp))
        /// </para>
        /// </summary>
        public virtual date date {
            get {
                XElement x = this.GetElement(dateXName);
                return ((date)(x));
            }
            set {
                this.SetElement(dateXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (date, (@event | eventgrp))
        /// </para>
        /// </summary>
        public virtual @event @event {
            get {
                XElement x = this.GetElement(@eventXName);
                return ((@event)(x));
            }
            set {
                this.SetElement(@eventXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (date, (@event | eventgrp))
        /// </para>
        /// </summary>
        public virtual eventgrp eventgrp {
            get {
                XElement x = this.GetElement(eventgrpXName);
                return ((eventgrp)(x));
            }
            set {
                this.SetElement(eventgrpXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<chronitem>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(dateXName, typeof(date));
            localElementDictionary.Add(@eventXName, typeof(@event));
            localElementDictionary.Add(eventgrpXName, typeof(eventgrp));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (@event+)
    /// </para>
    /// </summary>
    public partial class eventgrp : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @eventXName = System.Xml.Linq.XName.Get("event", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@event> @eventField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("eventgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator eventgrp(XElement xe) { return XTypedServices.ToXTypedElement<eventgrp>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static eventgrp() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(@eventXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (@event+)
        /// </para>
        /// </summary>
        public eventgrp() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (@event+)
        /// </para>
        /// </summary>
        public virtual IList<@event> @event {
            get {
                if ((this.@eventField == null)) {
                    this.@eventField = new XTypedList<@event>(this, LinqToXsdTypeManager.Instance, @eventXName);
                }
                return this.@eventField;
            }
            set {
                if ((value == null)) {
                    this.@eventField = null;
                }
                else {
                    if ((this.@eventField == null)) {
                        this.@eventField = XTypedList<@event>.Initialize(this, LinqToXsdTypeManager.Instance, value, @eventXName);
                    }
                    else {
                        XTypedServices.SetList<@event>(this.@eventField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<eventgrp>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(@eventXName, typeof(@event));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, tgroup+)
    /// </para>
    /// </summary>
    public partial class table : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tgroupXName = System.Xml.Linq.XName.Get("tgroup", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<tgroup> tgroupField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName frameXName = System.Xml.Linq.XName.Get("frame", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName colsepXName = System.Xml.Linq.XName.Get("colsep", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rowsepXName = System.Xml.Linq.XName.Get("rowsep", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pgwideXName = System.Xml.Linq.XName.Get("pgwide", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator table(XElement xe) { return XTypedServices.ToXTypedElement<table>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static table() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new NamedContentModelEntity(tgroupXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, tgroup+)
        /// </para>
        /// </summary>
        public table() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, tgroup+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (head?, tgroup+)
        /// </para>
        /// </summary>
        public virtual IList<tgroup> tgroup {
            get {
                if ((this.tgroupField == null)) {
                    this.tgroupField = new XTypedList<tgroup>(this, LinqToXsdTypeManager.Instance, tgroupXName);
                }
                return this.tgroupField;
            }
            set {
                if ((value == null)) {
                    this.tgroupField = null;
                }
                else {
                    if ((this.tgroupField == null)) {
                        this.tgroupField = XTypedList<tgroup>.Initialize(this, LinqToXsdTypeManager.Instance, value, tgroupXName);
                    }
                    else {
                        XTypedServices.SetList<tgroup>(this.tgroupField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LibraryOfCongress.EAD.table.FrameEnum? frame {
            get {
                XAttribute x = this.Attribute(frameXName);
                if ((x == null)) {
                    return null;
                }
                return ((LibraryOfCongress.EAD.table.FrameEnum)(Enum.Parse(typeof(LibraryOfCongress.EAD.table.FrameEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(frameXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string colsep {
            get {
                XAttribute x = this.Attribute(colsepXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(colsepXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string rowsep {
            get {
                XAttribute x = this.Attribute(rowsepXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(rowsepXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string pgwide {
            get {
                XAttribute x = this.Attribute(pgwideXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(pgwideXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<table>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(tgroupXName, typeof(tgroup));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum FrameEnum {
            
            top,
            
            bottom,
            
            topbot,
            
            all,
            
            sides,
            
            none,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (colspec*, thead?, tbody)
    /// </para>
    /// </summary>
    public partial class tgroup : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName colspecXName = System.Xml.Linq.XName.Get("colspec", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<colspec> colspecField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName theadXName = System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tbodyXName = System.Xml.Linq.XName.Get("tbody", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName colsXName = System.Xml.Linq.XName.Get("cols", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName colsepXName = System.Xml.Linq.XName.Get("colsep", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rowsepXName = System.Xml.Linq.XName.Get("rowsep", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName alignXName = System.Xml.Linq.XName.Get("align", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("tgroup", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator tgroup(XElement xe) { return XTypedServices.ToXTypedElement<tgroup>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static tgroup() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(colspecXName), new NamedContentModelEntity(theadXName), new NamedContentModelEntity(tbodyXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (colspec*, thead?, tbody)
        /// </para>
        /// </summary>
        public tgroup() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (colspec*, thead?, tbody)
        /// </para>
        /// </summary>
        public virtual IList<colspec> colspec {
            get {
                if ((this.colspecField == null)) {
                    this.colspecField = new XTypedList<colspec>(this, LinqToXsdTypeManager.Instance, colspecXName);
                }
                return this.colspecField;
            }
            set {
                if ((value == null)) {
                    this.colspecField = null;
                }
                else {
                    if ((this.colspecField == null)) {
                        this.colspecField = XTypedList<colspec>.Initialize(this, LinqToXsdTypeManager.Instance, value, colspecXName);
                    }
                    else {
                        XTypedServices.SetList<colspec>(this.colspecField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (colspec*, thead?, tbody)
        /// </para>
        /// </summary>
        public virtual thead thead {
            get {
                XElement x = this.GetElement(theadXName);
                return ((thead)(x));
            }
            set {
                this.SetElement(theadXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (colspec*, thead?, tbody)
        /// </para>
        /// </summary>
        public virtual tbody tbody {
            get {
                XElement x = this.GetElement(tbodyXName);
                return ((tbody)(x));
            }
            set {
                this.SetElement(tbodyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string cols {
            get {
                XAttribute x = this.Attribute(colsXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(colsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string colsep {
            get {
                XAttribute x = this.Attribute(colsepXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(colsepXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string rowsep {
            get {
                XAttribute x = this.Attribute(rowsepXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(rowsepXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string align {
            get {
                XAttribute x = this.Attribute(alignXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(alignXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<tgroup>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(colspecXName, typeof(colspec));
            localElementDictionary.Add(theadXName, typeof(thead));
            localElementDictionary.Add(tbodyXName, typeof(tbody));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class colspec : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName colnumXName = System.Xml.Linq.XName.Get("colnum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName colnameXName = System.Xml.Linq.XName.Get("colname", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName colwidthXName = System.Xml.Linq.XName.Get("colwidth", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName colsepXName = System.Xml.Linq.XName.Get("colsep", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rowsepXName = System.Xml.Linq.XName.Get("rowsep", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName alignXName = System.Xml.Linq.XName.Get("align", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @charXName = System.Xml.Linq.XName.Get("char", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName charoffXName = System.Xml.Linq.XName.Get("charoff", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("colspec", "urn:isbn:1-931666-22-9");
        
		public static explicit operator colspec(XElement xe) { return XTypedServices.ToXTypedElement<colspec>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public colspec() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string colnum {
            get {
                XAttribute x = this.Attribute(colnumXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(colnumXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string colname {
            get {
                XAttribute x = this.Attribute(colnameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(colnameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string colwidth {
            get {
                XAttribute x = this.Attribute(colwidthXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(colwidthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string colsep {
            get {
                XAttribute x = this.Attribute(colsepXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(colsepXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string rowsep {
            get {
                XAttribute x = this.Attribute(rowsepXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(rowsepXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string align {
            get {
                XAttribute x = this.Attribute(alignXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(alignXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string @char {
            get {
                XAttribute x = this.Attribute(@charXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(@charXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string charoff {
            get {
                XAttribute x = this.Attribute(charoffXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(charoffXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<colspec>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (row+)
    /// </para>
    /// </summary>
    public partial class tbody : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rowXName = System.Xml.Linq.XName.Get("row", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<row> rowField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valignXName = System.Xml.Linq.XName.Get("valign", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("tbody", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator tbody(XElement xe) { return XTypedServices.ToXTypedElement<tbody>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static tbody() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(rowXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (row+)
        /// </para>
        /// </summary>
        public tbody() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (row+)
        /// </para>
        /// </summary>
        public virtual IList<row> row {
            get {
                if ((this.rowField == null)) {
                    this.rowField = new XTypedList<row>(this, LinqToXsdTypeManager.Instance, rowXName);
                }
                return this.rowField;
            }
            set {
                if ((value == null)) {
                    this.rowField = null;
                }
                else {
                    if ((this.rowField == null)) {
                        this.rowField = XTypedList<row>.Initialize(this, LinqToXsdTypeManager.Instance, value, rowXName);
                    }
                    else {
                        XTypedServices.SetList<row>(this.rowField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LibraryOfCongress.EAD.tbody.ValignEnum? valign {
            get {
                XAttribute x = this.Attribute(valignXName);
                if ((x == null)) {
                    return null;
                }
                return ((LibraryOfCongress.EAD.tbody.ValignEnum)(Enum.Parse(typeof(LibraryOfCongress.EAD.tbody.ValignEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(valignXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<tbody>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(rowXName, typeof(row));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum ValignEnum {
            
            top,
            
            middle,
            
            bottom,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (address | chronlist | list | note | table | p)+
    /// </para>
    /// </summary>
    public partial class blockquote : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName addressXName = System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName chronlistXName = System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listXName = System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tableXName = System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator blockquote(XElement xe) { return XTypedServices.ToXTypedElement<blockquote>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static blockquote() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(addressXName), new NamedContentModelEntity(chronlistXName), new NamedContentModelEntity(listXName), new NamedContentModelEntity(noteXName), new NamedContentModelEntity(tableXName), new NamedContentModelEntity(pXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | p)+
        /// </para>
        /// </summary>
        public blockquote() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | p)+
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, addressXName);
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, addressXName);
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | p)+
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, chronlistXName);
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, chronlistXName);
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | p)+
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, listXName);
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, listXName);
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | p)+
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | p)+
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, tableXName);
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, tableXName);
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | p)+
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<blockquote>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(addressXName, typeof(address));
            localElementDictionary.Add(chronlistXName, typeof(chronlist));
            localElementDictionary.Add(listXName, typeof(list));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(tableXName, typeof(table));
            localElementDictionary.Add(pXName, typeof(p));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
    /// </para>
    /// </summary>
    public partial class @abstract : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName abbrXName = System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName expanXName = System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @refXName = System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extrefXName = System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName linkgrpXName = System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibrefXName = System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName archrefXName = System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName labelXName = System.Xml.Linq.XName.Get("label", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName langcodeXName = System.Xml.Linq.XName.Get("langcode", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("abstract", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator @abstract(XElement xe) { return XTypedServices.ToXTypedElement<@abstract>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static @abstract() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName), new NamedContentModelEntity(abbrXName), new NamedContentModelEntity(expanXName), new NamedContentModelEntity(@refXName), new NamedContentModelEntity(extrefXName), new NamedContentModelEntity(linkgrpXName), new NamedContentModelEntity(bibrefXName), new NamedContentModelEntity(titleXName), new NamedContentModelEntity(archrefXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public @abstract() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, abbrXName);
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, abbrXName);
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, expanXName);
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, expanXName);
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, @refXName);
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, @refXName);
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, extrefXName);
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, extrefXName);
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, linkgrpXName);
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, linkgrpXName);
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, bibrefXName);
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibrefXName);
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, titleXName);
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, titleXName);
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, archrefXName);
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, archrefXName);
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(labelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(labelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string langcode {
            get {
                XAttribute x = this.Attribute(langcodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(langcodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<@abstract>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
            localElementDictionary.Add(abbrXName, typeof(abbr));
            localElementDictionary.Add(expanXName, typeof(expan));
            localElementDictionary.Add(@refXName, typeof(@ref));
            localElementDictionary.Add(extrefXName, typeof(extref));
            localElementDictionary.Add(linkgrpXName, typeof(linkgrp));
            localElementDictionary.Add(bibrefXName, typeof(bibref));
            localElementDictionary.Add(titleXName, typeof(title));
            localElementDictionary.Add(archrefXName, typeof(archref));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
    /// </para>
    /// </summary>
    public partial class container : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName abbrXName = System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName expanXName = System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @refXName = System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extrefXName = System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName linkgrpXName = System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibrefXName = System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName archrefXName = System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName labelXName = System.Xml.Linq.XName.Get("label", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName parentXName = System.Xml.Linq.XName.Get("parent", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("container", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator container(XElement xe) { return XTypedServices.ToXTypedElement<container>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static container() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName), new NamedContentModelEntity(abbrXName), new NamedContentModelEntity(expanXName), new NamedContentModelEntity(@refXName), new NamedContentModelEntity(extrefXName), new NamedContentModelEntity(linkgrpXName), new NamedContentModelEntity(bibrefXName), new NamedContentModelEntity(titleXName), new NamedContentModelEntity(archrefXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public container() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, abbrXName);
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, abbrXName);
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, expanXName);
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, expanXName);
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, @refXName);
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, @refXName);
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, extrefXName);
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, extrefXName);
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, linkgrpXName);
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, linkgrpXName);
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, bibrefXName);
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibrefXName);
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, titleXName);
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, titleXName);
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, archrefXName);
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, archrefXName);
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(labelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(labelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> parent {
            get {
                XAttribute x = this.Attribute(parentXName);
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetListAttribute(parentXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<container>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
            localElementDictionary.Add(abbrXName, typeof(abbr));
            localElementDictionary.Add(expanXName, typeof(expan));
            localElementDictionary.Add(@refXName, typeof(@ref));
            localElementDictionary.Add(extrefXName, typeof(extref));
            localElementDictionary.Add(linkgrpXName, typeof(linkgrp));
            localElementDictionary.Add(bibrefXName, typeof(bibref));
            localElementDictionary.Add(titleXName, typeof(title));
            localElementDictionary.Add(archrefXName, typeof(archref));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
    /// </para>
    /// </summary>
    public partial class langmaterial : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName abbrXName = System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName expanXName = System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @refXName = System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extrefXName = System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName linkgrpXName = System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibrefXName = System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName archrefXName = System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName languageXName = System.Xml.Linq.XName.Get("language", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<language> languageField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName labelXName = System.Xml.Linq.XName.Get("label", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("langmaterial", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator langmaterial(XElement xe) { return XTypedServices.ToXTypedElement<langmaterial>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static langmaterial() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName), new NamedContentModelEntity(abbrXName), new NamedContentModelEntity(expanXName), new NamedContentModelEntity(@refXName), new NamedContentModelEntity(extrefXName), new NamedContentModelEntity(linkgrpXName), new NamedContentModelEntity(bibrefXName), new NamedContentModelEntity(titleXName), new NamedContentModelEntity(archrefXName), new NamedContentModelEntity(languageXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public langmaterial() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, abbrXName);
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, abbrXName);
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, expanXName);
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, expanXName);
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, @refXName);
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, @refXName);
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, extrefXName);
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, extrefXName);
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, linkgrpXName);
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, linkgrpXName);
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, bibrefXName);
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibrefXName);
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, titleXName);
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, titleXName);
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, archrefXName);
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, archrefXName);
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<language> language {
            get {
                if ((this.languageField == null)) {
                    this.languageField = new XTypedList<language>(this, LinqToXsdTypeManager.Instance, languageXName);
                }
                return this.languageField;
            }
            set {
                if ((value == null)) {
                    this.languageField = null;
                }
                else {
                    if ((this.languageField == null)) {
                        this.languageField = XTypedList<language>.Initialize(this, LinqToXsdTypeManager.Instance, value, languageXName);
                    }
                    else {
                        XTypedServices.SetList<language>(this.languageField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(labelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(labelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<langmaterial>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
            localElementDictionary.Add(abbrXName, typeof(abbr));
            localElementDictionary.Add(expanXName, typeof(expan));
            localElementDictionary.Add(@refXName, typeof(@ref));
            localElementDictionary.Add(extrefXName, typeof(extref));
            localElementDictionary.Add(linkgrpXName, typeof(linkgrp));
            localElementDictionary.Add(bibrefXName, typeof(bibref));
            localElementDictionary.Add(titleXName, typeof(title));
            localElementDictionary.Add(archrefXName, typeof(archref));
            localElementDictionary.Add(languageXName, typeof(language));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
    /// </para>
    /// </summary>
    public partial class physdesc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName abbrXName = System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName expanXName = System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @refXName = System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extrefXName = System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName linkgrpXName = System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibrefXName = System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName archrefXName = System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dimensionsXName = System.Xml.Linq.XName.Get("dimensions", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dimensions> dimensionsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName physfacetXName = System.Xml.Linq.XName.Get("physfacet", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<physfacet> physfacetField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extentXName = System.Xml.Linq.XName.Get("extent", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extent> extentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dateXName = System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<date> dateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName corpnameXName = System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<corpname> corpnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName famnameXName = System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<famname> famnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geognameXName = System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<geogname> geognameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<name> nameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName occupationXName = System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<occupation> occupationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName persnameXName = System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<persname> persnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName subjectXName = System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<subject> subjectField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName genreformXName = System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<genreform> genreformField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName functionXName = System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<function> functionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName labelXName = System.Xml.Linq.XName.Get("label", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rulesXName = System.Xml.Linq.XName.Get("rules", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("physdesc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator physdesc(XElement xe) { return XTypedServices.ToXTypedElement<physdesc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static physdesc() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName), new NamedContentModelEntity(abbrXName), new NamedContentModelEntity(expanXName), new NamedContentModelEntity(@refXName), new NamedContentModelEntity(extrefXName), new NamedContentModelEntity(linkgrpXName), new NamedContentModelEntity(bibrefXName), new NamedContentModelEntity(titleXName), new NamedContentModelEntity(archrefXName), new NamedContentModelEntity(dimensionsXName), new NamedContentModelEntity(physfacetXName), new NamedContentModelEntity(extentXName), new NamedContentModelEntity(dateXName), new NamedContentModelEntity(corpnameXName), new NamedContentModelEntity(famnameXName), new NamedContentModelEntity(geognameXName), new NamedContentModelEntity(nameXName), new NamedContentModelEntity(occupationXName), new NamedContentModelEntity(persnameXName), new NamedContentModelEntity(subjectXName), new NamedContentModelEntity(genreformXName), new NamedContentModelEntity(functionXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public physdesc() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, abbrXName);
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, abbrXName);
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, expanXName);
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, expanXName);
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, @refXName);
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, @refXName);
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, extrefXName);
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, extrefXName);
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, linkgrpXName);
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, linkgrpXName);
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, bibrefXName);
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibrefXName);
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, titleXName);
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, titleXName);
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, archrefXName);
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, archrefXName);
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<dimensions> dimensions {
            get {
                if ((this.dimensionsField == null)) {
                    this.dimensionsField = new XTypedList<dimensions>(this, LinqToXsdTypeManager.Instance, dimensionsXName);
                }
                return this.dimensionsField;
            }
            set {
                if ((value == null)) {
                    this.dimensionsField = null;
                }
                else {
                    if ((this.dimensionsField == null)) {
                        this.dimensionsField = XTypedList<dimensions>.Initialize(this, LinqToXsdTypeManager.Instance, value, dimensionsXName);
                    }
                    else {
                        XTypedServices.SetList<dimensions>(this.dimensionsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<physfacet> physfacet {
            get {
                if ((this.physfacetField == null)) {
                    this.physfacetField = new XTypedList<physfacet>(this, LinqToXsdTypeManager.Instance, physfacetXName);
                }
                return this.physfacetField;
            }
            set {
                if ((value == null)) {
                    this.physfacetField = null;
                }
                else {
                    if ((this.physfacetField == null)) {
                        this.physfacetField = XTypedList<physfacet>.Initialize(this, LinqToXsdTypeManager.Instance, value, physfacetXName);
                    }
                    else {
                        XTypedServices.SetList<physfacet>(this.physfacetField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<extent> extent {
            get {
                if ((this.extentField == null)) {
                    this.extentField = new XTypedList<extent>(this, LinqToXsdTypeManager.Instance, extentXName);
                }
                return this.extentField;
            }
            set {
                if ((value == null)) {
                    this.extentField = null;
                }
                else {
                    if ((this.extentField == null)) {
                        this.extentField = XTypedList<extent>.Initialize(this, LinqToXsdTypeManager.Instance, value, extentXName);
                    }
                    else {
                        XTypedServices.SetList<extent>(this.extentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<date> date {
            get {
                if ((this.dateField == null)) {
                    this.dateField = new XTypedList<date>(this, LinqToXsdTypeManager.Instance, dateXName);
                }
                return this.dateField;
            }
            set {
                if ((value == null)) {
                    this.dateField = null;
                }
                else {
                    if ((this.dateField == null)) {
                        this.dateField = XTypedList<date>.Initialize(this, LinqToXsdTypeManager.Instance, value, dateXName);
                    }
                    else {
                        XTypedServices.SetList<date>(this.dateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<corpname> corpname {
            get {
                if ((this.corpnameField == null)) {
                    this.corpnameField = new XTypedList<corpname>(this, LinqToXsdTypeManager.Instance, corpnameXName);
                }
                return this.corpnameField;
            }
            set {
                if ((value == null)) {
                    this.corpnameField = null;
                }
                else {
                    if ((this.corpnameField == null)) {
                        this.corpnameField = XTypedList<corpname>.Initialize(this, LinqToXsdTypeManager.Instance, value, corpnameXName);
                    }
                    else {
                        XTypedServices.SetList<corpname>(this.corpnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<famname> famname {
            get {
                if ((this.famnameField == null)) {
                    this.famnameField = new XTypedList<famname>(this, LinqToXsdTypeManager.Instance, famnameXName);
                }
                return this.famnameField;
            }
            set {
                if ((value == null)) {
                    this.famnameField = null;
                }
                else {
                    if ((this.famnameField == null)) {
                        this.famnameField = XTypedList<famname>.Initialize(this, LinqToXsdTypeManager.Instance, value, famnameXName);
                    }
                    else {
                        XTypedServices.SetList<famname>(this.famnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<geogname> geogname {
            get {
                if ((this.geognameField == null)) {
                    this.geognameField = new XTypedList<geogname>(this, LinqToXsdTypeManager.Instance, geognameXName);
                }
                return this.geognameField;
            }
            set {
                if ((value == null)) {
                    this.geognameField = null;
                }
                else {
                    if ((this.geognameField == null)) {
                        this.geognameField = XTypedList<geogname>.Initialize(this, LinqToXsdTypeManager.Instance, value, geognameXName);
                    }
                    else {
                        XTypedServices.SetList<geogname>(this.geognameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<name> name {
            get {
                if ((this.nameField == null)) {
                    this.nameField = new XTypedList<name>(this, LinqToXsdTypeManager.Instance, nameXName);
                }
                return this.nameField;
            }
            set {
                if ((value == null)) {
                    this.nameField = null;
                }
                else {
                    if ((this.nameField == null)) {
                        this.nameField = XTypedList<name>.Initialize(this, LinqToXsdTypeManager.Instance, value, nameXName);
                    }
                    else {
                        XTypedServices.SetList<name>(this.nameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<occupation> occupation {
            get {
                if ((this.occupationField == null)) {
                    this.occupationField = new XTypedList<occupation>(this, LinqToXsdTypeManager.Instance, occupationXName);
                }
                return this.occupationField;
            }
            set {
                if ((value == null)) {
                    this.occupationField = null;
                }
                else {
                    if ((this.occupationField == null)) {
                        this.occupationField = XTypedList<occupation>.Initialize(this, LinqToXsdTypeManager.Instance, value, occupationXName);
                    }
                    else {
                        XTypedServices.SetList<occupation>(this.occupationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<persname> persname {
            get {
                if ((this.persnameField == null)) {
                    this.persnameField = new XTypedList<persname>(this, LinqToXsdTypeManager.Instance, persnameXName);
                }
                return this.persnameField;
            }
            set {
                if ((value == null)) {
                    this.persnameField = null;
                }
                else {
                    if ((this.persnameField == null)) {
                        this.persnameField = XTypedList<persname>.Initialize(this, LinqToXsdTypeManager.Instance, value, persnameXName);
                    }
                    else {
                        XTypedServices.SetList<persname>(this.persnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<subject> subject {
            get {
                if ((this.subjectField == null)) {
                    this.subjectField = new XTypedList<subject>(this, LinqToXsdTypeManager.Instance, subjectXName);
                }
                return this.subjectField;
            }
            set {
                if ((value == null)) {
                    this.subjectField = null;
                }
                else {
                    if ((this.subjectField == null)) {
                        this.subjectField = XTypedList<subject>.Initialize(this, LinqToXsdTypeManager.Instance, value, subjectXName);
                    }
                    else {
                        XTypedServices.SetList<subject>(this.subjectField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<genreform> genreform {
            get {
                if ((this.genreformField == null)) {
                    this.genreformField = new XTypedList<genreform>(this, LinqToXsdTypeManager.Instance, genreformXName);
                }
                return this.genreformField;
            }
            set {
                if ((value == null)) {
                    this.genreformField = null;
                }
                else {
                    if ((this.genreformField == null)) {
                        this.genreformField = XTypedList<genreform>.Initialize(this, LinqToXsdTypeManager.Instance, value, genreformXName);
                    }
                    else {
                        XTypedServices.SetList<genreform>(this.genreformField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions | physfacet | extent | date | corpname | famname | geogname | name | occupation | persname | subject | genreform | function)*
        /// </para>
        /// </summary>
        public virtual IList<function> function {
            get {
                if ((this.functionField == null)) {
                    this.functionField = new XTypedList<function>(this, LinqToXsdTypeManager.Instance, functionXName);
                }
                return this.functionField;
            }
            set {
                if ((value == null)) {
                    this.functionField = null;
                }
                else {
                    if ((this.functionField == null)) {
                        this.functionField = XTypedList<function>.Initialize(this, LinqToXsdTypeManager.Instance, value, functionXName);
                    }
                    else {
                        XTypedServices.SetList<function>(this.functionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(labelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(labelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string rules {
            get {
                XAttribute x = this.Attribute(rulesXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(rulesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<physdesc>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
            localElementDictionary.Add(abbrXName, typeof(abbr));
            localElementDictionary.Add(expanXName, typeof(expan));
            localElementDictionary.Add(@refXName, typeof(@ref));
            localElementDictionary.Add(extrefXName, typeof(extref));
            localElementDictionary.Add(linkgrpXName, typeof(linkgrp));
            localElementDictionary.Add(bibrefXName, typeof(bibref));
            localElementDictionary.Add(titleXName, typeof(title));
            localElementDictionary.Add(archrefXName, typeof(archref));
            localElementDictionary.Add(dimensionsXName, typeof(dimensions));
            localElementDictionary.Add(physfacetXName, typeof(physfacet));
            localElementDictionary.Add(extentXName, typeof(extent));
            localElementDictionary.Add(dateXName, typeof(date));
            localElementDictionary.Add(corpnameXName, typeof(corpname));
            localElementDictionary.Add(famnameXName, typeof(famname));
            localElementDictionary.Add(geognameXName, typeof(geogname));
            localElementDictionary.Add(nameXName, typeof(name));
            localElementDictionary.Add(occupationXName, typeof(occupation));
            localElementDictionary.Add(persnameXName, typeof(persname));
            localElementDictionary.Add(subjectXName, typeof(subject));
            localElementDictionary.Add(genreformXName, typeof(genreform));
            localElementDictionary.Add(functionXName, typeof(function));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
    /// </para>
    /// </summary>
    public partial class physfacet : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName abbrXName = System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName expanXName = System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @refXName = System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extrefXName = System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName linkgrpXName = System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibrefXName = System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName archrefXName = System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName corpnameXName = System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<corpname> corpnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName famnameXName = System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<famname> famnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geognameXName = System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<geogname> geognameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<name> nameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName occupationXName = System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<occupation> occupationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName persnameXName = System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<persname> persnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName subjectXName = System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<subject> subjectField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName genreformXName = System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<genreform> genreformField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName functionXName = System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<function> functionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dateXName = System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<date> dateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName labelXName = System.Xml.Linq.XName.Get("label", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unitXName = System.Xml.Linq.XName.Get("unit", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rulesXName = System.Xml.Linq.XName.Get("rules", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("physfacet", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator physfacet(XElement xe) { return XTypedServices.ToXTypedElement<physfacet>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static physfacet() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName), new NamedContentModelEntity(abbrXName), new NamedContentModelEntity(expanXName), new NamedContentModelEntity(@refXName), new NamedContentModelEntity(extrefXName), new NamedContentModelEntity(linkgrpXName), new NamedContentModelEntity(bibrefXName), new NamedContentModelEntity(titleXName), new NamedContentModelEntity(archrefXName), new NamedContentModelEntity(corpnameXName), new NamedContentModelEntity(famnameXName), new NamedContentModelEntity(geognameXName), new NamedContentModelEntity(nameXName), new NamedContentModelEntity(occupationXName), new NamedContentModelEntity(persnameXName), new NamedContentModelEntity(subjectXName), new NamedContentModelEntity(genreformXName), new NamedContentModelEntity(functionXName), new NamedContentModelEntity(dateXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public physfacet() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, abbrXName);
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, abbrXName);
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, expanXName);
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, expanXName);
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, @refXName);
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, @refXName);
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, extrefXName);
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, extrefXName);
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, linkgrpXName);
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, linkgrpXName);
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, bibrefXName);
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibrefXName);
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, titleXName);
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, titleXName);
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, archrefXName);
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, archrefXName);
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public virtual IList<corpname> corpname {
            get {
                if ((this.corpnameField == null)) {
                    this.corpnameField = new XTypedList<corpname>(this, LinqToXsdTypeManager.Instance, corpnameXName);
                }
                return this.corpnameField;
            }
            set {
                if ((value == null)) {
                    this.corpnameField = null;
                }
                else {
                    if ((this.corpnameField == null)) {
                        this.corpnameField = XTypedList<corpname>.Initialize(this, LinqToXsdTypeManager.Instance, value, corpnameXName);
                    }
                    else {
                        XTypedServices.SetList<corpname>(this.corpnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public virtual IList<famname> famname {
            get {
                if ((this.famnameField == null)) {
                    this.famnameField = new XTypedList<famname>(this, LinqToXsdTypeManager.Instance, famnameXName);
                }
                return this.famnameField;
            }
            set {
                if ((value == null)) {
                    this.famnameField = null;
                }
                else {
                    if ((this.famnameField == null)) {
                        this.famnameField = XTypedList<famname>.Initialize(this, LinqToXsdTypeManager.Instance, value, famnameXName);
                    }
                    else {
                        XTypedServices.SetList<famname>(this.famnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public virtual IList<geogname> geogname {
            get {
                if ((this.geognameField == null)) {
                    this.geognameField = new XTypedList<geogname>(this, LinqToXsdTypeManager.Instance, geognameXName);
                }
                return this.geognameField;
            }
            set {
                if ((value == null)) {
                    this.geognameField = null;
                }
                else {
                    if ((this.geognameField == null)) {
                        this.geognameField = XTypedList<geogname>.Initialize(this, LinqToXsdTypeManager.Instance, value, geognameXName);
                    }
                    else {
                        XTypedServices.SetList<geogname>(this.geognameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public virtual IList<name> name {
            get {
                if ((this.nameField == null)) {
                    this.nameField = new XTypedList<name>(this, LinqToXsdTypeManager.Instance, nameXName);
                }
                return this.nameField;
            }
            set {
                if ((value == null)) {
                    this.nameField = null;
                }
                else {
                    if ((this.nameField == null)) {
                        this.nameField = XTypedList<name>.Initialize(this, LinqToXsdTypeManager.Instance, value, nameXName);
                    }
                    else {
                        XTypedServices.SetList<name>(this.nameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public virtual IList<occupation> occupation {
            get {
                if ((this.occupationField == null)) {
                    this.occupationField = new XTypedList<occupation>(this, LinqToXsdTypeManager.Instance, occupationXName);
                }
                return this.occupationField;
            }
            set {
                if ((value == null)) {
                    this.occupationField = null;
                }
                else {
                    if ((this.occupationField == null)) {
                        this.occupationField = XTypedList<occupation>.Initialize(this, LinqToXsdTypeManager.Instance, value, occupationXName);
                    }
                    else {
                        XTypedServices.SetList<occupation>(this.occupationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public virtual IList<persname> persname {
            get {
                if ((this.persnameField == null)) {
                    this.persnameField = new XTypedList<persname>(this, LinqToXsdTypeManager.Instance, persnameXName);
                }
                return this.persnameField;
            }
            set {
                if ((value == null)) {
                    this.persnameField = null;
                }
                else {
                    if ((this.persnameField == null)) {
                        this.persnameField = XTypedList<persname>.Initialize(this, LinqToXsdTypeManager.Instance, value, persnameXName);
                    }
                    else {
                        XTypedServices.SetList<persname>(this.persnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public virtual IList<subject> subject {
            get {
                if ((this.subjectField == null)) {
                    this.subjectField = new XTypedList<subject>(this, LinqToXsdTypeManager.Instance, subjectXName);
                }
                return this.subjectField;
            }
            set {
                if ((value == null)) {
                    this.subjectField = null;
                }
                else {
                    if ((this.subjectField == null)) {
                        this.subjectField = XTypedList<subject>.Initialize(this, LinqToXsdTypeManager.Instance, value, subjectXName);
                    }
                    else {
                        XTypedServices.SetList<subject>(this.subjectField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public virtual IList<genreform> genreform {
            get {
                if ((this.genreformField == null)) {
                    this.genreformField = new XTypedList<genreform>(this, LinqToXsdTypeManager.Instance, genreformXName);
                }
                return this.genreformField;
            }
            set {
                if ((value == null)) {
                    this.genreformField = null;
                }
                else {
                    if ((this.genreformField == null)) {
                        this.genreformField = XTypedList<genreform>.Initialize(this, LinqToXsdTypeManager.Instance, value, genreformXName);
                    }
                    else {
                        XTypedServices.SetList<genreform>(this.genreformField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public virtual IList<function> function {
            get {
                if ((this.functionField == null)) {
                    this.functionField = new XTypedList<function>(this, LinqToXsdTypeManager.Instance, functionXName);
                }
                return this.functionField;
            }
            set {
                if ((value == null)) {
                    this.functionField = null;
                }
                else {
                    if ((this.functionField == null)) {
                        this.functionField = XTypedList<function>.Initialize(this, LinqToXsdTypeManager.Instance, value, functionXName);
                    }
                    else {
                        XTypedServices.SetList<function>(this.functionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date)*
        /// </para>
        /// </summary>
        public virtual IList<date> date {
            get {
                if ((this.dateField == null)) {
                    this.dateField = new XTypedList<date>(this, LinqToXsdTypeManager.Instance, dateXName);
                }
                return this.dateField;
            }
            set {
                if ((value == null)) {
                    this.dateField = null;
                }
                else {
                    if ((this.dateField == null)) {
                        this.dateField = XTypedList<date>.Initialize(this, LinqToXsdTypeManager.Instance, value, dateXName);
                    }
                    else {
                        XTypedServices.SetList<date>(this.dateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(labelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(labelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string unit {
            get {
                XAttribute x = this.Attribute(unitXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(unitXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string rules {
            get {
                XAttribute x = this.Attribute(rulesXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(rulesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<physfacet>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
            localElementDictionary.Add(abbrXName, typeof(abbr));
            localElementDictionary.Add(expanXName, typeof(expan));
            localElementDictionary.Add(@refXName, typeof(@ref));
            localElementDictionary.Add(extrefXName, typeof(extref));
            localElementDictionary.Add(linkgrpXName, typeof(linkgrp));
            localElementDictionary.Add(bibrefXName, typeof(bibref));
            localElementDictionary.Add(titleXName, typeof(title));
            localElementDictionary.Add(archrefXName, typeof(archref));
            localElementDictionary.Add(corpnameXName, typeof(corpname));
            localElementDictionary.Add(famnameXName, typeof(famname));
            localElementDictionary.Add(geognameXName, typeof(geogname));
            localElementDictionary.Add(nameXName, typeof(name));
            localElementDictionary.Add(occupationXName, typeof(occupation));
            localElementDictionary.Add(persnameXName, typeof(persname));
            localElementDictionary.Add(subjectXName, typeof(subject));
            localElementDictionary.Add(genreformXName, typeof(genreform));
            localElementDictionary.Add(functionXName, typeof(function));
            localElementDictionary.Add(dateXName, typeof(date));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
    /// </para>
    /// </summary>
    public partial class extent : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName abbrXName = System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName expanXName = System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @refXName = System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extrefXName = System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName linkgrpXName = System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibrefXName = System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName archrefXName = System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName labelXName = System.Xml.Linq.XName.Get("label", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unitXName = System.Xml.Linq.XName.Get("unit", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("extent", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator extent(XElement xe) { return XTypedServices.ToXTypedElement<extent>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static extent() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName), new NamedContentModelEntity(abbrXName), new NamedContentModelEntity(expanXName), new NamedContentModelEntity(@refXName), new NamedContentModelEntity(extrefXName), new NamedContentModelEntity(linkgrpXName), new NamedContentModelEntity(bibrefXName), new NamedContentModelEntity(titleXName), new NamedContentModelEntity(archrefXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public extent() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, abbrXName);
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, abbrXName);
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, expanXName);
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, expanXName);
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, @refXName);
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, @refXName);
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, extrefXName);
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, extrefXName);
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, linkgrpXName);
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, linkgrpXName);
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, bibrefXName);
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibrefXName);
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, titleXName);
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, titleXName);
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, archrefXName);
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, archrefXName);
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(labelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(labelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string unit {
            get {
                XAttribute x = this.Attribute(unitXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(unitXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<extent>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
            localElementDictionary.Add(abbrXName, typeof(abbr));
            localElementDictionary.Add(expanXName, typeof(expan));
            localElementDictionary.Add(@refXName, typeof(@ref));
            localElementDictionary.Add(extrefXName, typeof(extref));
            localElementDictionary.Add(linkgrpXName, typeof(linkgrp));
            localElementDictionary.Add(bibrefXName, typeof(bibref));
            localElementDictionary.Add(titleXName, typeof(title));
            localElementDictionary.Add(archrefXName, typeof(archref));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
    /// </para>
    /// </summary>
    public partial class physloc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName abbrXName = System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName expanXName = System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @refXName = System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extrefXName = System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName linkgrpXName = System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibrefXName = System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName archrefXName = System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName labelXName = System.Xml.Linq.XName.Get("label", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName parentXName = System.Xml.Linq.XName.Get("parent", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("physloc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator physloc(XElement xe) { return XTypedServices.ToXTypedElement<physloc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static physloc() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName), new NamedContentModelEntity(abbrXName), new NamedContentModelEntity(expanXName), new NamedContentModelEntity(@refXName), new NamedContentModelEntity(extrefXName), new NamedContentModelEntity(linkgrpXName), new NamedContentModelEntity(bibrefXName), new NamedContentModelEntity(titleXName), new NamedContentModelEntity(archrefXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public physloc() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, abbrXName);
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, abbrXName);
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, expanXName);
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, expanXName);
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, @refXName);
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, @refXName);
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, extrefXName);
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, extrefXName);
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, linkgrpXName);
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, linkgrpXName);
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, bibrefXName);
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibrefXName);
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, titleXName);
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, titleXName);
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, archrefXName);
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, archrefXName);
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(labelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(labelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> parent {
            get {
                XAttribute x = this.Attribute(parentXName);
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetListAttribute(parentXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<physloc>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
            localElementDictionary.Add(abbrXName, typeof(abbr));
            localElementDictionary.Add(expanXName, typeof(expan));
            localElementDictionary.Add(@refXName, typeof(@ref));
            localElementDictionary.Add(extrefXName, typeof(extref));
            localElementDictionary.Add(linkgrpXName, typeof(linkgrp));
            localElementDictionary.Add(bibrefXName, typeof(bibref));
            localElementDictionary.Add(titleXName, typeof(title));
            localElementDictionary.Add(archrefXName, typeof(archref));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
    /// </para>
    /// </summary>
    public partial class unitid : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName abbrXName = System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName expanXName = System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @refXName = System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extrefXName = System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName linkgrpXName = System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibrefXName = System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName archrefXName = System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName labelXName = System.Xml.Linq.XName.Get("label", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName countrycodeXName = System.Xml.Linq.XName.Get("countrycode", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName repositorycodeXName = System.Xml.Linq.XName.Get("repositorycode", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName identifierXName = System.Xml.Linq.XName.Get("identifier", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("unitid", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator unitid(XElement xe) { return XTypedServices.ToXTypedElement<unitid>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static unitid() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName), new NamedContentModelEntity(abbrXName), new NamedContentModelEntity(expanXName), new NamedContentModelEntity(@refXName), new NamedContentModelEntity(extrefXName), new NamedContentModelEntity(linkgrpXName), new NamedContentModelEntity(bibrefXName), new NamedContentModelEntity(titleXName), new NamedContentModelEntity(archrefXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public unitid() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, abbrXName);
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, abbrXName);
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, expanXName);
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, expanXName);
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, @refXName);
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, @refXName);
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, extrefXName);
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, extrefXName);
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, linkgrpXName);
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, linkgrpXName);
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, bibrefXName);
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibrefXName);
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, titleXName);
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, titleXName);
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, archrefXName);
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, archrefXName);
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(labelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(labelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LibraryOfCongress.EAD.unitid.CountrycodeEnum? countrycode {
            get {
                XAttribute x = this.Attribute(countrycodeXName);
                if ((x == null)) {
                    return null;
                }
                return ((LibraryOfCongress.EAD.unitid.CountrycodeEnum)(Enum.Parse(typeof(LibraryOfCongress.EAD.unitid.CountrycodeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(countrycodeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string repositorycode {
            get {
                XAttribute x = this.Attribute(repositorycodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(repositorycodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string identifier {
            get {
                XAttribute x = this.Attribute(identifierXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(identifierXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<unitid>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
            localElementDictionary.Add(abbrXName, typeof(abbr));
            localElementDictionary.Add(expanXName, typeof(expan));
            localElementDictionary.Add(@refXName, typeof(@ref));
            localElementDictionary.Add(extrefXName, typeof(extref));
            localElementDictionary.Add(linkgrpXName, typeof(linkgrp));
            localElementDictionary.Add(bibrefXName, typeof(bibref));
            localElementDictionary.Add(titleXName, typeof(title));
            localElementDictionary.Add(archrefXName, typeof(archref));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum CountrycodeEnum {
            
            AF,
            
            AX,
            
            AL,
            
            DZ,
            
            AS,
            
            AD,
            
            AO,
            
            AI,
            
            AQ,
            
            AG,
            
            AR,
            
            AM,
            
            AW,
            
            AU,
            
            AT,
            
            AZ,
            
            BS,
            
            BH,
            
            BD,
            
            BB,
            
            BY,
            
            BE,
            
            BZ,
            
            BJ,
            
            BM,
            
            BT,
            
            BO,
            
            BA,
            
            BW,
            
            BV,
            
            BR,
            
            IO,
            
            BN,
            
            BG,
            
            BF,
            
            BI,
            
            KH,
            
            CM,
            
            CA,
            
            CV,
            
            KY,
            
            CF,
            
            TD,
            
            CL,
            
            CN,
            
            CX,
            
            CC,
            
            CO,
            
            KM,
            
            CG,
            
            CD,
            
            CK,
            
            CR,
            
            CI,
            
            HR,
            
            CU,
            
            CY,
            
            CZ,
            
            DK,
            
            DJ,
            
            DM,
            
            DO,
            
            EC,
            
            EG,
            
            SV,
            
            GQ,
            
            ER,
            
            EE,
            
            ET,
            
            FK,
            
            FO,
            
            FJ,
            
            FI,
            
            FR,
            
            GF,
            
            PF,
            
            TF,
            
            GA,
            
            GM,
            
            GE,
            
            DE,
            
            GH,
            
            GI,
            
            GR,
            
            GL,
            
            GD,
            
            GP,
            
            GU,
            
            GT,
            
            GN,
            
            GW,
            
            GY,
            
            HT,
            
            HM,
            
            VA,
            
            HN,
            
            HK,
            
            HU,
            
            IS,
            
            IN,
            
            ID,
            
            IR,
            
            IQ,
            
            IE,
            
            IL,
            
            IT,
            
            JM,
            
            JP,
            
            JO,
            
            KZ,
            
            KE,
            
            KI,
            
            KP,
            
            KR,
            
            KW,
            
            KG,
            
            LA,
            
            LV,
            
            LB,
            
            LS,
            
            LR,
            
            LY,
            
            LI,
            
            LT,
            
            LU,
            
            MO,
            
            MK,
            
            MG,
            
            MW,
            
            MY,
            
            MV,
            
            ML,
            
            MT,
            
            MH,
            
            MQ,
            
            MR,
            
            MU,
            
            YT,
            
            MX,
            
            FM,
            
            MD,
            
            MC,
            
            MN,
            
            MS,
            
            MA,
            
            MZ,
            
            MM,
            
            NA,
            
            NR,
            
            NP,
            
            NL,
            
            AN,
            
            NC,
            
            NZ,
            
            NI,
            
            NE,
            
            NG,
            
            NU,
            
            NF,
            
            MP,
            
            NO,
            
            OM,
            
            PK,
            
            PW,
            
            PS,
            
            PA,
            
            PG,
            
            PY,
            
            PE,
            
            PH,
            
            PN,
            
            PL,
            
            PT,
            
            PR,
            
            QA,
            
            RE,
            
            RO,
            
            RU,
            
            RW,
            
            SH,
            
            KN,
            
            LC,
            
            PM,
            
            VC,
            
            WS,
            
            SM,
            
            ST,
            
            SA,
            
            SN,
            
            CS,
            
            SC,
            
            SL,
            
            SG,
            
            SK,
            
            SI,
            
            SB,
            
            SO,
            
            ZA,
            
            GS,
            
            ES,
            
            LK,
            
            SD,
            
            SR,
            
            SJ,
            
            SZ,
            
            SE,
            
            CH,
            
            SY,
            
            TW,
            
            TJ,
            
            TZ,
            
            TH,
            
            TL,
            
            TG,
            
            TK,
            
            TO,
            
            TT,
            
            TN,
            
            TR,
            
            TM,
            
            TC,
            
            TV,
            
            UG,
            
            UA,
            
            AE,
            
            GB,
            
            US,
            
            UM,
            
            UY,
            
            UZ,
            
            VU,
            
            VE,
            
            VN,
            
            VG,
            
            VI,
            
            WF,
            
            EH,
            
            YE,
            
            ZM,
            
            ZW,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
    /// </para>
    /// </summary>
    public partial class descgrp : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName addressXName = System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName chronlistXName = System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listXName = System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tableXName = System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName blockquoteXName = System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName accessrestrictXName = System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accessrestrict> accessrestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName accrualsXName = System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accruals> accrualsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName acqinfoXName = System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<acqinfo> acqinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altformavailXName = System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<altformavail> altformavailField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName appraisalXName = System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<appraisal> appraisalField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arrangementXName = System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<arrangement> arrangementField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibliographyXName = System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibliography> bibliographyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bioghistXName = System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bioghist> bioghistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName controlaccessXName = System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<controlaccess> controlaccessField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName custodhistXName = System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<custodhist> custodhistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descgrp1XName = System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<descgrp> descgrp1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName fileplanXName = System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<fileplan> fileplanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName indexXName = System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<index> indexField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName oddXName = System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<odd> oddField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName originalslocXName = System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<originalsloc> originalslocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName otherfindaidXName = System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<otherfindaid> otherfindaidField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phystechXName = System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phystech> phystechField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName preferciteXName = System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<prefercite> preferciteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName processinfoXName = System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<processinfo> processinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName relatedmaterialXName = System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<relatedmaterial> relatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName scopecontentXName = System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<scopecontent> scopecontentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName separatedmaterialXName = System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<separatedmaterial> separatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userestrictXName = System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<userestrict> userestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator descgrp(XElement xe) { return XTypedServices.ToXTypedElement<descgrp>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static descgrp() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new ChoiceContentModelEntity(new NamedContentModelEntity(addressXName), new NamedContentModelEntity(chronlistXName), new NamedContentModelEntity(listXName), new NamedContentModelEntity(noteXName), new NamedContentModelEntity(tableXName), new NamedContentModelEntity(blockquoteXName), new NamedContentModelEntity(pXName), new NamedContentModelEntity(accessrestrictXName), new NamedContentModelEntity(accrualsXName), new NamedContentModelEntity(acqinfoXName), new NamedContentModelEntity(altformavailXName), new NamedContentModelEntity(appraisalXName), new NamedContentModelEntity(arrangementXName), new NamedContentModelEntity(bibliographyXName), new NamedContentModelEntity(bioghistXName), new NamedContentModelEntity(controlaccessXName), new NamedContentModelEntity(custodhistXName), new NamedContentModelEntity(descgrp1XName), new NamedContentModelEntity(fileplanXName), new NamedContentModelEntity(indexXName), new NamedContentModelEntity(oddXName), new NamedContentModelEntity(originalslocXName), new NamedContentModelEntity(otherfindaidXName), new NamedContentModelEntity(phystechXName), new NamedContentModelEntity(preferciteXName), new NamedContentModelEntity(processinfoXName), new NamedContentModelEntity(relatedmaterialXName), new NamedContentModelEntity(scopecontentXName), new NamedContentModelEntity(separatedmaterialXName), new NamedContentModelEntity(userestrictXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public descgrp() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, addressXName);
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, addressXName);
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, chronlistXName);
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, chronlistXName);
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, listXName);
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, listXName);
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, tableXName);
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, tableXName);
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, blockquoteXName);
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, blockquoteXName);
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<accessrestrict> accessrestrict {
            get {
                if ((this.accessrestrictField == null)) {
                    this.accessrestrictField = new XTypedList<accessrestrict>(this, LinqToXsdTypeManager.Instance, accessrestrictXName);
                }
                return this.accessrestrictField;
            }
            set {
                if ((value == null)) {
                    this.accessrestrictField = null;
                }
                else {
                    if ((this.accessrestrictField == null)) {
                        this.accessrestrictField = XTypedList<accessrestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, accessrestrictXName);
                    }
                    else {
                        XTypedServices.SetList<accessrestrict>(this.accessrestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<accruals> accruals {
            get {
                if ((this.accrualsField == null)) {
                    this.accrualsField = new XTypedList<accruals>(this, LinqToXsdTypeManager.Instance, accrualsXName);
                }
                return this.accrualsField;
            }
            set {
                if ((value == null)) {
                    this.accrualsField = null;
                }
                else {
                    if ((this.accrualsField == null)) {
                        this.accrualsField = XTypedList<accruals>.Initialize(this, LinqToXsdTypeManager.Instance, value, accrualsXName);
                    }
                    else {
                        XTypedServices.SetList<accruals>(this.accrualsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<acqinfo> acqinfo {
            get {
                if ((this.acqinfoField == null)) {
                    this.acqinfoField = new XTypedList<acqinfo>(this, LinqToXsdTypeManager.Instance, acqinfoXName);
                }
                return this.acqinfoField;
            }
            set {
                if ((value == null)) {
                    this.acqinfoField = null;
                }
                else {
                    if ((this.acqinfoField == null)) {
                        this.acqinfoField = XTypedList<acqinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, acqinfoXName);
                    }
                    else {
                        XTypedServices.SetList<acqinfo>(this.acqinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<altformavail> altformavail {
            get {
                if ((this.altformavailField == null)) {
                    this.altformavailField = new XTypedList<altformavail>(this, LinqToXsdTypeManager.Instance, altformavailXName);
                }
                return this.altformavailField;
            }
            set {
                if ((value == null)) {
                    this.altformavailField = null;
                }
                else {
                    if ((this.altformavailField == null)) {
                        this.altformavailField = XTypedList<altformavail>.Initialize(this, LinqToXsdTypeManager.Instance, value, altformavailXName);
                    }
                    else {
                        XTypedServices.SetList<altformavail>(this.altformavailField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<appraisal> appraisal {
            get {
                if ((this.appraisalField == null)) {
                    this.appraisalField = new XTypedList<appraisal>(this, LinqToXsdTypeManager.Instance, appraisalXName);
                }
                return this.appraisalField;
            }
            set {
                if ((value == null)) {
                    this.appraisalField = null;
                }
                else {
                    if ((this.appraisalField == null)) {
                        this.appraisalField = XTypedList<appraisal>.Initialize(this, LinqToXsdTypeManager.Instance, value, appraisalXName);
                    }
                    else {
                        XTypedServices.SetList<appraisal>(this.appraisalField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<arrangement> arrangement {
            get {
                if ((this.arrangementField == null)) {
                    this.arrangementField = new XTypedList<arrangement>(this, LinqToXsdTypeManager.Instance, arrangementXName);
                }
                return this.arrangementField;
            }
            set {
                if ((value == null)) {
                    this.arrangementField = null;
                }
                else {
                    if ((this.arrangementField == null)) {
                        this.arrangementField = XTypedList<arrangement>.Initialize(this, LinqToXsdTypeManager.Instance, value, arrangementXName);
                    }
                    else {
                        XTypedServices.SetList<arrangement>(this.arrangementField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<bibliography> bibliography {
            get {
                if ((this.bibliographyField == null)) {
                    this.bibliographyField = new XTypedList<bibliography>(this, LinqToXsdTypeManager.Instance, bibliographyXName);
                }
                return this.bibliographyField;
            }
            set {
                if ((value == null)) {
                    this.bibliographyField = null;
                }
                else {
                    if ((this.bibliographyField == null)) {
                        this.bibliographyField = XTypedList<bibliography>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibliographyXName);
                    }
                    else {
                        XTypedServices.SetList<bibliography>(this.bibliographyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<bioghist> bioghist {
            get {
                if ((this.bioghistField == null)) {
                    this.bioghistField = new XTypedList<bioghist>(this, LinqToXsdTypeManager.Instance, bioghistXName);
                }
                return this.bioghistField;
            }
            set {
                if ((value == null)) {
                    this.bioghistField = null;
                }
                else {
                    if ((this.bioghistField == null)) {
                        this.bioghistField = XTypedList<bioghist>.Initialize(this, LinqToXsdTypeManager.Instance, value, bioghistXName);
                    }
                    else {
                        XTypedServices.SetList<bioghist>(this.bioghistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<controlaccess> controlaccess {
            get {
                if ((this.controlaccessField == null)) {
                    this.controlaccessField = new XTypedList<controlaccess>(this, LinqToXsdTypeManager.Instance, controlaccessXName);
                }
                return this.controlaccessField;
            }
            set {
                if ((value == null)) {
                    this.controlaccessField = null;
                }
                else {
                    if ((this.controlaccessField == null)) {
                        this.controlaccessField = XTypedList<controlaccess>.Initialize(this, LinqToXsdTypeManager.Instance, value, controlaccessXName);
                    }
                    else {
                        XTypedServices.SetList<controlaccess>(this.controlaccessField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<custodhist> custodhist {
            get {
                if ((this.custodhistField == null)) {
                    this.custodhistField = new XTypedList<custodhist>(this, LinqToXsdTypeManager.Instance, custodhistXName);
                }
                return this.custodhistField;
            }
            set {
                if ((value == null)) {
                    this.custodhistField = null;
                }
                else {
                    if ((this.custodhistField == null)) {
                        this.custodhistField = XTypedList<custodhist>.Initialize(this, LinqToXsdTypeManager.Instance, value, custodhistXName);
                    }
                    else {
                        XTypedServices.SetList<custodhist>(this.custodhistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<descgrp> descgrp1 {
            get {
                if ((this.descgrp1Field == null)) {
                    this.descgrp1Field = new XTypedList<descgrp>(this, LinqToXsdTypeManager.Instance, descgrp1XName);
                }
                return this.descgrp1Field;
            }
            set {
                if ((value == null)) {
                    this.descgrp1Field = null;
                }
                else {
                    if ((this.descgrp1Field == null)) {
                        this.descgrp1Field = XTypedList<descgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, descgrp1XName);
                    }
                    else {
                        XTypedServices.SetList<descgrp>(this.descgrp1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<fileplan> fileplan {
            get {
                if ((this.fileplanField == null)) {
                    this.fileplanField = new XTypedList<fileplan>(this, LinqToXsdTypeManager.Instance, fileplanXName);
                }
                return this.fileplanField;
            }
            set {
                if ((value == null)) {
                    this.fileplanField = null;
                }
                else {
                    if ((this.fileplanField == null)) {
                        this.fileplanField = XTypedList<fileplan>.Initialize(this, LinqToXsdTypeManager.Instance, value, fileplanXName);
                    }
                    else {
                        XTypedServices.SetList<fileplan>(this.fileplanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<index> index {
            get {
                if ((this.indexField == null)) {
                    this.indexField = new XTypedList<index>(this, LinqToXsdTypeManager.Instance, indexXName);
                }
                return this.indexField;
            }
            set {
                if ((value == null)) {
                    this.indexField = null;
                }
                else {
                    if ((this.indexField == null)) {
                        this.indexField = XTypedList<index>.Initialize(this, LinqToXsdTypeManager.Instance, value, indexXName);
                    }
                    else {
                        XTypedServices.SetList<index>(this.indexField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<odd> odd {
            get {
                if ((this.oddField == null)) {
                    this.oddField = new XTypedList<odd>(this, LinqToXsdTypeManager.Instance, oddXName);
                }
                return this.oddField;
            }
            set {
                if ((value == null)) {
                    this.oddField = null;
                }
                else {
                    if ((this.oddField == null)) {
                        this.oddField = XTypedList<odd>.Initialize(this, LinqToXsdTypeManager.Instance, value, oddXName);
                    }
                    else {
                        XTypedServices.SetList<odd>(this.oddField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<originalsloc> originalsloc {
            get {
                if ((this.originalslocField == null)) {
                    this.originalslocField = new XTypedList<originalsloc>(this, LinqToXsdTypeManager.Instance, originalslocXName);
                }
                return this.originalslocField;
            }
            set {
                if ((value == null)) {
                    this.originalslocField = null;
                }
                else {
                    if ((this.originalslocField == null)) {
                        this.originalslocField = XTypedList<originalsloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, originalslocXName);
                    }
                    else {
                        XTypedServices.SetList<originalsloc>(this.originalslocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<otherfindaid> otherfindaid {
            get {
                if ((this.otherfindaidField == null)) {
                    this.otherfindaidField = new XTypedList<otherfindaid>(this, LinqToXsdTypeManager.Instance, otherfindaidXName);
                }
                return this.otherfindaidField;
            }
            set {
                if ((value == null)) {
                    this.otherfindaidField = null;
                }
                else {
                    if ((this.otherfindaidField == null)) {
                        this.otherfindaidField = XTypedList<otherfindaid>.Initialize(this, LinqToXsdTypeManager.Instance, value, otherfindaidXName);
                    }
                    else {
                        XTypedServices.SetList<otherfindaid>(this.otherfindaidField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<phystech> phystech {
            get {
                if ((this.phystechField == null)) {
                    this.phystechField = new XTypedList<phystech>(this, LinqToXsdTypeManager.Instance, phystechXName);
                }
                return this.phystechField;
            }
            set {
                if ((value == null)) {
                    this.phystechField = null;
                }
                else {
                    if ((this.phystechField == null)) {
                        this.phystechField = XTypedList<phystech>.Initialize(this, LinqToXsdTypeManager.Instance, value, phystechXName);
                    }
                    else {
                        XTypedServices.SetList<phystech>(this.phystechField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<prefercite> prefercite {
            get {
                if ((this.preferciteField == null)) {
                    this.preferciteField = new XTypedList<prefercite>(this, LinqToXsdTypeManager.Instance, preferciteXName);
                }
                return this.preferciteField;
            }
            set {
                if ((value == null)) {
                    this.preferciteField = null;
                }
                else {
                    if ((this.preferciteField == null)) {
                        this.preferciteField = XTypedList<prefercite>.Initialize(this, LinqToXsdTypeManager.Instance, value, preferciteXName);
                    }
                    else {
                        XTypedServices.SetList<prefercite>(this.preferciteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<processinfo> processinfo {
            get {
                if ((this.processinfoField == null)) {
                    this.processinfoField = new XTypedList<processinfo>(this, LinqToXsdTypeManager.Instance, processinfoXName);
                }
                return this.processinfoField;
            }
            set {
                if ((value == null)) {
                    this.processinfoField = null;
                }
                else {
                    if ((this.processinfoField == null)) {
                        this.processinfoField = XTypedList<processinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, processinfoXName);
                    }
                    else {
                        XTypedServices.SetList<processinfo>(this.processinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<relatedmaterial> relatedmaterial {
            get {
                if ((this.relatedmaterialField == null)) {
                    this.relatedmaterialField = new XTypedList<relatedmaterial>(this, LinqToXsdTypeManager.Instance, relatedmaterialXName);
                }
                return this.relatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.relatedmaterialField = null;
                }
                else {
                    if ((this.relatedmaterialField == null)) {
                        this.relatedmaterialField = XTypedList<relatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, relatedmaterialXName);
                    }
                    else {
                        XTypedServices.SetList<relatedmaterial>(this.relatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<scopecontent> scopecontent {
            get {
                if ((this.scopecontentField == null)) {
                    this.scopecontentField = new XTypedList<scopecontent>(this, LinqToXsdTypeManager.Instance, scopecontentXName);
                }
                return this.scopecontentField;
            }
            set {
                if ((value == null)) {
                    this.scopecontentField = null;
                }
                else {
                    if ((this.scopecontentField == null)) {
                        this.scopecontentField = XTypedList<scopecontent>.Initialize(this, LinqToXsdTypeManager.Instance, value, scopecontentXName);
                    }
                    else {
                        XTypedServices.SetList<scopecontent>(this.scopecontentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<separatedmaterial> separatedmaterial {
            get {
                if ((this.separatedmaterialField == null)) {
                    this.separatedmaterialField = new XTypedList<separatedmaterial>(this, LinqToXsdTypeManager.Instance, separatedmaterialXName);
                }
                return this.separatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.separatedmaterialField = null;
                }
                else {
                    if ((this.separatedmaterialField == null)) {
                        this.separatedmaterialField = XTypedList<separatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, separatedmaterialXName);
                    }
                    else {
                        XTypedServices.SetList<separatedmaterial>(this.separatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp1 | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict)+)
        /// </para>
        /// </summary>
        public virtual IList<userestrict> userestrict {
            get {
                if ((this.userestrictField == null)) {
                    this.userestrictField = new XTypedList<userestrict>(this, LinqToXsdTypeManager.Instance, userestrictXName);
                }
                return this.userestrictField;
            }
            set {
                if ((value == null)) {
                    this.userestrictField = null;
                }
                else {
                    if ((this.userestrictField == null)) {
                        this.userestrictField = XTypedList<userestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, userestrictXName);
                    }
                    else {
                        XTypedServices.SetList<userestrict>(this.userestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<descgrp>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(addressXName, typeof(address));
            localElementDictionary.Add(chronlistXName, typeof(chronlist));
            localElementDictionary.Add(listXName, typeof(list));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(tableXName, typeof(table));
            localElementDictionary.Add(blockquoteXName, typeof(blockquote));
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(accessrestrictXName, typeof(accessrestrict));
            localElementDictionary.Add(accrualsXName, typeof(accruals));
            localElementDictionary.Add(acqinfoXName, typeof(acqinfo));
            localElementDictionary.Add(altformavailXName, typeof(altformavail));
            localElementDictionary.Add(appraisalXName, typeof(appraisal));
            localElementDictionary.Add(arrangementXName, typeof(arrangement));
            localElementDictionary.Add(bibliographyXName, typeof(bibliography));
            localElementDictionary.Add(bioghistXName, typeof(bioghist));
            localElementDictionary.Add(controlaccessXName, typeof(controlaccess));
            localElementDictionary.Add(custodhistXName, typeof(custodhist));
            localElementDictionary.Add(descgrp1XName, typeof(descgrp));
            localElementDictionary.Add(fileplanXName, typeof(fileplan));
            localElementDictionary.Add(indexXName, typeof(index));
            localElementDictionary.Add(oddXName, typeof(odd));
            localElementDictionary.Add(originalslocXName, typeof(originalsloc));
            localElementDictionary.Add(otherfindaidXName, typeof(otherfindaid));
            localElementDictionary.Add(phystechXName, typeof(phystech));
            localElementDictionary.Add(preferciteXName, typeof(prefercite));
            localElementDictionary.Add(processinfoXName, typeof(processinfo));
            localElementDictionary.Add(relatedmaterialXName, typeof(relatedmaterial));
            localElementDictionary.Add(scopecontentXName, typeof(scopecontent));
            localElementDictionary.Add(separatedmaterialXName, typeof(separatedmaterial));
            localElementDictionary.Add(userestrictXName, typeof(userestrict));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public sealed class yesorno {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), null);
        
        private yesorno() {
        }
    }
    
    public sealed class avlevel {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "class",
                        "collection",
                        "file",
                        "fonds",
                        "item",
                        "otherlevel",
                        "recordgrp",
                        "series",
                        "subfonds",
                        "subgrp",
                        "subseries"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private avlevel() {
        }
    }
    
    public enum avrender {
        
        altrender,
        
        bold,
        
        bolddoublequote,
        
        bolditalic,
        
        boldsinglequote,
        
        boldsmcaps,
        
        boldunderline,
        
        doublequote,
        
        italic,
        
        nonproport,
        
        singlequote,
        
        smcaps,
        
        sub,
        
        super,
        
        underline,
    }
    
    public sealed class avrenderValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "altrender",
                        "bold",
                        "bolddoublequote",
                        "bolditalic",
                        "boldsinglequote",
                        "boldsmcaps",
                        "boldunderline",
                        "doublequote",
                        "italic",
                        "nonproport",
                        "singlequote",
                        "smcaps",
                        "sub",
                        "super",
                        "underline"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private avrenderValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (eadid, filedesc, profiledesc?, revisiondesc?)
    /// </para>
    /// </summary>
    public partial class eadheader : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName eadidXName = System.Xml.Linq.XName.Get("eadid", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName filedescXName = System.Xml.Linq.XName.Get("filedesc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName profiledescXName = System.Xml.Linq.XName.Get("profiledesc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName revisiondescXName = System.Xml.Linq.XName.Get("revisiondesc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName langencodingXName = System.Xml.Linq.XName.Get("langencoding", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string langencodingDefaultValue = "iso639-2b";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName scriptencodingXName = System.Xml.Linq.XName.Get("scriptencoding", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string scriptencodingDefaultValue = "iso15924";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dateencodingXName = System.Xml.Linq.XName.Get("dateencoding", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string dateencodingDefaultValue = "iso8601";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName countryencodingXName = System.Xml.Linq.XName.Get("countryencoding", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string countryencodingDefaultValue = "iso3166-1";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName repositoryencodingXName = System.Xml.Linq.XName.Get("repositoryencoding", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string repositoryencodingDefaultValue = "iso15511";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName relatedencodingXName = System.Xml.Linq.XName.Get("relatedencoding", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName findaidstatusXName = System.Xml.Linq.XName.Get("findaidstatus", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("eadheader", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator eadheader(XElement xe) { return XTypedServices.ToXTypedElement<eadheader>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static eadheader() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(eadidXName), new NamedContentModelEntity(filedescXName), new NamedContentModelEntity(profiledescXName), new NamedContentModelEntity(revisiondescXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (eadid, filedesc, profiledesc?, revisiondesc?)
        /// </para>
        /// </summary>
        public eadheader() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (eadid, filedesc, profiledesc?, revisiondesc?)
        /// </para>
        /// </summary>
        public virtual eadid eadid {
            get {
                XElement x = this.GetElement(eadidXName);
                return ((eadid)(x));
            }
            set {
                this.SetElement(eadidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (eadid, filedesc, profiledesc?, revisiondesc?)
        /// </para>
        /// </summary>
        public virtual filedesc filedesc {
            get {
                XElement x = this.GetElement(filedescXName);
                return ((filedesc)(x));
            }
            set {
                this.SetElement(filedescXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (eadid, filedesc, profiledesc?, revisiondesc?)
        /// </para>
        /// </summary>
        public virtual profiledesc profiledesc {
            get {
                XElement x = this.GetElement(profiledescXName);
                return ((profiledesc)(x));
            }
            set {
                this.SetElement(profiledescXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (eadid, filedesc, profiledesc?, revisiondesc?)
        /// </para>
        /// </summary>
        public virtual revisiondesc revisiondesc {
            get {
                XElement x = this.GetElement(revisiondescXName);
                return ((revisiondesc)(x));
            }
            set {
                this.SetElement(revisiondescXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string langencoding {
            get {
                XAttribute x = this.Attribute(langencodingXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, langencodingDefaultValue);
            }
            set {
                this.SetAttribute(langencodingXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string scriptencoding {
            get {
                XAttribute x = this.Attribute(scriptencodingXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, scriptencodingDefaultValue);
            }
            set {
                this.SetAttribute(scriptencodingXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string dateencoding {
            get {
                XAttribute x = this.Attribute(dateencodingXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, dateencodingDefaultValue);
            }
            set {
                this.SetAttribute(dateencodingXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string countryencoding {
            get {
                XAttribute x = this.Attribute(countryencodingXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, countryencodingDefaultValue);
            }
            set {
                this.SetAttribute(countryencodingXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string repositoryencoding {
            get {
                XAttribute x = this.Attribute(repositoryencodingXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, repositoryencodingDefaultValue);
            }
            set {
                this.SetAttribute(repositoryencodingXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string relatedencoding {
            get {
                XAttribute x = this.Attribute(relatedencodingXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(relatedencodingXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string findaidstatus {
            get {
                XAttribute x = this.Attribute(findaidstatusXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(findaidstatusXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<eadheader>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(eadidXName, typeof(eadid));
            localElementDictionary.Add(filedescXName, typeof(filedesc));
            localElementDictionary.Add(profiledescXName, typeof(profiledesc));
            localElementDictionary.Add(revisiondescXName, typeof(revisiondesc));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class eadid : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName publicidXName = System.Xml.Linq.XName.Get("publicid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName urnXName = System.Xml.Linq.XName.Get("urn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName urlXName = System.Xml.Linq.XName.Get("url", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName countrycodeXName = System.Xml.Linq.XName.Get("countrycode", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName mainagencycodeXName = System.Xml.Linq.XName.Get("mainagencycode", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName identifierXName = System.Xml.Linq.XName.Get("identifier", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("eadid", "urn:isbn:1-931666-22-9");
        
		public static explicit operator eadid(XElement xe) { return XTypedServices.ToXTypedElement<eadid>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public eadid() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string publicid {
            get {
                XAttribute x = this.Attribute(publicidXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(publicidXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string urn {
            get {
                XAttribute x = this.Attribute(urnXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(urnXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string url {
            get {
                XAttribute x = this.Attribute(urlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(urlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LibraryOfCongress.EAD.eadid.CountrycodeEnum? countrycode {
            get {
                XAttribute x = this.Attribute(countrycodeXName);
                if ((x == null)) {
                    return null;
                }
                return ((LibraryOfCongress.EAD.eadid.CountrycodeEnum)(Enum.Parse(typeof(LibraryOfCongress.EAD.eadid.CountrycodeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(countrycodeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mainagencycode {
            get {
                XAttribute x = this.Attribute(mainagencycodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(mainagencycodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string identifier {
            get {
                XAttribute x = this.Attribute(identifierXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(identifierXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<eadid>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        public enum CountrycodeEnum {
            
            AF,
            
            AX,
            
            AL,
            
            DZ,
            
            AS,
            
            AD,
            
            AO,
            
            AI,
            
            AQ,
            
            AG,
            
            AR,
            
            AM,
            
            AW,
            
            AU,
            
            AT,
            
            AZ,
            
            BS,
            
            BH,
            
            BD,
            
            BB,
            
            BY,
            
            BE,
            
            BZ,
            
            BJ,
            
            BM,
            
            BT,
            
            BO,
            
            BA,
            
            BW,
            
            BV,
            
            BR,
            
            IO,
            
            BN,
            
            BG,
            
            BF,
            
            BI,
            
            KH,
            
            CM,
            
            CA,
            
            CV,
            
            KY,
            
            CF,
            
            TD,
            
            CL,
            
            CN,
            
            CX,
            
            CC,
            
            CO,
            
            KM,
            
            CG,
            
            CD,
            
            CK,
            
            CR,
            
            CI,
            
            HR,
            
            CU,
            
            CY,
            
            CZ,
            
            DK,
            
            DJ,
            
            DM,
            
            DO,
            
            EC,
            
            EG,
            
            SV,
            
            GQ,
            
            ER,
            
            EE,
            
            ET,
            
            FK,
            
            FO,
            
            FJ,
            
            FI,
            
            FR,
            
            GF,
            
            PF,
            
            TF,
            
            GA,
            
            GM,
            
            GE,
            
            DE,
            
            GH,
            
            GI,
            
            GR,
            
            GL,
            
            GD,
            
            GP,
            
            GU,
            
            GT,
            
            GN,
            
            GW,
            
            GY,
            
            HT,
            
            HM,
            
            VA,
            
            HN,
            
            HK,
            
            HU,
            
            IS,
            
            IN,
            
            ID,
            
            IR,
            
            IQ,
            
            IE,
            
            IL,
            
            IT,
            
            JM,
            
            JP,
            
            JO,
            
            KZ,
            
            KE,
            
            KI,
            
            KP,
            
            KR,
            
            KW,
            
            KG,
            
            LA,
            
            LV,
            
            LB,
            
            LS,
            
            LR,
            
            LY,
            
            LI,
            
            LT,
            
            LU,
            
            MO,
            
            MK,
            
            MG,
            
            MW,
            
            MY,
            
            MV,
            
            ML,
            
            MT,
            
            MH,
            
            MQ,
            
            MR,
            
            MU,
            
            YT,
            
            MX,
            
            FM,
            
            MD,
            
            MC,
            
            MN,
            
            MS,
            
            MA,
            
            MZ,
            
            MM,
            
            NA,
            
            NR,
            
            NP,
            
            NL,
            
            AN,
            
            NC,
            
            NZ,
            
            NI,
            
            NE,
            
            NG,
            
            NU,
            
            NF,
            
            MP,
            
            NO,
            
            OM,
            
            PK,
            
            PW,
            
            PS,
            
            PA,
            
            PG,
            
            PY,
            
            PE,
            
            PH,
            
            PN,
            
            PL,
            
            PT,
            
            PR,
            
            QA,
            
            RE,
            
            RO,
            
            RU,
            
            RW,
            
            SH,
            
            KN,
            
            LC,
            
            PM,
            
            VC,
            
            WS,
            
            SM,
            
            ST,
            
            SA,
            
            SN,
            
            CS,
            
            SC,
            
            SL,
            
            SG,
            
            SK,
            
            SI,
            
            SB,
            
            SO,
            
            ZA,
            
            GS,
            
            ES,
            
            LK,
            
            SD,
            
            SR,
            
            SJ,
            
            SZ,
            
            SE,
            
            CH,
            
            SY,
            
            TW,
            
            TJ,
            
            TZ,
            
            TH,
            
            TL,
            
            TG,
            
            TK,
            
            TO,
            
            TT,
            
            TN,
            
            TR,
            
            TM,
            
            TC,
            
            TV,
            
            UG,
            
            UA,
            
            AE,
            
            GB,
            
            US,
            
            UM,
            
            UY,
            
            UZ,
            
            VU,
            
            VE,
            
            VN,
            
            VG,
            
            VI,
            
            WF,
            
            EH,
            
            YE,
            
            ZM,
            
            ZW,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (titlestmt, editionstmt?, publicationstmt?, seriesstmt?, notestmt?)
    /// </para>
    /// </summary>
    public partial class filedesc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titlestmtXName = System.Xml.Linq.XName.Get("titlestmt", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName editionstmtXName = System.Xml.Linq.XName.Get("editionstmt", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName publicationstmtXName = System.Xml.Linq.XName.Get("publicationstmt", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName seriesstmtXName = System.Xml.Linq.XName.Get("seriesstmt", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName notestmtXName = System.Xml.Linq.XName.Get("notestmt", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("filedesc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator filedesc(XElement xe) { return XTypedServices.ToXTypedElement<filedesc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static filedesc() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(titlestmtXName), new NamedContentModelEntity(editionstmtXName), new NamedContentModelEntity(publicationstmtXName), new NamedContentModelEntity(seriesstmtXName), new NamedContentModelEntity(notestmtXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (titlestmt, editionstmt?, publicationstmt?, seriesstmt?, notestmt?)
        /// </para>
        /// </summary>
        public filedesc() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (titlestmt, editionstmt?, publicationstmt?, seriesstmt?, notestmt?)
        /// </para>
        /// </summary>
        public virtual titlestmt titlestmt {
            get {
                XElement x = this.GetElement(titlestmtXName);
                return ((titlestmt)(x));
            }
            set {
                this.SetElement(titlestmtXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (titlestmt, editionstmt?, publicationstmt?, seriesstmt?, notestmt?)
        /// </para>
        /// </summary>
        public virtual editionstmt editionstmt {
            get {
                XElement x = this.GetElement(editionstmtXName);
                return ((editionstmt)(x));
            }
            set {
                this.SetElement(editionstmtXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (titlestmt, editionstmt?, publicationstmt?, seriesstmt?, notestmt?)
        /// </para>
        /// </summary>
        public virtual publicationstmt publicationstmt {
            get {
                XElement x = this.GetElement(publicationstmtXName);
                return ((publicationstmt)(x));
            }
            set {
                this.SetElement(publicationstmtXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (titlestmt, editionstmt?, publicationstmt?, seriesstmt?, notestmt?)
        /// </para>
        /// </summary>
        public virtual seriesstmt seriesstmt {
            get {
                XElement x = this.GetElement(seriesstmtXName);
                return ((seriesstmt)(x));
            }
            set {
                this.SetElement(seriesstmtXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (titlestmt, editionstmt?, publicationstmt?, seriesstmt?, notestmt?)
        /// </para>
        /// </summary>
        public virtual notestmt notestmt {
            get {
                XElement x = this.GetElement(notestmtXName);
                return ((notestmt)(x));
            }
            set {
                this.SetElement(notestmtXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<filedesc>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(titlestmtXName, typeof(titlestmt));
            localElementDictionary.Add(editionstmtXName, typeof(editionstmt));
            localElementDictionary.Add(publicationstmtXName, typeof(publicationstmt));
            localElementDictionary.Add(seriesstmtXName, typeof(seriesstmt));
            localElementDictionary.Add(notestmtXName, typeof(notestmt));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (titleproper+, subtitle*, author?, sponsor?)
    /// </para>
    /// </summary>
    public partial class titlestmt : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleproperXName = System.Xml.Linq.XName.Get("titleproper", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<titleproper> titleproperField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName subtitleXName = System.Xml.Linq.XName.Get("subtitle", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<subtitle> subtitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName authorXName = System.Xml.Linq.XName.Get("author", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sponsorXName = System.Xml.Linq.XName.Get("sponsor", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("titlestmt", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator titlestmt(XElement xe) { return XTypedServices.ToXTypedElement<titlestmt>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static titlestmt() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(titleproperXName), new NamedContentModelEntity(subtitleXName), new NamedContentModelEntity(authorXName), new NamedContentModelEntity(sponsorXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (titleproper+, subtitle*, author?, sponsor?)
        /// </para>
        /// </summary>
        public titlestmt() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (titleproper+, subtitle*, author?, sponsor?)
        /// </para>
        /// </summary>
        public virtual IList<titleproper> titleproper {
            get {
                if ((this.titleproperField == null)) {
                    this.titleproperField = new XTypedList<titleproper>(this, LinqToXsdTypeManager.Instance, titleproperXName);
                }
                return this.titleproperField;
            }
            set {
                if ((value == null)) {
                    this.titleproperField = null;
                }
                else {
                    if ((this.titleproperField == null)) {
                        this.titleproperField = XTypedList<titleproper>.Initialize(this, LinqToXsdTypeManager.Instance, value, titleproperXName);
                    }
                    else {
                        XTypedServices.SetList<titleproper>(this.titleproperField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (titleproper+, subtitle*, author?, sponsor?)
        /// </para>
        /// </summary>
        public virtual IList<subtitle> subtitle {
            get {
                if ((this.subtitleField == null)) {
                    this.subtitleField = new XTypedList<subtitle>(this, LinqToXsdTypeManager.Instance, subtitleXName);
                }
                return this.subtitleField;
            }
            set {
                if ((value == null)) {
                    this.subtitleField = null;
                }
                else {
                    if ((this.subtitleField == null)) {
                        this.subtitleField = XTypedList<subtitle>.Initialize(this, LinqToXsdTypeManager.Instance, value, subtitleXName);
                    }
                    else {
                        XTypedServices.SetList<subtitle>(this.subtitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (titleproper+, subtitle*, author?, sponsor?)
        /// </para>
        /// </summary>
        public virtual author author {
            get {
                XElement x = this.GetElement(authorXName);
                return ((author)(x));
            }
            set {
                this.SetElement(authorXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (titleproper+, subtitle*, author?, sponsor?)
        /// </para>
        /// </summary>
        public virtual sponsor sponsor {
            get {
                XElement x = this.GetElement(sponsorXName);
                return ((sponsor)(x));
            }
            set {
                this.SetElement(sponsorXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<titlestmt>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(titleproperXName, typeof(titleproper));
            localElementDictionary.Add(subtitleXName, typeof(subtitle));
            localElementDictionary.Add(authorXName, typeof(author));
            localElementDictionary.Add(sponsorXName, typeof(sponsor));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (edition | p)+
    /// </para>
    /// </summary>
    public partial class editionstmt : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName editionXName = System.Xml.Linq.XName.Get("edition", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<edition> editionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("editionstmt", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator editionstmt(XElement xe) { return XTypedServices.ToXTypedElement<editionstmt>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static editionstmt() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(editionXName), new NamedContentModelEntity(pXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (edition | p)+
        /// </para>
        /// </summary>
        public editionstmt() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (edition | p)+
        /// </para>
        /// </summary>
        public virtual IList<edition> edition {
            get {
                if ((this.editionField == null)) {
                    this.editionField = new XTypedList<edition>(this, LinqToXsdTypeManager.Instance, editionXName);
                }
                return this.editionField;
            }
            set {
                if ((value == null)) {
                    this.editionField = null;
                }
                else {
                    if ((this.editionField == null)) {
                        this.editionField = XTypedList<edition>.Initialize(this, LinqToXsdTypeManager.Instance, value, editionXName);
                    }
                    else {
                        XTypedServices.SetList<edition>(this.editionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (edition | p)+
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<editionstmt>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(editionXName, typeof(edition));
            localElementDictionary.Add(pXName, typeof(p));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (publisher | date | address | num | p)+
    /// </para>
    /// </summary>
    public partial class publicationstmt : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName publisherXName = System.Xml.Linq.XName.Get("publisher", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<publisher> publisherField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dateXName = System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<date> dateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName addressXName = System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName numXName = System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<num> numField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("publicationstmt", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator publicationstmt(XElement xe) { return XTypedServices.ToXTypedElement<publicationstmt>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static publicationstmt() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(publisherXName), new NamedContentModelEntity(dateXName), new NamedContentModelEntity(addressXName), new NamedContentModelEntity(numXName), new NamedContentModelEntity(pXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (publisher | date | address | num | p)+
        /// </para>
        /// </summary>
        public publicationstmt() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (publisher | date | address | num | p)+
        /// </para>
        /// </summary>
        public virtual IList<publisher> publisher {
            get {
                if ((this.publisherField == null)) {
                    this.publisherField = new XTypedList<publisher>(this, LinqToXsdTypeManager.Instance, publisherXName);
                }
                return this.publisherField;
            }
            set {
                if ((value == null)) {
                    this.publisherField = null;
                }
                else {
                    if ((this.publisherField == null)) {
                        this.publisherField = XTypedList<publisher>.Initialize(this, LinqToXsdTypeManager.Instance, value, publisherXName);
                    }
                    else {
                        XTypedServices.SetList<publisher>(this.publisherField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (publisher | date | address | num | p)+
        /// </para>
        /// </summary>
        public virtual IList<date> date {
            get {
                if ((this.dateField == null)) {
                    this.dateField = new XTypedList<date>(this, LinqToXsdTypeManager.Instance, dateXName);
                }
                return this.dateField;
            }
            set {
                if ((value == null)) {
                    this.dateField = null;
                }
                else {
                    if ((this.dateField == null)) {
                        this.dateField = XTypedList<date>.Initialize(this, LinqToXsdTypeManager.Instance, value, dateXName);
                    }
                    else {
                        XTypedServices.SetList<date>(this.dateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (publisher | date | address | num | p)+
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, addressXName);
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, addressXName);
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (publisher | date | address | num | p)+
        /// </para>
        /// </summary>
        public virtual IList<num> num {
            get {
                if ((this.numField == null)) {
                    this.numField = new XTypedList<num>(this, LinqToXsdTypeManager.Instance, numXName);
                }
                return this.numField;
            }
            set {
                if ((value == null)) {
                    this.numField = null;
                }
                else {
                    if ((this.numField == null)) {
                        this.numField = XTypedList<num>.Initialize(this, LinqToXsdTypeManager.Instance, value, numXName);
                    }
                    else {
                        XTypedServices.SetList<num>(this.numField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (publisher | date | address | num | p)+
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<publicationstmt>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(publisherXName, typeof(publisher));
            localElementDictionary.Add(dateXName, typeof(date));
            localElementDictionary.Add(addressXName, typeof(address));
            localElementDictionary.Add(numXName, typeof(num));
            localElementDictionary.Add(pXName, typeof(p));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (titleproper | num | p)+
    /// </para>
    /// </summary>
    public partial class seriesstmt : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleproperXName = System.Xml.Linq.XName.Get("titleproper", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<titleproper> titleproperField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName numXName = System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<num> numField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("seriesstmt", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator seriesstmt(XElement xe) { return XTypedServices.ToXTypedElement<seriesstmt>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static seriesstmt() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(titleproperXName), new NamedContentModelEntity(numXName), new NamedContentModelEntity(pXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (titleproper | num | p)+
        /// </para>
        /// </summary>
        public seriesstmt() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (titleproper | num | p)+
        /// </para>
        /// </summary>
        public virtual IList<titleproper> titleproper {
            get {
                if ((this.titleproperField == null)) {
                    this.titleproperField = new XTypedList<titleproper>(this, LinqToXsdTypeManager.Instance, titleproperXName);
                }
                return this.titleproperField;
            }
            set {
                if ((value == null)) {
                    this.titleproperField = null;
                }
                else {
                    if ((this.titleproperField == null)) {
                        this.titleproperField = XTypedList<titleproper>.Initialize(this, LinqToXsdTypeManager.Instance, value, titleproperXName);
                    }
                    else {
                        XTypedServices.SetList<titleproper>(this.titleproperField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (titleproper | num | p)+
        /// </para>
        /// </summary>
        public virtual IList<num> num {
            get {
                if ((this.numField == null)) {
                    this.numField = new XTypedList<num>(this, LinqToXsdTypeManager.Instance, numXName);
                }
                return this.numField;
            }
            set {
                if ((value == null)) {
                    this.numField = null;
                }
                else {
                    if ((this.numField == null)) {
                        this.numField = XTypedList<num>.Initialize(this, LinqToXsdTypeManager.Instance, value, numXName);
                    }
                    else {
                        XTypedServices.SetList<num>(this.numField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (titleproper | num | p)+
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<seriesstmt>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(titleproperXName, typeof(titleproper));
            localElementDictionary.Add(numXName, typeof(num));
            localElementDictionary.Add(pXName, typeof(p));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (note+)
    /// </para>
    /// </summary>
    public partial class notestmt : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("notestmt", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator notestmt(XElement xe) { return XTypedServices.ToXTypedElement<notestmt>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static notestmt() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(noteXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (note+)
        /// </para>
        /// </summary>
        public notestmt() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (note+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<notestmt>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(noteXName, typeof(note));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (creation?, langusage?, descrules?)
    /// </para>
    /// </summary>
    public partial class profiledesc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName creationXName = System.Xml.Linq.XName.Get("creation", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName langusageXName = System.Xml.Linq.XName.Get("langusage", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descrulesXName = System.Xml.Linq.XName.Get("descrules", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("profiledesc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator profiledesc(XElement xe) { return XTypedServices.ToXTypedElement<profiledesc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static profiledesc() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(creationXName), new NamedContentModelEntity(langusageXName), new NamedContentModelEntity(descrulesXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (creation?, langusage?, descrules?)
        /// </para>
        /// </summary>
        public profiledesc() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (creation?, langusage?, descrules?)
        /// </para>
        /// </summary>
        public virtual creation creation {
            get {
                XElement x = this.GetElement(creationXName);
                return ((creation)(x));
            }
            set {
                this.SetElement(creationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (creation?, langusage?, descrules?)
        /// </para>
        /// </summary>
        public virtual langusage langusage {
            get {
                XElement x = this.GetElement(langusageXName);
                return ((langusage)(x));
            }
            set {
                this.SetElement(langusageXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (creation?, langusage?, descrules?)
        /// </para>
        /// </summary>
        public virtual descrules descrules {
            get {
                XElement x = this.GetElement(descrulesXName);
                return ((descrules)(x));
            }
            set {
                this.SetElement(descrulesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<profiledesc>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(creationXName, typeof(creation));
            localElementDictionary.Add(langusageXName, typeof(langusage));
            localElementDictionary.Add(descrulesXName, typeof(descrules));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | date)*
    /// </para>
    /// </summary>
    public partial class creation : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName abbrXName = System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName expanXName = System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @refXName = System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extrefXName = System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName linkgrpXName = System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibrefXName = System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName archrefXName = System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dateXName = System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<date> dateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("creation", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator creation(XElement xe) { return XTypedServices.ToXTypedElement<creation>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static creation() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName), new NamedContentModelEntity(abbrXName), new NamedContentModelEntity(expanXName), new NamedContentModelEntity(@refXName), new NamedContentModelEntity(extrefXName), new NamedContentModelEntity(linkgrpXName), new NamedContentModelEntity(bibrefXName), new NamedContentModelEntity(titleXName), new NamedContentModelEntity(archrefXName), new NamedContentModelEntity(dateXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | date)*
        /// </para>
        /// </summary>
        public creation() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | date)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | date)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | date)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | date)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | date)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, abbrXName);
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, abbrXName);
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | date)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, expanXName);
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, expanXName);
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | date)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, @refXName);
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, @refXName);
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | date)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, extrefXName);
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, extrefXName);
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | date)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, linkgrpXName);
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, linkgrpXName);
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | date)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, bibrefXName);
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibrefXName);
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | date)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, titleXName);
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, titleXName);
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | date)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, archrefXName);
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, archrefXName);
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | date)*
        /// </para>
        /// </summary>
        public virtual IList<date> date {
            get {
                if ((this.dateField == null)) {
                    this.dateField = new XTypedList<date>(this, LinqToXsdTypeManager.Instance, dateXName);
                }
                return this.dateField;
            }
            set {
                if ((value == null)) {
                    this.dateField = null;
                }
                else {
                    if ((this.dateField == null)) {
                        this.dateField = XTypedList<date>.Initialize(this, LinqToXsdTypeManager.Instance, value, dateXName);
                    }
                    else {
                        XTypedServices.SetList<date>(this.dateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<creation>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
            localElementDictionary.Add(abbrXName, typeof(abbr));
            localElementDictionary.Add(expanXName, typeof(expan));
            localElementDictionary.Add(@refXName, typeof(@ref));
            localElementDictionary.Add(extrefXName, typeof(extref));
            localElementDictionary.Add(linkgrpXName, typeof(linkgrp));
            localElementDictionary.Add(bibrefXName, typeof(bibref));
            localElementDictionary.Add(titleXName, typeof(title));
            localElementDictionary.Add(archrefXName, typeof(archref));
            localElementDictionary.Add(dateXName, typeof(date));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
    /// </para>
    /// </summary>
    public partial class langusage : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName abbrXName = System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName expanXName = System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @refXName = System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extrefXName = System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName linkgrpXName = System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibrefXName = System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName archrefXName = System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName languageXName = System.Xml.Linq.XName.Get("language", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<language> languageField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("langusage", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator langusage(XElement xe) { return XTypedServices.ToXTypedElement<langusage>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static langusage() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName), new NamedContentModelEntity(abbrXName), new NamedContentModelEntity(expanXName), new NamedContentModelEntity(@refXName), new NamedContentModelEntity(extrefXName), new NamedContentModelEntity(linkgrpXName), new NamedContentModelEntity(bibrefXName), new NamedContentModelEntity(titleXName), new NamedContentModelEntity(archrefXName), new NamedContentModelEntity(languageXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public langusage() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, abbrXName);
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, abbrXName);
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, expanXName);
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, expanXName);
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, @refXName);
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, @refXName);
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, extrefXName);
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, extrefXName);
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, linkgrpXName);
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, linkgrpXName);
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, bibrefXName);
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibrefXName);
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, titleXName);
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, titleXName);
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, archrefXName);
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, archrefXName);
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | language)*
        /// </para>
        /// </summary>
        public virtual IList<language> language {
            get {
                if ((this.languageField == null)) {
                    this.languageField = new XTypedList<language>(this, LinqToXsdTypeManager.Instance, languageXName);
                }
                return this.languageField;
            }
            set {
                if ((value == null)) {
                    this.languageField = null;
                }
                else {
                    if ((this.languageField == null)) {
                        this.languageField = XTypedList<language>.Initialize(this, LinqToXsdTypeManager.Instance, value, languageXName);
                    }
                    else {
                        XTypedServices.SetList<language>(this.languageField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<langusage>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
            localElementDictionary.Add(abbrXName, typeof(abbr));
            localElementDictionary.Add(expanXName, typeof(expan));
            localElementDictionary.Add(@refXName, typeof(@ref));
            localElementDictionary.Add(extrefXName, typeof(extref));
            localElementDictionary.Add(linkgrpXName, typeof(linkgrp));
            localElementDictionary.Add(bibrefXName, typeof(bibref));
            localElementDictionary.Add(titleXName, typeof(title));
            localElementDictionary.Add(archrefXName, typeof(archref));
            localElementDictionary.Add(languageXName, typeof(language));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
    /// </para>
    /// </summary>
    public partial class descrules : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName abbrXName = System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName expanXName = System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @refXName = System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extrefXName = System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName linkgrpXName = System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibrefXName = System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName archrefXName = System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("descrules", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator descrules(XElement xe) { return XTypedServices.ToXTypedElement<descrules>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static descrules() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName), new NamedContentModelEntity(abbrXName), new NamedContentModelEntity(expanXName), new NamedContentModelEntity(@refXName), new NamedContentModelEntity(extrefXName), new NamedContentModelEntity(linkgrpXName), new NamedContentModelEntity(bibrefXName), new NamedContentModelEntity(titleXName), new NamedContentModelEntity(archrefXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public descrules() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, abbrXName);
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, abbrXName);
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, expanXName);
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, expanXName);
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, @refXName);
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, @refXName);
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, extrefXName);
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, extrefXName);
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, linkgrpXName);
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, linkgrpXName);
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, bibrefXName);
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibrefXName);
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, titleXName);
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, titleXName);
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, archrefXName);
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, archrefXName);
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<descrules>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
            localElementDictionary.Add(abbrXName, typeof(abbr));
            localElementDictionary.Add(expanXName, typeof(expan));
            localElementDictionary.Add(@refXName, typeof(@ref));
            localElementDictionary.Add(extrefXName, typeof(extref));
            localElementDictionary.Add(linkgrpXName, typeof(linkgrp));
            localElementDictionary.Add(bibrefXName, typeof(bibref));
            localElementDictionary.Add(titleXName, typeof(title));
            localElementDictionary.Add(archrefXName, typeof(archref));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (list | change+)
    /// </para>
    /// </summary>
    public partial class revisiondesc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listXName = System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName changeXName = System.Xml.Linq.XName.Get("change", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<change> changeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("revisiondesc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator revisiondesc(XElement xe) { return XTypedServices.ToXTypedElement<revisiondesc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static revisiondesc() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(listXName), new NamedContentModelEntity(changeXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (list | change+)
        /// </para>
        /// </summary>
        public revisiondesc() {
        }
        
        public revisiondesc(list list) {
            this.list = list;
        }
        
        public revisiondesc(IEnumerable<change> change) {
            this.changeField = XTypedList<change>.Initialize(this, LinqToXsdTypeManager.Instance, change, changeXName);
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (list | change+)
        /// </para>
        /// </summary>
        public virtual list list {
            get {
                XElement x = this.GetElement(listXName);
                return ((list)(x));
            }
            set {
                this.SetElement(listXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (list | change+)
        /// </para>
        /// </summary>
        public virtual IList<change> change {
            get {
                if ((this.changeField == null)) {
                    this.changeField = new XTypedList<change>(this, LinqToXsdTypeManager.Instance, changeXName);
                }
                return this.changeField;
            }
            set {
                if ((value == null)) {
                    this.changeField = null;
                }
                else {
                    if ((this.changeField == null)) {
                        this.changeField = XTypedList<change>.Initialize(this, LinqToXsdTypeManager.Instance, value, changeXName);
                    }
                    else {
                        XTypedServices.SetList<change>(this.changeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<revisiondesc>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(listXName, typeof(list));
            localElementDictionary.Add(changeXName, typeof(change));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (date, item+)
    /// </para>
    /// </summary>
    public partial class change : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dateXName = System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName itemXName = System.Xml.Linq.XName.Get("item", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<item> itemField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("change", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator change(XElement xe) { return XTypedServices.ToXTypedElement<change>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static change() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(dateXName), new NamedContentModelEntity(itemXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (date, item+)
        /// </para>
        /// </summary>
        public change() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (date, item+)
        /// </para>
        /// </summary>
        public virtual date date {
            get {
                XElement x = this.GetElement(dateXName);
                return ((date)(x));
            }
            set {
                this.SetElement(dateXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (date, item+)
        /// </para>
        /// </summary>
        public virtual IList<item> item {
            get {
                if ((this.itemField == null)) {
                    this.itemField = new XTypedList<item>(this, LinqToXsdTypeManager.Instance, itemXName);
                }
                return this.itemField;
            }
            set {
                if ((value == null)) {
                    this.itemField = null;
                }
                else {
                    if ((this.itemField == null)) {
                        this.itemField = XTypedList<item>.Initialize(this, LinqToXsdTypeManager.Instance, value, itemXName);
                    }
                    else {
                        XTypedServices.SetList<item>(this.itemField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<change>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(dateXName, typeof(date));
            localElementDictionary.Add(itemXName, typeof(item));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (titlepage?, div*)
    /// </para>
    /// </summary>
    public partial class frontmatter : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titlepageXName = System.Xml.Linq.XName.Get("titlepage", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName divXName = System.Xml.Linq.XName.Get("div", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<div> divField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("frontmatter", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator frontmatter(XElement xe) { return XTypedServices.ToXTypedElement<frontmatter>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static frontmatter() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(titlepageXName), new NamedContentModelEntity(divXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (titlepage?, div*)
        /// </para>
        /// </summary>
        public frontmatter() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (titlepage?, div*)
        /// </para>
        /// </summary>
        public virtual titlepage titlepage {
            get {
                XElement x = this.GetElement(titlepageXName);
                return ((titlepage)(x));
            }
            set {
                this.SetElement(titlepageXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (titlepage?, div*)
        /// </para>
        /// </summary>
        public virtual IList<div> div {
            get {
                if ((this.divField == null)) {
                    this.divField = new XTypedList<div>(this, LinqToXsdTypeManager.Instance, divXName);
                }
                return this.divField;
            }
            set {
                if ((value == null)) {
                    this.divField = null;
                }
                else {
                    if ((this.divField == null)) {
                        this.divField = XTypedList<div>.Initialize(this, LinqToXsdTypeManager.Instance, value, divXName);
                    }
                    else {
                        XTypedServices.SetList<div>(this.divField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<frontmatter>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(titlepageXName, typeof(titlepage));
            localElementDictionary.Add(divXName, typeof(div));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (address | chronlist | list | note | table | blockquote | p | author | date | edition | num | publisher | bibseries | sponsor | titleproper | subtitle)+
    /// </para>
    /// </summary>
    public partial class titlepage : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName addressXName = System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName chronlistXName = System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listXName = System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tableXName = System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName blockquoteXName = System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName authorXName = System.Xml.Linq.XName.Get("author", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<author> authorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dateXName = System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<date> dateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName editionXName = System.Xml.Linq.XName.Get("edition", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<edition> editionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName numXName = System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<num> numField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName publisherXName = System.Xml.Linq.XName.Get("publisher", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<publisher> publisherField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibseriesXName = System.Xml.Linq.XName.Get("bibseries", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibseries> bibseriesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sponsorXName = System.Xml.Linq.XName.Get("sponsor", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<sponsor> sponsorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleproperXName = System.Xml.Linq.XName.Get("titleproper", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<titleproper> titleproperField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName subtitleXName = System.Xml.Linq.XName.Get("subtitle", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<subtitle> subtitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("titlepage", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator titlepage(XElement xe) { return XTypedServices.ToXTypedElement<titlepage>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static titlepage() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(addressXName), new NamedContentModelEntity(chronlistXName), new NamedContentModelEntity(listXName), new NamedContentModelEntity(noteXName), new NamedContentModelEntity(tableXName), new NamedContentModelEntity(blockquoteXName), new NamedContentModelEntity(pXName), new NamedContentModelEntity(authorXName), new NamedContentModelEntity(dateXName), new NamedContentModelEntity(editionXName), new NamedContentModelEntity(numXName), new NamedContentModelEntity(publisherXName), new NamedContentModelEntity(bibseriesXName), new NamedContentModelEntity(sponsorXName), new NamedContentModelEntity(titleproperXName), new NamedContentModelEntity(subtitleXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | blockquote | p | author | date | edition | num | publisher | bibseries | sponsor | titleproper | subtitle)+
        /// </para>
        /// </summary>
        public titlepage() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | blockquote | p | author | date | edition | num | publisher | bibseries | sponsor | titleproper | subtitle)+
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, addressXName);
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, addressXName);
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | blockquote | p | author | date | edition | num | publisher | bibseries | sponsor | titleproper | subtitle)+
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, chronlistXName);
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, chronlistXName);
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | blockquote | p | author | date | edition | num | publisher | bibseries | sponsor | titleproper | subtitle)+
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, listXName);
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, listXName);
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | blockquote | p | author | date | edition | num | publisher | bibseries | sponsor | titleproper | subtitle)+
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | blockquote | p | author | date | edition | num | publisher | bibseries | sponsor | titleproper | subtitle)+
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, tableXName);
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, tableXName);
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | blockquote | p | author | date | edition | num | publisher | bibseries | sponsor | titleproper | subtitle)+
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, blockquoteXName);
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, blockquoteXName);
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | blockquote | p | author | date | edition | num | publisher | bibseries | sponsor | titleproper | subtitle)+
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | blockquote | p | author | date | edition | num | publisher | bibseries | sponsor | titleproper | subtitle)+
        /// </para>
        /// </summary>
        public virtual IList<author> author {
            get {
                if ((this.authorField == null)) {
                    this.authorField = new XTypedList<author>(this, LinqToXsdTypeManager.Instance, authorXName);
                }
                return this.authorField;
            }
            set {
                if ((value == null)) {
                    this.authorField = null;
                }
                else {
                    if ((this.authorField == null)) {
                        this.authorField = XTypedList<author>.Initialize(this, LinqToXsdTypeManager.Instance, value, authorXName);
                    }
                    else {
                        XTypedServices.SetList<author>(this.authorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | blockquote | p | author | date | edition | num | publisher | bibseries | sponsor | titleproper | subtitle)+
        /// </para>
        /// </summary>
        public virtual IList<date> date {
            get {
                if ((this.dateField == null)) {
                    this.dateField = new XTypedList<date>(this, LinqToXsdTypeManager.Instance, dateXName);
                }
                return this.dateField;
            }
            set {
                if ((value == null)) {
                    this.dateField = null;
                }
                else {
                    if ((this.dateField == null)) {
                        this.dateField = XTypedList<date>.Initialize(this, LinqToXsdTypeManager.Instance, value, dateXName);
                    }
                    else {
                        XTypedServices.SetList<date>(this.dateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | blockquote | p | author | date | edition | num | publisher | bibseries | sponsor | titleproper | subtitle)+
        /// </para>
        /// </summary>
        public virtual IList<edition> edition {
            get {
                if ((this.editionField == null)) {
                    this.editionField = new XTypedList<edition>(this, LinqToXsdTypeManager.Instance, editionXName);
                }
                return this.editionField;
            }
            set {
                if ((value == null)) {
                    this.editionField = null;
                }
                else {
                    if ((this.editionField == null)) {
                        this.editionField = XTypedList<edition>.Initialize(this, LinqToXsdTypeManager.Instance, value, editionXName);
                    }
                    else {
                        XTypedServices.SetList<edition>(this.editionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | blockquote | p | author | date | edition | num | publisher | bibseries | sponsor | titleproper | subtitle)+
        /// </para>
        /// </summary>
        public virtual IList<num> num {
            get {
                if ((this.numField == null)) {
                    this.numField = new XTypedList<num>(this, LinqToXsdTypeManager.Instance, numXName);
                }
                return this.numField;
            }
            set {
                if ((value == null)) {
                    this.numField = null;
                }
                else {
                    if ((this.numField == null)) {
                        this.numField = XTypedList<num>.Initialize(this, LinqToXsdTypeManager.Instance, value, numXName);
                    }
                    else {
                        XTypedServices.SetList<num>(this.numField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | blockquote | p | author | date | edition | num | publisher | bibseries | sponsor | titleproper | subtitle)+
        /// </para>
        /// </summary>
        public virtual IList<publisher> publisher {
            get {
                if ((this.publisherField == null)) {
                    this.publisherField = new XTypedList<publisher>(this, LinqToXsdTypeManager.Instance, publisherXName);
                }
                return this.publisherField;
            }
            set {
                if ((value == null)) {
                    this.publisherField = null;
                }
                else {
                    if ((this.publisherField == null)) {
                        this.publisherField = XTypedList<publisher>.Initialize(this, LinqToXsdTypeManager.Instance, value, publisherXName);
                    }
                    else {
                        XTypedServices.SetList<publisher>(this.publisherField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | blockquote | p | author | date | edition | num | publisher | bibseries | sponsor | titleproper | subtitle)+
        /// </para>
        /// </summary>
        public virtual IList<bibseries> bibseries {
            get {
                if ((this.bibseriesField == null)) {
                    this.bibseriesField = new XTypedList<bibseries>(this, LinqToXsdTypeManager.Instance, bibseriesXName);
                }
                return this.bibseriesField;
            }
            set {
                if ((value == null)) {
                    this.bibseriesField = null;
                }
                else {
                    if ((this.bibseriesField == null)) {
                        this.bibseriesField = XTypedList<bibseries>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibseriesXName);
                    }
                    else {
                        XTypedServices.SetList<bibseries>(this.bibseriesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | blockquote | p | author | date | edition | num | publisher | bibseries | sponsor | titleproper | subtitle)+
        /// </para>
        /// </summary>
        public virtual IList<sponsor> sponsor {
            get {
                if ((this.sponsorField == null)) {
                    this.sponsorField = new XTypedList<sponsor>(this, LinqToXsdTypeManager.Instance, sponsorXName);
                }
                return this.sponsorField;
            }
            set {
                if ((value == null)) {
                    this.sponsorField = null;
                }
                else {
                    if ((this.sponsorField == null)) {
                        this.sponsorField = XTypedList<sponsor>.Initialize(this, LinqToXsdTypeManager.Instance, value, sponsorXName);
                    }
                    else {
                        XTypedServices.SetList<sponsor>(this.sponsorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | blockquote | p | author | date | edition | num | publisher | bibseries | sponsor | titleproper | subtitle)+
        /// </para>
        /// </summary>
        public virtual IList<titleproper> titleproper {
            get {
                if ((this.titleproperField == null)) {
                    this.titleproperField = new XTypedList<titleproper>(this, LinqToXsdTypeManager.Instance, titleproperXName);
                }
                return this.titleproperField;
            }
            set {
                if ((value == null)) {
                    this.titleproperField = null;
                }
                else {
                    if ((this.titleproperField == null)) {
                        this.titleproperField = XTypedList<titleproper>.Initialize(this, LinqToXsdTypeManager.Instance, value, titleproperXName);
                    }
                    else {
                        XTypedServices.SetList<titleproper>(this.titleproperField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note | table | blockquote | p | author | date | edition | num | publisher | bibseries | sponsor | titleproper | subtitle)+
        /// </para>
        /// </summary>
        public virtual IList<subtitle> subtitle {
            get {
                if ((this.subtitleField == null)) {
                    this.subtitleField = new XTypedList<subtitle>(this, LinqToXsdTypeManager.Instance, subtitleXName);
                }
                return this.subtitleField;
            }
            set {
                if ((value == null)) {
                    this.subtitleField = null;
                }
                else {
                    if ((this.subtitleField == null)) {
                        this.subtitleField = XTypedList<subtitle>.Initialize(this, LinqToXsdTypeManager.Instance, value, subtitleXName);
                    }
                    else {
                        XTypedServices.SetList<subtitle>(this.subtitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<titlepage>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(addressXName, typeof(address));
            localElementDictionary.Add(chronlistXName, typeof(chronlist));
            localElementDictionary.Add(listXName, typeof(list));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(tableXName, typeof(table));
            localElementDictionary.Add(blockquoteXName, typeof(blockquote));
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(authorXName, typeof(author));
            localElementDictionary.Add(dateXName, typeof(date));
            localElementDictionary.Add(editionXName, typeof(edition));
            localElementDictionary.Add(numXName, typeof(num));
            localElementDictionary.Add(publisherXName, typeof(publisher));
            localElementDictionary.Add(bibseriesXName, typeof(bibseries));
            localElementDictionary.Add(sponsorXName, typeof(sponsor));
            localElementDictionary.Add(titleproperXName, typeof(titleproper));
            localElementDictionary.Add(subtitleXName, typeof(subtitle));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
    /// </para>
    /// </summary>
    public partial class archdesc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName runnerXName = System.Xml.Linq.XName.Get("runner", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<runner> runnerField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName didXName = System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName accessrestrictXName = System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accessrestrict> accessrestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName accrualsXName = System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accruals> accrualsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName acqinfoXName = System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<acqinfo> acqinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altformavailXName = System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<altformavail> altformavailField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName appraisalXName = System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<appraisal> appraisalField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arrangementXName = System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<arrangement> arrangementField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibliographyXName = System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibliography> bibliographyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bioghistXName = System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bioghist> bioghistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName controlaccessXName = System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<controlaccess> controlaccessField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName custodhistXName = System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<custodhist> custodhistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descgrpXName = System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<descgrp> descgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName fileplanXName = System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<fileplan> fileplanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName indexXName = System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<index> indexField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName oddXName = System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<odd> oddField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName originalslocXName = System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<originalsloc> originalslocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName otherfindaidXName = System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<otherfindaid> otherfindaidField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phystechXName = System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phystech> phystechField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName preferciteXName = System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<prefercite> preferciteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName processinfoXName = System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<processinfo> processinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName relatedmaterialXName = System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<relatedmaterial> relatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName scopecontentXName = System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<scopecontent> scopecontentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName separatedmaterialXName = System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<separatedmaterial> separatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userestrictXName = System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<userestrict> userestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dscXName = System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dsc> dscField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName daoXName = System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dao> daoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName daogrpXName = System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<daogrp> daogrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName levelXName = System.Xml.Linq.XName.Get("level", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName otherlevelXName = System.Xml.Linq.XName.Get("otherlevel", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName relatedencodingXName = System.Xml.Linq.XName.Get("relatedencoding", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("archdesc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator archdesc(XElement xe) { return XTypedServices.ToXTypedElement<archdesc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static archdesc() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(runnerXName), new NamedContentModelEntity(didXName), new ChoiceContentModelEntity(new NamedContentModelEntity(accessrestrictXName), new NamedContentModelEntity(accrualsXName), new NamedContentModelEntity(acqinfoXName), new NamedContentModelEntity(altformavailXName), new NamedContentModelEntity(appraisalXName), new NamedContentModelEntity(arrangementXName), new NamedContentModelEntity(bibliographyXName), new NamedContentModelEntity(bioghistXName), new NamedContentModelEntity(controlaccessXName), new NamedContentModelEntity(custodhistXName), new NamedContentModelEntity(descgrpXName), new NamedContentModelEntity(fileplanXName), new NamedContentModelEntity(indexXName), new NamedContentModelEntity(oddXName), new NamedContentModelEntity(originalslocXName), new NamedContentModelEntity(otherfindaidXName), new NamedContentModelEntity(phystechXName), new NamedContentModelEntity(preferciteXName), new NamedContentModelEntity(processinfoXName), new NamedContentModelEntity(relatedmaterialXName), new NamedContentModelEntity(scopecontentXName), new NamedContentModelEntity(separatedmaterialXName), new NamedContentModelEntity(userestrictXName), new NamedContentModelEntity(dscXName), new NamedContentModelEntity(daoXName), new NamedContentModelEntity(daogrpXName), new NamedContentModelEntity(noteXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public archdesc() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<runner> runner {
            get {
                if ((this.runnerField == null)) {
                    this.runnerField = new XTypedList<runner>(this, LinqToXsdTypeManager.Instance, runnerXName);
                }
                return this.runnerField;
            }
            set {
                if ((value == null)) {
                    this.runnerField = null;
                }
                else {
                    if ((this.runnerField == null)) {
                        this.runnerField = XTypedList<runner>.Initialize(this, LinqToXsdTypeManager.Instance, value, runnerXName);
                    }
                    else {
                        XTypedServices.SetList<runner>(this.runnerField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual did did {
            get {
                XElement x = this.GetElement(didXName);
                return ((did)(x));
            }
            set {
                this.SetElement(didXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<accessrestrict> accessrestrict {
            get {
                if ((this.accessrestrictField == null)) {
                    this.accessrestrictField = new XTypedList<accessrestrict>(this, LinqToXsdTypeManager.Instance, accessrestrictXName);
                }
                return this.accessrestrictField;
            }
            set {
                if ((value == null)) {
                    this.accessrestrictField = null;
                }
                else {
                    if ((this.accessrestrictField == null)) {
                        this.accessrestrictField = XTypedList<accessrestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, accessrestrictXName);
                    }
                    else {
                        XTypedServices.SetList<accessrestrict>(this.accessrestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<accruals> accruals {
            get {
                if ((this.accrualsField == null)) {
                    this.accrualsField = new XTypedList<accruals>(this, LinqToXsdTypeManager.Instance, accrualsXName);
                }
                return this.accrualsField;
            }
            set {
                if ((value == null)) {
                    this.accrualsField = null;
                }
                else {
                    if ((this.accrualsField == null)) {
                        this.accrualsField = XTypedList<accruals>.Initialize(this, LinqToXsdTypeManager.Instance, value, accrualsXName);
                    }
                    else {
                        XTypedServices.SetList<accruals>(this.accrualsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<acqinfo> acqinfo {
            get {
                if ((this.acqinfoField == null)) {
                    this.acqinfoField = new XTypedList<acqinfo>(this, LinqToXsdTypeManager.Instance, acqinfoXName);
                }
                return this.acqinfoField;
            }
            set {
                if ((value == null)) {
                    this.acqinfoField = null;
                }
                else {
                    if ((this.acqinfoField == null)) {
                        this.acqinfoField = XTypedList<acqinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, acqinfoXName);
                    }
                    else {
                        XTypedServices.SetList<acqinfo>(this.acqinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<altformavail> altformavail {
            get {
                if ((this.altformavailField == null)) {
                    this.altformavailField = new XTypedList<altformavail>(this, LinqToXsdTypeManager.Instance, altformavailXName);
                }
                return this.altformavailField;
            }
            set {
                if ((value == null)) {
                    this.altformavailField = null;
                }
                else {
                    if ((this.altformavailField == null)) {
                        this.altformavailField = XTypedList<altformavail>.Initialize(this, LinqToXsdTypeManager.Instance, value, altformavailXName);
                    }
                    else {
                        XTypedServices.SetList<altformavail>(this.altformavailField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<appraisal> appraisal {
            get {
                if ((this.appraisalField == null)) {
                    this.appraisalField = new XTypedList<appraisal>(this, LinqToXsdTypeManager.Instance, appraisalXName);
                }
                return this.appraisalField;
            }
            set {
                if ((value == null)) {
                    this.appraisalField = null;
                }
                else {
                    if ((this.appraisalField == null)) {
                        this.appraisalField = XTypedList<appraisal>.Initialize(this, LinqToXsdTypeManager.Instance, value, appraisalXName);
                    }
                    else {
                        XTypedServices.SetList<appraisal>(this.appraisalField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<arrangement> arrangement {
            get {
                if ((this.arrangementField == null)) {
                    this.arrangementField = new XTypedList<arrangement>(this, LinqToXsdTypeManager.Instance, arrangementXName);
                }
                return this.arrangementField;
            }
            set {
                if ((value == null)) {
                    this.arrangementField = null;
                }
                else {
                    if ((this.arrangementField == null)) {
                        this.arrangementField = XTypedList<arrangement>.Initialize(this, LinqToXsdTypeManager.Instance, value, arrangementXName);
                    }
                    else {
                        XTypedServices.SetList<arrangement>(this.arrangementField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<bibliography> bibliography {
            get {
                if ((this.bibliographyField == null)) {
                    this.bibliographyField = new XTypedList<bibliography>(this, LinqToXsdTypeManager.Instance, bibliographyXName);
                }
                return this.bibliographyField;
            }
            set {
                if ((value == null)) {
                    this.bibliographyField = null;
                }
                else {
                    if ((this.bibliographyField == null)) {
                        this.bibliographyField = XTypedList<bibliography>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibliographyXName);
                    }
                    else {
                        XTypedServices.SetList<bibliography>(this.bibliographyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<bioghist> bioghist {
            get {
                if ((this.bioghistField == null)) {
                    this.bioghistField = new XTypedList<bioghist>(this, LinqToXsdTypeManager.Instance, bioghistXName);
                }
                return this.bioghistField;
            }
            set {
                if ((value == null)) {
                    this.bioghistField = null;
                }
                else {
                    if ((this.bioghistField == null)) {
                        this.bioghistField = XTypedList<bioghist>.Initialize(this, LinqToXsdTypeManager.Instance, value, bioghistXName);
                    }
                    else {
                        XTypedServices.SetList<bioghist>(this.bioghistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<controlaccess> controlaccess {
            get {
                if ((this.controlaccessField == null)) {
                    this.controlaccessField = new XTypedList<controlaccess>(this, LinqToXsdTypeManager.Instance, controlaccessXName);
                }
                return this.controlaccessField;
            }
            set {
                if ((value == null)) {
                    this.controlaccessField = null;
                }
                else {
                    if ((this.controlaccessField == null)) {
                        this.controlaccessField = XTypedList<controlaccess>.Initialize(this, LinqToXsdTypeManager.Instance, value, controlaccessXName);
                    }
                    else {
                        XTypedServices.SetList<controlaccess>(this.controlaccessField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<custodhist> custodhist {
            get {
                if ((this.custodhistField == null)) {
                    this.custodhistField = new XTypedList<custodhist>(this, LinqToXsdTypeManager.Instance, custodhistXName);
                }
                return this.custodhistField;
            }
            set {
                if ((value == null)) {
                    this.custodhistField = null;
                }
                else {
                    if ((this.custodhistField == null)) {
                        this.custodhistField = XTypedList<custodhist>.Initialize(this, LinqToXsdTypeManager.Instance, value, custodhistXName);
                    }
                    else {
                        XTypedServices.SetList<custodhist>(this.custodhistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<descgrp> descgrp {
            get {
                if ((this.descgrpField == null)) {
                    this.descgrpField = new XTypedList<descgrp>(this, LinqToXsdTypeManager.Instance, descgrpXName);
                }
                return this.descgrpField;
            }
            set {
                if ((value == null)) {
                    this.descgrpField = null;
                }
                else {
                    if ((this.descgrpField == null)) {
                        this.descgrpField = XTypedList<descgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, descgrpXName);
                    }
                    else {
                        XTypedServices.SetList<descgrp>(this.descgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<fileplan> fileplan {
            get {
                if ((this.fileplanField == null)) {
                    this.fileplanField = new XTypedList<fileplan>(this, LinqToXsdTypeManager.Instance, fileplanXName);
                }
                return this.fileplanField;
            }
            set {
                if ((value == null)) {
                    this.fileplanField = null;
                }
                else {
                    if ((this.fileplanField == null)) {
                        this.fileplanField = XTypedList<fileplan>.Initialize(this, LinqToXsdTypeManager.Instance, value, fileplanXName);
                    }
                    else {
                        XTypedServices.SetList<fileplan>(this.fileplanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<index> index {
            get {
                if ((this.indexField == null)) {
                    this.indexField = new XTypedList<index>(this, LinqToXsdTypeManager.Instance, indexXName);
                }
                return this.indexField;
            }
            set {
                if ((value == null)) {
                    this.indexField = null;
                }
                else {
                    if ((this.indexField == null)) {
                        this.indexField = XTypedList<index>.Initialize(this, LinqToXsdTypeManager.Instance, value, indexXName);
                    }
                    else {
                        XTypedServices.SetList<index>(this.indexField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<odd> odd {
            get {
                if ((this.oddField == null)) {
                    this.oddField = new XTypedList<odd>(this, LinqToXsdTypeManager.Instance, oddXName);
                }
                return this.oddField;
            }
            set {
                if ((value == null)) {
                    this.oddField = null;
                }
                else {
                    if ((this.oddField == null)) {
                        this.oddField = XTypedList<odd>.Initialize(this, LinqToXsdTypeManager.Instance, value, oddXName);
                    }
                    else {
                        XTypedServices.SetList<odd>(this.oddField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<originalsloc> originalsloc {
            get {
                if ((this.originalslocField == null)) {
                    this.originalslocField = new XTypedList<originalsloc>(this, LinqToXsdTypeManager.Instance, originalslocXName);
                }
                return this.originalslocField;
            }
            set {
                if ((value == null)) {
                    this.originalslocField = null;
                }
                else {
                    if ((this.originalslocField == null)) {
                        this.originalslocField = XTypedList<originalsloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, originalslocXName);
                    }
                    else {
                        XTypedServices.SetList<originalsloc>(this.originalslocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<otherfindaid> otherfindaid {
            get {
                if ((this.otherfindaidField == null)) {
                    this.otherfindaidField = new XTypedList<otherfindaid>(this, LinqToXsdTypeManager.Instance, otherfindaidXName);
                }
                return this.otherfindaidField;
            }
            set {
                if ((value == null)) {
                    this.otherfindaidField = null;
                }
                else {
                    if ((this.otherfindaidField == null)) {
                        this.otherfindaidField = XTypedList<otherfindaid>.Initialize(this, LinqToXsdTypeManager.Instance, value, otherfindaidXName);
                    }
                    else {
                        XTypedServices.SetList<otherfindaid>(this.otherfindaidField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<phystech> phystech {
            get {
                if ((this.phystechField == null)) {
                    this.phystechField = new XTypedList<phystech>(this, LinqToXsdTypeManager.Instance, phystechXName);
                }
                return this.phystechField;
            }
            set {
                if ((value == null)) {
                    this.phystechField = null;
                }
                else {
                    if ((this.phystechField == null)) {
                        this.phystechField = XTypedList<phystech>.Initialize(this, LinqToXsdTypeManager.Instance, value, phystechXName);
                    }
                    else {
                        XTypedServices.SetList<phystech>(this.phystechField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<prefercite> prefercite {
            get {
                if ((this.preferciteField == null)) {
                    this.preferciteField = new XTypedList<prefercite>(this, LinqToXsdTypeManager.Instance, preferciteXName);
                }
                return this.preferciteField;
            }
            set {
                if ((value == null)) {
                    this.preferciteField = null;
                }
                else {
                    if ((this.preferciteField == null)) {
                        this.preferciteField = XTypedList<prefercite>.Initialize(this, LinqToXsdTypeManager.Instance, value, preferciteXName);
                    }
                    else {
                        XTypedServices.SetList<prefercite>(this.preferciteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<processinfo> processinfo {
            get {
                if ((this.processinfoField == null)) {
                    this.processinfoField = new XTypedList<processinfo>(this, LinqToXsdTypeManager.Instance, processinfoXName);
                }
                return this.processinfoField;
            }
            set {
                if ((value == null)) {
                    this.processinfoField = null;
                }
                else {
                    if ((this.processinfoField == null)) {
                        this.processinfoField = XTypedList<processinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, processinfoXName);
                    }
                    else {
                        XTypedServices.SetList<processinfo>(this.processinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<relatedmaterial> relatedmaterial {
            get {
                if ((this.relatedmaterialField == null)) {
                    this.relatedmaterialField = new XTypedList<relatedmaterial>(this, LinqToXsdTypeManager.Instance, relatedmaterialXName);
                }
                return this.relatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.relatedmaterialField = null;
                }
                else {
                    if ((this.relatedmaterialField == null)) {
                        this.relatedmaterialField = XTypedList<relatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, relatedmaterialXName);
                    }
                    else {
                        XTypedServices.SetList<relatedmaterial>(this.relatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<scopecontent> scopecontent {
            get {
                if ((this.scopecontentField == null)) {
                    this.scopecontentField = new XTypedList<scopecontent>(this, LinqToXsdTypeManager.Instance, scopecontentXName);
                }
                return this.scopecontentField;
            }
            set {
                if ((value == null)) {
                    this.scopecontentField = null;
                }
                else {
                    if ((this.scopecontentField == null)) {
                        this.scopecontentField = XTypedList<scopecontent>.Initialize(this, LinqToXsdTypeManager.Instance, value, scopecontentXName);
                    }
                    else {
                        XTypedServices.SetList<scopecontent>(this.scopecontentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<separatedmaterial> separatedmaterial {
            get {
                if ((this.separatedmaterialField == null)) {
                    this.separatedmaterialField = new XTypedList<separatedmaterial>(this, LinqToXsdTypeManager.Instance, separatedmaterialXName);
                }
                return this.separatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.separatedmaterialField = null;
                }
                else {
                    if ((this.separatedmaterialField == null)) {
                        this.separatedmaterialField = XTypedList<separatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, separatedmaterialXName);
                    }
                    else {
                        XTypedServices.SetList<separatedmaterial>(this.separatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<userestrict> userestrict {
            get {
                if ((this.userestrictField == null)) {
                    this.userestrictField = new XTypedList<userestrict>(this, LinqToXsdTypeManager.Instance, userestrictXName);
                }
                return this.userestrictField;
            }
            set {
                if ((value == null)) {
                    this.userestrictField = null;
                }
                else {
                    if ((this.userestrictField == null)) {
                        this.userestrictField = XTypedList<userestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, userestrictXName);
                    }
                    else {
                        XTypedServices.SetList<userestrict>(this.userestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<dsc> dsc {
            get {
                if ((this.dscField == null)) {
                    this.dscField = new XTypedList<dsc>(this, LinqToXsdTypeManager.Instance, dscXName);
                }
                return this.dscField;
            }
            set {
                if ((value == null)) {
                    this.dscField = null;
                }
                else {
                    if ((this.dscField == null)) {
                        this.dscField = XTypedList<dsc>.Initialize(this, LinqToXsdTypeManager.Instance, value, dscXName);
                    }
                    else {
                        XTypedServices.SetList<dsc>(this.dscField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<dao> dao {
            get {
                if ((this.daoField == null)) {
                    this.daoField = new XTypedList<dao>(this, LinqToXsdTypeManager.Instance, daoXName);
                }
                return this.daoField;
            }
            set {
                if ((value == null)) {
                    this.daoField = null;
                }
                else {
                    if ((this.daoField == null)) {
                        this.daoField = XTypedList<dao>.Initialize(this, LinqToXsdTypeManager.Instance, value, daoXName);
                    }
                    else {
                        XTypedServices.SetList<dao>(this.daoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<daogrp> daogrp {
            get {
                if ((this.daogrpField == null)) {
                    this.daogrpField = new XTypedList<daogrp>(this, LinqToXsdTypeManager.Instance, daogrpXName);
                }
                return this.daogrpField;
            }
            set {
                if ((value == null)) {
                    this.daogrpField = null;
                }
                else {
                    if ((this.daogrpField == null)) {
                        this.daogrpField = XTypedList<daogrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, daogrpXName);
                    }
                    else {
                        XTypedServices.SetList<daogrp>(this.daogrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (runner*, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string level {
            get {
                XAttribute x = this.Attribute(levelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(levelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string otherlevel {
            get {
                XAttribute x = this.Attribute(otherlevelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(otherlevelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string relatedencoding {
            get {
                XAttribute x = this.Attribute(relatedencodingXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(relatedencodingXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<archdesc>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(runnerXName, typeof(runner));
            localElementDictionary.Add(didXName, typeof(did));
            localElementDictionary.Add(accessrestrictXName, typeof(accessrestrict));
            localElementDictionary.Add(accrualsXName, typeof(accruals));
            localElementDictionary.Add(acqinfoXName, typeof(acqinfo));
            localElementDictionary.Add(altformavailXName, typeof(altformavail));
            localElementDictionary.Add(appraisalXName, typeof(appraisal));
            localElementDictionary.Add(arrangementXName, typeof(arrangement));
            localElementDictionary.Add(bibliographyXName, typeof(bibliography));
            localElementDictionary.Add(bioghistXName, typeof(bioghist));
            localElementDictionary.Add(controlaccessXName, typeof(controlaccess));
            localElementDictionary.Add(custodhistXName, typeof(custodhist));
            localElementDictionary.Add(descgrpXName, typeof(descgrp));
            localElementDictionary.Add(fileplanXName, typeof(fileplan));
            localElementDictionary.Add(indexXName, typeof(index));
            localElementDictionary.Add(oddXName, typeof(odd));
            localElementDictionary.Add(originalslocXName, typeof(originalsloc));
            localElementDictionary.Add(otherfindaidXName, typeof(otherfindaid));
            localElementDictionary.Add(phystechXName, typeof(phystech));
            localElementDictionary.Add(preferciteXName, typeof(prefercite));
            localElementDictionary.Add(processinfoXName, typeof(processinfo));
            localElementDictionary.Add(relatedmaterialXName, typeof(relatedmaterial));
            localElementDictionary.Add(scopecontentXName, typeof(scopecontent));
            localElementDictionary.Add(separatedmaterialXName, typeof(separatedmaterial));
            localElementDictionary.Add(userestrictXName, typeof(userestrict));
            localElementDictionary.Add(dscXName, typeof(dsc));
            localElementDictionary.Add(daoXName, typeof(dao));
            localElementDictionary.Add(daogrpXName, typeof(daogrp));
            localElementDictionary.Add(noteXName, typeof(note));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb)*
    /// </para>
    /// </summary>
    public partial class runner : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName placementXName = System.Xml.Linq.XName.Get("placement", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("runner", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator runner(XElement xe) { return XTypedServices.ToXTypedElement<runner>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static runner() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public runner() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LibraryOfCongress.EAD.runner.PlacementEnum? placement {
            get {
                XAttribute x = this.Attribute(placementXName);
                if ((x == null)) {
                    return null;
                }
                return ((LibraryOfCongress.EAD.runner.PlacementEnum)(Enum.Parse(typeof(LibraryOfCongress.EAD.runner.PlacementEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(placementXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<runner>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum PlacementEnum {
            
            header,
            
            footer,
            
            watermark,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | date | expan | num)*
    /// </para>
    /// </summary>
    public partial class titleproper : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName abbrXName = System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dateXName = System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<date> dateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName expanXName = System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName numXName = System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<num> numField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName renderXName = System.Xml.Linq.XName.Get("render", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("titleproper", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator titleproper(XElement xe) { return XTypedServices.ToXTypedElement<titleproper>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static titleproper() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName), new NamedContentModelEntity(abbrXName), new NamedContentModelEntity(dateXName), new NamedContentModelEntity(expanXName), new NamedContentModelEntity(numXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | date | expan | num)*
        /// </para>
        /// </summary>
        public titleproper() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | date | expan | num)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | date | expan | num)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | date | expan | num)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | date | expan | num)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | date | expan | num)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, abbrXName);
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, abbrXName);
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | date | expan | num)*
        /// </para>
        /// </summary>
        public virtual IList<date> date {
            get {
                if ((this.dateField == null)) {
                    this.dateField = new XTypedList<date>(this, LinqToXsdTypeManager.Instance, dateXName);
                }
                return this.dateField;
            }
            set {
                if ((value == null)) {
                    this.dateField = null;
                }
                else {
                    if ((this.dateField == null)) {
                        this.dateField = XTypedList<date>.Initialize(this, LinqToXsdTypeManager.Instance, value, dateXName);
                    }
                    else {
                        XTypedServices.SetList<date>(this.dateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | date | expan | num)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, expanXName);
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, expanXName);
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | date | expan | num)*
        /// </para>
        /// </summary>
        public virtual IList<num> num {
            get {
                if ((this.numField == null)) {
                    this.numField = new XTypedList<num>(this, LinqToXsdTypeManager.Instance, numXName);
                }
                return this.numField;
            }
            set {
                if ((value == null)) {
                    this.numField = null;
                }
                else {
                    if ((this.numField == null)) {
                        this.numField = XTypedList<num>.Initialize(this, LinqToXsdTypeManager.Instance, value, numXName);
                    }
                    else {
                        XTypedServices.SetList<num>(this.numField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LibraryOfCongress.EAD.avrender? render {
            get {
                XAttribute x = this.Attribute(renderXName);
                if ((x == null)) {
                    return null;
                }
                return ((LibraryOfCongress.EAD.avrender)(Enum.Parse(typeof(LibraryOfCongress.EAD.avrender), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(renderXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<titleproper>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
            localElementDictionary.Add(abbrXName, typeof(abbr));
            localElementDictionary.Add(dateXName, typeof(date));
            localElementDictionary.Add(expanXName, typeof(expan));
            localElementDictionary.Add(numXName, typeof(num));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | date | expan | num)*
    /// </para>
    /// </summary>
    public partial class subtitle : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName abbrXName = System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dateXName = System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<date> dateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName expanXName = System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName numXName = System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<num> numField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("subtitle", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator subtitle(XElement xe) { return XTypedServices.ToXTypedElement<subtitle>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static subtitle() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName), new NamedContentModelEntity(abbrXName), new NamedContentModelEntity(dateXName), new NamedContentModelEntity(expanXName), new NamedContentModelEntity(numXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | date | expan | num)*
        /// </para>
        /// </summary>
        public subtitle() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | date | expan | num)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | date | expan | num)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | date | expan | num)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | date | expan | num)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | date | expan | num)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, abbrXName);
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, abbrXName);
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | date | expan | num)*
        /// </para>
        /// </summary>
        public virtual IList<date> date {
            get {
                if ((this.dateField == null)) {
                    this.dateField = new XTypedList<date>(this, LinqToXsdTypeManager.Instance, dateXName);
                }
                return this.dateField;
            }
            set {
                if ((value == null)) {
                    this.dateField = null;
                }
                else {
                    if ((this.dateField == null)) {
                        this.dateField = XTypedList<date>.Initialize(this, LinqToXsdTypeManager.Instance, value, dateXName);
                    }
                    else {
                        XTypedServices.SetList<date>(this.dateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | date | expan | num)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, expanXName);
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, expanXName);
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | date | expan | num)*
        /// </para>
        /// </summary>
        public virtual IList<num> num {
            get {
                if ((this.numField == null)) {
                    this.numField = new XTypedList<num>(this, LinqToXsdTypeManager.Instance, numXName);
                }
                return this.numField;
            }
            set {
                if ((value == null)) {
                    this.numField = null;
                }
                else {
                    if ((this.numField == null)) {
                        this.numField = XTypedList<num>.Initialize(this, LinqToXsdTypeManager.Instance, value, numXName);
                    }
                    else {
                        XTypedServices.SetList<num>(this.numField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<subtitle>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
            localElementDictionary.Add(abbrXName, typeof(abbr));
            localElementDictionary.Add(dateXName, typeof(date));
            localElementDictionary.Add(expanXName, typeof(expan));
            localElementDictionary.Add(numXName, typeof(num));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb)*
    /// </para>
    /// </summary>
    public partial class author : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("author", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator author(XElement xe) { return XTypedServices.ToXTypedElement<author>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static author() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public author() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<author>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb)*
    /// </para>
    /// </summary>
    public partial class sponsor : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("sponsor", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator sponsor(XElement xe) { return XTypedServices.ToXTypedElement<sponsor>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static sponsor() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public sponsor() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<sponsor>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, div1*)
    /// </para>
    /// </summary>
    public partial class div : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName addressXName = System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName chronlistXName = System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listXName = System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tableXName = System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName blockquoteXName = System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName div1XName = System.Xml.Linq.XName.Get("div", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<div> div1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("div", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator div(XElement xe) { return XTypedServices.ToXTypedElement<div>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static div() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new ChoiceContentModelEntity(new NamedContentModelEntity(addressXName), new NamedContentModelEntity(chronlistXName), new NamedContentModelEntity(listXName), new NamedContentModelEntity(noteXName), new NamedContentModelEntity(tableXName), new NamedContentModelEntity(blockquoteXName), new NamedContentModelEntity(pXName)), new NamedContentModelEntity(div1XName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, div1*)
        /// </para>
        /// </summary>
        public div() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, div1*)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, div1*)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, addressXName);
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, addressXName);
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, div1*)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, chronlistXName);
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, chronlistXName);
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, div1*)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, listXName);
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, listXName);
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, div1*)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, div1*)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, tableXName);
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, tableXName);
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, div1*)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, blockquoteXName);
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, blockquoteXName);
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, div1*)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, div1*)
        /// </para>
        /// </summary>
        public virtual IList<div> div1 {
            get {
                if ((this.div1Field == null)) {
                    this.div1Field = new XTypedList<div>(this, LinqToXsdTypeManager.Instance, div1XName);
                }
                return this.div1Field;
            }
            set {
                if ((value == null)) {
                    this.div1Field = null;
                }
                else {
                    if ((this.div1Field == null)) {
                        this.div1Field = XTypedList<div>.Initialize(this, LinqToXsdTypeManager.Instance, value, div1XName);
                    }
                    else {
                        XTypedServices.SetList<div>(this.div1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<div>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(addressXName, typeof(address));
            localElementDictionary.Add(chronlistXName, typeof(chronlist));
            localElementDictionary.Add(listXName, typeof(list));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(tableXName, typeof(table));
            localElementDictionary.Add(blockquoteXName, typeof(blockquote));
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(div1XName, typeof(div));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (@abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)+)
    /// </para>
    /// </summary>
    public partial class did : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @abstractXName = System.Xml.Linq.XName.Get("abstract", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@abstract> @abstractField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName containerXName = System.Xml.Linq.XName.Get("container", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<container> containerField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName daoXName = System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dao> daoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName daogrpXName = System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<daogrp> daogrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName langmaterialXName = System.Xml.Linq.XName.Get("langmaterial", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<langmaterial> langmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName materialspecXName = System.Xml.Linq.XName.Get("materialspec", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<materialspec> materialspecField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName originationXName = System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<origination> originationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName physdescXName = System.Xml.Linq.XName.Get("physdesc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<physdesc> physdescField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName physlocXName = System.Xml.Linq.XName.Get("physloc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<physloc> physlocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName repositoryXName = System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<repository> repositoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unitdateXName = System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unitdate> unitdateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unitidXName = System.Xml.Linq.XName.Get("unitid", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unitid> unitidField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unittitleXName = System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unittitle> unittitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator did(XElement xe) { return XTypedServices.ToXTypedElement<did>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static did() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new ChoiceContentModelEntity(new NamedContentModelEntity(@abstractXName), new NamedContentModelEntity(containerXName), new NamedContentModelEntity(daoXName), new NamedContentModelEntity(daogrpXName), new NamedContentModelEntity(langmaterialXName), new NamedContentModelEntity(materialspecXName), new NamedContentModelEntity(noteXName), new NamedContentModelEntity(originationXName), new NamedContentModelEntity(physdescXName), new NamedContentModelEntity(physlocXName), new NamedContentModelEntity(repositoryXName), new NamedContentModelEntity(unitdateXName), new NamedContentModelEntity(unitidXName), new NamedContentModelEntity(unittitleXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (@abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)+)
        /// </para>
        /// </summary>
        public did() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (@abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (@abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)+)
        /// </para>
        /// </summary>
        public virtual IList<@abstract> @abstract {
            get {
                if ((this.@abstractField == null)) {
                    this.@abstractField = new XTypedList<@abstract>(this, LinqToXsdTypeManager.Instance, @abstractXName);
                }
                return this.@abstractField;
            }
            set {
                if ((value == null)) {
                    this.@abstractField = null;
                }
                else {
                    if ((this.@abstractField == null)) {
                        this.@abstractField = XTypedList<@abstract>.Initialize(this, LinqToXsdTypeManager.Instance, value, @abstractXName);
                    }
                    else {
                        XTypedServices.SetList<@abstract>(this.@abstractField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (@abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)+)
        /// </para>
        /// </summary>
        public virtual IList<container> container {
            get {
                if ((this.containerField == null)) {
                    this.containerField = new XTypedList<container>(this, LinqToXsdTypeManager.Instance, containerXName);
                }
                return this.containerField;
            }
            set {
                if ((value == null)) {
                    this.containerField = null;
                }
                else {
                    if ((this.containerField == null)) {
                        this.containerField = XTypedList<container>.Initialize(this, LinqToXsdTypeManager.Instance, value, containerXName);
                    }
                    else {
                        XTypedServices.SetList<container>(this.containerField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (@abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)+)
        /// </para>
        /// </summary>
        public virtual IList<dao> dao {
            get {
                if ((this.daoField == null)) {
                    this.daoField = new XTypedList<dao>(this, LinqToXsdTypeManager.Instance, daoXName);
                }
                return this.daoField;
            }
            set {
                if ((value == null)) {
                    this.daoField = null;
                }
                else {
                    if ((this.daoField == null)) {
                        this.daoField = XTypedList<dao>.Initialize(this, LinqToXsdTypeManager.Instance, value, daoXName);
                    }
                    else {
                        XTypedServices.SetList<dao>(this.daoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (@abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)+)
        /// </para>
        /// </summary>
        public virtual IList<daogrp> daogrp {
            get {
                if ((this.daogrpField == null)) {
                    this.daogrpField = new XTypedList<daogrp>(this, LinqToXsdTypeManager.Instance, daogrpXName);
                }
                return this.daogrpField;
            }
            set {
                if ((value == null)) {
                    this.daogrpField = null;
                }
                else {
                    if ((this.daogrpField == null)) {
                        this.daogrpField = XTypedList<daogrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, daogrpXName);
                    }
                    else {
                        XTypedServices.SetList<daogrp>(this.daogrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (@abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)+)
        /// </para>
        /// </summary>
        public virtual IList<langmaterial> langmaterial {
            get {
                if ((this.langmaterialField == null)) {
                    this.langmaterialField = new XTypedList<langmaterial>(this, LinqToXsdTypeManager.Instance, langmaterialXName);
                }
                return this.langmaterialField;
            }
            set {
                if ((value == null)) {
                    this.langmaterialField = null;
                }
                else {
                    if ((this.langmaterialField == null)) {
                        this.langmaterialField = XTypedList<langmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, langmaterialXName);
                    }
                    else {
                        XTypedServices.SetList<langmaterial>(this.langmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (@abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)+)
        /// </para>
        /// </summary>
        public virtual IList<materialspec> materialspec {
            get {
                if ((this.materialspecField == null)) {
                    this.materialspecField = new XTypedList<materialspec>(this, LinqToXsdTypeManager.Instance, materialspecXName);
                }
                return this.materialspecField;
            }
            set {
                if ((value == null)) {
                    this.materialspecField = null;
                }
                else {
                    if ((this.materialspecField == null)) {
                        this.materialspecField = XTypedList<materialspec>.Initialize(this, LinqToXsdTypeManager.Instance, value, materialspecXName);
                    }
                    else {
                        XTypedServices.SetList<materialspec>(this.materialspecField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (@abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (@abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)+)
        /// </para>
        /// </summary>
        public virtual IList<origination> origination {
            get {
                if ((this.originationField == null)) {
                    this.originationField = new XTypedList<origination>(this, LinqToXsdTypeManager.Instance, originationXName);
                }
                return this.originationField;
            }
            set {
                if ((value == null)) {
                    this.originationField = null;
                }
                else {
                    if ((this.originationField == null)) {
                        this.originationField = XTypedList<origination>.Initialize(this, LinqToXsdTypeManager.Instance, value, originationXName);
                    }
                    else {
                        XTypedServices.SetList<origination>(this.originationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (@abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)+)
        /// </para>
        /// </summary>
        public virtual IList<physdesc> physdesc {
            get {
                if ((this.physdescField == null)) {
                    this.physdescField = new XTypedList<physdesc>(this, LinqToXsdTypeManager.Instance, physdescXName);
                }
                return this.physdescField;
            }
            set {
                if ((value == null)) {
                    this.physdescField = null;
                }
                else {
                    if ((this.physdescField == null)) {
                        this.physdescField = XTypedList<physdesc>.Initialize(this, LinqToXsdTypeManager.Instance, value, physdescXName);
                    }
                    else {
                        XTypedServices.SetList<physdesc>(this.physdescField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (@abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)+)
        /// </para>
        /// </summary>
        public virtual IList<physloc> physloc {
            get {
                if ((this.physlocField == null)) {
                    this.physlocField = new XTypedList<physloc>(this, LinqToXsdTypeManager.Instance, physlocXName);
                }
                return this.physlocField;
            }
            set {
                if ((value == null)) {
                    this.physlocField = null;
                }
                else {
                    if ((this.physlocField == null)) {
                        this.physlocField = XTypedList<physloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, physlocXName);
                    }
                    else {
                        XTypedServices.SetList<physloc>(this.physlocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (@abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)+)
        /// </para>
        /// </summary>
        public virtual IList<repository> repository {
            get {
                if ((this.repositoryField == null)) {
                    this.repositoryField = new XTypedList<repository>(this, LinqToXsdTypeManager.Instance, repositoryXName);
                }
                return this.repositoryField;
            }
            set {
                if ((value == null)) {
                    this.repositoryField = null;
                }
                else {
                    if ((this.repositoryField == null)) {
                        this.repositoryField = XTypedList<repository>.Initialize(this, LinqToXsdTypeManager.Instance, value, repositoryXName);
                    }
                    else {
                        XTypedServices.SetList<repository>(this.repositoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (@abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)+)
        /// </para>
        /// </summary>
        public virtual IList<unitdate> unitdate {
            get {
                if ((this.unitdateField == null)) {
                    this.unitdateField = new XTypedList<unitdate>(this, LinqToXsdTypeManager.Instance, unitdateXName);
                }
                return this.unitdateField;
            }
            set {
                if ((value == null)) {
                    this.unitdateField = null;
                }
                else {
                    if ((this.unitdateField == null)) {
                        this.unitdateField = XTypedList<unitdate>.Initialize(this, LinqToXsdTypeManager.Instance, value, unitdateXName);
                    }
                    else {
                        XTypedServices.SetList<unitdate>(this.unitdateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (@abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)+)
        /// </para>
        /// </summary>
        public virtual IList<unitid> unitid {
            get {
                if ((this.unitidField == null)) {
                    this.unitidField = new XTypedList<unitid>(this, LinqToXsdTypeManager.Instance, unitidXName);
                }
                return this.unitidField;
            }
            set {
                if ((value == null)) {
                    this.unitidField = null;
                }
                else {
                    if ((this.unitidField == null)) {
                        this.unitidField = XTypedList<unitid>.Initialize(this, LinqToXsdTypeManager.Instance, value, unitidXName);
                    }
                    else {
                        XTypedServices.SetList<unitid>(this.unitidField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (@abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)+)
        /// </para>
        /// </summary>
        public virtual IList<unittitle> unittitle {
            get {
                if ((this.unittitleField == null)) {
                    this.unittitleField = new XTypedList<unittitle>(this, LinqToXsdTypeManager.Instance, unittitleXName);
                }
                return this.unittitleField;
            }
            set {
                if ((value == null)) {
                    this.unittitleField = null;
                }
                else {
                    if ((this.unittitleField == null)) {
                        this.unittitleField = XTypedList<unittitle>.Initialize(this, LinqToXsdTypeManager.Instance, value, unittitleXName);
                    }
                    else {
                        XTypedServices.SetList<unittitle>(this.unittitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<did>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(@abstractXName, typeof(@abstract));
            localElementDictionary.Add(containerXName, typeof(container));
            localElementDictionary.Add(daoXName, typeof(dao));
            localElementDictionary.Add(daogrpXName, typeof(daogrp));
            localElementDictionary.Add(langmaterialXName, typeof(langmaterial));
            localElementDictionary.Add(materialspecXName, typeof(materialspec));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(originationXName, typeof(origination));
            localElementDictionary.Add(physdescXName, typeof(physdesc));
            localElementDictionary.Add(physlocXName, typeof(physloc));
            localElementDictionary.Add(repositoryXName, typeof(repository));
            localElementDictionary.Add(unitdateXName, typeof(unitdate));
            localElementDictionary.Add(unitidXName, typeof(unitid));
            localElementDictionary.Add(unittitleXName, typeof(unittitle));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions1)*
    /// </para>
    /// </summary>
    public partial class dimensions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName abbrXName = System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName expanXName = System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @refXName = System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extrefXName = System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName linkgrpXName = System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibrefXName = System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName archrefXName = System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dimensions1XName = System.Xml.Linq.XName.Get("dimensions", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dimensions> dimensions1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName labelXName = System.Xml.Linq.XName.Get("label", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unitXName = System.Xml.Linq.XName.Get("unit", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("dimensions", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator dimensions(XElement xe) { return XTypedServices.ToXTypedElement<dimensions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static dimensions() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName), new NamedContentModelEntity(abbrXName), new NamedContentModelEntity(expanXName), new NamedContentModelEntity(@refXName), new NamedContentModelEntity(extrefXName), new NamedContentModelEntity(linkgrpXName), new NamedContentModelEntity(bibrefXName), new NamedContentModelEntity(titleXName), new NamedContentModelEntity(archrefXName), new NamedContentModelEntity(dimensions1XName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions1)*
        /// </para>
        /// </summary>
        public dimensions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions1)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions1)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions1)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions1)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions1)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, abbrXName);
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, abbrXName);
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions1)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, expanXName);
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, expanXName);
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions1)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, @refXName);
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, @refXName);
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions1)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, extrefXName);
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, extrefXName);
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions1)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, linkgrpXName);
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, linkgrpXName);
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions1)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, bibrefXName);
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibrefXName);
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions1)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, titleXName);
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, titleXName);
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions1)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, archrefXName);
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, archrefXName);
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | dimensions1)*
        /// </para>
        /// </summary>
        public virtual IList<dimensions> dimensions1 {
            get {
                if ((this.dimensions1Field == null)) {
                    this.dimensions1Field = new XTypedList<dimensions>(this, LinqToXsdTypeManager.Instance, dimensions1XName);
                }
                return this.dimensions1Field;
            }
            set {
                if ((value == null)) {
                    this.dimensions1Field = null;
                }
                else {
                    if ((this.dimensions1Field == null)) {
                        this.dimensions1Field = XTypedList<dimensions>.Initialize(this, LinqToXsdTypeManager.Instance, value, dimensions1XName);
                    }
                    else {
                        XTypedServices.SetList<dimensions>(this.dimensions1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(labelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(labelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string unit {
            get {
                XAttribute x = this.Attribute(unitXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(unitXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<dimensions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
            localElementDictionary.Add(abbrXName, typeof(abbr));
            localElementDictionary.Add(expanXName, typeof(expan));
            localElementDictionary.Add(@refXName, typeof(@ref));
            localElementDictionary.Add(extrefXName, typeof(extref));
            localElementDictionary.Add(linkgrpXName, typeof(linkgrp));
            localElementDictionary.Add(bibrefXName, typeof(bibref));
            localElementDictionary.Add(titleXName, typeof(title));
            localElementDictionary.Add(archrefXName, typeof(archref));
            localElementDictionary.Add(dimensions1XName, typeof(dimensions));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | name | persname)*
    /// </para>
    /// </summary>
    public partial class origination : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName abbrXName = System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName expanXName = System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @refXName = System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extrefXName = System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName linkgrpXName = System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibrefXName = System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName archrefXName = System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName corpnameXName = System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<corpname> corpnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName famnameXName = System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<famname> famnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<name> nameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName persnameXName = System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<persname> persnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName labelXName = System.Xml.Linq.XName.Get("label", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator origination(XElement xe) { return XTypedServices.ToXTypedElement<origination>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static origination() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName), new NamedContentModelEntity(abbrXName), new NamedContentModelEntity(expanXName), new NamedContentModelEntity(@refXName), new NamedContentModelEntity(extrefXName), new NamedContentModelEntity(linkgrpXName), new NamedContentModelEntity(bibrefXName), new NamedContentModelEntity(titleXName), new NamedContentModelEntity(archrefXName), new NamedContentModelEntity(corpnameXName), new NamedContentModelEntity(famnameXName), new NamedContentModelEntity(nameXName), new NamedContentModelEntity(persnameXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | name | persname)*
        /// </para>
        /// </summary>
        public origination() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | name | persname)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | name | persname)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | name | persname)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | name | persname)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | name | persname)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, abbrXName);
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, abbrXName);
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | name | persname)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, expanXName);
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, expanXName);
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | name | persname)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, @refXName);
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, @refXName);
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | name | persname)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, extrefXName);
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, extrefXName);
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | name | persname)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, linkgrpXName);
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, linkgrpXName);
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | name | persname)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, bibrefXName);
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibrefXName);
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | name | persname)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, titleXName);
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, titleXName);
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | name | persname)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, archrefXName);
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, archrefXName);
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | name | persname)*
        /// </para>
        /// </summary>
        public virtual IList<corpname> corpname {
            get {
                if ((this.corpnameField == null)) {
                    this.corpnameField = new XTypedList<corpname>(this, LinqToXsdTypeManager.Instance, corpnameXName);
                }
                return this.corpnameField;
            }
            set {
                if ((value == null)) {
                    this.corpnameField = null;
                }
                else {
                    if ((this.corpnameField == null)) {
                        this.corpnameField = XTypedList<corpname>.Initialize(this, LinqToXsdTypeManager.Instance, value, corpnameXName);
                    }
                    else {
                        XTypedServices.SetList<corpname>(this.corpnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | name | persname)*
        /// </para>
        /// </summary>
        public virtual IList<famname> famname {
            get {
                if ((this.famnameField == null)) {
                    this.famnameField = new XTypedList<famname>(this, LinqToXsdTypeManager.Instance, famnameXName);
                }
                return this.famnameField;
            }
            set {
                if ((value == null)) {
                    this.famnameField = null;
                }
                else {
                    if ((this.famnameField == null)) {
                        this.famnameField = XTypedList<famname>.Initialize(this, LinqToXsdTypeManager.Instance, value, famnameXName);
                    }
                    else {
                        XTypedServices.SetList<famname>(this.famnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | name | persname)*
        /// </para>
        /// </summary>
        public virtual IList<name> name {
            get {
                if ((this.nameField == null)) {
                    this.nameField = new XTypedList<name>(this, LinqToXsdTypeManager.Instance, nameXName);
                }
                return this.nameField;
            }
            set {
                if ((value == null)) {
                    this.nameField = null;
                }
                else {
                    if ((this.nameField == null)) {
                        this.nameField = XTypedList<name>.Initialize(this, LinqToXsdTypeManager.Instance, value, nameXName);
                    }
                    else {
                        XTypedServices.SetList<name>(this.nameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | name | persname)*
        /// </para>
        /// </summary>
        public virtual IList<persname> persname {
            get {
                if ((this.persnameField == null)) {
                    this.persnameField = new XTypedList<persname>(this, LinqToXsdTypeManager.Instance, persnameXName);
                }
                return this.persnameField;
            }
            set {
                if ((value == null)) {
                    this.persnameField = null;
                }
                else {
                    if ((this.persnameField == null)) {
                        this.persnameField = XTypedList<persname>.Initialize(this, LinqToXsdTypeManager.Instance, value, persnameXName);
                    }
                    else {
                        XTypedServices.SetList<persname>(this.persnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(labelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(labelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<origination>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
            localElementDictionary.Add(abbrXName, typeof(abbr));
            localElementDictionary.Add(expanXName, typeof(expan));
            localElementDictionary.Add(@refXName, typeof(@ref));
            localElementDictionary.Add(extrefXName, typeof(extref));
            localElementDictionary.Add(linkgrpXName, typeof(linkgrp));
            localElementDictionary.Add(bibrefXName, typeof(bibref));
            localElementDictionary.Add(titleXName, typeof(title));
            localElementDictionary.Add(archrefXName, typeof(archref));
            localElementDictionary.Add(corpnameXName, typeof(corpname));
            localElementDictionary.Add(famnameXName, typeof(famname));
            localElementDictionary.Add(nameXName, typeof(name));
            localElementDictionary.Add(persnameXName, typeof(persname));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | address | corpname | name | subarea)*
    /// </para>
    /// </summary>
    public partial class repository : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName abbrXName = System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName expanXName = System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @refXName = System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extrefXName = System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName linkgrpXName = System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibrefXName = System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName archrefXName = System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName addressXName = System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName corpnameXName = System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<corpname> corpnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<name> nameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName subareaXName = System.Xml.Linq.XName.Get("subarea", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<subarea> subareaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName labelXName = System.Xml.Linq.XName.Get("label", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator repository(XElement xe) { return XTypedServices.ToXTypedElement<repository>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static repository() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName), new NamedContentModelEntity(abbrXName), new NamedContentModelEntity(expanXName), new NamedContentModelEntity(@refXName), new NamedContentModelEntity(extrefXName), new NamedContentModelEntity(linkgrpXName), new NamedContentModelEntity(bibrefXName), new NamedContentModelEntity(titleXName), new NamedContentModelEntity(archrefXName), new NamedContentModelEntity(addressXName), new NamedContentModelEntity(corpnameXName), new NamedContentModelEntity(nameXName), new NamedContentModelEntity(subareaXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | address | corpname | name | subarea)*
        /// </para>
        /// </summary>
        public repository() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | address | corpname | name | subarea)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | address | corpname | name | subarea)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | address | corpname | name | subarea)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | address | corpname | name | subarea)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | address | corpname | name | subarea)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, abbrXName);
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, abbrXName);
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | address | corpname | name | subarea)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, expanXName);
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, expanXName);
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | address | corpname | name | subarea)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, @refXName);
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, @refXName);
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | address | corpname | name | subarea)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, extrefXName);
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, extrefXName);
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | address | corpname | name | subarea)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, linkgrpXName);
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, linkgrpXName);
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | address | corpname | name | subarea)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, bibrefXName);
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibrefXName);
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | address | corpname | name | subarea)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, titleXName);
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, titleXName);
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | address | corpname | name | subarea)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, archrefXName);
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, archrefXName);
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | address | corpname | name | subarea)*
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, addressXName);
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, addressXName);
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | address | corpname | name | subarea)*
        /// </para>
        /// </summary>
        public virtual IList<corpname> corpname {
            get {
                if ((this.corpnameField == null)) {
                    this.corpnameField = new XTypedList<corpname>(this, LinqToXsdTypeManager.Instance, corpnameXName);
                }
                return this.corpnameField;
            }
            set {
                if ((value == null)) {
                    this.corpnameField = null;
                }
                else {
                    if ((this.corpnameField == null)) {
                        this.corpnameField = XTypedList<corpname>.Initialize(this, LinqToXsdTypeManager.Instance, value, corpnameXName);
                    }
                    else {
                        XTypedServices.SetList<corpname>(this.corpnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | address | corpname | name | subarea)*
        /// </para>
        /// </summary>
        public virtual IList<name> name {
            get {
                if ((this.nameField == null)) {
                    this.nameField = new XTypedList<name>(this, LinqToXsdTypeManager.Instance, nameXName);
                }
                return this.nameField;
            }
            set {
                if ((value == null)) {
                    this.nameField = null;
                }
                else {
                    if ((this.nameField == null)) {
                        this.nameField = XTypedList<name>.Initialize(this, LinqToXsdTypeManager.Instance, value, nameXName);
                    }
                    else {
                        XTypedServices.SetList<name>(this.nameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | address | corpname | name | subarea)*
        /// </para>
        /// </summary>
        public virtual IList<subarea> subarea {
            get {
                if ((this.subareaField == null)) {
                    this.subareaField = new XTypedList<subarea>(this, LinqToXsdTypeManager.Instance, subareaXName);
                }
                return this.subareaField;
            }
            set {
                if ((value == null)) {
                    this.subareaField = null;
                }
                else {
                    if ((this.subareaField == null)) {
                        this.subareaField = XTypedList<subarea>.Initialize(this, LinqToXsdTypeManager.Instance, value, subareaXName);
                    }
                    else {
                        XTypedServices.SetList<subarea>(this.subareaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(labelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(labelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<repository>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
            localElementDictionary.Add(abbrXName, typeof(abbr));
            localElementDictionary.Add(expanXName, typeof(expan));
            localElementDictionary.Add(@refXName, typeof(@ref));
            localElementDictionary.Add(extrefXName, typeof(extref));
            localElementDictionary.Add(linkgrpXName, typeof(linkgrp));
            localElementDictionary.Add(bibrefXName, typeof(bibref));
            localElementDictionary.Add(titleXName, typeof(title));
            localElementDictionary.Add(archrefXName, typeof(archref));
            localElementDictionary.Add(addressXName, typeof(address));
            localElementDictionary.Add(corpnameXName, typeof(corpname));
            localElementDictionary.Add(nameXName, typeof(name));
            localElementDictionary.Add(subareaXName, typeof(subarea));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb)*
    /// </para>
    /// </summary>
    public partial class subarea : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("subarea", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator subarea(XElement xe) { return XTypedServices.ToXTypedElement<subarea>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static subarea() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public subarea() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<subarea>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
    /// </para>
    /// </summary>
    public partial class unitdate : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName abbrXName = System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName expanXName = System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @refXName = System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extrefXName = System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName linkgrpXName = System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibrefXName = System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName archrefXName = System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName labelXName = System.Xml.Linq.XName.Get("label", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName datecharXName = System.Xml.Linq.XName.Get("datechar", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName eraXName = System.Xml.Linq.XName.Get("era", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string eraDefaultValue = "ce";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName calendarXName = System.Xml.Linq.XName.Get("calendar", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string calendarDefaultValue = "gregorian";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName normalXName = System.Xml.Linq.XName.Get("normal", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName certaintyXName = System.Xml.Linq.XName.Get("certainty", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator unitdate(XElement xe) { return XTypedServices.ToXTypedElement<unitdate>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static unitdate() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName), new NamedContentModelEntity(abbrXName), new NamedContentModelEntity(expanXName), new NamedContentModelEntity(@refXName), new NamedContentModelEntity(extrefXName), new NamedContentModelEntity(linkgrpXName), new NamedContentModelEntity(bibrefXName), new NamedContentModelEntity(titleXName), new NamedContentModelEntity(archrefXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public unitdate() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, abbrXName);
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, abbrXName);
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, expanXName);
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, expanXName);
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, @refXName);
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, @refXName);
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, extrefXName);
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, extrefXName);
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, linkgrpXName);
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, linkgrpXName);
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, bibrefXName);
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibrefXName);
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, titleXName);
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, titleXName);
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, archrefXName);
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, archrefXName);
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(labelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(labelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LibraryOfCongress.EAD.unitdate.TypeEnum? type {
            get {
                XAttribute x = this.Attribute(typeXName);
                if ((x == null)) {
                    return null;
                }
                return ((LibraryOfCongress.EAD.unitdate.TypeEnum)(Enum.Parse(typeof(LibraryOfCongress.EAD.unitdate.TypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(typeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string datechar {
            get {
                XAttribute x = this.Attribute(datecharXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(datecharXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string era {
            get {
                XAttribute x = this.Attribute(eraXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, eraDefaultValue);
            }
            set {
                this.SetAttribute(eraXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string calendar {
            get {
                XAttribute x = this.Attribute(calendarXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, calendarDefaultValue);
            }
            set {
                this.SetAttribute(calendarXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string normal {
            get {
                XAttribute x = this.Attribute(normalXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(normalXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string certainty {
            get {
                XAttribute x = this.Attribute(certaintyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(certaintyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<unitdate>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
            localElementDictionary.Add(abbrXName, typeof(abbr));
            localElementDictionary.Add(expanXName, typeof(expan));
            localElementDictionary.Add(@refXName, typeof(@ref));
            localElementDictionary.Add(extrefXName, typeof(extref));
            localElementDictionary.Add(linkgrpXName, typeof(linkgrp));
            localElementDictionary.Add(bibrefXName, typeof(bibref));
            localElementDictionary.Add(titleXName, typeof(title));
            localElementDictionary.Add(archrefXName, typeof(archref));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum TypeEnum {
            
            bulk,
            
            inclusive,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
    /// </para>
    /// </summary>
    public partial class unittitle : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName abbrXName = System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName expanXName = System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @refXName = System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extrefXName = System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName linkgrpXName = System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibrefXName = System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName archrefXName = System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName corpnameXName = System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<corpname> corpnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName famnameXName = System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<famname> famnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geognameXName = System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<geogname> geognameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<name> nameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName occupationXName = System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<occupation> occupationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName persnameXName = System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<persname> persnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName subjectXName = System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<subject> subjectField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName genreformXName = System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<genreform> genreformField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName functionXName = System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<function> functionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unitdateXName = System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unitdate> unitdateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName numXName = System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<num> numField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dateXName = System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<date> dateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibseriesXName = System.Xml.Linq.XName.Get("bibseries", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibseries> bibseriesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName editionXName = System.Xml.Linq.XName.Get("edition", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<edition> editionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName imprintXName = System.Xml.Linq.XName.Get("imprint", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<imprint> imprintField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName labelXName = System.Xml.Linq.XName.Get("label", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator unittitle(XElement xe) { return XTypedServices.ToXTypedElement<unittitle>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static unittitle() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName), new NamedContentModelEntity(abbrXName), new NamedContentModelEntity(expanXName), new NamedContentModelEntity(@refXName), new NamedContentModelEntity(extrefXName), new NamedContentModelEntity(linkgrpXName), new NamedContentModelEntity(bibrefXName), new NamedContentModelEntity(titleXName), new NamedContentModelEntity(archrefXName), new NamedContentModelEntity(corpnameXName), new NamedContentModelEntity(famnameXName), new NamedContentModelEntity(geognameXName), new NamedContentModelEntity(nameXName), new NamedContentModelEntity(occupationXName), new NamedContentModelEntity(persnameXName), new NamedContentModelEntity(subjectXName), new NamedContentModelEntity(genreformXName), new NamedContentModelEntity(functionXName), new NamedContentModelEntity(unitdateXName), new NamedContentModelEntity(numXName), new NamedContentModelEntity(dateXName), new NamedContentModelEntity(bibseriesXName), new NamedContentModelEntity(editionXName), new NamedContentModelEntity(imprintXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public unittitle() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, abbrXName);
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, abbrXName);
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, expanXName);
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, expanXName);
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, @refXName);
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, @refXName);
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, extrefXName);
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, extrefXName);
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, linkgrpXName);
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, linkgrpXName);
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, bibrefXName);
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibrefXName);
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, titleXName);
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, titleXName);
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, archrefXName);
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, archrefXName);
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<corpname> corpname {
            get {
                if ((this.corpnameField == null)) {
                    this.corpnameField = new XTypedList<corpname>(this, LinqToXsdTypeManager.Instance, corpnameXName);
                }
                return this.corpnameField;
            }
            set {
                if ((value == null)) {
                    this.corpnameField = null;
                }
                else {
                    if ((this.corpnameField == null)) {
                        this.corpnameField = XTypedList<corpname>.Initialize(this, LinqToXsdTypeManager.Instance, value, corpnameXName);
                    }
                    else {
                        XTypedServices.SetList<corpname>(this.corpnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<famname> famname {
            get {
                if ((this.famnameField == null)) {
                    this.famnameField = new XTypedList<famname>(this, LinqToXsdTypeManager.Instance, famnameXName);
                }
                return this.famnameField;
            }
            set {
                if ((value == null)) {
                    this.famnameField = null;
                }
                else {
                    if ((this.famnameField == null)) {
                        this.famnameField = XTypedList<famname>.Initialize(this, LinqToXsdTypeManager.Instance, value, famnameXName);
                    }
                    else {
                        XTypedServices.SetList<famname>(this.famnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<geogname> geogname {
            get {
                if ((this.geognameField == null)) {
                    this.geognameField = new XTypedList<geogname>(this, LinqToXsdTypeManager.Instance, geognameXName);
                }
                return this.geognameField;
            }
            set {
                if ((value == null)) {
                    this.geognameField = null;
                }
                else {
                    if ((this.geognameField == null)) {
                        this.geognameField = XTypedList<geogname>.Initialize(this, LinqToXsdTypeManager.Instance, value, geognameXName);
                    }
                    else {
                        XTypedServices.SetList<geogname>(this.geognameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<name> name {
            get {
                if ((this.nameField == null)) {
                    this.nameField = new XTypedList<name>(this, LinqToXsdTypeManager.Instance, nameXName);
                }
                return this.nameField;
            }
            set {
                if ((value == null)) {
                    this.nameField = null;
                }
                else {
                    if ((this.nameField == null)) {
                        this.nameField = XTypedList<name>.Initialize(this, LinqToXsdTypeManager.Instance, value, nameXName);
                    }
                    else {
                        XTypedServices.SetList<name>(this.nameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<occupation> occupation {
            get {
                if ((this.occupationField == null)) {
                    this.occupationField = new XTypedList<occupation>(this, LinqToXsdTypeManager.Instance, occupationXName);
                }
                return this.occupationField;
            }
            set {
                if ((value == null)) {
                    this.occupationField = null;
                }
                else {
                    if ((this.occupationField == null)) {
                        this.occupationField = XTypedList<occupation>.Initialize(this, LinqToXsdTypeManager.Instance, value, occupationXName);
                    }
                    else {
                        XTypedServices.SetList<occupation>(this.occupationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<persname> persname {
            get {
                if ((this.persnameField == null)) {
                    this.persnameField = new XTypedList<persname>(this, LinqToXsdTypeManager.Instance, persnameXName);
                }
                return this.persnameField;
            }
            set {
                if ((value == null)) {
                    this.persnameField = null;
                }
                else {
                    if ((this.persnameField == null)) {
                        this.persnameField = XTypedList<persname>.Initialize(this, LinqToXsdTypeManager.Instance, value, persnameXName);
                    }
                    else {
                        XTypedServices.SetList<persname>(this.persnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<subject> subject {
            get {
                if ((this.subjectField == null)) {
                    this.subjectField = new XTypedList<subject>(this, LinqToXsdTypeManager.Instance, subjectXName);
                }
                return this.subjectField;
            }
            set {
                if ((value == null)) {
                    this.subjectField = null;
                }
                else {
                    if ((this.subjectField == null)) {
                        this.subjectField = XTypedList<subject>.Initialize(this, LinqToXsdTypeManager.Instance, value, subjectXName);
                    }
                    else {
                        XTypedServices.SetList<subject>(this.subjectField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<genreform> genreform {
            get {
                if ((this.genreformField == null)) {
                    this.genreformField = new XTypedList<genreform>(this, LinqToXsdTypeManager.Instance, genreformXName);
                }
                return this.genreformField;
            }
            set {
                if ((value == null)) {
                    this.genreformField = null;
                }
                else {
                    if ((this.genreformField == null)) {
                        this.genreformField = XTypedList<genreform>.Initialize(this, LinqToXsdTypeManager.Instance, value, genreformXName);
                    }
                    else {
                        XTypedServices.SetList<genreform>(this.genreformField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<function> function {
            get {
                if ((this.functionField == null)) {
                    this.functionField = new XTypedList<function>(this, LinqToXsdTypeManager.Instance, functionXName);
                }
                return this.functionField;
            }
            set {
                if ((value == null)) {
                    this.functionField = null;
                }
                else {
                    if ((this.functionField == null)) {
                        this.functionField = XTypedList<function>.Initialize(this, LinqToXsdTypeManager.Instance, value, functionXName);
                    }
                    else {
                        XTypedServices.SetList<function>(this.functionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<unitdate> unitdate {
            get {
                if ((this.unitdateField == null)) {
                    this.unitdateField = new XTypedList<unitdate>(this, LinqToXsdTypeManager.Instance, unitdateXName);
                }
                return this.unitdateField;
            }
            set {
                if ((value == null)) {
                    this.unitdateField = null;
                }
                else {
                    if ((this.unitdateField == null)) {
                        this.unitdateField = XTypedList<unitdate>.Initialize(this, LinqToXsdTypeManager.Instance, value, unitdateXName);
                    }
                    else {
                        XTypedServices.SetList<unitdate>(this.unitdateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<num> num {
            get {
                if ((this.numField == null)) {
                    this.numField = new XTypedList<num>(this, LinqToXsdTypeManager.Instance, numXName);
                }
                return this.numField;
            }
            set {
                if ((value == null)) {
                    this.numField = null;
                }
                else {
                    if ((this.numField == null)) {
                        this.numField = XTypedList<num>.Initialize(this, LinqToXsdTypeManager.Instance, value, numXName);
                    }
                    else {
                        XTypedServices.SetList<num>(this.numField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<date> date {
            get {
                if ((this.dateField == null)) {
                    this.dateField = new XTypedList<date>(this, LinqToXsdTypeManager.Instance, dateXName);
                }
                return this.dateField;
            }
            set {
                if ((value == null)) {
                    this.dateField = null;
                }
                else {
                    if ((this.dateField == null)) {
                        this.dateField = XTypedList<date>.Initialize(this, LinqToXsdTypeManager.Instance, value, dateXName);
                    }
                    else {
                        XTypedServices.SetList<date>(this.dateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<bibseries> bibseries {
            get {
                if ((this.bibseriesField == null)) {
                    this.bibseriesField = new XTypedList<bibseries>(this, LinqToXsdTypeManager.Instance, bibseriesXName);
                }
                return this.bibseriesField;
            }
            set {
                if ((value == null)) {
                    this.bibseriesField = null;
                }
                else {
                    if ((this.bibseriesField == null)) {
                        this.bibseriesField = XTypedList<bibseries>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibseriesXName);
                    }
                    else {
                        XTypedServices.SetList<bibseries>(this.bibseriesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<edition> edition {
            get {
                if ((this.editionField == null)) {
                    this.editionField = new XTypedList<edition>(this, LinqToXsdTypeManager.Instance, editionXName);
                }
                return this.editionField;
            }
            set {
                if ((value == null)) {
                    this.editionField = null;
                }
                else {
                    if ((this.editionField == null)) {
                        this.editionField = XTypedList<edition>.Initialize(this, LinqToXsdTypeManager.Instance, value, editionXName);
                    }
                    else {
                        XTypedServices.SetList<edition>(this.editionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | unitdate | num | date | bibseries | edition | imprint)*
        /// </para>
        /// </summary>
        public virtual IList<imprint> imprint {
            get {
                if ((this.imprintField == null)) {
                    this.imprintField = new XTypedList<imprint>(this, LinqToXsdTypeManager.Instance, imprintXName);
                }
                return this.imprintField;
            }
            set {
                if ((value == null)) {
                    this.imprintField = null;
                }
                else {
                    if ((this.imprintField == null)) {
                        this.imprintField = XTypedList<imprint>.Initialize(this, LinqToXsdTypeManager.Instance, value, imprintXName);
                    }
                    else {
                        XTypedServices.SetList<imprint>(this.imprintField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(labelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(labelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<unittitle>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
            localElementDictionary.Add(abbrXName, typeof(abbr));
            localElementDictionary.Add(expanXName, typeof(expan));
            localElementDictionary.Add(@refXName, typeof(@ref));
            localElementDictionary.Add(extrefXName, typeof(extref));
            localElementDictionary.Add(linkgrpXName, typeof(linkgrp));
            localElementDictionary.Add(bibrefXName, typeof(bibref));
            localElementDictionary.Add(titleXName, typeof(title));
            localElementDictionary.Add(archrefXName, typeof(archref));
            localElementDictionary.Add(corpnameXName, typeof(corpname));
            localElementDictionary.Add(famnameXName, typeof(famname));
            localElementDictionary.Add(geognameXName, typeof(geogname));
            localElementDictionary.Add(nameXName, typeof(name));
            localElementDictionary.Add(occupationXName, typeof(occupation));
            localElementDictionary.Add(persnameXName, typeof(persname));
            localElementDictionary.Add(subjectXName, typeof(subject));
            localElementDictionary.Add(genreformXName, typeof(genreform));
            localElementDictionary.Add(functionXName, typeof(function));
            localElementDictionary.Add(unitdateXName, typeof(unitdate));
            localElementDictionary.Add(numXName, typeof(num));
            localElementDictionary.Add(dateXName, typeof(date));
            localElementDictionary.Add(bibseriesXName, typeof(bibseries));
            localElementDictionary.Add(editionXName, typeof(edition));
            localElementDictionary.Add(imprintXName, typeof(imprint));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb)*
    /// </para>
    /// </summary>
    public partial class language : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName langcodeXName = System.Xml.Linq.XName.Get("langcode", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName scriptcodeXName = System.Xml.Linq.XName.Get("scriptcode", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("language", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator language(XElement xe) { return XTypedServices.ToXTypedElement<language>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static language() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public language() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string langcode {
            get {
                XAttribute x = this.Attribute(langcodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(langcodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LibraryOfCongress.EAD.language.ScriptcodeEnum? scriptcode {
            get {
                XAttribute x = this.Attribute(scriptcodeXName);
                if ((x == null)) {
                    return null;
                }
                return ((LibraryOfCongress.EAD.language.ScriptcodeEnum)(Enum.Parse(typeof(LibraryOfCongress.EAD.language.ScriptcodeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(scriptcodeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<language>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum ScriptcodeEnum {
            
            Arab,
            
            Armn,
            
            Bali,
            
            Batk,
            
            Beng,
            
            Blis,
            
            Bopo,
            
            Brah,
            
            Brai,
            
            Bugi,
            
            Buhd,
            
            Cans,
            
            Cham,
            
            Cher,
            
            Cirt,
            
            Copt,
            
            Cprt,
            
            Cyrl,
            
            Cyrs,
            
            Deva,
            
            Dsrt,
            
            Egyd,
            
            Egyh,
            
            Egyp,
            
            Ethi,
            
            Geok,
            
            Geor,
            
            Glag,
            
            Goth,
            
            Grek,
            
            Gujr,
            
            Guru,
            
            Hang,
            
            Hani,
            
            Hano,
            
            Hans,
            
            Hant,
            
            Hebr,
            
            Hira,
            
            Hmng,
            
            Hrkt,
            
            Hung,
            
            Inds,
            
            Ital,
            
            Java,
            
            Kali,
            
            Kana,
            
            Khar,
            
            Khmr,
            
            Knda,
            
            Laoo,
            
            Latf,
            
            Latg,
            
            Latn,
            
            Lepc,
            
            Limb,
            
            Lina,
            
            Linb,
            
            Mand,
            
            Maya,
            
            Mero,
            
            Mlym,
            
            Mong,
            
            Mymr,
            
            Nkoo,
            
            Ogam,
            
            Orkh,
            
            Orya,
            
            Osma,
            
            Perm,
            
            Phag,
            
            Phnx,
            
            Plrd,
            
            Qaaa,
            
            Qabx,
            
            Roro,
            
            Runr,
            
            Sara,
            
            Shaw,
            
            Sinh,
            
            Sylo,
            
            Syrc,
            
            Syre,
            
            Syrj,
            
            Syrn,
            
            Tagb,
            
            Tale,
            
            Talu,
            
            Taml,
            
            Telu,
            
            Teng,
            
            Tfng,
            
            Tglg,
            
            Thaa,
            
            Thai,
            
            Tibt,
            
            Ugar,
            
            Vaii,
            
            Visp,
            
            Xpeo,
            
            Xsux,
            
            Yiii,
            
            Zxxx,
            
            Zyyy,
            
            Zzzz,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | num | materialspec1)*
    /// </para>
    /// </summary>
    public partial class materialspec : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName abbrXName = System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName expanXName = System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @refXName = System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extrefXName = System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName linkgrpXName = System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibrefXName = System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName archrefXName = System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName numXName = System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<num> numField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName materialspec1XName = System.Xml.Linq.XName.Get("materialspec", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<materialspec> materialspec1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName labelXName = System.Xml.Linq.XName.Get("label", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("materialspec", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator materialspec(XElement xe) { return XTypedServices.ToXTypedElement<materialspec>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static materialspec() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName), new NamedContentModelEntity(abbrXName), new NamedContentModelEntity(expanXName), new NamedContentModelEntity(@refXName), new NamedContentModelEntity(extrefXName), new NamedContentModelEntity(linkgrpXName), new NamedContentModelEntity(bibrefXName), new NamedContentModelEntity(titleXName), new NamedContentModelEntity(archrefXName), new NamedContentModelEntity(numXName), new NamedContentModelEntity(materialspec1XName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | num | materialspec1)*
        /// </para>
        /// </summary>
        public materialspec() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | num | materialspec1)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | num | materialspec1)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | num | materialspec1)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | num | materialspec1)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | num | materialspec1)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, abbrXName);
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, abbrXName);
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | num | materialspec1)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, expanXName);
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, expanXName);
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | num | materialspec1)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, @refXName);
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, @refXName);
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | num | materialspec1)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, extrefXName);
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, extrefXName);
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | num | materialspec1)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, linkgrpXName);
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, linkgrpXName);
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | num | materialspec1)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, bibrefXName);
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibrefXName);
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | num | materialspec1)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, titleXName);
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, titleXName);
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | num | materialspec1)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, archrefXName);
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, archrefXName);
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | num | materialspec1)*
        /// </para>
        /// </summary>
        public virtual IList<num> num {
            get {
                if ((this.numField == null)) {
                    this.numField = new XTypedList<num>(this, LinqToXsdTypeManager.Instance, numXName);
                }
                return this.numField;
            }
            set {
                if ((value == null)) {
                    this.numField = null;
                }
                else {
                    if ((this.numField == null)) {
                        this.numField = XTypedList<num>.Initialize(this, LinqToXsdTypeManager.Instance, value, numXName);
                    }
                    else {
                        XTypedServices.SetList<num>(this.numField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | @ref | extref | linkgrp | bibref | title | archref | num | materialspec1)*
        /// </para>
        /// </summary>
        public virtual IList<materialspec> materialspec1 {
            get {
                if ((this.materialspec1Field == null)) {
                    this.materialspec1Field = new XTypedList<materialspec>(this, LinqToXsdTypeManager.Instance, materialspec1XName);
                }
                return this.materialspec1Field;
            }
            set {
                if ((value == null)) {
                    this.materialspec1Field = null;
                }
                else {
                    if ((this.materialspec1Field == null)) {
                        this.materialspec1Field = XTypedList<materialspec>.Initialize(this, LinqToXsdTypeManager.Instance, value, materialspec1XName);
                    }
                    else {
                        XTypedServices.SetList<materialspec>(this.materialspec1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(labelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(labelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<materialspec>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
            localElementDictionary.Add(abbrXName, typeof(abbr));
            localElementDictionary.Add(expanXName, typeof(expan));
            localElementDictionary.Add(@refXName, typeof(@ref));
            localElementDictionary.Add(extrefXName, typeof(extref));
            localElementDictionary.Add(linkgrpXName, typeof(linkgrp));
            localElementDictionary.Add(bibrefXName, typeof(bibref));
            localElementDictionary.Add(titleXName, typeof(title));
            localElementDictionary.Add(archrefXName, typeof(archref));
            localElementDictionary.Add(numXName, typeof(num));
            localElementDictionary.Add(materialspec1XName, typeof(materialspec));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accruals1)+)
    /// </para>
    /// </summary>
    public partial class accruals : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName addressXName = System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName chronlistXName = System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listXName = System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tableXName = System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName blockquoteXName = System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName accruals1XName = System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accruals> accruals1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator accruals(XElement xe) { return XTypedServices.ToXTypedElement<accruals>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static accruals() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new ChoiceContentModelEntity(new NamedContentModelEntity(addressXName), new NamedContentModelEntity(chronlistXName), new NamedContentModelEntity(listXName), new NamedContentModelEntity(noteXName), new NamedContentModelEntity(tableXName), new NamedContentModelEntity(blockquoteXName), new NamedContentModelEntity(pXName), new NamedContentModelEntity(accruals1XName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accruals1)+)
        /// </para>
        /// </summary>
        public accruals() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accruals1)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accruals1)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, addressXName);
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, addressXName);
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accruals1)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, chronlistXName);
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, chronlistXName);
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accruals1)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, listXName);
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, listXName);
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accruals1)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accruals1)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, tableXName);
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, tableXName);
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accruals1)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, blockquoteXName);
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, blockquoteXName);
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accruals1)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | accruals1)+)
        /// </para>
        /// </summary>
        public virtual IList<accruals> accruals1 {
            get {
                if ((this.accruals1Field == null)) {
                    this.accruals1Field = new XTypedList<accruals>(this, LinqToXsdTypeManager.Instance, accruals1XName);
                }
                return this.accruals1Field;
            }
            set {
                if ((value == null)) {
                    this.accruals1Field = null;
                }
                else {
                    if ((this.accruals1Field == null)) {
                        this.accruals1Field = XTypedList<accruals>.Initialize(this, LinqToXsdTypeManager.Instance, value, accruals1XName);
                    }
                    else {
                        XTypedServices.SetList<accruals>(this.accruals1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<accruals>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(addressXName, typeof(address));
            localElementDictionary.Add(chronlistXName, typeof(chronlist));
            localElementDictionary.Add(listXName, typeof(list));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(tableXName, typeof(table));
            localElementDictionary.Add(blockquoteXName, typeof(blockquote));
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(accruals1XName, typeof(accruals));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | legalstatus | accessrestrict1)+)
    /// </para>
    /// </summary>
    public partial class accessrestrict : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName addressXName = System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName chronlistXName = System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listXName = System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tableXName = System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName blockquoteXName = System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName legalstatusXName = System.Xml.Linq.XName.Get("legalstatus", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<legalstatus> legalstatusField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName accessrestrict1XName = System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accessrestrict> accessrestrict1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator accessrestrict(XElement xe) { return XTypedServices.ToXTypedElement<accessrestrict>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static accessrestrict() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new ChoiceContentModelEntity(new NamedContentModelEntity(addressXName), new NamedContentModelEntity(chronlistXName), new NamedContentModelEntity(listXName), new NamedContentModelEntity(noteXName), new NamedContentModelEntity(tableXName), new NamedContentModelEntity(blockquoteXName), new NamedContentModelEntity(pXName), new NamedContentModelEntity(legalstatusXName), new NamedContentModelEntity(accessrestrict1XName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | legalstatus | accessrestrict1)+)
        /// </para>
        /// </summary>
        public accessrestrict() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | legalstatus | accessrestrict1)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | legalstatus | accessrestrict1)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, addressXName);
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, addressXName);
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | legalstatus | accessrestrict1)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, chronlistXName);
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, chronlistXName);
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | legalstatus | accessrestrict1)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, listXName);
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, listXName);
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | legalstatus | accessrestrict1)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | legalstatus | accessrestrict1)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, tableXName);
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, tableXName);
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | legalstatus | accessrestrict1)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, blockquoteXName);
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, blockquoteXName);
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | legalstatus | accessrestrict1)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | legalstatus | accessrestrict1)+)
        /// </para>
        /// </summary>
        public virtual IList<legalstatus> legalstatus {
            get {
                if ((this.legalstatusField == null)) {
                    this.legalstatusField = new XTypedList<legalstatus>(this, LinqToXsdTypeManager.Instance, legalstatusXName);
                }
                return this.legalstatusField;
            }
            set {
                if ((value == null)) {
                    this.legalstatusField = null;
                }
                else {
                    if ((this.legalstatusField == null)) {
                        this.legalstatusField = XTypedList<legalstatus>.Initialize(this, LinqToXsdTypeManager.Instance, value, legalstatusXName);
                    }
                    else {
                        XTypedServices.SetList<legalstatus>(this.legalstatusField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | legalstatus | accessrestrict1)+)
        /// </para>
        /// </summary>
        public virtual IList<accessrestrict> accessrestrict1 {
            get {
                if ((this.accessrestrict1Field == null)) {
                    this.accessrestrict1Field = new XTypedList<accessrestrict>(this, LinqToXsdTypeManager.Instance, accessrestrict1XName);
                }
                return this.accessrestrict1Field;
            }
            set {
                if ((value == null)) {
                    this.accessrestrict1Field = null;
                }
                else {
                    if ((this.accessrestrict1Field == null)) {
                        this.accessrestrict1Field = XTypedList<accessrestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, accessrestrict1XName);
                    }
                    else {
                        XTypedServices.SetList<accessrestrict>(this.accessrestrict1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<accessrestrict>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(addressXName, typeof(address));
            localElementDictionary.Add(chronlistXName, typeof(chronlist));
            localElementDictionary.Add(listXName, typeof(list));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(tableXName, typeof(table));
            localElementDictionary.Add(blockquoteXName, typeof(blockquote));
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(legalstatusXName, typeof(legalstatus));
            localElementDictionary.Add(accessrestrict1XName, typeof(accessrestrict));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | date)*
    /// </para>
    /// </summary>
    public partial class legalstatus : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dateXName = System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<date> dateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("legalstatus", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator legalstatus(XElement xe) { return XTypedServices.ToXTypedElement<legalstatus>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static legalstatus() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName), new NamedContentModelEntity(dateXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | date)*
        /// </para>
        /// </summary>
        public legalstatus() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | date)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | date)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | date)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | date)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | date)*
        /// </para>
        /// </summary>
        public virtual IList<date> date {
            get {
                if ((this.dateField == null)) {
                    this.dateField = new XTypedList<date>(this, LinqToXsdTypeManager.Instance, dateXName);
                }
                return this.dateField;
            }
            set {
                if ((value == null)) {
                    this.dateField = null;
                }
                else {
                    if ((this.dateField == null)) {
                        this.dateField = XTypedList<date>.Initialize(this, LinqToXsdTypeManager.Instance, value, dateXName);
                    }
                    else {
                        XTypedServices.SetList<date>(this.dateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<legalstatus>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
            localElementDictionary.Add(dateXName, typeof(date));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | acqinfo1)+)
    /// </para>
    /// </summary>
    public partial class acqinfo : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName addressXName = System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName chronlistXName = System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listXName = System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tableXName = System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName blockquoteXName = System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName acqinfo1XName = System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<acqinfo> acqinfo1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator acqinfo(XElement xe) { return XTypedServices.ToXTypedElement<acqinfo>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static acqinfo() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new ChoiceContentModelEntity(new NamedContentModelEntity(addressXName), new NamedContentModelEntity(chronlistXName), new NamedContentModelEntity(listXName), new NamedContentModelEntity(noteXName), new NamedContentModelEntity(tableXName), new NamedContentModelEntity(blockquoteXName), new NamedContentModelEntity(pXName), new NamedContentModelEntity(acqinfo1XName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | acqinfo1)+)
        /// </para>
        /// </summary>
        public acqinfo() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | acqinfo1)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | acqinfo1)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, addressXName);
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, addressXName);
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | acqinfo1)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, chronlistXName);
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, chronlistXName);
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | acqinfo1)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, listXName);
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, listXName);
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | acqinfo1)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | acqinfo1)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, tableXName);
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, tableXName);
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | acqinfo1)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, blockquoteXName);
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, blockquoteXName);
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | acqinfo1)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | acqinfo1)+)
        /// </para>
        /// </summary>
        public virtual IList<acqinfo> acqinfo1 {
            get {
                if ((this.acqinfo1Field == null)) {
                    this.acqinfo1Field = new XTypedList<acqinfo>(this, LinqToXsdTypeManager.Instance, acqinfo1XName);
                }
                return this.acqinfo1Field;
            }
            set {
                if ((value == null)) {
                    this.acqinfo1Field = null;
                }
                else {
                    if ((this.acqinfo1Field == null)) {
                        this.acqinfo1Field = XTypedList<acqinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, acqinfo1XName);
                    }
                    else {
                        XTypedServices.SetList<acqinfo>(this.acqinfo1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<acqinfo>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(addressXName, typeof(address));
            localElementDictionary.Add(chronlistXName, typeof(chronlist));
            localElementDictionary.Add(listXName, typeof(list));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(tableXName, typeof(table));
            localElementDictionary.Add(blockquoteXName, typeof(blockquote));
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(acqinfo1XName, typeof(acqinfo));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | altformavail1)+)
    /// </para>
    /// </summary>
    public partial class altformavail : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName addressXName = System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName chronlistXName = System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listXName = System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tableXName = System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName blockquoteXName = System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altformavail1XName = System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<altformavail> altformavail1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator altformavail(XElement xe) { return XTypedServices.ToXTypedElement<altformavail>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static altformavail() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new ChoiceContentModelEntity(new NamedContentModelEntity(addressXName), new NamedContentModelEntity(chronlistXName), new NamedContentModelEntity(listXName), new NamedContentModelEntity(noteXName), new NamedContentModelEntity(tableXName), new NamedContentModelEntity(blockquoteXName), new NamedContentModelEntity(pXName), new NamedContentModelEntity(altformavail1XName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | altformavail1)+)
        /// </para>
        /// </summary>
        public altformavail() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | altformavail1)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | altformavail1)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, addressXName);
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, addressXName);
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | altformavail1)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, chronlistXName);
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, chronlistXName);
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | altformavail1)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, listXName);
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, listXName);
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | altformavail1)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | altformavail1)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, tableXName);
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, tableXName);
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | altformavail1)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, blockquoteXName);
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, blockquoteXName);
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | altformavail1)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | altformavail1)+)
        /// </para>
        /// </summary>
        public virtual IList<altformavail> altformavail1 {
            get {
                if ((this.altformavail1Field == null)) {
                    this.altformavail1Field = new XTypedList<altformavail>(this, LinqToXsdTypeManager.Instance, altformavail1XName);
                }
                return this.altformavail1Field;
            }
            set {
                if ((value == null)) {
                    this.altformavail1Field = null;
                }
                else {
                    if ((this.altformavail1Field == null)) {
                        this.altformavail1Field = XTypedList<altformavail>.Initialize(this, LinqToXsdTypeManager.Instance, value, altformavail1XName);
                    }
                    else {
                        XTypedServices.SetList<altformavail>(this.altformavail1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<altformavail>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(addressXName, typeof(address));
            localElementDictionary.Add(chronlistXName, typeof(chronlist));
            localElementDictionary.Add(listXName, typeof(list));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(tableXName, typeof(table));
            localElementDictionary.Add(blockquoteXName, typeof(blockquote));
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(altformavail1XName, typeof(altformavail));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | originalsloc1)+)
    /// </para>
    /// </summary>
    public partial class originalsloc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName addressXName = System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName chronlistXName = System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listXName = System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tableXName = System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName blockquoteXName = System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName originalsloc1XName = System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<originalsloc> originalsloc1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator originalsloc(XElement xe) { return XTypedServices.ToXTypedElement<originalsloc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static originalsloc() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new ChoiceContentModelEntity(new NamedContentModelEntity(addressXName), new NamedContentModelEntity(chronlistXName), new NamedContentModelEntity(listXName), new NamedContentModelEntity(noteXName), new NamedContentModelEntity(tableXName), new NamedContentModelEntity(blockquoteXName), new NamedContentModelEntity(pXName), new NamedContentModelEntity(originalsloc1XName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | originalsloc1)+)
        /// </para>
        /// </summary>
        public originalsloc() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | originalsloc1)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | originalsloc1)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, addressXName);
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, addressXName);
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | originalsloc1)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, chronlistXName);
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, chronlistXName);
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | originalsloc1)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, listXName);
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, listXName);
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | originalsloc1)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | originalsloc1)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, tableXName);
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, tableXName);
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | originalsloc1)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, blockquoteXName);
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, blockquoteXName);
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | originalsloc1)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | originalsloc1)+)
        /// </para>
        /// </summary>
        public virtual IList<originalsloc> originalsloc1 {
            get {
                if ((this.originalsloc1Field == null)) {
                    this.originalsloc1Field = new XTypedList<originalsloc>(this, LinqToXsdTypeManager.Instance, originalsloc1XName);
                }
                return this.originalsloc1Field;
            }
            set {
                if ((value == null)) {
                    this.originalsloc1Field = null;
                }
                else {
                    if ((this.originalsloc1Field == null)) {
                        this.originalsloc1Field = XTypedList<originalsloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, originalsloc1XName);
                    }
                    else {
                        XTypedServices.SetList<originalsloc>(this.originalsloc1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<originalsloc>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(addressXName, typeof(address));
            localElementDictionary.Add(chronlistXName, typeof(chronlist));
            localElementDictionary.Add(listXName, typeof(list));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(tableXName, typeof(table));
            localElementDictionary.Add(blockquoteXName, typeof(blockquote));
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(originalsloc1XName, typeof(originalsloc));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | phystech1)+)
    /// </para>
    /// </summary>
    public partial class phystech : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName addressXName = System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName chronlistXName = System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listXName = System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tableXName = System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName blockquoteXName = System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phystech1XName = System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phystech> phystech1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator phystech(XElement xe) { return XTypedServices.ToXTypedElement<phystech>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static phystech() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new ChoiceContentModelEntity(new NamedContentModelEntity(addressXName), new NamedContentModelEntity(chronlistXName), new NamedContentModelEntity(listXName), new NamedContentModelEntity(noteXName), new NamedContentModelEntity(tableXName), new NamedContentModelEntity(blockquoteXName), new NamedContentModelEntity(pXName), new NamedContentModelEntity(phystech1XName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | phystech1)+)
        /// </para>
        /// </summary>
        public phystech() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | phystech1)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | phystech1)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, addressXName);
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, addressXName);
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | phystech1)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, chronlistXName);
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, chronlistXName);
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | phystech1)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, listXName);
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, listXName);
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | phystech1)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | phystech1)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, tableXName);
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, tableXName);
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | phystech1)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, blockquoteXName);
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, blockquoteXName);
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | phystech1)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | phystech1)+)
        /// </para>
        /// </summary>
        public virtual IList<phystech> phystech1 {
            get {
                if ((this.phystech1Field == null)) {
                    this.phystech1Field = new XTypedList<phystech>(this, LinqToXsdTypeManager.Instance, phystech1XName);
                }
                return this.phystech1Field;
            }
            set {
                if ((value == null)) {
                    this.phystech1Field = null;
                }
                else {
                    if ((this.phystech1Field == null)) {
                        this.phystech1Field = XTypedList<phystech>.Initialize(this, LinqToXsdTypeManager.Instance, value, phystech1XName);
                    }
                    else {
                        XTypedServices.SetList<phystech>(this.phystech1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<phystech>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(addressXName, typeof(address));
            localElementDictionary.Add(chronlistXName, typeof(chronlist));
            localElementDictionary.Add(listXName, typeof(list));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(tableXName, typeof(table));
            localElementDictionary.Add(blockquoteXName, typeof(blockquote));
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(phystech1XName, typeof(phystech));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | appraisal1)+)
    /// </para>
    /// </summary>
    public partial class appraisal : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName addressXName = System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName chronlistXName = System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listXName = System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tableXName = System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName blockquoteXName = System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName appraisal1XName = System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<appraisal> appraisal1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator appraisal(XElement xe) { return XTypedServices.ToXTypedElement<appraisal>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static appraisal() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new ChoiceContentModelEntity(new NamedContentModelEntity(addressXName), new NamedContentModelEntity(chronlistXName), new NamedContentModelEntity(listXName), new NamedContentModelEntity(noteXName), new NamedContentModelEntity(tableXName), new NamedContentModelEntity(blockquoteXName), new NamedContentModelEntity(pXName), new NamedContentModelEntity(appraisal1XName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | appraisal1)+)
        /// </para>
        /// </summary>
        public appraisal() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | appraisal1)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | appraisal1)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, addressXName);
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, addressXName);
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | appraisal1)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, chronlistXName);
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, chronlistXName);
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | appraisal1)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, listXName);
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, listXName);
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | appraisal1)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | appraisal1)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, tableXName);
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, tableXName);
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | appraisal1)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, blockquoteXName);
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, blockquoteXName);
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | appraisal1)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | appraisal1)+)
        /// </para>
        /// </summary>
        public virtual IList<appraisal> appraisal1 {
            get {
                if ((this.appraisal1Field == null)) {
                    this.appraisal1Field = new XTypedList<appraisal>(this, LinqToXsdTypeManager.Instance, appraisal1XName);
                }
                return this.appraisal1Field;
            }
            set {
                if ((value == null)) {
                    this.appraisal1Field = null;
                }
                else {
                    if ((this.appraisal1Field == null)) {
                        this.appraisal1Field = XTypedList<appraisal>.Initialize(this, LinqToXsdTypeManager.Instance, value, appraisal1XName);
                    }
                    else {
                        XTypedServices.SetList<appraisal>(this.appraisal1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<appraisal>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(addressXName, typeof(address));
            localElementDictionary.Add(chronlistXName, typeof(chronlist));
            localElementDictionary.Add(listXName, typeof(list));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(tableXName, typeof(table));
            localElementDictionary.Add(blockquoteXName, typeof(blockquote));
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(appraisal1XName, typeof(appraisal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | custodhist1 | acqinfo)+)
    /// </para>
    /// </summary>
    public partial class custodhist : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName addressXName = System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName chronlistXName = System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listXName = System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tableXName = System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName blockquoteXName = System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName custodhist1XName = System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<custodhist> custodhist1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName acqinfoXName = System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<acqinfo> acqinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator custodhist(XElement xe) { return XTypedServices.ToXTypedElement<custodhist>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static custodhist() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new ChoiceContentModelEntity(new NamedContentModelEntity(addressXName), new NamedContentModelEntity(chronlistXName), new NamedContentModelEntity(listXName), new NamedContentModelEntity(noteXName), new NamedContentModelEntity(tableXName), new NamedContentModelEntity(blockquoteXName), new NamedContentModelEntity(pXName), new NamedContentModelEntity(custodhist1XName), new NamedContentModelEntity(acqinfoXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | custodhist1 | acqinfo)+)
        /// </para>
        /// </summary>
        public custodhist() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | custodhist1 | acqinfo)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | custodhist1 | acqinfo)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, addressXName);
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, addressXName);
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | custodhist1 | acqinfo)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, chronlistXName);
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, chronlistXName);
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | custodhist1 | acqinfo)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, listXName);
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, listXName);
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | custodhist1 | acqinfo)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | custodhist1 | acqinfo)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, tableXName);
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, tableXName);
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | custodhist1 | acqinfo)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, blockquoteXName);
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, blockquoteXName);
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | custodhist1 | acqinfo)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | custodhist1 | acqinfo)+)
        /// </para>
        /// </summary>
        public virtual IList<custodhist> custodhist1 {
            get {
                if ((this.custodhist1Field == null)) {
                    this.custodhist1Field = new XTypedList<custodhist>(this, LinqToXsdTypeManager.Instance, custodhist1XName);
                }
                return this.custodhist1Field;
            }
            set {
                if ((value == null)) {
                    this.custodhist1Field = null;
                }
                else {
                    if ((this.custodhist1Field == null)) {
                        this.custodhist1Field = XTypedList<custodhist>.Initialize(this, LinqToXsdTypeManager.Instance, value, custodhist1XName);
                    }
                    else {
                        XTypedServices.SetList<custodhist>(this.custodhist1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | custodhist1 | acqinfo)+)
        /// </para>
        /// </summary>
        public virtual IList<acqinfo> acqinfo {
            get {
                if ((this.acqinfoField == null)) {
                    this.acqinfoField = new XTypedList<acqinfo>(this, LinqToXsdTypeManager.Instance, acqinfoXName);
                }
                return this.acqinfoField;
            }
            set {
                if ((value == null)) {
                    this.acqinfoField = null;
                }
                else {
                    if ((this.acqinfoField == null)) {
                        this.acqinfoField = XTypedList<acqinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, acqinfoXName);
                    }
                    else {
                        XTypedServices.SetList<acqinfo>(this.acqinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<custodhist>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(addressXName, typeof(address));
            localElementDictionary.Add(chronlistXName, typeof(chronlist));
            localElementDictionary.Add(listXName, typeof(list));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(tableXName, typeof(table));
            localElementDictionary.Add(blockquoteXName, typeof(blockquote));
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(custodhist1XName, typeof(custodhist));
            localElementDictionary.Add(acqinfoXName, typeof(acqinfo));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | prefercite1)+)
    /// </para>
    /// </summary>
    public partial class prefercite : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName addressXName = System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName chronlistXName = System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listXName = System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tableXName = System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName blockquoteXName = System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName prefercite1XName = System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<prefercite> prefercite1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator prefercite(XElement xe) { return XTypedServices.ToXTypedElement<prefercite>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static prefercite() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new ChoiceContentModelEntity(new NamedContentModelEntity(addressXName), new NamedContentModelEntity(chronlistXName), new NamedContentModelEntity(listXName), new NamedContentModelEntity(noteXName), new NamedContentModelEntity(tableXName), new NamedContentModelEntity(blockquoteXName), new NamedContentModelEntity(pXName), new NamedContentModelEntity(prefercite1XName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | prefercite1)+)
        /// </para>
        /// </summary>
        public prefercite() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | prefercite1)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | prefercite1)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, addressXName);
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, addressXName);
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | prefercite1)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, chronlistXName);
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, chronlistXName);
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | prefercite1)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, listXName);
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, listXName);
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | prefercite1)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | prefercite1)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, tableXName);
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, tableXName);
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | prefercite1)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, blockquoteXName);
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, blockquoteXName);
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | prefercite1)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | prefercite1)+)
        /// </para>
        /// </summary>
        public virtual IList<prefercite> prefercite1 {
            get {
                if ((this.prefercite1Field == null)) {
                    this.prefercite1Field = new XTypedList<prefercite>(this, LinqToXsdTypeManager.Instance, prefercite1XName);
                }
                return this.prefercite1Field;
            }
            set {
                if ((value == null)) {
                    this.prefercite1Field = null;
                }
                else {
                    if ((this.prefercite1Field == null)) {
                        this.prefercite1Field = XTypedList<prefercite>.Initialize(this, LinqToXsdTypeManager.Instance, value, prefercite1XName);
                    }
                    else {
                        XTypedServices.SetList<prefercite>(this.prefercite1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<prefercite>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(addressXName, typeof(address));
            localElementDictionary.Add(chronlistXName, typeof(chronlist));
            localElementDictionary.Add(listXName, typeof(list));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(tableXName, typeof(table));
            localElementDictionary.Add(blockquoteXName, typeof(blockquote));
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(prefercite1XName, typeof(prefercite));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | processinfo1)+)
    /// </para>
    /// </summary>
    public partial class processinfo : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName addressXName = System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName chronlistXName = System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listXName = System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tableXName = System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName blockquoteXName = System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName processinfo1XName = System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<processinfo> processinfo1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator processinfo(XElement xe) { return XTypedServices.ToXTypedElement<processinfo>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static processinfo() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new ChoiceContentModelEntity(new NamedContentModelEntity(addressXName), new NamedContentModelEntity(chronlistXName), new NamedContentModelEntity(listXName), new NamedContentModelEntity(noteXName), new NamedContentModelEntity(tableXName), new NamedContentModelEntity(blockquoteXName), new NamedContentModelEntity(pXName), new NamedContentModelEntity(processinfo1XName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | processinfo1)+)
        /// </para>
        /// </summary>
        public processinfo() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | processinfo1)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | processinfo1)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, addressXName);
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, addressXName);
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | processinfo1)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, chronlistXName);
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, chronlistXName);
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | processinfo1)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, listXName);
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, listXName);
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | processinfo1)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | processinfo1)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, tableXName);
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, tableXName);
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | processinfo1)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, blockquoteXName);
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, blockquoteXName);
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | processinfo1)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | processinfo1)+)
        /// </para>
        /// </summary>
        public virtual IList<processinfo> processinfo1 {
            get {
                if ((this.processinfo1Field == null)) {
                    this.processinfo1Field = new XTypedList<processinfo>(this, LinqToXsdTypeManager.Instance, processinfo1XName);
                }
                return this.processinfo1Field;
            }
            set {
                if ((value == null)) {
                    this.processinfo1Field = null;
                }
                else {
                    if ((this.processinfo1Field == null)) {
                        this.processinfo1Field = XTypedList<processinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, processinfo1XName);
                    }
                    else {
                        XTypedServices.SetList<processinfo>(this.processinfo1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<processinfo>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(addressXName, typeof(address));
            localElementDictionary.Add(chronlistXName, typeof(chronlist));
            localElementDictionary.Add(listXName, typeof(list));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(tableXName, typeof(table));
            localElementDictionary.Add(blockquoteXName, typeof(blockquote));
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(processinfo1XName, typeof(processinfo));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | userestrict1)+)
    /// </para>
    /// </summary>
    public partial class userestrict : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName addressXName = System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName chronlistXName = System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listXName = System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tableXName = System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName blockquoteXName = System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userestrict1XName = System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<userestrict> userestrict1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator userestrict(XElement xe) { return XTypedServices.ToXTypedElement<userestrict>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static userestrict() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new ChoiceContentModelEntity(new NamedContentModelEntity(addressXName), new NamedContentModelEntity(chronlistXName), new NamedContentModelEntity(listXName), new NamedContentModelEntity(noteXName), new NamedContentModelEntity(tableXName), new NamedContentModelEntity(blockquoteXName), new NamedContentModelEntity(pXName), new NamedContentModelEntity(userestrict1XName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | userestrict1)+)
        /// </para>
        /// </summary>
        public userestrict() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | userestrict1)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | userestrict1)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, addressXName);
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, addressXName);
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | userestrict1)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, chronlistXName);
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, chronlistXName);
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | userestrict1)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, listXName);
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, listXName);
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | userestrict1)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | userestrict1)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, tableXName);
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, tableXName);
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | userestrict1)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, blockquoteXName);
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, blockquoteXName);
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | userestrict1)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | userestrict1)+)
        /// </para>
        /// </summary>
        public virtual IList<userestrict> userestrict1 {
            get {
                if ((this.userestrict1Field == null)) {
                    this.userestrict1Field = new XTypedList<userestrict>(this, LinqToXsdTypeManager.Instance, userestrict1XName);
                }
                return this.userestrict1Field;
            }
            set {
                if ((value == null)) {
                    this.userestrict1Field = null;
                }
                else {
                    if ((this.userestrict1Field == null)) {
                        this.userestrict1Field = XTypedList<userestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, userestrict1XName);
                    }
                    else {
                        XTypedServices.SetList<userestrict>(this.userestrict1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<userestrict>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(addressXName, typeof(address));
            localElementDictionary.Add(chronlistXName, typeof(chronlist));
            localElementDictionary.Add(listXName, typeof(list));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(tableXName, typeof(table));
            localElementDictionary.Add(blockquoteXName, typeof(blockquote));
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(userestrict1XName, typeof(userestrict));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | bioghist1 | dao | daogrp)+)
    /// </para>
    /// </summary>
    public partial class bioghist : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName addressXName = System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName chronlistXName = System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listXName = System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tableXName = System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName blockquoteXName = System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bioghist1XName = System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bioghist> bioghist1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName daoXName = System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dao> daoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName daogrpXName = System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<daogrp> daogrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator bioghist(XElement xe) { return XTypedServices.ToXTypedElement<bioghist>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static bioghist() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new ChoiceContentModelEntity(new NamedContentModelEntity(addressXName), new NamedContentModelEntity(chronlistXName), new NamedContentModelEntity(listXName), new NamedContentModelEntity(noteXName), new NamedContentModelEntity(tableXName), new NamedContentModelEntity(blockquoteXName), new NamedContentModelEntity(pXName), new NamedContentModelEntity(bioghist1XName), new NamedContentModelEntity(daoXName), new NamedContentModelEntity(daogrpXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | bioghist1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public bioghist() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | bioghist1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | bioghist1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, addressXName);
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, addressXName);
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | bioghist1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, chronlistXName);
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, chronlistXName);
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | bioghist1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, listXName);
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, listXName);
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | bioghist1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | bioghist1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, tableXName);
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, tableXName);
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | bioghist1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, blockquoteXName);
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, blockquoteXName);
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | bioghist1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | bioghist1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual IList<bioghist> bioghist1 {
            get {
                if ((this.bioghist1Field == null)) {
                    this.bioghist1Field = new XTypedList<bioghist>(this, LinqToXsdTypeManager.Instance, bioghist1XName);
                }
                return this.bioghist1Field;
            }
            set {
                if ((value == null)) {
                    this.bioghist1Field = null;
                }
                else {
                    if ((this.bioghist1Field == null)) {
                        this.bioghist1Field = XTypedList<bioghist>.Initialize(this, LinqToXsdTypeManager.Instance, value, bioghist1XName);
                    }
                    else {
                        XTypedServices.SetList<bioghist>(this.bioghist1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | bioghist1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual IList<dao> dao {
            get {
                if ((this.daoField == null)) {
                    this.daoField = new XTypedList<dao>(this, LinqToXsdTypeManager.Instance, daoXName);
                }
                return this.daoField;
            }
            set {
                if ((value == null)) {
                    this.daoField = null;
                }
                else {
                    if ((this.daoField == null)) {
                        this.daoField = XTypedList<dao>.Initialize(this, LinqToXsdTypeManager.Instance, value, daoXName);
                    }
                    else {
                        XTypedServices.SetList<dao>(this.daoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | bioghist1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual IList<daogrp> daogrp {
            get {
                if ((this.daogrpField == null)) {
                    this.daogrpField = new XTypedList<daogrp>(this, LinqToXsdTypeManager.Instance, daogrpXName);
                }
                return this.daogrpField;
            }
            set {
                if ((value == null)) {
                    this.daogrpField = null;
                }
                else {
                    if ((this.daogrpField == null)) {
                        this.daogrpField = XTypedList<daogrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, daogrpXName);
                    }
                    else {
                        XTypedServices.SetList<daogrp>(this.daogrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<bioghist>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(addressXName, typeof(address));
            localElementDictionary.Add(chronlistXName, typeof(chronlist));
            localElementDictionary.Add(listXName, typeof(list));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(tableXName, typeof(table));
            localElementDictionary.Add(blockquoteXName, typeof(blockquote));
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(bioghist1XName, typeof(bioghist));
            localElementDictionary.Add(daoXName, typeof(dao));
            localElementDictionary.Add(daogrpXName, typeof(daogrp));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | controlaccess1)+)
    /// </para>
    /// </summary>
    public partial class controlaccess : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName addressXName = System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName chronlistXName = System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listXName = System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tableXName = System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName blockquoteXName = System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName corpnameXName = System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<corpname> corpnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName famnameXName = System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<famname> famnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geognameXName = System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<geogname> geognameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<name> nameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName occupationXName = System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<occupation> occupationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName persnameXName = System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<persname> persnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName subjectXName = System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<subject> subjectField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName genreformXName = System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<genreform> genreformField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName functionXName = System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<function> functionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName controlaccess1XName = System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<controlaccess> controlaccess1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator controlaccess(XElement xe) { return XTypedServices.ToXTypedElement<controlaccess>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static controlaccess() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new ChoiceContentModelEntity(new NamedContentModelEntity(addressXName), new NamedContentModelEntity(chronlistXName), new NamedContentModelEntity(listXName), new NamedContentModelEntity(noteXName), new NamedContentModelEntity(tableXName), new NamedContentModelEntity(blockquoteXName), new NamedContentModelEntity(pXName), new NamedContentModelEntity(corpnameXName), new NamedContentModelEntity(famnameXName), new NamedContentModelEntity(geognameXName), new NamedContentModelEntity(nameXName), new NamedContentModelEntity(occupationXName), new NamedContentModelEntity(persnameXName), new NamedContentModelEntity(subjectXName), new NamedContentModelEntity(genreformXName), new NamedContentModelEntity(functionXName), new NamedContentModelEntity(titleXName), new NamedContentModelEntity(controlaccess1XName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | controlaccess1)+)
        /// </para>
        /// </summary>
        public controlaccess() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | controlaccess1)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | controlaccess1)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, addressXName);
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, addressXName);
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | controlaccess1)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, chronlistXName);
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, chronlistXName);
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | controlaccess1)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, listXName);
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, listXName);
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | controlaccess1)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | controlaccess1)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, tableXName);
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, tableXName);
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | controlaccess1)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, blockquoteXName);
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, blockquoteXName);
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | controlaccess1)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | controlaccess1)+)
        /// </para>
        /// </summary>
        public virtual IList<corpname> corpname {
            get {
                if ((this.corpnameField == null)) {
                    this.corpnameField = new XTypedList<corpname>(this, LinqToXsdTypeManager.Instance, corpnameXName);
                }
                return this.corpnameField;
            }
            set {
                if ((value == null)) {
                    this.corpnameField = null;
                }
                else {
                    if ((this.corpnameField == null)) {
                        this.corpnameField = XTypedList<corpname>.Initialize(this, LinqToXsdTypeManager.Instance, value, corpnameXName);
                    }
                    else {
                        XTypedServices.SetList<corpname>(this.corpnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | controlaccess1)+)
        /// </para>
        /// </summary>
        public virtual IList<famname> famname {
            get {
                if ((this.famnameField == null)) {
                    this.famnameField = new XTypedList<famname>(this, LinqToXsdTypeManager.Instance, famnameXName);
                }
                return this.famnameField;
            }
            set {
                if ((value == null)) {
                    this.famnameField = null;
                }
                else {
                    if ((this.famnameField == null)) {
                        this.famnameField = XTypedList<famname>.Initialize(this, LinqToXsdTypeManager.Instance, value, famnameXName);
                    }
                    else {
                        XTypedServices.SetList<famname>(this.famnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | controlaccess1)+)
        /// </para>
        /// </summary>
        public virtual IList<geogname> geogname {
            get {
                if ((this.geognameField == null)) {
                    this.geognameField = new XTypedList<geogname>(this, LinqToXsdTypeManager.Instance, geognameXName);
                }
                return this.geognameField;
            }
            set {
                if ((value == null)) {
                    this.geognameField = null;
                }
                else {
                    if ((this.geognameField == null)) {
                        this.geognameField = XTypedList<geogname>.Initialize(this, LinqToXsdTypeManager.Instance, value, geognameXName);
                    }
                    else {
                        XTypedServices.SetList<geogname>(this.geognameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | controlaccess1)+)
        /// </para>
        /// </summary>
        public virtual IList<name> name {
            get {
                if ((this.nameField == null)) {
                    this.nameField = new XTypedList<name>(this, LinqToXsdTypeManager.Instance, nameXName);
                }
                return this.nameField;
            }
            set {
                if ((value == null)) {
                    this.nameField = null;
                }
                else {
                    if ((this.nameField == null)) {
                        this.nameField = XTypedList<name>.Initialize(this, LinqToXsdTypeManager.Instance, value, nameXName);
                    }
                    else {
                        XTypedServices.SetList<name>(this.nameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | controlaccess1)+)
        /// </para>
        /// </summary>
        public virtual IList<occupation> occupation {
            get {
                if ((this.occupationField == null)) {
                    this.occupationField = new XTypedList<occupation>(this, LinqToXsdTypeManager.Instance, occupationXName);
                }
                return this.occupationField;
            }
            set {
                if ((value == null)) {
                    this.occupationField = null;
                }
                else {
                    if ((this.occupationField == null)) {
                        this.occupationField = XTypedList<occupation>.Initialize(this, LinqToXsdTypeManager.Instance, value, occupationXName);
                    }
                    else {
                        XTypedServices.SetList<occupation>(this.occupationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | controlaccess1)+)
        /// </para>
        /// </summary>
        public virtual IList<persname> persname {
            get {
                if ((this.persnameField == null)) {
                    this.persnameField = new XTypedList<persname>(this, LinqToXsdTypeManager.Instance, persnameXName);
                }
                return this.persnameField;
            }
            set {
                if ((value == null)) {
                    this.persnameField = null;
                }
                else {
                    if ((this.persnameField == null)) {
                        this.persnameField = XTypedList<persname>.Initialize(this, LinqToXsdTypeManager.Instance, value, persnameXName);
                    }
                    else {
                        XTypedServices.SetList<persname>(this.persnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | controlaccess1)+)
        /// </para>
        /// </summary>
        public virtual IList<subject> subject {
            get {
                if ((this.subjectField == null)) {
                    this.subjectField = new XTypedList<subject>(this, LinqToXsdTypeManager.Instance, subjectXName);
                }
                return this.subjectField;
            }
            set {
                if ((value == null)) {
                    this.subjectField = null;
                }
                else {
                    if ((this.subjectField == null)) {
                        this.subjectField = XTypedList<subject>.Initialize(this, LinqToXsdTypeManager.Instance, value, subjectXName);
                    }
                    else {
                        XTypedServices.SetList<subject>(this.subjectField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | controlaccess1)+)
        /// </para>
        /// </summary>
        public virtual IList<genreform> genreform {
            get {
                if ((this.genreformField == null)) {
                    this.genreformField = new XTypedList<genreform>(this, LinqToXsdTypeManager.Instance, genreformXName);
                }
                return this.genreformField;
            }
            set {
                if ((value == null)) {
                    this.genreformField = null;
                }
                else {
                    if ((this.genreformField == null)) {
                        this.genreformField = XTypedList<genreform>.Initialize(this, LinqToXsdTypeManager.Instance, value, genreformXName);
                    }
                    else {
                        XTypedServices.SetList<genreform>(this.genreformField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | controlaccess1)+)
        /// </para>
        /// </summary>
        public virtual IList<function> function {
            get {
                if ((this.functionField == null)) {
                    this.functionField = new XTypedList<function>(this, LinqToXsdTypeManager.Instance, functionXName);
                }
                return this.functionField;
            }
            set {
                if ((value == null)) {
                    this.functionField = null;
                }
                else {
                    if ((this.functionField == null)) {
                        this.functionField = XTypedList<function>.Initialize(this, LinqToXsdTypeManager.Instance, value, functionXName);
                    }
                    else {
                        XTypedServices.SetList<function>(this.functionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | controlaccess1)+)
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, titleXName);
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, titleXName);
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | controlaccess1)+)
        /// </para>
        /// </summary>
        public virtual IList<controlaccess> controlaccess1 {
            get {
                if ((this.controlaccess1Field == null)) {
                    this.controlaccess1Field = new XTypedList<controlaccess>(this, LinqToXsdTypeManager.Instance, controlaccess1XName);
                }
                return this.controlaccess1Field;
            }
            set {
                if ((value == null)) {
                    this.controlaccess1Field = null;
                }
                else {
                    if ((this.controlaccess1Field == null)) {
                        this.controlaccess1Field = XTypedList<controlaccess>.Initialize(this, LinqToXsdTypeManager.Instance, value, controlaccess1XName);
                    }
                    else {
                        XTypedServices.SetList<controlaccess>(this.controlaccess1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<controlaccess>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(addressXName, typeof(address));
            localElementDictionary.Add(chronlistXName, typeof(chronlist));
            localElementDictionary.Add(listXName, typeof(list));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(tableXName, typeof(table));
            localElementDictionary.Add(blockquoteXName, typeof(blockquote));
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(corpnameXName, typeof(corpname));
            localElementDictionary.Add(famnameXName, typeof(famname));
            localElementDictionary.Add(geognameXName, typeof(geogname));
            localElementDictionary.Add(nameXName, typeof(name));
            localElementDictionary.Add(occupationXName, typeof(occupation));
            localElementDictionary.Add(persnameXName, typeof(persname));
            localElementDictionary.Add(subjectXName, typeof(subject));
            localElementDictionary.Add(genreformXName, typeof(genreform));
            localElementDictionary.Add(functionXName, typeof(function));
            localElementDictionary.Add(titleXName, typeof(title));
            localElementDictionary.Add(controlaccess1XName, typeof(controlaccess));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | dao | daogrp | odd1)+)
    /// </para>
    /// </summary>
    public partial class odd : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName addressXName = System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName chronlistXName = System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listXName = System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tableXName = System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName blockquoteXName = System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName daoXName = System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dao> daoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName daogrpXName = System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<daogrp> daogrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName odd1XName = System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<odd> odd1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator odd(XElement xe) { return XTypedServices.ToXTypedElement<odd>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static odd() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new ChoiceContentModelEntity(new NamedContentModelEntity(addressXName), new NamedContentModelEntity(chronlistXName), new NamedContentModelEntity(listXName), new NamedContentModelEntity(noteXName), new NamedContentModelEntity(tableXName), new NamedContentModelEntity(blockquoteXName), new NamedContentModelEntity(pXName), new NamedContentModelEntity(daoXName), new NamedContentModelEntity(daogrpXName), new NamedContentModelEntity(odd1XName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | dao | daogrp | odd1)+)
        /// </para>
        /// </summary>
        public odd() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | dao | daogrp | odd1)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | dao | daogrp | odd1)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, addressXName);
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, addressXName);
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | dao | daogrp | odd1)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, chronlistXName);
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, chronlistXName);
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | dao | daogrp | odd1)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, listXName);
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, listXName);
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | dao | daogrp | odd1)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | dao | daogrp | odd1)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, tableXName);
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, tableXName);
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | dao | daogrp | odd1)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, blockquoteXName);
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, blockquoteXName);
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | dao | daogrp | odd1)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | dao | daogrp | odd1)+)
        /// </para>
        /// </summary>
        public virtual IList<dao> dao {
            get {
                if ((this.daoField == null)) {
                    this.daoField = new XTypedList<dao>(this, LinqToXsdTypeManager.Instance, daoXName);
                }
                return this.daoField;
            }
            set {
                if ((value == null)) {
                    this.daoField = null;
                }
                else {
                    if ((this.daoField == null)) {
                        this.daoField = XTypedList<dao>.Initialize(this, LinqToXsdTypeManager.Instance, value, daoXName);
                    }
                    else {
                        XTypedServices.SetList<dao>(this.daoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | dao | daogrp | odd1)+)
        /// </para>
        /// </summary>
        public virtual IList<daogrp> daogrp {
            get {
                if ((this.daogrpField == null)) {
                    this.daogrpField = new XTypedList<daogrp>(this, LinqToXsdTypeManager.Instance, daogrpXName);
                }
                return this.daogrpField;
            }
            set {
                if ((value == null)) {
                    this.daogrpField = null;
                }
                else {
                    if ((this.daogrpField == null)) {
                        this.daogrpField = XTypedList<daogrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, daogrpXName);
                    }
                    else {
                        XTypedServices.SetList<daogrp>(this.daogrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | dao | daogrp | odd1)+)
        /// </para>
        /// </summary>
        public virtual IList<odd> odd1 {
            get {
                if ((this.odd1Field == null)) {
                    this.odd1Field = new XTypedList<odd>(this, LinqToXsdTypeManager.Instance, odd1XName);
                }
                return this.odd1Field;
            }
            set {
                if ((value == null)) {
                    this.odd1Field = null;
                }
                else {
                    if ((this.odd1Field == null)) {
                        this.odd1Field = XTypedList<odd>.Initialize(this, LinqToXsdTypeManager.Instance, value, odd1XName);
                    }
                    else {
                        XTypedServices.SetList<odd>(this.odd1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<odd>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(addressXName, typeof(address));
            localElementDictionary.Add(chronlistXName, typeof(chronlist));
            localElementDictionary.Add(listXName, typeof(list));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(tableXName, typeof(table));
            localElementDictionary.Add(blockquoteXName, typeof(blockquote));
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(daoXName, typeof(dao));
            localElementDictionary.Add(daogrpXName, typeof(daogrp));
            localElementDictionary.Add(odd1XName, typeof(odd));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement | scopecontent1 | dao | daogrp)+)
    /// </para>
    /// </summary>
    public partial class scopecontent : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName addressXName = System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName chronlistXName = System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listXName = System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tableXName = System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName blockquoteXName = System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arrangementXName = System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<arrangement> arrangementField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName scopecontent1XName = System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<scopecontent> scopecontent1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName daoXName = System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dao> daoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName daogrpXName = System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<daogrp> daogrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator scopecontent(XElement xe) { return XTypedServices.ToXTypedElement<scopecontent>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static scopecontent() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new ChoiceContentModelEntity(new NamedContentModelEntity(addressXName), new NamedContentModelEntity(chronlistXName), new NamedContentModelEntity(listXName), new NamedContentModelEntity(noteXName), new NamedContentModelEntity(tableXName), new NamedContentModelEntity(blockquoteXName), new NamedContentModelEntity(pXName), new NamedContentModelEntity(arrangementXName), new NamedContentModelEntity(scopecontent1XName), new NamedContentModelEntity(daoXName), new NamedContentModelEntity(daogrpXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement | scopecontent1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public scopecontent() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement | scopecontent1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement | scopecontent1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, addressXName);
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, addressXName);
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement | scopecontent1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, chronlistXName);
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, chronlistXName);
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement | scopecontent1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, listXName);
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, listXName);
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement | scopecontent1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement | scopecontent1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, tableXName);
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, tableXName);
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement | scopecontent1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, blockquoteXName);
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, blockquoteXName);
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement | scopecontent1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement | scopecontent1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual IList<arrangement> arrangement {
            get {
                if ((this.arrangementField == null)) {
                    this.arrangementField = new XTypedList<arrangement>(this, LinqToXsdTypeManager.Instance, arrangementXName);
                }
                return this.arrangementField;
            }
            set {
                if ((value == null)) {
                    this.arrangementField = null;
                }
                else {
                    if ((this.arrangementField == null)) {
                        this.arrangementField = XTypedList<arrangement>.Initialize(this, LinqToXsdTypeManager.Instance, value, arrangementXName);
                    }
                    else {
                        XTypedServices.SetList<arrangement>(this.arrangementField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement | scopecontent1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual IList<scopecontent> scopecontent1 {
            get {
                if ((this.scopecontent1Field == null)) {
                    this.scopecontent1Field = new XTypedList<scopecontent>(this, LinqToXsdTypeManager.Instance, scopecontent1XName);
                }
                return this.scopecontent1Field;
            }
            set {
                if ((value == null)) {
                    this.scopecontent1Field = null;
                }
                else {
                    if ((this.scopecontent1Field == null)) {
                        this.scopecontent1Field = XTypedList<scopecontent>.Initialize(this, LinqToXsdTypeManager.Instance, value, scopecontent1XName);
                    }
                    else {
                        XTypedServices.SetList<scopecontent>(this.scopecontent1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement | scopecontent1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual IList<dao> dao {
            get {
                if ((this.daoField == null)) {
                    this.daoField = new XTypedList<dao>(this, LinqToXsdTypeManager.Instance, daoXName);
                }
                return this.daoField;
            }
            set {
                if ((value == null)) {
                    this.daoField = null;
                }
                else {
                    if ((this.daoField == null)) {
                        this.daoField = XTypedList<dao>.Initialize(this, LinqToXsdTypeManager.Instance, value, daoXName);
                    }
                    else {
                        XTypedServices.SetList<dao>(this.daoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement | scopecontent1 | dao | daogrp)+)
        /// </para>
        /// </summary>
        public virtual IList<daogrp> daogrp {
            get {
                if ((this.daogrpField == null)) {
                    this.daogrpField = new XTypedList<daogrp>(this, LinqToXsdTypeManager.Instance, daogrpXName);
                }
                return this.daogrpField;
            }
            set {
                if ((value == null)) {
                    this.daogrpField = null;
                }
                else {
                    if ((this.daogrpField == null)) {
                        this.daogrpField = XTypedList<daogrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, daogrpXName);
                    }
                    else {
                        XTypedServices.SetList<daogrp>(this.daogrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<scopecontent>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(addressXName, typeof(address));
            localElementDictionary.Add(chronlistXName, typeof(chronlist));
            localElementDictionary.Add(listXName, typeof(list));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(tableXName, typeof(table));
            localElementDictionary.Add(blockquoteXName, typeof(blockquote));
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(arrangementXName, typeof(arrangement));
            localElementDictionary.Add(scopecontent1XName, typeof(scopecontent));
            localElementDictionary.Add(daoXName, typeof(dao));
            localElementDictionary.Add(daogrpXName, typeof(daogrp));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement1)+)
    /// </para>
    /// </summary>
    public partial class arrangement : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName addressXName = System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName chronlistXName = System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listXName = System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tableXName = System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName blockquoteXName = System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arrangement1XName = System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<arrangement> arrangement1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator arrangement(XElement xe) { return XTypedServices.ToXTypedElement<arrangement>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static arrangement() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new ChoiceContentModelEntity(new NamedContentModelEntity(addressXName), new NamedContentModelEntity(chronlistXName), new NamedContentModelEntity(listXName), new NamedContentModelEntity(noteXName), new NamedContentModelEntity(tableXName), new NamedContentModelEntity(blockquoteXName), new NamedContentModelEntity(pXName), new NamedContentModelEntity(arrangement1XName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement1)+)
        /// </para>
        /// </summary>
        public arrangement() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement1)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement1)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, addressXName);
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, addressXName);
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement1)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, chronlistXName);
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, chronlistXName);
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement1)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, listXName);
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, listXName);
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement1)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement1)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, tableXName);
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, tableXName);
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement1)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, blockquoteXName);
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, blockquoteXName);
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement1)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | arrangement1)+)
        /// </para>
        /// </summary>
        public virtual IList<arrangement> arrangement1 {
            get {
                if ((this.arrangement1Field == null)) {
                    this.arrangement1Field = new XTypedList<arrangement>(this, LinqToXsdTypeManager.Instance, arrangement1XName);
                }
                return this.arrangement1Field;
            }
            set {
                if ((value == null)) {
                    this.arrangement1Field = null;
                }
                else {
                    if ((this.arrangement1Field == null)) {
                        this.arrangement1Field = XTypedList<arrangement>.Initialize(this, LinqToXsdTypeManager.Instance, value, arrangement1XName);
                    }
                    else {
                        XTypedServices.SetList<arrangement>(this.arrangement1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<arrangement>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(addressXName, typeof(address));
            localElementDictionary.Add(chronlistXName, typeof(chronlist));
            localElementDictionary.Add(listXName, typeof(list));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(tableXName, typeof(table));
            localElementDictionary.Add(blockquoteXName, typeof(blockquote));
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(arrangement1XName, typeof(arrangement));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | bibliography1)+)
    /// </para>
    /// </summary>
    public partial class bibliography : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName addressXName = System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName chronlistXName = System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listXName = System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tableXName = System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName blockquoteXName = System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @refXName = System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extrefXName = System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName linkgrpXName = System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibrefXName = System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName archrefXName = System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibliography1XName = System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibliography> bibliography1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator bibliography(XElement xe) { return XTypedServices.ToXTypedElement<bibliography>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static bibliography() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new ChoiceContentModelEntity(new NamedContentModelEntity(addressXName), new NamedContentModelEntity(chronlistXName), new NamedContentModelEntity(listXName), new NamedContentModelEntity(noteXName), new NamedContentModelEntity(tableXName), new NamedContentModelEntity(blockquoteXName), new NamedContentModelEntity(pXName), new NamedContentModelEntity(@refXName), new NamedContentModelEntity(extrefXName), new NamedContentModelEntity(linkgrpXName), new NamedContentModelEntity(bibrefXName), new NamedContentModelEntity(titleXName), new NamedContentModelEntity(archrefXName), new NamedContentModelEntity(bibliography1XName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | bibliography1)+)
        /// </para>
        /// </summary>
        public bibliography() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | bibliography1)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | bibliography1)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, addressXName);
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, addressXName);
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | bibliography1)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, chronlistXName);
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, chronlistXName);
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | bibliography1)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, listXName);
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, listXName);
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | bibliography1)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | bibliography1)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, tableXName);
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, tableXName);
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | bibliography1)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, blockquoteXName);
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, blockquoteXName);
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | bibliography1)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | bibliography1)+)
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, @refXName);
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, @refXName);
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | bibliography1)+)
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, extrefXName);
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, extrefXName);
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | bibliography1)+)
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, linkgrpXName);
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, linkgrpXName);
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | bibliography1)+)
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, bibrefXName);
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibrefXName);
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | bibliography1)+)
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, titleXName);
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, titleXName);
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | bibliography1)+)
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, archrefXName);
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, archrefXName);
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | bibliography1)+)
        /// </para>
        /// </summary>
        public virtual IList<bibliography> bibliography1 {
            get {
                if ((this.bibliography1Field == null)) {
                    this.bibliography1Field = new XTypedList<bibliography>(this, LinqToXsdTypeManager.Instance, bibliography1XName);
                }
                return this.bibliography1Field;
            }
            set {
                if ((value == null)) {
                    this.bibliography1Field = null;
                }
                else {
                    if ((this.bibliography1Field == null)) {
                        this.bibliography1Field = XTypedList<bibliography>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibliography1XName);
                    }
                    else {
                        XTypedServices.SetList<bibliography>(this.bibliography1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<bibliography>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(addressXName, typeof(address));
            localElementDictionary.Add(chronlistXName, typeof(chronlist));
            localElementDictionary.Add(listXName, typeof(list));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(tableXName, typeof(table));
            localElementDictionary.Add(blockquoteXName, typeof(blockquote));
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(@refXName, typeof(@ref));
            localElementDictionary.Add(extrefXName, typeof(extref));
            localElementDictionary.Add(linkgrpXName, typeof(linkgrp));
            localElementDictionary.Add(bibrefXName, typeof(bibref));
            localElementDictionary.Add(titleXName, typeof(title));
            localElementDictionary.Add(archrefXName, typeof(archref));
            localElementDictionary.Add(bibliography1XName, typeof(bibliography));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | fileplan1)+)
    /// </para>
    /// </summary>
    public partial class fileplan : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName addressXName = System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName chronlistXName = System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listXName = System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tableXName = System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName blockquoteXName = System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName fileplan1XName = System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<fileplan> fileplan1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator fileplan(XElement xe) { return XTypedServices.ToXTypedElement<fileplan>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static fileplan() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new ChoiceContentModelEntity(new NamedContentModelEntity(addressXName), new NamedContentModelEntity(chronlistXName), new NamedContentModelEntity(listXName), new NamedContentModelEntity(noteXName), new NamedContentModelEntity(tableXName), new NamedContentModelEntity(blockquoteXName), new NamedContentModelEntity(pXName), new NamedContentModelEntity(fileplan1XName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | fileplan1)+)
        /// </para>
        /// </summary>
        public fileplan() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | fileplan1)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | fileplan1)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, addressXName);
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, addressXName);
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | fileplan1)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, chronlistXName);
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, chronlistXName);
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | fileplan1)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, listXName);
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, listXName);
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | fileplan1)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | fileplan1)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, tableXName);
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, tableXName);
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | fileplan1)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, blockquoteXName);
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, blockquoteXName);
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | fileplan1)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | fileplan1)+)
        /// </para>
        /// </summary>
        public virtual IList<fileplan> fileplan1 {
            get {
                if ((this.fileplan1Field == null)) {
                    this.fileplan1Field = new XTypedList<fileplan>(this, LinqToXsdTypeManager.Instance, fileplan1XName);
                }
                return this.fileplan1Field;
            }
            set {
                if ((value == null)) {
                    this.fileplan1Field = null;
                }
                else {
                    if ((this.fileplan1Field == null)) {
                        this.fileplan1Field = XTypedList<fileplan>.Initialize(this, LinqToXsdTypeManager.Instance, value, fileplan1XName);
                    }
                    else {
                        XTypedServices.SetList<fileplan>(this.fileplan1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<fileplan>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(addressXName, typeof(address));
            localElementDictionary.Add(chronlistXName, typeof(chronlist));
            localElementDictionary.Add(listXName, typeof(list));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(tableXName, typeof(table));
            localElementDictionary.Add(blockquoteXName, typeof(blockquote));
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(fileplan1XName, typeof(fileplan));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | relatedmaterial1)+)
    /// </para>
    /// </summary>
    public partial class relatedmaterial : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName addressXName = System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName chronlistXName = System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listXName = System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tableXName = System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName blockquoteXName = System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @refXName = System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extrefXName = System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName linkgrpXName = System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibrefXName = System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName archrefXName = System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName relatedmaterial1XName = System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<relatedmaterial> relatedmaterial1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator relatedmaterial(XElement xe) { return XTypedServices.ToXTypedElement<relatedmaterial>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static relatedmaterial() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new ChoiceContentModelEntity(new NamedContentModelEntity(addressXName), new NamedContentModelEntity(chronlistXName), new NamedContentModelEntity(listXName), new NamedContentModelEntity(noteXName), new NamedContentModelEntity(tableXName), new NamedContentModelEntity(blockquoteXName), new NamedContentModelEntity(pXName), new NamedContentModelEntity(@refXName), new NamedContentModelEntity(extrefXName), new NamedContentModelEntity(linkgrpXName), new NamedContentModelEntity(bibrefXName), new NamedContentModelEntity(titleXName), new NamedContentModelEntity(archrefXName), new NamedContentModelEntity(relatedmaterial1XName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | relatedmaterial1)+)
        /// </para>
        /// </summary>
        public relatedmaterial() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | relatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | relatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, addressXName);
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, addressXName);
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | relatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, chronlistXName);
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, chronlistXName);
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | relatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, listXName);
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, listXName);
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | relatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | relatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, tableXName);
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, tableXName);
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | relatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, blockquoteXName);
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, blockquoteXName);
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | relatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | relatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, @refXName);
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, @refXName);
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | relatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, extrefXName);
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, extrefXName);
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | relatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, linkgrpXName);
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, linkgrpXName);
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | relatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, bibrefXName);
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibrefXName);
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | relatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, titleXName);
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, titleXName);
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | relatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, archrefXName);
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, archrefXName);
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | relatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<relatedmaterial> relatedmaterial1 {
            get {
                if ((this.relatedmaterial1Field == null)) {
                    this.relatedmaterial1Field = new XTypedList<relatedmaterial>(this, LinqToXsdTypeManager.Instance, relatedmaterial1XName);
                }
                return this.relatedmaterial1Field;
            }
            set {
                if ((value == null)) {
                    this.relatedmaterial1Field = null;
                }
                else {
                    if ((this.relatedmaterial1Field == null)) {
                        this.relatedmaterial1Field = XTypedList<relatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, relatedmaterial1XName);
                    }
                    else {
                        XTypedServices.SetList<relatedmaterial>(this.relatedmaterial1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<relatedmaterial>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(addressXName, typeof(address));
            localElementDictionary.Add(chronlistXName, typeof(chronlist));
            localElementDictionary.Add(listXName, typeof(list));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(tableXName, typeof(table));
            localElementDictionary.Add(blockquoteXName, typeof(blockquote));
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(@refXName, typeof(@ref));
            localElementDictionary.Add(extrefXName, typeof(extref));
            localElementDictionary.Add(linkgrpXName, typeof(linkgrp));
            localElementDictionary.Add(bibrefXName, typeof(bibref));
            localElementDictionary.Add(titleXName, typeof(title));
            localElementDictionary.Add(archrefXName, typeof(archref));
            localElementDictionary.Add(relatedmaterial1XName, typeof(relatedmaterial));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | separatedmaterial1)+)
    /// </para>
    /// </summary>
    public partial class separatedmaterial : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName addressXName = System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName chronlistXName = System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listXName = System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tableXName = System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName blockquoteXName = System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @refXName = System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extrefXName = System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName linkgrpXName = System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibrefXName = System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName archrefXName = System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName separatedmaterial1XName = System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<separatedmaterial> separatedmaterial1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator separatedmaterial(XElement xe) { return XTypedServices.ToXTypedElement<separatedmaterial>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static separatedmaterial() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new ChoiceContentModelEntity(new NamedContentModelEntity(addressXName), new NamedContentModelEntity(chronlistXName), new NamedContentModelEntity(listXName), new NamedContentModelEntity(noteXName), new NamedContentModelEntity(tableXName), new NamedContentModelEntity(blockquoteXName), new NamedContentModelEntity(pXName), new NamedContentModelEntity(@refXName), new NamedContentModelEntity(extrefXName), new NamedContentModelEntity(linkgrpXName), new NamedContentModelEntity(bibrefXName), new NamedContentModelEntity(titleXName), new NamedContentModelEntity(archrefXName), new NamedContentModelEntity(separatedmaterial1XName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | separatedmaterial1)+)
        /// </para>
        /// </summary>
        public separatedmaterial() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | separatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | separatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, addressXName);
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, addressXName);
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | separatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, chronlistXName);
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, chronlistXName);
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | separatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, listXName);
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, listXName);
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | separatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | separatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, tableXName);
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, tableXName);
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | separatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, blockquoteXName);
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, blockquoteXName);
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | separatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | separatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, @refXName);
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, @refXName);
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | separatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, extrefXName);
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, extrefXName);
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | separatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, linkgrpXName);
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, linkgrpXName);
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | separatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, bibrefXName);
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibrefXName);
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | separatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, titleXName);
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, titleXName);
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | separatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, archrefXName);
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, archrefXName);
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | separatedmaterial1)+)
        /// </para>
        /// </summary>
        public virtual IList<separatedmaterial> separatedmaterial1 {
            get {
                if ((this.separatedmaterial1Field == null)) {
                    this.separatedmaterial1Field = new XTypedList<separatedmaterial>(this, LinqToXsdTypeManager.Instance, separatedmaterial1XName);
                }
                return this.separatedmaterial1Field;
            }
            set {
                if ((value == null)) {
                    this.separatedmaterial1Field = null;
                }
                else {
                    if ((this.separatedmaterial1Field == null)) {
                        this.separatedmaterial1Field = XTypedList<separatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, separatedmaterial1XName);
                    }
                    else {
                        XTypedServices.SetList<separatedmaterial>(this.separatedmaterial1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<separatedmaterial>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(addressXName, typeof(address));
            localElementDictionary.Add(chronlistXName, typeof(chronlist));
            localElementDictionary.Add(listXName, typeof(list));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(tableXName, typeof(table));
            localElementDictionary.Add(blockquoteXName, typeof(blockquote));
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(@refXName, typeof(@ref));
            localElementDictionary.Add(extrefXName, typeof(extref));
            localElementDictionary.Add(linkgrpXName, typeof(linkgrp));
            localElementDictionary.Add(bibrefXName, typeof(bibref));
            localElementDictionary.Add(titleXName, typeof(title));
            localElementDictionary.Add(archrefXName, typeof(archref));
            localElementDictionary.Add(separatedmaterial1XName, typeof(separatedmaterial));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | otherfindaid1)+)
    /// </para>
    /// </summary>
    public partial class otherfindaid : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName addressXName = System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName chronlistXName = System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listXName = System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tableXName = System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName blockquoteXName = System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @refXName = System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extrefXName = System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName linkgrpXName = System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibrefXName = System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName archrefXName = System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName otherfindaid1XName = System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<otherfindaid> otherfindaid1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator otherfindaid(XElement xe) { return XTypedServices.ToXTypedElement<otherfindaid>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static otherfindaid() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new ChoiceContentModelEntity(new NamedContentModelEntity(addressXName), new NamedContentModelEntity(chronlistXName), new NamedContentModelEntity(listXName), new NamedContentModelEntity(noteXName), new NamedContentModelEntity(tableXName), new NamedContentModelEntity(blockquoteXName), new NamedContentModelEntity(pXName), new NamedContentModelEntity(@refXName), new NamedContentModelEntity(extrefXName), new NamedContentModelEntity(linkgrpXName), new NamedContentModelEntity(bibrefXName), new NamedContentModelEntity(titleXName), new NamedContentModelEntity(archrefXName), new NamedContentModelEntity(otherfindaid1XName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | otherfindaid1)+)
        /// </para>
        /// </summary>
        public otherfindaid() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | otherfindaid1)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | otherfindaid1)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, addressXName);
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, addressXName);
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | otherfindaid1)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, chronlistXName);
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, chronlistXName);
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | otherfindaid1)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, listXName);
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, listXName);
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | otherfindaid1)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | otherfindaid1)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, tableXName);
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, tableXName);
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | otherfindaid1)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, blockquoteXName);
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, blockquoteXName);
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | otherfindaid1)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | otherfindaid1)+)
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, @refXName);
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, @refXName);
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | otherfindaid1)+)
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, extrefXName);
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, extrefXName);
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | otherfindaid1)+)
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, linkgrpXName);
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, linkgrpXName);
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | otherfindaid1)+)
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, bibrefXName);
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibrefXName);
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | otherfindaid1)+)
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, titleXName);
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, titleXName);
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | otherfindaid1)+)
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, archrefXName);
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, archrefXName);
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p | @ref | extref | linkgrp | bibref | title | archref | otherfindaid1)+)
        /// </para>
        /// </summary>
        public virtual IList<otherfindaid> otherfindaid1 {
            get {
                if ((this.otherfindaid1Field == null)) {
                    this.otherfindaid1Field = new XTypedList<otherfindaid>(this, LinqToXsdTypeManager.Instance, otherfindaid1XName);
                }
                return this.otherfindaid1Field;
            }
            set {
                if ((value == null)) {
                    this.otherfindaid1Field = null;
                }
                else {
                    if ((this.otherfindaid1Field == null)) {
                        this.otherfindaid1Field = XTypedList<otherfindaid>.Initialize(this, LinqToXsdTypeManager.Instance, value, otherfindaid1XName);
                    }
                    else {
                        XTypedServices.SetList<otherfindaid>(this.otherfindaid1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<otherfindaid>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(addressXName, typeof(address));
            localElementDictionary.Add(chronlistXName, typeof(chronlist));
            localElementDictionary.Add(listXName, typeof(list));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(tableXName, typeof(table));
            localElementDictionary.Add(blockquoteXName, typeof(blockquote));
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(@refXName, typeof(@ref));
            localElementDictionary.Add(extrefXName, typeof(extref));
            localElementDictionary.Add(linkgrpXName, typeof(linkgrp));
            localElementDictionary.Add(bibrefXName, typeof(bibref));
            localElementDictionary.Add(titleXName, typeof(title));
            localElementDictionary.Add(archrefXName, typeof(archref));
            localElementDictionary.Add(otherfindaid1XName, typeof(otherfindaid));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((listhead?, indexentry+)|index1+))
    /// </para>
    /// </summary>
    public partial class index : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName addressXName = System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName chronlistXName = System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listXName = System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tableXName = System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName blockquoteXName = System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listheadXName = System.Xml.Linq.XName.Get("listhead", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName indexentryXName = System.Xml.Linq.XName.Get("indexentry", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<indexentry> indexentryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName index1XName = System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<index> index1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator index(XElement xe) { return XTypedServices.ToXTypedElement<index>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static index() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new ChoiceContentModelEntity(new NamedContentModelEntity(addressXName), new NamedContentModelEntity(chronlistXName), new NamedContentModelEntity(listXName), new NamedContentModelEntity(noteXName), new NamedContentModelEntity(tableXName), new NamedContentModelEntity(blockquoteXName), new NamedContentModelEntity(pXName)), new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(listheadXName), new NamedContentModelEntity(indexentryXName)), new NamedContentModelEntity(index1XName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((listhead?, indexentry+)|index1+))
        /// </para>
        /// </summary>
        public index() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((listhead?, indexentry+)|index1+))
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((listhead?, indexentry+)|index1+))
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, addressXName);
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, addressXName);
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((listhead?, indexentry+)|index1+))
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, chronlistXName);
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, chronlistXName);
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((listhead?, indexentry+)|index1+))
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, listXName);
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, listXName);
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((listhead?, indexentry+)|index1+))
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((listhead?, indexentry+)|index1+))
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, tableXName);
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, tableXName);
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((listhead?, indexentry+)|index1+))
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, blockquoteXName);
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, blockquoteXName);
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((listhead?, indexentry+)|index1+))
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((listhead?, indexentry+)|index1+))
        /// </para>
        /// </summary>
        public virtual listhead listhead {
            get {
                XElement x = this.GetElement(listheadXName);
                return ((listhead)(x));
            }
            set {
                this.SetElement(listheadXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((listhead?, indexentry+)|index1+))
        /// </para>
        /// </summary>
        public virtual IList<indexentry> indexentry {
            get {
                if ((this.indexentryField == null)) {
                    this.indexentryField = new XTypedList<indexentry>(this, LinqToXsdTypeManager.Instance, indexentryXName);
                }
                return this.indexentryField;
            }
            set {
                if ((value == null)) {
                    this.indexentryField = null;
                }
                else {
                    if ((this.indexentryField == null)) {
                        this.indexentryField = XTypedList<indexentry>.Initialize(this, LinqToXsdTypeManager.Instance, value, indexentryXName);
                    }
                    else {
                        XTypedServices.SetList<indexentry>(this.indexentryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((listhead?, indexentry+)|index1+))
        /// </para>
        /// </summary>
        public virtual IList<index> index1 {
            get {
                if ((this.index1Field == null)) {
                    this.index1Field = new XTypedList<index>(this, LinqToXsdTypeManager.Instance, index1XName);
                }
                return this.index1Field;
            }
            set {
                if ((value == null)) {
                    this.index1Field = null;
                }
                else {
                    if ((this.index1Field == null)) {
                        this.index1Field = XTypedList<index>.Initialize(this, LinqToXsdTypeManager.Instance, value, index1XName);
                    }
                    else {
                        XTypedServices.SetList<index>(this.index1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<index>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(addressXName, typeof(address));
            localElementDictionary.Add(chronlistXName, typeof(chronlist));
            localElementDictionary.Add(listXName, typeof(list));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(tableXName, typeof(table));
            localElementDictionary.Add(blockquoteXName, typeof(blockquote));
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(listheadXName, typeof(listhead));
            localElementDictionary.Add(indexentryXName, typeof(indexentry));
            localElementDictionary.Add(index1XName, typeof(index));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((namegrp | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title), (ptrgrp | ptr | @ref)?, indexentry1*)
    /// </para>
    /// </summary>
    public partial class indexentry : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName namegrpXName = System.Xml.Linq.XName.Get("namegrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName corpnameXName = System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName famnameXName = System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geognameXName = System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName occupationXName = System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName persnameXName = System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName subjectXName = System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName genreformXName = System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName functionXName = System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrgrpXName = System.Xml.Linq.XName.Get("ptrgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @refXName = System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName indexentry1XName = System.Xml.Linq.XName.Get("indexentry", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<indexentry> indexentry1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("indexentry", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator indexentry(XElement xe) { return XTypedServices.ToXTypedElement<indexentry>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static indexentry() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(namegrpXName), new NamedContentModelEntity(corpnameXName), new NamedContentModelEntity(famnameXName), new NamedContentModelEntity(geognameXName), new NamedContentModelEntity(nameXName), new NamedContentModelEntity(occupationXName), new NamedContentModelEntity(persnameXName), new NamedContentModelEntity(subjectXName), new NamedContentModelEntity(genreformXName), new NamedContentModelEntity(functionXName), new NamedContentModelEntity(titleXName)), new ChoiceContentModelEntity(new NamedContentModelEntity(ptrgrpXName), new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(@refXName)), new NamedContentModelEntity(indexentry1XName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((namegrp | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title), (ptrgrp | ptr | @ref)?, indexentry1*)
        /// </para>
        /// </summary>
        public indexentry() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((namegrp | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title), (ptrgrp | ptr | @ref)?, indexentry1*)
        /// </para>
        /// </summary>
        public virtual namegrp namegrp {
            get {
                XElement x = this.GetElement(namegrpXName);
                return ((namegrp)(x));
            }
            set {
                this.SetElement(namegrpXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((namegrp | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title), (ptrgrp | ptr | @ref)?, indexentry1*)
        /// </para>
        /// </summary>
        public virtual corpname corpname {
            get {
                XElement x = this.GetElement(corpnameXName);
                return ((corpname)(x));
            }
            set {
                this.SetElement(corpnameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((namegrp | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title), (ptrgrp | ptr | @ref)?, indexentry1*)
        /// </para>
        /// </summary>
        public virtual famname famname {
            get {
                XElement x = this.GetElement(famnameXName);
                return ((famname)(x));
            }
            set {
                this.SetElement(famnameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((namegrp | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title), (ptrgrp | ptr | @ref)?, indexentry1*)
        /// </para>
        /// </summary>
        public virtual geogname geogname {
            get {
                XElement x = this.GetElement(geognameXName);
                return ((geogname)(x));
            }
            set {
                this.SetElement(geognameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((namegrp | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title), (ptrgrp | ptr | @ref)?, indexentry1*)
        /// </para>
        /// </summary>
        public virtual name name {
            get {
                XElement x = this.GetElement(nameXName);
                return ((name)(x));
            }
            set {
                this.SetElement(nameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((namegrp | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title), (ptrgrp | ptr | @ref)?, indexentry1*)
        /// </para>
        /// </summary>
        public virtual occupation occupation {
            get {
                XElement x = this.GetElement(occupationXName);
                return ((occupation)(x));
            }
            set {
                this.SetElement(occupationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((namegrp | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title), (ptrgrp | ptr | @ref)?, indexentry1*)
        /// </para>
        /// </summary>
        public virtual persname persname {
            get {
                XElement x = this.GetElement(persnameXName);
                return ((persname)(x));
            }
            set {
                this.SetElement(persnameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((namegrp | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title), (ptrgrp | ptr | @ref)?, indexentry1*)
        /// </para>
        /// </summary>
        public virtual subject subject {
            get {
                XElement x = this.GetElement(subjectXName);
                return ((subject)(x));
            }
            set {
                this.SetElement(subjectXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((namegrp | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title), (ptrgrp | ptr | @ref)?, indexentry1*)
        /// </para>
        /// </summary>
        public virtual genreform genreform {
            get {
                XElement x = this.GetElement(genreformXName);
                return ((genreform)(x));
            }
            set {
                this.SetElement(genreformXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((namegrp | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title), (ptrgrp | ptr | @ref)?, indexentry1*)
        /// </para>
        /// </summary>
        public virtual function function {
            get {
                XElement x = this.GetElement(functionXName);
                return ((function)(x));
            }
            set {
                this.SetElement(functionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((namegrp | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title), (ptrgrp | ptr | @ref)?, indexentry1*)
        /// </para>
        /// </summary>
        public virtual title title {
            get {
                XElement x = this.GetElement(titleXName);
                return ((title)(x));
            }
            set {
                this.SetElement(titleXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((namegrp | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title), (ptrgrp | ptr | @ref)?, indexentry1*)
        /// </para>
        /// </summary>
        public virtual ptrgrp ptrgrp {
            get {
                XElement x = this.GetElement(ptrgrpXName);
                return ((ptrgrp)(x));
            }
            set {
                this.SetElement(ptrgrpXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((namegrp | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title), (ptrgrp | ptr | @ref)?, indexentry1*)
        /// </para>
        /// </summary>
        public virtual ptr ptr {
            get {
                XElement x = this.GetElement(ptrXName);
                return ((ptr)(x));
            }
            set {
                this.SetElement(ptrXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((namegrp | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title), (ptrgrp | ptr | @ref)?, indexentry1*)
        /// </para>
        /// </summary>
        public virtual @ref @ref {
            get {
                XElement x = this.GetElement(@refXName);
                return ((@ref)(x));
            }
            set {
                this.SetElement(@refXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((namegrp | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title), (ptrgrp | ptr | @ref)?, indexentry1*)
        /// </para>
        /// </summary>
        public virtual IList<indexentry> indexentry1 {
            get {
                if ((this.indexentry1Field == null)) {
                    this.indexentry1Field = new XTypedList<indexentry>(this, LinqToXsdTypeManager.Instance, indexentry1XName);
                }
                return this.indexentry1Field;
            }
            set {
                if ((value == null)) {
                    this.indexentry1Field = null;
                }
                else {
                    if ((this.indexentry1Field == null)) {
                        this.indexentry1Field = XTypedList<indexentry>.Initialize(this, LinqToXsdTypeManager.Instance, value, indexentry1XName);
                    }
                    else {
                        XTypedServices.SetList<indexentry>(this.indexentry1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<indexentry>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(namegrpXName, typeof(namegrp));
            localElementDictionary.Add(corpnameXName, typeof(corpname));
            localElementDictionary.Add(famnameXName, typeof(famname));
            localElementDictionary.Add(geognameXName, typeof(geogname));
            localElementDictionary.Add(nameXName, typeof(name));
            localElementDictionary.Add(occupationXName, typeof(occupation));
            localElementDictionary.Add(persnameXName, typeof(persname));
            localElementDictionary.Add(subjectXName, typeof(subject));
            localElementDictionary.Add(genreformXName, typeof(genreform));
            localElementDictionary.Add(functionXName, typeof(function));
            localElementDictionary.Add(titleXName, typeof(title));
            localElementDictionary.Add(ptrgrpXName, typeof(ptrgrp));
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(@refXName, typeof(@ref));
            localElementDictionary.Add(indexentry1XName, typeof(indexentry));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | note)+
    /// </para>
    /// </summary>
    public partial class namegrp : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName corpnameXName = System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<corpname> corpnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName famnameXName = System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<famname> famnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geognameXName = System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<geogname> geognameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<name> nameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName occupationXName = System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<occupation> occupationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName persnameXName = System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<persname> persnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName subjectXName = System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<subject> subjectField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName genreformXName = System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<genreform> genreformField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName functionXName = System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<function> functionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("namegrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator namegrp(XElement xe) { return XTypedServices.ToXTypedElement<namegrp>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static namegrp() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(corpnameXName), new NamedContentModelEntity(famnameXName), new NamedContentModelEntity(geognameXName), new NamedContentModelEntity(nameXName), new NamedContentModelEntity(occupationXName), new NamedContentModelEntity(persnameXName), new NamedContentModelEntity(subjectXName), new NamedContentModelEntity(genreformXName), new NamedContentModelEntity(functionXName), new NamedContentModelEntity(titleXName), new NamedContentModelEntity(noteXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | note)+
        /// </para>
        /// </summary>
        public namegrp() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | note)+
        /// </para>
        /// </summary>
        public virtual IList<corpname> corpname {
            get {
                if ((this.corpnameField == null)) {
                    this.corpnameField = new XTypedList<corpname>(this, LinqToXsdTypeManager.Instance, corpnameXName);
                }
                return this.corpnameField;
            }
            set {
                if ((value == null)) {
                    this.corpnameField = null;
                }
                else {
                    if ((this.corpnameField == null)) {
                        this.corpnameField = XTypedList<corpname>.Initialize(this, LinqToXsdTypeManager.Instance, value, corpnameXName);
                    }
                    else {
                        XTypedServices.SetList<corpname>(this.corpnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | note)+
        /// </para>
        /// </summary>
        public virtual IList<famname> famname {
            get {
                if ((this.famnameField == null)) {
                    this.famnameField = new XTypedList<famname>(this, LinqToXsdTypeManager.Instance, famnameXName);
                }
                return this.famnameField;
            }
            set {
                if ((value == null)) {
                    this.famnameField = null;
                }
                else {
                    if ((this.famnameField == null)) {
                        this.famnameField = XTypedList<famname>.Initialize(this, LinqToXsdTypeManager.Instance, value, famnameXName);
                    }
                    else {
                        XTypedServices.SetList<famname>(this.famnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | note)+
        /// </para>
        /// </summary>
        public virtual IList<geogname> geogname {
            get {
                if ((this.geognameField == null)) {
                    this.geognameField = new XTypedList<geogname>(this, LinqToXsdTypeManager.Instance, geognameXName);
                }
                return this.geognameField;
            }
            set {
                if ((value == null)) {
                    this.geognameField = null;
                }
                else {
                    if ((this.geognameField == null)) {
                        this.geognameField = XTypedList<geogname>.Initialize(this, LinqToXsdTypeManager.Instance, value, geognameXName);
                    }
                    else {
                        XTypedServices.SetList<geogname>(this.geognameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | note)+
        /// </para>
        /// </summary>
        public virtual IList<name> name {
            get {
                if ((this.nameField == null)) {
                    this.nameField = new XTypedList<name>(this, LinqToXsdTypeManager.Instance, nameXName);
                }
                return this.nameField;
            }
            set {
                if ((value == null)) {
                    this.nameField = null;
                }
                else {
                    if ((this.nameField == null)) {
                        this.nameField = XTypedList<name>.Initialize(this, LinqToXsdTypeManager.Instance, value, nameXName);
                    }
                    else {
                        XTypedServices.SetList<name>(this.nameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | note)+
        /// </para>
        /// </summary>
        public virtual IList<occupation> occupation {
            get {
                if ((this.occupationField == null)) {
                    this.occupationField = new XTypedList<occupation>(this, LinqToXsdTypeManager.Instance, occupationXName);
                }
                return this.occupationField;
            }
            set {
                if ((value == null)) {
                    this.occupationField = null;
                }
                else {
                    if ((this.occupationField == null)) {
                        this.occupationField = XTypedList<occupation>.Initialize(this, LinqToXsdTypeManager.Instance, value, occupationXName);
                    }
                    else {
                        XTypedServices.SetList<occupation>(this.occupationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | note)+
        /// </para>
        /// </summary>
        public virtual IList<persname> persname {
            get {
                if ((this.persnameField == null)) {
                    this.persnameField = new XTypedList<persname>(this, LinqToXsdTypeManager.Instance, persnameXName);
                }
                return this.persnameField;
            }
            set {
                if ((value == null)) {
                    this.persnameField = null;
                }
                else {
                    if ((this.persnameField == null)) {
                        this.persnameField = XTypedList<persname>.Initialize(this, LinqToXsdTypeManager.Instance, value, persnameXName);
                    }
                    else {
                        XTypedServices.SetList<persname>(this.persnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | note)+
        /// </para>
        /// </summary>
        public virtual IList<subject> subject {
            get {
                if ((this.subjectField == null)) {
                    this.subjectField = new XTypedList<subject>(this, LinqToXsdTypeManager.Instance, subjectXName);
                }
                return this.subjectField;
            }
            set {
                if ((value == null)) {
                    this.subjectField = null;
                }
                else {
                    if ((this.subjectField == null)) {
                        this.subjectField = XTypedList<subject>.Initialize(this, LinqToXsdTypeManager.Instance, value, subjectXName);
                    }
                    else {
                        XTypedServices.SetList<subject>(this.subjectField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | note)+
        /// </para>
        /// </summary>
        public virtual IList<genreform> genreform {
            get {
                if ((this.genreformField == null)) {
                    this.genreformField = new XTypedList<genreform>(this, LinqToXsdTypeManager.Instance, genreformXName);
                }
                return this.genreformField;
            }
            set {
                if ((value == null)) {
                    this.genreformField = null;
                }
                else {
                    if ((this.genreformField == null)) {
                        this.genreformField = XTypedList<genreform>.Initialize(this, LinqToXsdTypeManager.Instance, value, genreformXName);
                    }
                    else {
                        XTypedServices.SetList<genreform>(this.genreformField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | note)+
        /// </para>
        /// </summary>
        public virtual IList<function> function {
            get {
                if ((this.functionField == null)) {
                    this.functionField = new XTypedList<function>(this, LinqToXsdTypeManager.Instance, functionXName);
                }
                return this.functionField;
            }
            set {
                if ((value == null)) {
                    this.functionField = null;
                }
                else {
                    if ((this.functionField == null)) {
                        this.functionField = XTypedList<function>.Initialize(this, LinqToXsdTypeManager.Instance, value, functionXName);
                    }
                    else {
                        XTypedServices.SetList<function>(this.functionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | note)+
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, titleXName);
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, titleXName);
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (corpname | famname | geogname | name | occupation | persname | subject | genreform | function | title | note)+
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<namegrp>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(corpnameXName, typeof(corpname));
            localElementDictionary.Add(famnameXName, typeof(famname));
            localElementDictionary.Add(geognameXName, typeof(geogname));
            localElementDictionary.Add(nameXName, typeof(name));
            localElementDictionary.Add(occupationXName, typeof(occupation));
            localElementDictionary.Add(persnameXName, typeof(persname));
            localElementDictionary.Add(subjectXName, typeof(subject));
            localElementDictionary.Add(genreformXName, typeof(genreform));
            localElementDictionary.Add(functionXName, typeof(function));
            localElementDictionary.Add(titleXName, typeof(title));
            localElementDictionary.Add(noteXName, typeof(note));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | @ref)+
    /// </para>
    /// </summary>
    public partial class ptrgrp : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @refXName = System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ptrgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ptrgrp(XElement xe) { return XTypedServices.ToXTypedElement<ptrgrp>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ptrgrp() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(@refXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | @ref)+
        /// </para>
        /// </summary>
        public ptrgrp() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | @ref)+
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | @ref)+
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, @refXName);
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, @refXName);
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ptrgrp>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(@refXName, typeof(@ref));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((thead?, ((c, thead?)+|(c01, thead?)+))|dsc1*))
    /// </para>
    /// </summary>
    public partial class dsc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName addressXName = System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName chronlistXName = System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listXName = System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tableXName = System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName blockquoteXName = System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName theadXName = System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<thead> theadField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cXName = System.Xml.Linq.XName.Get("c", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<c> cField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName c01XName = System.Xml.Linq.XName.Get("c01", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<c01> c01Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dsc1XName = System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dsc> dsc1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName othertypeXName = System.Xml.Linq.XName.Get("othertype", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tpatternXName = System.Xml.Linq.XName.Get("tpattern", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator dsc(XElement xe) { return XTypedServices.ToXTypedElement<dsc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static dsc() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new ChoiceContentModelEntity(new NamedContentModelEntity(addressXName), new NamedContentModelEntity(chronlistXName), new NamedContentModelEntity(listXName), new NamedContentModelEntity(noteXName), new NamedContentModelEntity(tableXName), new NamedContentModelEntity(blockquoteXName), new NamedContentModelEntity(pXName)), new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(theadXName), new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(cXName), new NamedContentModelEntity(theadXName)), new SequenceContentModelEntity(new NamedContentModelEntity(c01XName), new NamedContentModelEntity(theadXName)))), new NamedContentModelEntity(dsc1XName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((thead?, ((c, thead?)+|(c01, thead?)+))|dsc1*))
        /// </para>
        /// </summary>
        public dsc() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((thead?, ((c, thead?)+|(c01, thead?)+))|dsc1*))
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((thead?, ((c, thead?)+|(c01, thead?)+))|dsc1*))
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, addressXName);
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, addressXName);
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((thead?, ((c, thead?)+|(c01, thead?)+))|dsc1*))
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, chronlistXName);
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, chronlistXName);
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((thead?, ((c, thead?)+|(c01, thead?)+))|dsc1*))
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, listXName);
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, listXName);
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((thead?, ((c, thead?)+|(c01, thead?)+))|dsc1*))
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((thead?, ((c, thead?)+|(c01, thead?)+))|dsc1*))
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, tableXName);
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, tableXName);
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((thead?, ((c, thead?)+|(c01, thead?)+))|dsc1*))
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, blockquoteXName);
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, blockquoteXName);
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((thead?, ((c, thead?)+|(c01, thead?)+))|dsc1*))
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((thead?, ((c, thead?)+|(c01, thead?)+))|dsc1*))
        /// </para>
        /// </summary>
        public virtual IList<thead> thead {
            get {
                if ((this.theadField == null)) {
                    this.theadField = new XTypedList<thead>(this, LinqToXsdTypeManager.Instance, theadXName);
                }
                return this.theadField;
            }
            set {
                if ((value == null)) {
                    this.theadField = null;
                }
                else {
                    if ((this.theadField == null)) {
                        this.theadField = XTypedList<thead>.Initialize(this, LinqToXsdTypeManager.Instance, value, theadXName);
                    }
                    else {
                        XTypedServices.SetList<thead>(this.theadField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((thead?, ((c, thead?)+|(c01, thead?)+))|dsc1*))
        /// </para>
        /// </summary>
        public virtual IList<c> c {
            get {
                if ((this.cField == null)) {
                    this.cField = new XTypedList<c>(this, LinqToXsdTypeManager.Instance, cXName);
                }
                return this.cField;
            }
            set {
                if ((value == null)) {
                    this.cField = null;
                }
                else {
                    if ((this.cField == null)) {
                        this.cField = XTypedList<c>.Initialize(this, LinqToXsdTypeManager.Instance, value, cXName);
                    }
                    else {
                        XTypedServices.SetList<c>(this.cField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((thead?, ((c, thead?)+|(c01, thead?)+))|dsc1*))
        /// </para>
        /// </summary>
        public virtual IList<c01> c01 {
            get {
                if ((this.c01Field == null)) {
                    this.c01Field = new XTypedList<c01>(this, LinqToXsdTypeManager.Instance, c01XName);
                }
                return this.c01Field;
            }
            set {
                if ((value == null)) {
                    this.c01Field = null;
                }
                else {
                    if ((this.c01Field == null)) {
                        this.c01Field = XTypedList<c01>.Initialize(this, LinqToXsdTypeManager.Instance, value, c01XName);
                    }
                    else {
                        XTypedServices.SetList<c01>(this.c01Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)*, ((thead?, ((c, thead?)+|(c01, thead?)+))|dsc1*))
        /// </para>
        /// </summary>
        public virtual IList<dsc> dsc1 {
            get {
                if ((this.dsc1Field == null)) {
                    this.dsc1Field = new XTypedList<dsc>(this, LinqToXsdTypeManager.Instance, dsc1XName);
                }
                return this.dsc1Field;
            }
            set {
                if ((value == null)) {
                    this.dsc1Field = null;
                }
                else {
                    if ((this.dsc1Field == null)) {
                        this.dsc1Field = XTypedList<dsc>.Initialize(this, LinqToXsdTypeManager.Instance, value, dsc1XName);
                    }
                    else {
                        XTypedServices.SetList<dsc>(this.dsc1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string othertype {
            get {
                XAttribute x = this.Attribute(othertypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(othertypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string tpattern {
            get {
                XAttribute x = this.Attribute(tpatternXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(tpatternXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<dsc>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(addressXName, typeof(address));
            localElementDictionary.Add(chronlistXName, typeof(chronlist));
            localElementDictionary.Add(listXName, typeof(list));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(tableXName, typeof(table));
            localElementDictionary.Add(blockquoteXName, typeof(blockquote));
            localElementDictionary.Add(pXName, typeof(p));
            localElementDictionary.Add(theadXName, typeof(thead));
            localElementDictionary.Add(cXName, typeof(c));
            localElementDictionary.Add(c01XName, typeof(c01));
            localElementDictionary.Add(dsc1XName, typeof(dsc));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
    /// </para>
    /// </summary>
    public partial class c : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName didXName = System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName accessrestrictXName = System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accessrestrict> accessrestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName accrualsXName = System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accruals> accrualsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName acqinfoXName = System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<acqinfo> acqinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altformavailXName = System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<altformavail> altformavailField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName appraisalXName = System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<appraisal> appraisalField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arrangementXName = System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<arrangement> arrangementField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibliographyXName = System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibliography> bibliographyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bioghistXName = System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bioghist> bioghistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName controlaccessXName = System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<controlaccess> controlaccessField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName custodhistXName = System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<custodhist> custodhistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descgrpXName = System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<descgrp> descgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName fileplanXName = System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<fileplan> fileplanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName indexXName = System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<index> indexField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName oddXName = System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<odd> oddField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName originalslocXName = System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<originalsloc> originalslocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName otherfindaidXName = System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<otherfindaid> otherfindaidField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phystechXName = System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phystech> phystechField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName preferciteXName = System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<prefercite> preferciteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName processinfoXName = System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<processinfo> processinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName relatedmaterialXName = System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<relatedmaterial> relatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName scopecontentXName = System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<scopecontent> scopecontentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName separatedmaterialXName = System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<separatedmaterial> separatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userestrictXName = System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<userestrict> userestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dscXName = System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dsc> dscField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName daoXName = System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dao> daoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName daogrpXName = System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<daogrp> daogrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName theadXName = System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<thead> theadField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName c1XName = System.Xml.Linq.XName.Get("c", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<c> c1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName levelXName = System.Xml.Linq.XName.Get("level", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName otherlevelXName = System.Xml.Linq.XName.Get("otherlevel", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tpatternXName = System.Xml.Linq.XName.Get("tpattern", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("c", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator c(XElement xe) { return XTypedServices.ToXTypedElement<c>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static c() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new NamedContentModelEntity(didXName), new ChoiceContentModelEntity(new NamedContentModelEntity(accessrestrictXName), new NamedContentModelEntity(accrualsXName), new NamedContentModelEntity(acqinfoXName), new NamedContentModelEntity(altformavailXName), new NamedContentModelEntity(appraisalXName), new NamedContentModelEntity(arrangementXName), new NamedContentModelEntity(bibliographyXName), new NamedContentModelEntity(bioghistXName), new NamedContentModelEntity(controlaccessXName), new NamedContentModelEntity(custodhistXName), new NamedContentModelEntity(descgrpXName), new NamedContentModelEntity(fileplanXName), new NamedContentModelEntity(indexXName), new NamedContentModelEntity(oddXName), new NamedContentModelEntity(originalslocXName), new NamedContentModelEntity(otherfindaidXName), new NamedContentModelEntity(phystechXName), new NamedContentModelEntity(preferciteXName), new NamedContentModelEntity(processinfoXName), new NamedContentModelEntity(relatedmaterialXName), new NamedContentModelEntity(scopecontentXName), new NamedContentModelEntity(separatedmaterialXName), new NamedContentModelEntity(userestrictXName), new NamedContentModelEntity(dscXName), new NamedContentModelEntity(daoXName), new NamedContentModelEntity(daogrpXName), new NamedContentModelEntity(noteXName)), new SequenceContentModelEntity(new NamedContentModelEntity(theadXName), new NamedContentModelEntity(c1XName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public c() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual did did {
            get {
                XElement x = this.GetElement(didXName);
                return ((did)(x));
            }
            set {
                this.SetElement(didXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<accessrestrict> accessrestrict {
            get {
                if ((this.accessrestrictField == null)) {
                    this.accessrestrictField = new XTypedList<accessrestrict>(this, LinqToXsdTypeManager.Instance, accessrestrictXName);
                }
                return this.accessrestrictField;
            }
            set {
                if ((value == null)) {
                    this.accessrestrictField = null;
                }
                else {
                    if ((this.accessrestrictField == null)) {
                        this.accessrestrictField = XTypedList<accessrestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, accessrestrictXName);
                    }
                    else {
                        XTypedServices.SetList<accessrestrict>(this.accessrestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<accruals> accruals {
            get {
                if ((this.accrualsField == null)) {
                    this.accrualsField = new XTypedList<accruals>(this, LinqToXsdTypeManager.Instance, accrualsXName);
                }
                return this.accrualsField;
            }
            set {
                if ((value == null)) {
                    this.accrualsField = null;
                }
                else {
                    if ((this.accrualsField == null)) {
                        this.accrualsField = XTypedList<accruals>.Initialize(this, LinqToXsdTypeManager.Instance, value, accrualsXName);
                    }
                    else {
                        XTypedServices.SetList<accruals>(this.accrualsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<acqinfo> acqinfo {
            get {
                if ((this.acqinfoField == null)) {
                    this.acqinfoField = new XTypedList<acqinfo>(this, LinqToXsdTypeManager.Instance, acqinfoXName);
                }
                return this.acqinfoField;
            }
            set {
                if ((value == null)) {
                    this.acqinfoField = null;
                }
                else {
                    if ((this.acqinfoField == null)) {
                        this.acqinfoField = XTypedList<acqinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, acqinfoXName);
                    }
                    else {
                        XTypedServices.SetList<acqinfo>(this.acqinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<altformavail> altformavail {
            get {
                if ((this.altformavailField == null)) {
                    this.altformavailField = new XTypedList<altformavail>(this, LinqToXsdTypeManager.Instance, altformavailXName);
                }
                return this.altformavailField;
            }
            set {
                if ((value == null)) {
                    this.altformavailField = null;
                }
                else {
                    if ((this.altformavailField == null)) {
                        this.altformavailField = XTypedList<altformavail>.Initialize(this, LinqToXsdTypeManager.Instance, value, altformavailXName);
                    }
                    else {
                        XTypedServices.SetList<altformavail>(this.altformavailField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<appraisal> appraisal {
            get {
                if ((this.appraisalField == null)) {
                    this.appraisalField = new XTypedList<appraisal>(this, LinqToXsdTypeManager.Instance, appraisalXName);
                }
                return this.appraisalField;
            }
            set {
                if ((value == null)) {
                    this.appraisalField = null;
                }
                else {
                    if ((this.appraisalField == null)) {
                        this.appraisalField = XTypedList<appraisal>.Initialize(this, LinqToXsdTypeManager.Instance, value, appraisalXName);
                    }
                    else {
                        XTypedServices.SetList<appraisal>(this.appraisalField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<arrangement> arrangement {
            get {
                if ((this.arrangementField == null)) {
                    this.arrangementField = new XTypedList<arrangement>(this, LinqToXsdTypeManager.Instance, arrangementXName);
                }
                return this.arrangementField;
            }
            set {
                if ((value == null)) {
                    this.arrangementField = null;
                }
                else {
                    if ((this.arrangementField == null)) {
                        this.arrangementField = XTypedList<arrangement>.Initialize(this, LinqToXsdTypeManager.Instance, value, arrangementXName);
                    }
                    else {
                        XTypedServices.SetList<arrangement>(this.arrangementField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<bibliography> bibliography {
            get {
                if ((this.bibliographyField == null)) {
                    this.bibliographyField = new XTypedList<bibliography>(this, LinqToXsdTypeManager.Instance, bibliographyXName);
                }
                return this.bibliographyField;
            }
            set {
                if ((value == null)) {
                    this.bibliographyField = null;
                }
                else {
                    if ((this.bibliographyField == null)) {
                        this.bibliographyField = XTypedList<bibliography>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibliographyXName);
                    }
                    else {
                        XTypedServices.SetList<bibliography>(this.bibliographyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<bioghist> bioghist {
            get {
                if ((this.bioghistField == null)) {
                    this.bioghistField = new XTypedList<bioghist>(this, LinqToXsdTypeManager.Instance, bioghistXName);
                }
                return this.bioghistField;
            }
            set {
                if ((value == null)) {
                    this.bioghistField = null;
                }
                else {
                    if ((this.bioghistField == null)) {
                        this.bioghistField = XTypedList<bioghist>.Initialize(this, LinqToXsdTypeManager.Instance, value, bioghistXName);
                    }
                    else {
                        XTypedServices.SetList<bioghist>(this.bioghistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<controlaccess> controlaccess {
            get {
                if ((this.controlaccessField == null)) {
                    this.controlaccessField = new XTypedList<controlaccess>(this, LinqToXsdTypeManager.Instance, controlaccessXName);
                }
                return this.controlaccessField;
            }
            set {
                if ((value == null)) {
                    this.controlaccessField = null;
                }
                else {
                    if ((this.controlaccessField == null)) {
                        this.controlaccessField = XTypedList<controlaccess>.Initialize(this, LinqToXsdTypeManager.Instance, value, controlaccessXName);
                    }
                    else {
                        XTypedServices.SetList<controlaccess>(this.controlaccessField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<custodhist> custodhist {
            get {
                if ((this.custodhistField == null)) {
                    this.custodhistField = new XTypedList<custodhist>(this, LinqToXsdTypeManager.Instance, custodhistXName);
                }
                return this.custodhistField;
            }
            set {
                if ((value == null)) {
                    this.custodhistField = null;
                }
                else {
                    if ((this.custodhistField == null)) {
                        this.custodhistField = XTypedList<custodhist>.Initialize(this, LinqToXsdTypeManager.Instance, value, custodhistXName);
                    }
                    else {
                        XTypedServices.SetList<custodhist>(this.custodhistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<descgrp> descgrp {
            get {
                if ((this.descgrpField == null)) {
                    this.descgrpField = new XTypedList<descgrp>(this, LinqToXsdTypeManager.Instance, descgrpXName);
                }
                return this.descgrpField;
            }
            set {
                if ((value == null)) {
                    this.descgrpField = null;
                }
                else {
                    if ((this.descgrpField == null)) {
                        this.descgrpField = XTypedList<descgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, descgrpXName);
                    }
                    else {
                        XTypedServices.SetList<descgrp>(this.descgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<fileplan> fileplan {
            get {
                if ((this.fileplanField == null)) {
                    this.fileplanField = new XTypedList<fileplan>(this, LinqToXsdTypeManager.Instance, fileplanXName);
                }
                return this.fileplanField;
            }
            set {
                if ((value == null)) {
                    this.fileplanField = null;
                }
                else {
                    if ((this.fileplanField == null)) {
                        this.fileplanField = XTypedList<fileplan>.Initialize(this, LinqToXsdTypeManager.Instance, value, fileplanXName);
                    }
                    else {
                        XTypedServices.SetList<fileplan>(this.fileplanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<index> index {
            get {
                if ((this.indexField == null)) {
                    this.indexField = new XTypedList<index>(this, LinqToXsdTypeManager.Instance, indexXName);
                }
                return this.indexField;
            }
            set {
                if ((value == null)) {
                    this.indexField = null;
                }
                else {
                    if ((this.indexField == null)) {
                        this.indexField = XTypedList<index>.Initialize(this, LinqToXsdTypeManager.Instance, value, indexXName);
                    }
                    else {
                        XTypedServices.SetList<index>(this.indexField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<odd> odd {
            get {
                if ((this.oddField == null)) {
                    this.oddField = new XTypedList<odd>(this, LinqToXsdTypeManager.Instance, oddXName);
                }
                return this.oddField;
            }
            set {
                if ((value == null)) {
                    this.oddField = null;
                }
                else {
                    if ((this.oddField == null)) {
                        this.oddField = XTypedList<odd>.Initialize(this, LinqToXsdTypeManager.Instance, value, oddXName);
                    }
                    else {
                        XTypedServices.SetList<odd>(this.oddField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<originalsloc> originalsloc {
            get {
                if ((this.originalslocField == null)) {
                    this.originalslocField = new XTypedList<originalsloc>(this, LinqToXsdTypeManager.Instance, originalslocXName);
                }
                return this.originalslocField;
            }
            set {
                if ((value == null)) {
                    this.originalslocField = null;
                }
                else {
                    if ((this.originalslocField == null)) {
                        this.originalslocField = XTypedList<originalsloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, originalslocXName);
                    }
                    else {
                        XTypedServices.SetList<originalsloc>(this.originalslocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<otherfindaid> otherfindaid {
            get {
                if ((this.otherfindaidField == null)) {
                    this.otherfindaidField = new XTypedList<otherfindaid>(this, LinqToXsdTypeManager.Instance, otherfindaidXName);
                }
                return this.otherfindaidField;
            }
            set {
                if ((value == null)) {
                    this.otherfindaidField = null;
                }
                else {
                    if ((this.otherfindaidField == null)) {
                        this.otherfindaidField = XTypedList<otherfindaid>.Initialize(this, LinqToXsdTypeManager.Instance, value, otherfindaidXName);
                    }
                    else {
                        XTypedServices.SetList<otherfindaid>(this.otherfindaidField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<phystech> phystech {
            get {
                if ((this.phystechField == null)) {
                    this.phystechField = new XTypedList<phystech>(this, LinqToXsdTypeManager.Instance, phystechXName);
                }
                return this.phystechField;
            }
            set {
                if ((value == null)) {
                    this.phystechField = null;
                }
                else {
                    if ((this.phystechField == null)) {
                        this.phystechField = XTypedList<phystech>.Initialize(this, LinqToXsdTypeManager.Instance, value, phystechXName);
                    }
                    else {
                        XTypedServices.SetList<phystech>(this.phystechField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<prefercite> prefercite {
            get {
                if ((this.preferciteField == null)) {
                    this.preferciteField = new XTypedList<prefercite>(this, LinqToXsdTypeManager.Instance, preferciteXName);
                }
                return this.preferciteField;
            }
            set {
                if ((value == null)) {
                    this.preferciteField = null;
                }
                else {
                    if ((this.preferciteField == null)) {
                        this.preferciteField = XTypedList<prefercite>.Initialize(this, LinqToXsdTypeManager.Instance, value, preferciteXName);
                    }
                    else {
                        XTypedServices.SetList<prefercite>(this.preferciteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<processinfo> processinfo {
            get {
                if ((this.processinfoField == null)) {
                    this.processinfoField = new XTypedList<processinfo>(this, LinqToXsdTypeManager.Instance, processinfoXName);
                }
                return this.processinfoField;
            }
            set {
                if ((value == null)) {
                    this.processinfoField = null;
                }
                else {
                    if ((this.processinfoField == null)) {
                        this.processinfoField = XTypedList<processinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, processinfoXName);
                    }
                    else {
                        XTypedServices.SetList<processinfo>(this.processinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<relatedmaterial> relatedmaterial {
            get {
                if ((this.relatedmaterialField == null)) {
                    this.relatedmaterialField = new XTypedList<relatedmaterial>(this, LinqToXsdTypeManager.Instance, relatedmaterialXName);
                }
                return this.relatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.relatedmaterialField = null;
                }
                else {
                    if ((this.relatedmaterialField == null)) {
                        this.relatedmaterialField = XTypedList<relatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, relatedmaterialXName);
                    }
                    else {
                        XTypedServices.SetList<relatedmaterial>(this.relatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<scopecontent> scopecontent {
            get {
                if ((this.scopecontentField == null)) {
                    this.scopecontentField = new XTypedList<scopecontent>(this, LinqToXsdTypeManager.Instance, scopecontentXName);
                }
                return this.scopecontentField;
            }
            set {
                if ((value == null)) {
                    this.scopecontentField = null;
                }
                else {
                    if ((this.scopecontentField == null)) {
                        this.scopecontentField = XTypedList<scopecontent>.Initialize(this, LinqToXsdTypeManager.Instance, value, scopecontentXName);
                    }
                    else {
                        XTypedServices.SetList<scopecontent>(this.scopecontentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<separatedmaterial> separatedmaterial {
            get {
                if ((this.separatedmaterialField == null)) {
                    this.separatedmaterialField = new XTypedList<separatedmaterial>(this, LinqToXsdTypeManager.Instance, separatedmaterialXName);
                }
                return this.separatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.separatedmaterialField = null;
                }
                else {
                    if ((this.separatedmaterialField == null)) {
                        this.separatedmaterialField = XTypedList<separatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, separatedmaterialXName);
                    }
                    else {
                        XTypedServices.SetList<separatedmaterial>(this.separatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<userestrict> userestrict {
            get {
                if ((this.userestrictField == null)) {
                    this.userestrictField = new XTypedList<userestrict>(this, LinqToXsdTypeManager.Instance, userestrictXName);
                }
                return this.userestrictField;
            }
            set {
                if ((value == null)) {
                    this.userestrictField = null;
                }
                else {
                    if ((this.userestrictField == null)) {
                        this.userestrictField = XTypedList<userestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, userestrictXName);
                    }
                    else {
                        XTypedServices.SetList<userestrict>(this.userestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<dsc> dsc {
            get {
                if ((this.dscField == null)) {
                    this.dscField = new XTypedList<dsc>(this, LinqToXsdTypeManager.Instance, dscXName);
                }
                return this.dscField;
            }
            set {
                if ((value == null)) {
                    this.dscField = null;
                }
                else {
                    if ((this.dscField == null)) {
                        this.dscField = XTypedList<dsc>.Initialize(this, LinqToXsdTypeManager.Instance, value, dscXName);
                    }
                    else {
                        XTypedServices.SetList<dsc>(this.dscField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<dao> dao {
            get {
                if ((this.daoField == null)) {
                    this.daoField = new XTypedList<dao>(this, LinqToXsdTypeManager.Instance, daoXName);
                }
                return this.daoField;
            }
            set {
                if ((value == null)) {
                    this.daoField = null;
                }
                else {
                    if ((this.daoField == null)) {
                        this.daoField = XTypedList<dao>.Initialize(this, LinqToXsdTypeManager.Instance, value, daoXName);
                    }
                    else {
                        XTypedServices.SetList<dao>(this.daoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<daogrp> daogrp {
            get {
                if ((this.daogrpField == null)) {
                    this.daogrpField = new XTypedList<daogrp>(this, LinqToXsdTypeManager.Instance, daogrpXName);
                }
                return this.daogrpField;
            }
            set {
                if ((value == null)) {
                    this.daogrpField = null;
                }
                else {
                    if ((this.daogrpField == null)) {
                        this.daogrpField = XTypedList<daogrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, daogrpXName);
                    }
                    else {
                        XTypedServices.SetList<daogrp>(this.daogrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<thead> thead {
            get {
                if ((this.theadField == null)) {
                    this.theadField = new XTypedList<thead>(this, LinqToXsdTypeManager.Instance, theadXName);
                }
                return this.theadField;
            }
            set {
                if ((value == null)) {
                    this.theadField = null;
                }
                else {
                    if ((this.theadField == null)) {
                        this.theadField = XTypedList<thead>.Initialize(this, LinqToXsdTypeManager.Instance, value, theadXName);
                    }
                    else {
                        XTypedServices.SetList<thead>(this.theadField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c1+)*)
        /// </para>
        /// </summary>
        public virtual IList<c> c1 {
            get {
                if ((this.c1Field == null)) {
                    this.c1Field = new XTypedList<c>(this, LinqToXsdTypeManager.Instance, c1XName);
                }
                return this.c1Field;
            }
            set {
                if ((value == null)) {
                    this.c1Field = null;
                }
                else {
                    if ((this.c1Field == null)) {
                        this.c1Field = XTypedList<c>.Initialize(this, LinqToXsdTypeManager.Instance, value, c1XName);
                    }
                    else {
                        XTypedServices.SetList<c>(this.c1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string level {
            get {
                XAttribute x = this.Attribute(levelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(levelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string otherlevel {
            get {
                XAttribute x = this.Attribute(otherlevelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(otherlevelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string tpattern {
            get {
                XAttribute x = this.Attribute(tpatternXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(tpatternXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<c>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(didXName, typeof(did));
            localElementDictionary.Add(accessrestrictXName, typeof(accessrestrict));
            localElementDictionary.Add(accrualsXName, typeof(accruals));
            localElementDictionary.Add(acqinfoXName, typeof(acqinfo));
            localElementDictionary.Add(altformavailXName, typeof(altformavail));
            localElementDictionary.Add(appraisalXName, typeof(appraisal));
            localElementDictionary.Add(arrangementXName, typeof(arrangement));
            localElementDictionary.Add(bibliographyXName, typeof(bibliography));
            localElementDictionary.Add(bioghistXName, typeof(bioghist));
            localElementDictionary.Add(controlaccessXName, typeof(controlaccess));
            localElementDictionary.Add(custodhistXName, typeof(custodhist));
            localElementDictionary.Add(descgrpXName, typeof(descgrp));
            localElementDictionary.Add(fileplanXName, typeof(fileplan));
            localElementDictionary.Add(indexXName, typeof(index));
            localElementDictionary.Add(oddXName, typeof(odd));
            localElementDictionary.Add(originalslocXName, typeof(originalsloc));
            localElementDictionary.Add(otherfindaidXName, typeof(otherfindaid));
            localElementDictionary.Add(phystechXName, typeof(phystech));
            localElementDictionary.Add(preferciteXName, typeof(prefercite));
            localElementDictionary.Add(processinfoXName, typeof(processinfo));
            localElementDictionary.Add(relatedmaterialXName, typeof(relatedmaterial));
            localElementDictionary.Add(scopecontentXName, typeof(scopecontent));
            localElementDictionary.Add(separatedmaterialXName, typeof(separatedmaterial));
            localElementDictionary.Add(userestrictXName, typeof(userestrict));
            localElementDictionary.Add(dscXName, typeof(dsc));
            localElementDictionary.Add(daoXName, typeof(dao));
            localElementDictionary.Add(daogrpXName, typeof(daogrp));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(theadXName, typeof(thead));
            localElementDictionary.Add(c1XName, typeof(c));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
    /// </para>
    /// </summary>
    public partial class c01 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName didXName = System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName accessrestrictXName = System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accessrestrict> accessrestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName accrualsXName = System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accruals> accrualsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName acqinfoXName = System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<acqinfo> acqinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altformavailXName = System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<altformavail> altformavailField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName appraisalXName = System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<appraisal> appraisalField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arrangementXName = System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<arrangement> arrangementField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibliographyXName = System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibliography> bibliographyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bioghistXName = System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bioghist> bioghistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName controlaccessXName = System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<controlaccess> controlaccessField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName custodhistXName = System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<custodhist> custodhistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descgrpXName = System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<descgrp> descgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName fileplanXName = System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<fileplan> fileplanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName indexXName = System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<index> indexField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName oddXName = System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<odd> oddField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName originalslocXName = System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<originalsloc> originalslocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName otherfindaidXName = System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<otherfindaid> otherfindaidField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phystechXName = System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phystech> phystechField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName preferciteXName = System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<prefercite> preferciteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName processinfoXName = System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<processinfo> processinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName relatedmaterialXName = System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<relatedmaterial> relatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName scopecontentXName = System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<scopecontent> scopecontentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName separatedmaterialXName = System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<separatedmaterial> separatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userestrictXName = System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<userestrict> userestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dscXName = System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dsc> dscField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName daoXName = System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dao> daoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName daogrpXName = System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<daogrp> daogrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName theadXName = System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<thead> theadField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName c02XName = System.Xml.Linq.XName.Get("c02", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<c02> c02Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName levelXName = System.Xml.Linq.XName.Get("level", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName otherlevelXName = System.Xml.Linq.XName.Get("otherlevel", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tpatternXName = System.Xml.Linq.XName.Get("tpattern", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("c01", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator c01(XElement xe) { return XTypedServices.ToXTypedElement<c01>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static c01() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new NamedContentModelEntity(didXName), new ChoiceContentModelEntity(new NamedContentModelEntity(accessrestrictXName), new NamedContentModelEntity(accrualsXName), new NamedContentModelEntity(acqinfoXName), new NamedContentModelEntity(altformavailXName), new NamedContentModelEntity(appraisalXName), new NamedContentModelEntity(arrangementXName), new NamedContentModelEntity(bibliographyXName), new NamedContentModelEntity(bioghistXName), new NamedContentModelEntity(controlaccessXName), new NamedContentModelEntity(custodhistXName), new NamedContentModelEntity(descgrpXName), new NamedContentModelEntity(fileplanXName), new NamedContentModelEntity(indexXName), new NamedContentModelEntity(oddXName), new NamedContentModelEntity(originalslocXName), new NamedContentModelEntity(otherfindaidXName), new NamedContentModelEntity(phystechXName), new NamedContentModelEntity(preferciteXName), new NamedContentModelEntity(processinfoXName), new NamedContentModelEntity(relatedmaterialXName), new NamedContentModelEntity(scopecontentXName), new NamedContentModelEntity(separatedmaterialXName), new NamedContentModelEntity(userestrictXName), new NamedContentModelEntity(dscXName), new NamedContentModelEntity(daoXName), new NamedContentModelEntity(daogrpXName), new NamedContentModelEntity(noteXName)), new SequenceContentModelEntity(new NamedContentModelEntity(theadXName), new NamedContentModelEntity(c02XName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public c01() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual did did {
            get {
                XElement x = this.GetElement(didXName);
                return ((did)(x));
            }
            set {
                this.SetElement(didXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<accessrestrict> accessrestrict {
            get {
                if ((this.accessrestrictField == null)) {
                    this.accessrestrictField = new XTypedList<accessrestrict>(this, LinqToXsdTypeManager.Instance, accessrestrictXName);
                }
                return this.accessrestrictField;
            }
            set {
                if ((value == null)) {
                    this.accessrestrictField = null;
                }
                else {
                    if ((this.accessrestrictField == null)) {
                        this.accessrestrictField = XTypedList<accessrestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, accessrestrictXName);
                    }
                    else {
                        XTypedServices.SetList<accessrestrict>(this.accessrestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<accruals> accruals {
            get {
                if ((this.accrualsField == null)) {
                    this.accrualsField = new XTypedList<accruals>(this, LinqToXsdTypeManager.Instance, accrualsXName);
                }
                return this.accrualsField;
            }
            set {
                if ((value == null)) {
                    this.accrualsField = null;
                }
                else {
                    if ((this.accrualsField == null)) {
                        this.accrualsField = XTypedList<accruals>.Initialize(this, LinqToXsdTypeManager.Instance, value, accrualsXName);
                    }
                    else {
                        XTypedServices.SetList<accruals>(this.accrualsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<acqinfo> acqinfo {
            get {
                if ((this.acqinfoField == null)) {
                    this.acqinfoField = new XTypedList<acqinfo>(this, LinqToXsdTypeManager.Instance, acqinfoXName);
                }
                return this.acqinfoField;
            }
            set {
                if ((value == null)) {
                    this.acqinfoField = null;
                }
                else {
                    if ((this.acqinfoField == null)) {
                        this.acqinfoField = XTypedList<acqinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, acqinfoXName);
                    }
                    else {
                        XTypedServices.SetList<acqinfo>(this.acqinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<altformavail> altformavail {
            get {
                if ((this.altformavailField == null)) {
                    this.altformavailField = new XTypedList<altformavail>(this, LinqToXsdTypeManager.Instance, altformavailXName);
                }
                return this.altformavailField;
            }
            set {
                if ((value == null)) {
                    this.altformavailField = null;
                }
                else {
                    if ((this.altformavailField == null)) {
                        this.altformavailField = XTypedList<altformavail>.Initialize(this, LinqToXsdTypeManager.Instance, value, altformavailXName);
                    }
                    else {
                        XTypedServices.SetList<altformavail>(this.altformavailField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<appraisal> appraisal {
            get {
                if ((this.appraisalField == null)) {
                    this.appraisalField = new XTypedList<appraisal>(this, LinqToXsdTypeManager.Instance, appraisalXName);
                }
                return this.appraisalField;
            }
            set {
                if ((value == null)) {
                    this.appraisalField = null;
                }
                else {
                    if ((this.appraisalField == null)) {
                        this.appraisalField = XTypedList<appraisal>.Initialize(this, LinqToXsdTypeManager.Instance, value, appraisalXName);
                    }
                    else {
                        XTypedServices.SetList<appraisal>(this.appraisalField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<arrangement> arrangement {
            get {
                if ((this.arrangementField == null)) {
                    this.arrangementField = new XTypedList<arrangement>(this, LinqToXsdTypeManager.Instance, arrangementXName);
                }
                return this.arrangementField;
            }
            set {
                if ((value == null)) {
                    this.arrangementField = null;
                }
                else {
                    if ((this.arrangementField == null)) {
                        this.arrangementField = XTypedList<arrangement>.Initialize(this, LinqToXsdTypeManager.Instance, value, arrangementXName);
                    }
                    else {
                        XTypedServices.SetList<arrangement>(this.arrangementField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<bibliography> bibliography {
            get {
                if ((this.bibliographyField == null)) {
                    this.bibliographyField = new XTypedList<bibliography>(this, LinqToXsdTypeManager.Instance, bibliographyXName);
                }
                return this.bibliographyField;
            }
            set {
                if ((value == null)) {
                    this.bibliographyField = null;
                }
                else {
                    if ((this.bibliographyField == null)) {
                        this.bibliographyField = XTypedList<bibliography>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibliographyXName);
                    }
                    else {
                        XTypedServices.SetList<bibliography>(this.bibliographyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<bioghist> bioghist {
            get {
                if ((this.bioghistField == null)) {
                    this.bioghistField = new XTypedList<bioghist>(this, LinqToXsdTypeManager.Instance, bioghistXName);
                }
                return this.bioghistField;
            }
            set {
                if ((value == null)) {
                    this.bioghistField = null;
                }
                else {
                    if ((this.bioghistField == null)) {
                        this.bioghistField = XTypedList<bioghist>.Initialize(this, LinqToXsdTypeManager.Instance, value, bioghistXName);
                    }
                    else {
                        XTypedServices.SetList<bioghist>(this.bioghistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<controlaccess> controlaccess {
            get {
                if ((this.controlaccessField == null)) {
                    this.controlaccessField = new XTypedList<controlaccess>(this, LinqToXsdTypeManager.Instance, controlaccessXName);
                }
                return this.controlaccessField;
            }
            set {
                if ((value == null)) {
                    this.controlaccessField = null;
                }
                else {
                    if ((this.controlaccessField == null)) {
                        this.controlaccessField = XTypedList<controlaccess>.Initialize(this, LinqToXsdTypeManager.Instance, value, controlaccessXName);
                    }
                    else {
                        XTypedServices.SetList<controlaccess>(this.controlaccessField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<custodhist> custodhist {
            get {
                if ((this.custodhistField == null)) {
                    this.custodhistField = new XTypedList<custodhist>(this, LinqToXsdTypeManager.Instance, custodhistXName);
                }
                return this.custodhistField;
            }
            set {
                if ((value == null)) {
                    this.custodhistField = null;
                }
                else {
                    if ((this.custodhistField == null)) {
                        this.custodhistField = XTypedList<custodhist>.Initialize(this, LinqToXsdTypeManager.Instance, value, custodhistXName);
                    }
                    else {
                        XTypedServices.SetList<custodhist>(this.custodhistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<descgrp> descgrp {
            get {
                if ((this.descgrpField == null)) {
                    this.descgrpField = new XTypedList<descgrp>(this, LinqToXsdTypeManager.Instance, descgrpXName);
                }
                return this.descgrpField;
            }
            set {
                if ((value == null)) {
                    this.descgrpField = null;
                }
                else {
                    if ((this.descgrpField == null)) {
                        this.descgrpField = XTypedList<descgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, descgrpXName);
                    }
                    else {
                        XTypedServices.SetList<descgrp>(this.descgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<fileplan> fileplan {
            get {
                if ((this.fileplanField == null)) {
                    this.fileplanField = new XTypedList<fileplan>(this, LinqToXsdTypeManager.Instance, fileplanXName);
                }
                return this.fileplanField;
            }
            set {
                if ((value == null)) {
                    this.fileplanField = null;
                }
                else {
                    if ((this.fileplanField == null)) {
                        this.fileplanField = XTypedList<fileplan>.Initialize(this, LinqToXsdTypeManager.Instance, value, fileplanXName);
                    }
                    else {
                        XTypedServices.SetList<fileplan>(this.fileplanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<index> index {
            get {
                if ((this.indexField == null)) {
                    this.indexField = new XTypedList<index>(this, LinqToXsdTypeManager.Instance, indexXName);
                }
                return this.indexField;
            }
            set {
                if ((value == null)) {
                    this.indexField = null;
                }
                else {
                    if ((this.indexField == null)) {
                        this.indexField = XTypedList<index>.Initialize(this, LinqToXsdTypeManager.Instance, value, indexXName);
                    }
                    else {
                        XTypedServices.SetList<index>(this.indexField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<odd> odd {
            get {
                if ((this.oddField == null)) {
                    this.oddField = new XTypedList<odd>(this, LinqToXsdTypeManager.Instance, oddXName);
                }
                return this.oddField;
            }
            set {
                if ((value == null)) {
                    this.oddField = null;
                }
                else {
                    if ((this.oddField == null)) {
                        this.oddField = XTypedList<odd>.Initialize(this, LinqToXsdTypeManager.Instance, value, oddXName);
                    }
                    else {
                        XTypedServices.SetList<odd>(this.oddField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<originalsloc> originalsloc {
            get {
                if ((this.originalslocField == null)) {
                    this.originalslocField = new XTypedList<originalsloc>(this, LinqToXsdTypeManager.Instance, originalslocXName);
                }
                return this.originalslocField;
            }
            set {
                if ((value == null)) {
                    this.originalslocField = null;
                }
                else {
                    if ((this.originalslocField == null)) {
                        this.originalslocField = XTypedList<originalsloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, originalslocXName);
                    }
                    else {
                        XTypedServices.SetList<originalsloc>(this.originalslocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<otherfindaid> otherfindaid {
            get {
                if ((this.otherfindaidField == null)) {
                    this.otherfindaidField = new XTypedList<otherfindaid>(this, LinqToXsdTypeManager.Instance, otherfindaidXName);
                }
                return this.otherfindaidField;
            }
            set {
                if ((value == null)) {
                    this.otherfindaidField = null;
                }
                else {
                    if ((this.otherfindaidField == null)) {
                        this.otherfindaidField = XTypedList<otherfindaid>.Initialize(this, LinqToXsdTypeManager.Instance, value, otherfindaidXName);
                    }
                    else {
                        XTypedServices.SetList<otherfindaid>(this.otherfindaidField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<phystech> phystech {
            get {
                if ((this.phystechField == null)) {
                    this.phystechField = new XTypedList<phystech>(this, LinqToXsdTypeManager.Instance, phystechXName);
                }
                return this.phystechField;
            }
            set {
                if ((value == null)) {
                    this.phystechField = null;
                }
                else {
                    if ((this.phystechField == null)) {
                        this.phystechField = XTypedList<phystech>.Initialize(this, LinqToXsdTypeManager.Instance, value, phystechXName);
                    }
                    else {
                        XTypedServices.SetList<phystech>(this.phystechField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<prefercite> prefercite {
            get {
                if ((this.preferciteField == null)) {
                    this.preferciteField = new XTypedList<prefercite>(this, LinqToXsdTypeManager.Instance, preferciteXName);
                }
                return this.preferciteField;
            }
            set {
                if ((value == null)) {
                    this.preferciteField = null;
                }
                else {
                    if ((this.preferciteField == null)) {
                        this.preferciteField = XTypedList<prefercite>.Initialize(this, LinqToXsdTypeManager.Instance, value, preferciteXName);
                    }
                    else {
                        XTypedServices.SetList<prefercite>(this.preferciteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<processinfo> processinfo {
            get {
                if ((this.processinfoField == null)) {
                    this.processinfoField = new XTypedList<processinfo>(this, LinqToXsdTypeManager.Instance, processinfoXName);
                }
                return this.processinfoField;
            }
            set {
                if ((value == null)) {
                    this.processinfoField = null;
                }
                else {
                    if ((this.processinfoField == null)) {
                        this.processinfoField = XTypedList<processinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, processinfoXName);
                    }
                    else {
                        XTypedServices.SetList<processinfo>(this.processinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<relatedmaterial> relatedmaterial {
            get {
                if ((this.relatedmaterialField == null)) {
                    this.relatedmaterialField = new XTypedList<relatedmaterial>(this, LinqToXsdTypeManager.Instance, relatedmaterialXName);
                }
                return this.relatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.relatedmaterialField = null;
                }
                else {
                    if ((this.relatedmaterialField == null)) {
                        this.relatedmaterialField = XTypedList<relatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, relatedmaterialXName);
                    }
                    else {
                        XTypedServices.SetList<relatedmaterial>(this.relatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<scopecontent> scopecontent {
            get {
                if ((this.scopecontentField == null)) {
                    this.scopecontentField = new XTypedList<scopecontent>(this, LinqToXsdTypeManager.Instance, scopecontentXName);
                }
                return this.scopecontentField;
            }
            set {
                if ((value == null)) {
                    this.scopecontentField = null;
                }
                else {
                    if ((this.scopecontentField == null)) {
                        this.scopecontentField = XTypedList<scopecontent>.Initialize(this, LinqToXsdTypeManager.Instance, value, scopecontentXName);
                    }
                    else {
                        XTypedServices.SetList<scopecontent>(this.scopecontentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<separatedmaterial> separatedmaterial {
            get {
                if ((this.separatedmaterialField == null)) {
                    this.separatedmaterialField = new XTypedList<separatedmaterial>(this, LinqToXsdTypeManager.Instance, separatedmaterialXName);
                }
                return this.separatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.separatedmaterialField = null;
                }
                else {
                    if ((this.separatedmaterialField == null)) {
                        this.separatedmaterialField = XTypedList<separatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, separatedmaterialXName);
                    }
                    else {
                        XTypedServices.SetList<separatedmaterial>(this.separatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<userestrict> userestrict {
            get {
                if ((this.userestrictField == null)) {
                    this.userestrictField = new XTypedList<userestrict>(this, LinqToXsdTypeManager.Instance, userestrictXName);
                }
                return this.userestrictField;
            }
            set {
                if ((value == null)) {
                    this.userestrictField = null;
                }
                else {
                    if ((this.userestrictField == null)) {
                        this.userestrictField = XTypedList<userestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, userestrictXName);
                    }
                    else {
                        XTypedServices.SetList<userestrict>(this.userestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<dsc> dsc {
            get {
                if ((this.dscField == null)) {
                    this.dscField = new XTypedList<dsc>(this, LinqToXsdTypeManager.Instance, dscXName);
                }
                return this.dscField;
            }
            set {
                if ((value == null)) {
                    this.dscField = null;
                }
                else {
                    if ((this.dscField == null)) {
                        this.dscField = XTypedList<dsc>.Initialize(this, LinqToXsdTypeManager.Instance, value, dscXName);
                    }
                    else {
                        XTypedServices.SetList<dsc>(this.dscField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<dao> dao {
            get {
                if ((this.daoField == null)) {
                    this.daoField = new XTypedList<dao>(this, LinqToXsdTypeManager.Instance, daoXName);
                }
                return this.daoField;
            }
            set {
                if ((value == null)) {
                    this.daoField = null;
                }
                else {
                    if ((this.daoField == null)) {
                        this.daoField = XTypedList<dao>.Initialize(this, LinqToXsdTypeManager.Instance, value, daoXName);
                    }
                    else {
                        XTypedServices.SetList<dao>(this.daoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<daogrp> daogrp {
            get {
                if ((this.daogrpField == null)) {
                    this.daogrpField = new XTypedList<daogrp>(this, LinqToXsdTypeManager.Instance, daogrpXName);
                }
                return this.daogrpField;
            }
            set {
                if ((value == null)) {
                    this.daogrpField = null;
                }
                else {
                    if ((this.daogrpField == null)) {
                        this.daogrpField = XTypedList<daogrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, daogrpXName);
                    }
                    else {
                        XTypedServices.SetList<daogrp>(this.daogrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<thead> thead {
            get {
                if ((this.theadField == null)) {
                    this.theadField = new XTypedList<thead>(this, LinqToXsdTypeManager.Instance, theadXName);
                }
                return this.theadField;
            }
            set {
                if ((value == null)) {
                    this.theadField = null;
                }
                else {
                    if ((this.theadField == null)) {
                        this.theadField = XTypedList<thead>.Initialize(this, LinqToXsdTypeManager.Instance, value, theadXName);
                    }
                    else {
                        XTypedServices.SetList<thead>(this.theadField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c02+)*)
        /// </para>
        /// </summary>
        public virtual IList<c02> c02 {
            get {
                if ((this.c02Field == null)) {
                    this.c02Field = new XTypedList<c02>(this, LinqToXsdTypeManager.Instance, c02XName);
                }
                return this.c02Field;
            }
            set {
                if ((value == null)) {
                    this.c02Field = null;
                }
                else {
                    if ((this.c02Field == null)) {
                        this.c02Field = XTypedList<c02>.Initialize(this, LinqToXsdTypeManager.Instance, value, c02XName);
                    }
                    else {
                        XTypedServices.SetList<c02>(this.c02Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string level {
            get {
                XAttribute x = this.Attribute(levelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(levelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string otherlevel {
            get {
                XAttribute x = this.Attribute(otherlevelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(otherlevelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string tpattern {
            get {
                XAttribute x = this.Attribute(tpatternXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(tpatternXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<c01>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(didXName, typeof(did));
            localElementDictionary.Add(accessrestrictXName, typeof(accessrestrict));
            localElementDictionary.Add(accrualsXName, typeof(accruals));
            localElementDictionary.Add(acqinfoXName, typeof(acqinfo));
            localElementDictionary.Add(altformavailXName, typeof(altformavail));
            localElementDictionary.Add(appraisalXName, typeof(appraisal));
            localElementDictionary.Add(arrangementXName, typeof(arrangement));
            localElementDictionary.Add(bibliographyXName, typeof(bibliography));
            localElementDictionary.Add(bioghistXName, typeof(bioghist));
            localElementDictionary.Add(controlaccessXName, typeof(controlaccess));
            localElementDictionary.Add(custodhistXName, typeof(custodhist));
            localElementDictionary.Add(descgrpXName, typeof(descgrp));
            localElementDictionary.Add(fileplanXName, typeof(fileplan));
            localElementDictionary.Add(indexXName, typeof(index));
            localElementDictionary.Add(oddXName, typeof(odd));
            localElementDictionary.Add(originalslocXName, typeof(originalsloc));
            localElementDictionary.Add(otherfindaidXName, typeof(otherfindaid));
            localElementDictionary.Add(phystechXName, typeof(phystech));
            localElementDictionary.Add(preferciteXName, typeof(prefercite));
            localElementDictionary.Add(processinfoXName, typeof(processinfo));
            localElementDictionary.Add(relatedmaterialXName, typeof(relatedmaterial));
            localElementDictionary.Add(scopecontentXName, typeof(scopecontent));
            localElementDictionary.Add(separatedmaterialXName, typeof(separatedmaterial));
            localElementDictionary.Add(userestrictXName, typeof(userestrict));
            localElementDictionary.Add(dscXName, typeof(dsc));
            localElementDictionary.Add(daoXName, typeof(dao));
            localElementDictionary.Add(daogrpXName, typeof(daogrp));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(theadXName, typeof(thead));
            localElementDictionary.Add(c02XName, typeof(c02));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
    /// </para>
    /// </summary>
    public partial class c02 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName didXName = System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName accessrestrictXName = System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accessrestrict> accessrestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName accrualsXName = System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accruals> accrualsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName acqinfoXName = System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<acqinfo> acqinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altformavailXName = System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<altformavail> altformavailField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName appraisalXName = System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<appraisal> appraisalField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arrangementXName = System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<arrangement> arrangementField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibliographyXName = System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibliography> bibliographyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bioghistXName = System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bioghist> bioghistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName controlaccessXName = System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<controlaccess> controlaccessField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName custodhistXName = System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<custodhist> custodhistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descgrpXName = System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<descgrp> descgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName fileplanXName = System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<fileplan> fileplanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName indexXName = System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<index> indexField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName oddXName = System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<odd> oddField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName originalslocXName = System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<originalsloc> originalslocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName otherfindaidXName = System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<otherfindaid> otherfindaidField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phystechXName = System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phystech> phystechField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName preferciteXName = System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<prefercite> preferciteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName processinfoXName = System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<processinfo> processinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName relatedmaterialXName = System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<relatedmaterial> relatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName scopecontentXName = System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<scopecontent> scopecontentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName separatedmaterialXName = System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<separatedmaterial> separatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userestrictXName = System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<userestrict> userestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dscXName = System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dsc> dscField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName daoXName = System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dao> daoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName daogrpXName = System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<daogrp> daogrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName theadXName = System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<thead> theadField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName c03XName = System.Xml.Linq.XName.Get("c03", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<c03> c03Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName levelXName = System.Xml.Linq.XName.Get("level", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName otherlevelXName = System.Xml.Linq.XName.Get("otherlevel", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tpatternXName = System.Xml.Linq.XName.Get("tpattern", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("c02", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator c02(XElement xe) { return XTypedServices.ToXTypedElement<c02>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static c02() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new NamedContentModelEntity(didXName), new ChoiceContentModelEntity(new NamedContentModelEntity(accessrestrictXName), new NamedContentModelEntity(accrualsXName), new NamedContentModelEntity(acqinfoXName), new NamedContentModelEntity(altformavailXName), new NamedContentModelEntity(appraisalXName), new NamedContentModelEntity(arrangementXName), new NamedContentModelEntity(bibliographyXName), new NamedContentModelEntity(bioghistXName), new NamedContentModelEntity(controlaccessXName), new NamedContentModelEntity(custodhistXName), new NamedContentModelEntity(descgrpXName), new NamedContentModelEntity(fileplanXName), new NamedContentModelEntity(indexXName), new NamedContentModelEntity(oddXName), new NamedContentModelEntity(originalslocXName), new NamedContentModelEntity(otherfindaidXName), new NamedContentModelEntity(phystechXName), new NamedContentModelEntity(preferciteXName), new NamedContentModelEntity(processinfoXName), new NamedContentModelEntity(relatedmaterialXName), new NamedContentModelEntity(scopecontentXName), new NamedContentModelEntity(separatedmaterialXName), new NamedContentModelEntity(userestrictXName), new NamedContentModelEntity(dscXName), new NamedContentModelEntity(daoXName), new NamedContentModelEntity(daogrpXName), new NamedContentModelEntity(noteXName)), new SequenceContentModelEntity(new NamedContentModelEntity(theadXName), new NamedContentModelEntity(c03XName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public c02() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual did did {
            get {
                XElement x = this.GetElement(didXName);
                return ((did)(x));
            }
            set {
                this.SetElement(didXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<accessrestrict> accessrestrict {
            get {
                if ((this.accessrestrictField == null)) {
                    this.accessrestrictField = new XTypedList<accessrestrict>(this, LinqToXsdTypeManager.Instance, accessrestrictXName);
                }
                return this.accessrestrictField;
            }
            set {
                if ((value == null)) {
                    this.accessrestrictField = null;
                }
                else {
                    if ((this.accessrestrictField == null)) {
                        this.accessrestrictField = XTypedList<accessrestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, accessrestrictXName);
                    }
                    else {
                        XTypedServices.SetList<accessrestrict>(this.accessrestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<accruals> accruals {
            get {
                if ((this.accrualsField == null)) {
                    this.accrualsField = new XTypedList<accruals>(this, LinqToXsdTypeManager.Instance, accrualsXName);
                }
                return this.accrualsField;
            }
            set {
                if ((value == null)) {
                    this.accrualsField = null;
                }
                else {
                    if ((this.accrualsField == null)) {
                        this.accrualsField = XTypedList<accruals>.Initialize(this, LinqToXsdTypeManager.Instance, value, accrualsXName);
                    }
                    else {
                        XTypedServices.SetList<accruals>(this.accrualsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<acqinfo> acqinfo {
            get {
                if ((this.acqinfoField == null)) {
                    this.acqinfoField = new XTypedList<acqinfo>(this, LinqToXsdTypeManager.Instance, acqinfoXName);
                }
                return this.acqinfoField;
            }
            set {
                if ((value == null)) {
                    this.acqinfoField = null;
                }
                else {
                    if ((this.acqinfoField == null)) {
                        this.acqinfoField = XTypedList<acqinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, acqinfoXName);
                    }
                    else {
                        XTypedServices.SetList<acqinfo>(this.acqinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<altformavail> altformavail {
            get {
                if ((this.altformavailField == null)) {
                    this.altformavailField = new XTypedList<altformavail>(this, LinqToXsdTypeManager.Instance, altformavailXName);
                }
                return this.altformavailField;
            }
            set {
                if ((value == null)) {
                    this.altformavailField = null;
                }
                else {
                    if ((this.altformavailField == null)) {
                        this.altformavailField = XTypedList<altformavail>.Initialize(this, LinqToXsdTypeManager.Instance, value, altformavailXName);
                    }
                    else {
                        XTypedServices.SetList<altformavail>(this.altformavailField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<appraisal> appraisal {
            get {
                if ((this.appraisalField == null)) {
                    this.appraisalField = new XTypedList<appraisal>(this, LinqToXsdTypeManager.Instance, appraisalXName);
                }
                return this.appraisalField;
            }
            set {
                if ((value == null)) {
                    this.appraisalField = null;
                }
                else {
                    if ((this.appraisalField == null)) {
                        this.appraisalField = XTypedList<appraisal>.Initialize(this, LinqToXsdTypeManager.Instance, value, appraisalXName);
                    }
                    else {
                        XTypedServices.SetList<appraisal>(this.appraisalField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<arrangement> arrangement {
            get {
                if ((this.arrangementField == null)) {
                    this.arrangementField = new XTypedList<arrangement>(this, LinqToXsdTypeManager.Instance, arrangementXName);
                }
                return this.arrangementField;
            }
            set {
                if ((value == null)) {
                    this.arrangementField = null;
                }
                else {
                    if ((this.arrangementField == null)) {
                        this.arrangementField = XTypedList<arrangement>.Initialize(this, LinqToXsdTypeManager.Instance, value, arrangementXName);
                    }
                    else {
                        XTypedServices.SetList<arrangement>(this.arrangementField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<bibliography> bibliography {
            get {
                if ((this.bibliographyField == null)) {
                    this.bibliographyField = new XTypedList<bibliography>(this, LinqToXsdTypeManager.Instance, bibliographyXName);
                }
                return this.bibliographyField;
            }
            set {
                if ((value == null)) {
                    this.bibliographyField = null;
                }
                else {
                    if ((this.bibliographyField == null)) {
                        this.bibliographyField = XTypedList<bibliography>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibliographyXName);
                    }
                    else {
                        XTypedServices.SetList<bibliography>(this.bibliographyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<bioghist> bioghist {
            get {
                if ((this.bioghistField == null)) {
                    this.bioghistField = new XTypedList<bioghist>(this, LinqToXsdTypeManager.Instance, bioghistXName);
                }
                return this.bioghistField;
            }
            set {
                if ((value == null)) {
                    this.bioghistField = null;
                }
                else {
                    if ((this.bioghistField == null)) {
                        this.bioghistField = XTypedList<bioghist>.Initialize(this, LinqToXsdTypeManager.Instance, value, bioghistXName);
                    }
                    else {
                        XTypedServices.SetList<bioghist>(this.bioghistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<controlaccess> controlaccess {
            get {
                if ((this.controlaccessField == null)) {
                    this.controlaccessField = new XTypedList<controlaccess>(this, LinqToXsdTypeManager.Instance, controlaccessXName);
                }
                return this.controlaccessField;
            }
            set {
                if ((value == null)) {
                    this.controlaccessField = null;
                }
                else {
                    if ((this.controlaccessField == null)) {
                        this.controlaccessField = XTypedList<controlaccess>.Initialize(this, LinqToXsdTypeManager.Instance, value, controlaccessXName);
                    }
                    else {
                        XTypedServices.SetList<controlaccess>(this.controlaccessField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<custodhist> custodhist {
            get {
                if ((this.custodhistField == null)) {
                    this.custodhistField = new XTypedList<custodhist>(this, LinqToXsdTypeManager.Instance, custodhistXName);
                }
                return this.custodhistField;
            }
            set {
                if ((value == null)) {
                    this.custodhistField = null;
                }
                else {
                    if ((this.custodhistField == null)) {
                        this.custodhistField = XTypedList<custodhist>.Initialize(this, LinqToXsdTypeManager.Instance, value, custodhistXName);
                    }
                    else {
                        XTypedServices.SetList<custodhist>(this.custodhistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<descgrp> descgrp {
            get {
                if ((this.descgrpField == null)) {
                    this.descgrpField = new XTypedList<descgrp>(this, LinqToXsdTypeManager.Instance, descgrpXName);
                }
                return this.descgrpField;
            }
            set {
                if ((value == null)) {
                    this.descgrpField = null;
                }
                else {
                    if ((this.descgrpField == null)) {
                        this.descgrpField = XTypedList<descgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, descgrpXName);
                    }
                    else {
                        XTypedServices.SetList<descgrp>(this.descgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<fileplan> fileplan {
            get {
                if ((this.fileplanField == null)) {
                    this.fileplanField = new XTypedList<fileplan>(this, LinqToXsdTypeManager.Instance, fileplanXName);
                }
                return this.fileplanField;
            }
            set {
                if ((value == null)) {
                    this.fileplanField = null;
                }
                else {
                    if ((this.fileplanField == null)) {
                        this.fileplanField = XTypedList<fileplan>.Initialize(this, LinqToXsdTypeManager.Instance, value, fileplanXName);
                    }
                    else {
                        XTypedServices.SetList<fileplan>(this.fileplanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<index> index {
            get {
                if ((this.indexField == null)) {
                    this.indexField = new XTypedList<index>(this, LinqToXsdTypeManager.Instance, indexXName);
                }
                return this.indexField;
            }
            set {
                if ((value == null)) {
                    this.indexField = null;
                }
                else {
                    if ((this.indexField == null)) {
                        this.indexField = XTypedList<index>.Initialize(this, LinqToXsdTypeManager.Instance, value, indexXName);
                    }
                    else {
                        XTypedServices.SetList<index>(this.indexField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<odd> odd {
            get {
                if ((this.oddField == null)) {
                    this.oddField = new XTypedList<odd>(this, LinqToXsdTypeManager.Instance, oddXName);
                }
                return this.oddField;
            }
            set {
                if ((value == null)) {
                    this.oddField = null;
                }
                else {
                    if ((this.oddField == null)) {
                        this.oddField = XTypedList<odd>.Initialize(this, LinqToXsdTypeManager.Instance, value, oddXName);
                    }
                    else {
                        XTypedServices.SetList<odd>(this.oddField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<originalsloc> originalsloc {
            get {
                if ((this.originalslocField == null)) {
                    this.originalslocField = new XTypedList<originalsloc>(this, LinqToXsdTypeManager.Instance, originalslocXName);
                }
                return this.originalslocField;
            }
            set {
                if ((value == null)) {
                    this.originalslocField = null;
                }
                else {
                    if ((this.originalslocField == null)) {
                        this.originalslocField = XTypedList<originalsloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, originalslocXName);
                    }
                    else {
                        XTypedServices.SetList<originalsloc>(this.originalslocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<otherfindaid> otherfindaid {
            get {
                if ((this.otherfindaidField == null)) {
                    this.otherfindaidField = new XTypedList<otherfindaid>(this, LinqToXsdTypeManager.Instance, otherfindaidXName);
                }
                return this.otherfindaidField;
            }
            set {
                if ((value == null)) {
                    this.otherfindaidField = null;
                }
                else {
                    if ((this.otherfindaidField == null)) {
                        this.otherfindaidField = XTypedList<otherfindaid>.Initialize(this, LinqToXsdTypeManager.Instance, value, otherfindaidXName);
                    }
                    else {
                        XTypedServices.SetList<otherfindaid>(this.otherfindaidField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<phystech> phystech {
            get {
                if ((this.phystechField == null)) {
                    this.phystechField = new XTypedList<phystech>(this, LinqToXsdTypeManager.Instance, phystechXName);
                }
                return this.phystechField;
            }
            set {
                if ((value == null)) {
                    this.phystechField = null;
                }
                else {
                    if ((this.phystechField == null)) {
                        this.phystechField = XTypedList<phystech>.Initialize(this, LinqToXsdTypeManager.Instance, value, phystechXName);
                    }
                    else {
                        XTypedServices.SetList<phystech>(this.phystechField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<prefercite> prefercite {
            get {
                if ((this.preferciteField == null)) {
                    this.preferciteField = new XTypedList<prefercite>(this, LinqToXsdTypeManager.Instance, preferciteXName);
                }
                return this.preferciteField;
            }
            set {
                if ((value == null)) {
                    this.preferciteField = null;
                }
                else {
                    if ((this.preferciteField == null)) {
                        this.preferciteField = XTypedList<prefercite>.Initialize(this, LinqToXsdTypeManager.Instance, value, preferciteXName);
                    }
                    else {
                        XTypedServices.SetList<prefercite>(this.preferciteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<processinfo> processinfo {
            get {
                if ((this.processinfoField == null)) {
                    this.processinfoField = new XTypedList<processinfo>(this, LinqToXsdTypeManager.Instance, processinfoXName);
                }
                return this.processinfoField;
            }
            set {
                if ((value == null)) {
                    this.processinfoField = null;
                }
                else {
                    if ((this.processinfoField == null)) {
                        this.processinfoField = XTypedList<processinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, processinfoXName);
                    }
                    else {
                        XTypedServices.SetList<processinfo>(this.processinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<relatedmaterial> relatedmaterial {
            get {
                if ((this.relatedmaterialField == null)) {
                    this.relatedmaterialField = new XTypedList<relatedmaterial>(this, LinqToXsdTypeManager.Instance, relatedmaterialXName);
                }
                return this.relatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.relatedmaterialField = null;
                }
                else {
                    if ((this.relatedmaterialField == null)) {
                        this.relatedmaterialField = XTypedList<relatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, relatedmaterialXName);
                    }
                    else {
                        XTypedServices.SetList<relatedmaterial>(this.relatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<scopecontent> scopecontent {
            get {
                if ((this.scopecontentField == null)) {
                    this.scopecontentField = new XTypedList<scopecontent>(this, LinqToXsdTypeManager.Instance, scopecontentXName);
                }
                return this.scopecontentField;
            }
            set {
                if ((value == null)) {
                    this.scopecontentField = null;
                }
                else {
                    if ((this.scopecontentField == null)) {
                        this.scopecontentField = XTypedList<scopecontent>.Initialize(this, LinqToXsdTypeManager.Instance, value, scopecontentXName);
                    }
                    else {
                        XTypedServices.SetList<scopecontent>(this.scopecontentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<separatedmaterial> separatedmaterial {
            get {
                if ((this.separatedmaterialField == null)) {
                    this.separatedmaterialField = new XTypedList<separatedmaterial>(this, LinqToXsdTypeManager.Instance, separatedmaterialXName);
                }
                return this.separatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.separatedmaterialField = null;
                }
                else {
                    if ((this.separatedmaterialField == null)) {
                        this.separatedmaterialField = XTypedList<separatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, separatedmaterialXName);
                    }
                    else {
                        XTypedServices.SetList<separatedmaterial>(this.separatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<userestrict> userestrict {
            get {
                if ((this.userestrictField == null)) {
                    this.userestrictField = new XTypedList<userestrict>(this, LinqToXsdTypeManager.Instance, userestrictXName);
                }
                return this.userestrictField;
            }
            set {
                if ((value == null)) {
                    this.userestrictField = null;
                }
                else {
                    if ((this.userestrictField == null)) {
                        this.userestrictField = XTypedList<userestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, userestrictXName);
                    }
                    else {
                        XTypedServices.SetList<userestrict>(this.userestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<dsc> dsc {
            get {
                if ((this.dscField == null)) {
                    this.dscField = new XTypedList<dsc>(this, LinqToXsdTypeManager.Instance, dscXName);
                }
                return this.dscField;
            }
            set {
                if ((value == null)) {
                    this.dscField = null;
                }
                else {
                    if ((this.dscField == null)) {
                        this.dscField = XTypedList<dsc>.Initialize(this, LinqToXsdTypeManager.Instance, value, dscXName);
                    }
                    else {
                        XTypedServices.SetList<dsc>(this.dscField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<dao> dao {
            get {
                if ((this.daoField == null)) {
                    this.daoField = new XTypedList<dao>(this, LinqToXsdTypeManager.Instance, daoXName);
                }
                return this.daoField;
            }
            set {
                if ((value == null)) {
                    this.daoField = null;
                }
                else {
                    if ((this.daoField == null)) {
                        this.daoField = XTypedList<dao>.Initialize(this, LinqToXsdTypeManager.Instance, value, daoXName);
                    }
                    else {
                        XTypedServices.SetList<dao>(this.daoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<daogrp> daogrp {
            get {
                if ((this.daogrpField == null)) {
                    this.daogrpField = new XTypedList<daogrp>(this, LinqToXsdTypeManager.Instance, daogrpXName);
                }
                return this.daogrpField;
            }
            set {
                if ((value == null)) {
                    this.daogrpField = null;
                }
                else {
                    if ((this.daogrpField == null)) {
                        this.daogrpField = XTypedList<daogrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, daogrpXName);
                    }
                    else {
                        XTypedServices.SetList<daogrp>(this.daogrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<thead> thead {
            get {
                if ((this.theadField == null)) {
                    this.theadField = new XTypedList<thead>(this, LinqToXsdTypeManager.Instance, theadXName);
                }
                return this.theadField;
            }
            set {
                if ((value == null)) {
                    this.theadField = null;
                }
                else {
                    if ((this.theadField == null)) {
                        this.theadField = XTypedList<thead>.Initialize(this, LinqToXsdTypeManager.Instance, value, theadXName);
                    }
                    else {
                        XTypedServices.SetList<thead>(this.theadField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c03+)*)
        /// </para>
        /// </summary>
        public virtual IList<c03> c03 {
            get {
                if ((this.c03Field == null)) {
                    this.c03Field = new XTypedList<c03>(this, LinqToXsdTypeManager.Instance, c03XName);
                }
                return this.c03Field;
            }
            set {
                if ((value == null)) {
                    this.c03Field = null;
                }
                else {
                    if ((this.c03Field == null)) {
                        this.c03Field = XTypedList<c03>.Initialize(this, LinqToXsdTypeManager.Instance, value, c03XName);
                    }
                    else {
                        XTypedServices.SetList<c03>(this.c03Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string level {
            get {
                XAttribute x = this.Attribute(levelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(levelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string otherlevel {
            get {
                XAttribute x = this.Attribute(otherlevelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(otherlevelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string tpattern {
            get {
                XAttribute x = this.Attribute(tpatternXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(tpatternXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<c02>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(didXName, typeof(did));
            localElementDictionary.Add(accessrestrictXName, typeof(accessrestrict));
            localElementDictionary.Add(accrualsXName, typeof(accruals));
            localElementDictionary.Add(acqinfoXName, typeof(acqinfo));
            localElementDictionary.Add(altformavailXName, typeof(altformavail));
            localElementDictionary.Add(appraisalXName, typeof(appraisal));
            localElementDictionary.Add(arrangementXName, typeof(arrangement));
            localElementDictionary.Add(bibliographyXName, typeof(bibliography));
            localElementDictionary.Add(bioghistXName, typeof(bioghist));
            localElementDictionary.Add(controlaccessXName, typeof(controlaccess));
            localElementDictionary.Add(custodhistXName, typeof(custodhist));
            localElementDictionary.Add(descgrpXName, typeof(descgrp));
            localElementDictionary.Add(fileplanXName, typeof(fileplan));
            localElementDictionary.Add(indexXName, typeof(index));
            localElementDictionary.Add(oddXName, typeof(odd));
            localElementDictionary.Add(originalslocXName, typeof(originalsloc));
            localElementDictionary.Add(otherfindaidXName, typeof(otherfindaid));
            localElementDictionary.Add(phystechXName, typeof(phystech));
            localElementDictionary.Add(preferciteXName, typeof(prefercite));
            localElementDictionary.Add(processinfoXName, typeof(processinfo));
            localElementDictionary.Add(relatedmaterialXName, typeof(relatedmaterial));
            localElementDictionary.Add(scopecontentXName, typeof(scopecontent));
            localElementDictionary.Add(separatedmaterialXName, typeof(separatedmaterial));
            localElementDictionary.Add(userestrictXName, typeof(userestrict));
            localElementDictionary.Add(dscXName, typeof(dsc));
            localElementDictionary.Add(daoXName, typeof(dao));
            localElementDictionary.Add(daogrpXName, typeof(daogrp));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(theadXName, typeof(thead));
            localElementDictionary.Add(c03XName, typeof(c03));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
    /// </para>
    /// </summary>
    public partial class c03 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName didXName = System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName accessrestrictXName = System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accessrestrict> accessrestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName accrualsXName = System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accruals> accrualsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName acqinfoXName = System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<acqinfo> acqinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altformavailXName = System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<altformavail> altformavailField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName appraisalXName = System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<appraisal> appraisalField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arrangementXName = System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<arrangement> arrangementField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibliographyXName = System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibliography> bibliographyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bioghistXName = System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bioghist> bioghistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName controlaccessXName = System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<controlaccess> controlaccessField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName custodhistXName = System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<custodhist> custodhistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descgrpXName = System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<descgrp> descgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName fileplanXName = System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<fileplan> fileplanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName indexXName = System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<index> indexField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName oddXName = System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<odd> oddField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName originalslocXName = System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<originalsloc> originalslocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName otherfindaidXName = System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<otherfindaid> otherfindaidField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phystechXName = System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phystech> phystechField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName preferciteXName = System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<prefercite> preferciteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName processinfoXName = System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<processinfo> processinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName relatedmaterialXName = System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<relatedmaterial> relatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName scopecontentXName = System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<scopecontent> scopecontentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName separatedmaterialXName = System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<separatedmaterial> separatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userestrictXName = System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<userestrict> userestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dscXName = System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dsc> dscField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName daoXName = System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dao> daoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName daogrpXName = System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<daogrp> daogrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName theadXName = System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<thead> theadField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName c04XName = System.Xml.Linq.XName.Get("c04", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<c04> c04Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName levelXName = System.Xml.Linq.XName.Get("level", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName otherlevelXName = System.Xml.Linq.XName.Get("otherlevel", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tpatternXName = System.Xml.Linq.XName.Get("tpattern", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("c03", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator c03(XElement xe) { return XTypedServices.ToXTypedElement<c03>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static c03() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new NamedContentModelEntity(didXName), new ChoiceContentModelEntity(new NamedContentModelEntity(accessrestrictXName), new NamedContentModelEntity(accrualsXName), new NamedContentModelEntity(acqinfoXName), new NamedContentModelEntity(altformavailXName), new NamedContentModelEntity(appraisalXName), new NamedContentModelEntity(arrangementXName), new NamedContentModelEntity(bibliographyXName), new NamedContentModelEntity(bioghistXName), new NamedContentModelEntity(controlaccessXName), new NamedContentModelEntity(custodhistXName), new NamedContentModelEntity(descgrpXName), new NamedContentModelEntity(fileplanXName), new NamedContentModelEntity(indexXName), new NamedContentModelEntity(oddXName), new NamedContentModelEntity(originalslocXName), new NamedContentModelEntity(otherfindaidXName), new NamedContentModelEntity(phystechXName), new NamedContentModelEntity(preferciteXName), new NamedContentModelEntity(processinfoXName), new NamedContentModelEntity(relatedmaterialXName), new NamedContentModelEntity(scopecontentXName), new NamedContentModelEntity(separatedmaterialXName), new NamedContentModelEntity(userestrictXName), new NamedContentModelEntity(dscXName), new NamedContentModelEntity(daoXName), new NamedContentModelEntity(daogrpXName), new NamedContentModelEntity(noteXName)), new SequenceContentModelEntity(new NamedContentModelEntity(theadXName), new NamedContentModelEntity(c04XName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public c03() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual did did {
            get {
                XElement x = this.GetElement(didXName);
                return ((did)(x));
            }
            set {
                this.SetElement(didXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<accessrestrict> accessrestrict {
            get {
                if ((this.accessrestrictField == null)) {
                    this.accessrestrictField = new XTypedList<accessrestrict>(this, LinqToXsdTypeManager.Instance, accessrestrictXName);
                }
                return this.accessrestrictField;
            }
            set {
                if ((value == null)) {
                    this.accessrestrictField = null;
                }
                else {
                    if ((this.accessrestrictField == null)) {
                        this.accessrestrictField = XTypedList<accessrestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, accessrestrictXName);
                    }
                    else {
                        XTypedServices.SetList<accessrestrict>(this.accessrestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<accruals> accruals {
            get {
                if ((this.accrualsField == null)) {
                    this.accrualsField = new XTypedList<accruals>(this, LinqToXsdTypeManager.Instance, accrualsXName);
                }
                return this.accrualsField;
            }
            set {
                if ((value == null)) {
                    this.accrualsField = null;
                }
                else {
                    if ((this.accrualsField == null)) {
                        this.accrualsField = XTypedList<accruals>.Initialize(this, LinqToXsdTypeManager.Instance, value, accrualsXName);
                    }
                    else {
                        XTypedServices.SetList<accruals>(this.accrualsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<acqinfo> acqinfo {
            get {
                if ((this.acqinfoField == null)) {
                    this.acqinfoField = new XTypedList<acqinfo>(this, LinqToXsdTypeManager.Instance, acqinfoXName);
                }
                return this.acqinfoField;
            }
            set {
                if ((value == null)) {
                    this.acqinfoField = null;
                }
                else {
                    if ((this.acqinfoField == null)) {
                        this.acqinfoField = XTypedList<acqinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, acqinfoXName);
                    }
                    else {
                        XTypedServices.SetList<acqinfo>(this.acqinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<altformavail> altformavail {
            get {
                if ((this.altformavailField == null)) {
                    this.altformavailField = new XTypedList<altformavail>(this, LinqToXsdTypeManager.Instance, altformavailXName);
                }
                return this.altformavailField;
            }
            set {
                if ((value == null)) {
                    this.altformavailField = null;
                }
                else {
                    if ((this.altformavailField == null)) {
                        this.altformavailField = XTypedList<altformavail>.Initialize(this, LinqToXsdTypeManager.Instance, value, altformavailXName);
                    }
                    else {
                        XTypedServices.SetList<altformavail>(this.altformavailField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<appraisal> appraisal {
            get {
                if ((this.appraisalField == null)) {
                    this.appraisalField = new XTypedList<appraisal>(this, LinqToXsdTypeManager.Instance, appraisalXName);
                }
                return this.appraisalField;
            }
            set {
                if ((value == null)) {
                    this.appraisalField = null;
                }
                else {
                    if ((this.appraisalField == null)) {
                        this.appraisalField = XTypedList<appraisal>.Initialize(this, LinqToXsdTypeManager.Instance, value, appraisalXName);
                    }
                    else {
                        XTypedServices.SetList<appraisal>(this.appraisalField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<arrangement> arrangement {
            get {
                if ((this.arrangementField == null)) {
                    this.arrangementField = new XTypedList<arrangement>(this, LinqToXsdTypeManager.Instance, arrangementXName);
                }
                return this.arrangementField;
            }
            set {
                if ((value == null)) {
                    this.arrangementField = null;
                }
                else {
                    if ((this.arrangementField == null)) {
                        this.arrangementField = XTypedList<arrangement>.Initialize(this, LinqToXsdTypeManager.Instance, value, arrangementXName);
                    }
                    else {
                        XTypedServices.SetList<arrangement>(this.arrangementField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<bibliography> bibliography {
            get {
                if ((this.bibliographyField == null)) {
                    this.bibliographyField = new XTypedList<bibliography>(this, LinqToXsdTypeManager.Instance, bibliographyXName);
                }
                return this.bibliographyField;
            }
            set {
                if ((value == null)) {
                    this.bibliographyField = null;
                }
                else {
                    if ((this.bibliographyField == null)) {
                        this.bibliographyField = XTypedList<bibliography>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibliographyXName);
                    }
                    else {
                        XTypedServices.SetList<bibliography>(this.bibliographyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<bioghist> bioghist {
            get {
                if ((this.bioghistField == null)) {
                    this.bioghistField = new XTypedList<bioghist>(this, LinqToXsdTypeManager.Instance, bioghistXName);
                }
                return this.bioghistField;
            }
            set {
                if ((value == null)) {
                    this.bioghistField = null;
                }
                else {
                    if ((this.bioghistField == null)) {
                        this.bioghistField = XTypedList<bioghist>.Initialize(this, LinqToXsdTypeManager.Instance, value, bioghistXName);
                    }
                    else {
                        XTypedServices.SetList<bioghist>(this.bioghistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<controlaccess> controlaccess {
            get {
                if ((this.controlaccessField == null)) {
                    this.controlaccessField = new XTypedList<controlaccess>(this, LinqToXsdTypeManager.Instance, controlaccessXName);
                }
                return this.controlaccessField;
            }
            set {
                if ((value == null)) {
                    this.controlaccessField = null;
                }
                else {
                    if ((this.controlaccessField == null)) {
                        this.controlaccessField = XTypedList<controlaccess>.Initialize(this, LinqToXsdTypeManager.Instance, value, controlaccessXName);
                    }
                    else {
                        XTypedServices.SetList<controlaccess>(this.controlaccessField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<custodhist> custodhist {
            get {
                if ((this.custodhistField == null)) {
                    this.custodhistField = new XTypedList<custodhist>(this, LinqToXsdTypeManager.Instance, custodhistXName);
                }
                return this.custodhistField;
            }
            set {
                if ((value == null)) {
                    this.custodhistField = null;
                }
                else {
                    if ((this.custodhistField == null)) {
                        this.custodhistField = XTypedList<custodhist>.Initialize(this, LinqToXsdTypeManager.Instance, value, custodhistXName);
                    }
                    else {
                        XTypedServices.SetList<custodhist>(this.custodhistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<descgrp> descgrp {
            get {
                if ((this.descgrpField == null)) {
                    this.descgrpField = new XTypedList<descgrp>(this, LinqToXsdTypeManager.Instance, descgrpXName);
                }
                return this.descgrpField;
            }
            set {
                if ((value == null)) {
                    this.descgrpField = null;
                }
                else {
                    if ((this.descgrpField == null)) {
                        this.descgrpField = XTypedList<descgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, descgrpXName);
                    }
                    else {
                        XTypedServices.SetList<descgrp>(this.descgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<fileplan> fileplan {
            get {
                if ((this.fileplanField == null)) {
                    this.fileplanField = new XTypedList<fileplan>(this, LinqToXsdTypeManager.Instance, fileplanXName);
                }
                return this.fileplanField;
            }
            set {
                if ((value == null)) {
                    this.fileplanField = null;
                }
                else {
                    if ((this.fileplanField == null)) {
                        this.fileplanField = XTypedList<fileplan>.Initialize(this, LinqToXsdTypeManager.Instance, value, fileplanXName);
                    }
                    else {
                        XTypedServices.SetList<fileplan>(this.fileplanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<index> index {
            get {
                if ((this.indexField == null)) {
                    this.indexField = new XTypedList<index>(this, LinqToXsdTypeManager.Instance, indexXName);
                }
                return this.indexField;
            }
            set {
                if ((value == null)) {
                    this.indexField = null;
                }
                else {
                    if ((this.indexField == null)) {
                        this.indexField = XTypedList<index>.Initialize(this, LinqToXsdTypeManager.Instance, value, indexXName);
                    }
                    else {
                        XTypedServices.SetList<index>(this.indexField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<odd> odd {
            get {
                if ((this.oddField == null)) {
                    this.oddField = new XTypedList<odd>(this, LinqToXsdTypeManager.Instance, oddXName);
                }
                return this.oddField;
            }
            set {
                if ((value == null)) {
                    this.oddField = null;
                }
                else {
                    if ((this.oddField == null)) {
                        this.oddField = XTypedList<odd>.Initialize(this, LinqToXsdTypeManager.Instance, value, oddXName);
                    }
                    else {
                        XTypedServices.SetList<odd>(this.oddField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<originalsloc> originalsloc {
            get {
                if ((this.originalslocField == null)) {
                    this.originalslocField = new XTypedList<originalsloc>(this, LinqToXsdTypeManager.Instance, originalslocXName);
                }
                return this.originalslocField;
            }
            set {
                if ((value == null)) {
                    this.originalslocField = null;
                }
                else {
                    if ((this.originalslocField == null)) {
                        this.originalslocField = XTypedList<originalsloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, originalslocXName);
                    }
                    else {
                        XTypedServices.SetList<originalsloc>(this.originalslocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<otherfindaid> otherfindaid {
            get {
                if ((this.otherfindaidField == null)) {
                    this.otherfindaidField = new XTypedList<otherfindaid>(this, LinqToXsdTypeManager.Instance, otherfindaidXName);
                }
                return this.otherfindaidField;
            }
            set {
                if ((value == null)) {
                    this.otherfindaidField = null;
                }
                else {
                    if ((this.otherfindaidField == null)) {
                        this.otherfindaidField = XTypedList<otherfindaid>.Initialize(this, LinqToXsdTypeManager.Instance, value, otherfindaidXName);
                    }
                    else {
                        XTypedServices.SetList<otherfindaid>(this.otherfindaidField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<phystech> phystech {
            get {
                if ((this.phystechField == null)) {
                    this.phystechField = new XTypedList<phystech>(this, LinqToXsdTypeManager.Instance, phystechXName);
                }
                return this.phystechField;
            }
            set {
                if ((value == null)) {
                    this.phystechField = null;
                }
                else {
                    if ((this.phystechField == null)) {
                        this.phystechField = XTypedList<phystech>.Initialize(this, LinqToXsdTypeManager.Instance, value, phystechXName);
                    }
                    else {
                        XTypedServices.SetList<phystech>(this.phystechField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<prefercite> prefercite {
            get {
                if ((this.preferciteField == null)) {
                    this.preferciteField = new XTypedList<prefercite>(this, LinqToXsdTypeManager.Instance, preferciteXName);
                }
                return this.preferciteField;
            }
            set {
                if ((value == null)) {
                    this.preferciteField = null;
                }
                else {
                    if ((this.preferciteField == null)) {
                        this.preferciteField = XTypedList<prefercite>.Initialize(this, LinqToXsdTypeManager.Instance, value, preferciteXName);
                    }
                    else {
                        XTypedServices.SetList<prefercite>(this.preferciteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<processinfo> processinfo {
            get {
                if ((this.processinfoField == null)) {
                    this.processinfoField = new XTypedList<processinfo>(this, LinqToXsdTypeManager.Instance, processinfoXName);
                }
                return this.processinfoField;
            }
            set {
                if ((value == null)) {
                    this.processinfoField = null;
                }
                else {
                    if ((this.processinfoField == null)) {
                        this.processinfoField = XTypedList<processinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, processinfoXName);
                    }
                    else {
                        XTypedServices.SetList<processinfo>(this.processinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<relatedmaterial> relatedmaterial {
            get {
                if ((this.relatedmaterialField == null)) {
                    this.relatedmaterialField = new XTypedList<relatedmaterial>(this, LinqToXsdTypeManager.Instance, relatedmaterialXName);
                }
                return this.relatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.relatedmaterialField = null;
                }
                else {
                    if ((this.relatedmaterialField == null)) {
                        this.relatedmaterialField = XTypedList<relatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, relatedmaterialXName);
                    }
                    else {
                        XTypedServices.SetList<relatedmaterial>(this.relatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<scopecontent> scopecontent {
            get {
                if ((this.scopecontentField == null)) {
                    this.scopecontentField = new XTypedList<scopecontent>(this, LinqToXsdTypeManager.Instance, scopecontentXName);
                }
                return this.scopecontentField;
            }
            set {
                if ((value == null)) {
                    this.scopecontentField = null;
                }
                else {
                    if ((this.scopecontentField == null)) {
                        this.scopecontentField = XTypedList<scopecontent>.Initialize(this, LinqToXsdTypeManager.Instance, value, scopecontentXName);
                    }
                    else {
                        XTypedServices.SetList<scopecontent>(this.scopecontentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<separatedmaterial> separatedmaterial {
            get {
                if ((this.separatedmaterialField == null)) {
                    this.separatedmaterialField = new XTypedList<separatedmaterial>(this, LinqToXsdTypeManager.Instance, separatedmaterialXName);
                }
                return this.separatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.separatedmaterialField = null;
                }
                else {
                    if ((this.separatedmaterialField == null)) {
                        this.separatedmaterialField = XTypedList<separatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, separatedmaterialXName);
                    }
                    else {
                        XTypedServices.SetList<separatedmaterial>(this.separatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<userestrict> userestrict {
            get {
                if ((this.userestrictField == null)) {
                    this.userestrictField = new XTypedList<userestrict>(this, LinqToXsdTypeManager.Instance, userestrictXName);
                }
                return this.userestrictField;
            }
            set {
                if ((value == null)) {
                    this.userestrictField = null;
                }
                else {
                    if ((this.userestrictField == null)) {
                        this.userestrictField = XTypedList<userestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, userestrictXName);
                    }
                    else {
                        XTypedServices.SetList<userestrict>(this.userestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<dsc> dsc {
            get {
                if ((this.dscField == null)) {
                    this.dscField = new XTypedList<dsc>(this, LinqToXsdTypeManager.Instance, dscXName);
                }
                return this.dscField;
            }
            set {
                if ((value == null)) {
                    this.dscField = null;
                }
                else {
                    if ((this.dscField == null)) {
                        this.dscField = XTypedList<dsc>.Initialize(this, LinqToXsdTypeManager.Instance, value, dscXName);
                    }
                    else {
                        XTypedServices.SetList<dsc>(this.dscField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<dao> dao {
            get {
                if ((this.daoField == null)) {
                    this.daoField = new XTypedList<dao>(this, LinqToXsdTypeManager.Instance, daoXName);
                }
                return this.daoField;
            }
            set {
                if ((value == null)) {
                    this.daoField = null;
                }
                else {
                    if ((this.daoField == null)) {
                        this.daoField = XTypedList<dao>.Initialize(this, LinqToXsdTypeManager.Instance, value, daoXName);
                    }
                    else {
                        XTypedServices.SetList<dao>(this.daoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<daogrp> daogrp {
            get {
                if ((this.daogrpField == null)) {
                    this.daogrpField = new XTypedList<daogrp>(this, LinqToXsdTypeManager.Instance, daogrpXName);
                }
                return this.daogrpField;
            }
            set {
                if ((value == null)) {
                    this.daogrpField = null;
                }
                else {
                    if ((this.daogrpField == null)) {
                        this.daogrpField = XTypedList<daogrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, daogrpXName);
                    }
                    else {
                        XTypedServices.SetList<daogrp>(this.daogrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<thead> thead {
            get {
                if ((this.theadField == null)) {
                    this.theadField = new XTypedList<thead>(this, LinqToXsdTypeManager.Instance, theadXName);
                }
                return this.theadField;
            }
            set {
                if ((value == null)) {
                    this.theadField = null;
                }
                else {
                    if ((this.theadField == null)) {
                        this.theadField = XTypedList<thead>.Initialize(this, LinqToXsdTypeManager.Instance, value, theadXName);
                    }
                    else {
                        XTypedServices.SetList<thead>(this.theadField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c04+)*)
        /// </para>
        /// </summary>
        public virtual IList<c04> c04 {
            get {
                if ((this.c04Field == null)) {
                    this.c04Field = new XTypedList<c04>(this, LinqToXsdTypeManager.Instance, c04XName);
                }
                return this.c04Field;
            }
            set {
                if ((value == null)) {
                    this.c04Field = null;
                }
                else {
                    if ((this.c04Field == null)) {
                        this.c04Field = XTypedList<c04>.Initialize(this, LinqToXsdTypeManager.Instance, value, c04XName);
                    }
                    else {
                        XTypedServices.SetList<c04>(this.c04Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string level {
            get {
                XAttribute x = this.Attribute(levelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(levelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string otherlevel {
            get {
                XAttribute x = this.Attribute(otherlevelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(otherlevelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string tpattern {
            get {
                XAttribute x = this.Attribute(tpatternXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(tpatternXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<c03>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(didXName, typeof(did));
            localElementDictionary.Add(accessrestrictXName, typeof(accessrestrict));
            localElementDictionary.Add(accrualsXName, typeof(accruals));
            localElementDictionary.Add(acqinfoXName, typeof(acqinfo));
            localElementDictionary.Add(altformavailXName, typeof(altformavail));
            localElementDictionary.Add(appraisalXName, typeof(appraisal));
            localElementDictionary.Add(arrangementXName, typeof(arrangement));
            localElementDictionary.Add(bibliographyXName, typeof(bibliography));
            localElementDictionary.Add(bioghistXName, typeof(bioghist));
            localElementDictionary.Add(controlaccessXName, typeof(controlaccess));
            localElementDictionary.Add(custodhistXName, typeof(custodhist));
            localElementDictionary.Add(descgrpXName, typeof(descgrp));
            localElementDictionary.Add(fileplanXName, typeof(fileplan));
            localElementDictionary.Add(indexXName, typeof(index));
            localElementDictionary.Add(oddXName, typeof(odd));
            localElementDictionary.Add(originalslocXName, typeof(originalsloc));
            localElementDictionary.Add(otherfindaidXName, typeof(otherfindaid));
            localElementDictionary.Add(phystechXName, typeof(phystech));
            localElementDictionary.Add(preferciteXName, typeof(prefercite));
            localElementDictionary.Add(processinfoXName, typeof(processinfo));
            localElementDictionary.Add(relatedmaterialXName, typeof(relatedmaterial));
            localElementDictionary.Add(scopecontentXName, typeof(scopecontent));
            localElementDictionary.Add(separatedmaterialXName, typeof(separatedmaterial));
            localElementDictionary.Add(userestrictXName, typeof(userestrict));
            localElementDictionary.Add(dscXName, typeof(dsc));
            localElementDictionary.Add(daoXName, typeof(dao));
            localElementDictionary.Add(daogrpXName, typeof(daogrp));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(theadXName, typeof(thead));
            localElementDictionary.Add(c04XName, typeof(c04));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
    /// </para>
    /// </summary>
    public partial class c04 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName didXName = System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName accessrestrictXName = System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accessrestrict> accessrestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName accrualsXName = System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accruals> accrualsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName acqinfoXName = System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<acqinfo> acqinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altformavailXName = System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<altformavail> altformavailField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName appraisalXName = System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<appraisal> appraisalField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arrangementXName = System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<arrangement> arrangementField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibliographyXName = System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibliography> bibliographyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bioghistXName = System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bioghist> bioghistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName controlaccessXName = System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<controlaccess> controlaccessField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName custodhistXName = System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<custodhist> custodhistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descgrpXName = System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<descgrp> descgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName fileplanXName = System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<fileplan> fileplanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName indexXName = System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<index> indexField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName oddXName = System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<odd> oddField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName originalslocXName = System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<originalsloc> originalslocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName otherfindaidXName = System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<otherfindaid> otherfindaidField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phystechXName = System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phystech> phystechField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName preferciteXName = System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<prefercite> preferciteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName processinfoXName = System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<processinfo> processinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName relatedmaterialXName = System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<relatedmaterial> relatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName scopecontentXName = System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<scopecontent> scopecontentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName separatedmaterialXName = System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<separatedmaterial> separatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userestrictXName = System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<userestrict> userestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dscXName = System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dsc> dscField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName daoXName = System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dao> daoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName daogrpXName = System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<daogrp> daogrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName theadXName = System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<thead> theadField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName c05XName = System.Xml.Linq.XName.Get("c05", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<c05> c05Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName levelXName = System.Xml.Linq.XName.Get("level", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName otherlevelXName = System.Xml.Linq.XName.Get("otherlevel", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tpatternXName = System.Xml.Linq.XName.Get("tpattern", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("c04", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator c04(XElement xe) { return XTypedServices.ToXTypedElement<c04>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static c04() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new NamedContentModelEntity(didXName), new ChoiceContentModelEntity(new NamedContentModelEntity(accessrestrictXName), new NamedContentModelEntity(accrualsXName), new NamedContentModelEntity(acqinfoXName), new NamedContentModelEntity(altformavailXName), new NamedContentModelEntity(appraisalXName), new NamedContentModelEntity(arrangementXName), new NamedContentModelEntity(bibliographyXName), new NamedContentModelEntity(bioghistXName), new NamedContentModelEntity(controlaccessXName), new NamedContentModelEntity(custodhistXName), new NamedContentModelEntity(descgrpXName), new NamedContentModelEntity(fileplanXName), new NamedContentModelEntity(indexXName), new NamedContentModelEntity(oddXName), new NamedContentModelEntity(originalslocXName), new NamedContentModelEntity(otherfindaidXName), new NamedContentModelEntity(phystechXName), new NamedContentModelEntity(preferciteXName), new NamedContentModelEntity(processinfoXName), new NamedContentModelEntity(relatedmaterialXName), new NamedContentModelEntity(scopecontentXName), new NamedContentModelEntity(separatedmaterialXName), new NamedContentModelEntity(userestrictXName), new NamedContentModelEntity(dscXName), new NamedContentModelEntity(daoXName), new NamedContentModelEntity(daogrpXName), new NamedContentModelEntity(noteXName)), new SequenceContentModelEntity(new NamedContentModelEntity(theadXName), new NamedContentModelEntity(c05XName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public c04() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual did did {
            get {
                XElement x = this.GetElement(didXName);
                return ((did)(x));
            }
            set {
                this.SetElement(didXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<accessrestrict> accessrestrict {
            get {
                if ((this.accessrestrictField == null)) {
                    this.accessrestrictField = new XTypedList<accessrestrict>(this, LinqToXsdTypeManager.Instance, accessrestrictXName);
                }
                return this.accessrestrictField;
            }
            set {
                if ((value == null)) {
                    this.accessrestrictField = null;
                }
                else {
                    if ((this.accessrestrictField == null)) {
                        this.accessrestrictField = XTypedList<accessrestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, accessrestrictXName);
                    }
                    else {
                        XTypedServices.SetList<accessrestrict>(this.accessrestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<accruals> accruals {
            get {
                if ((this.accrualsField == null)) {
                    this.accrualsField = new XTypedList<accruals>(this, LinqToXsdTypeManager.Instance, accrualsXName);
                }
                return this.accrualsField;
            }
            set {
                if ((value == null)) {
                    this.accrualsField = null;
                }
                else {
                    if ((this.accrualsField == null)) {
                        this.accrualsField = XTypedList<accruals>.Initialize(this, LinqToXsdTypeManager.Instance, value, accrualsXName);
                    }
                    else {
                        XTypedServices.SetList<accruals>(this.accrualsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<acqinfo> acqinfo {
            get {
                if ((this.acqinfoField == null)) {
                    this.acqinfoField = new XTypedList<acqinfo>(this, LinqToXsdTypeManager.Instance, acqinfoXName);
                }
                return this.acqinfoField;
            }
            set {
                if ((value == null)) {
                    this.acqinfoField = null;
                }
                else {
                    if ((this.acqinfoField == null)) {
                        this.acqinfoField = XTypedList<acqinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, acqinfoXName);
                    }
                    else {
                        XTypedServices.SetList<acqinfo>(this.acqinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<altformavail> altformavail {
            get {
                if ((this.altformavailField == null)) {
                    this.altformavailField = new XTypedList<altformavail>(this, LinqToXsdTypeManager.Instance, altformavailXName);
                }
                return this.altformavailField;
            }
            set {
                if ((value == null)) {
                    this.altformavailField = null;
                }
                else {
                    if ((this.altformavailField == null)) {
                        this.altformavailField = XTypedList<altformavail>.Initialize(this, LinqToXsdTypeManager.Instance, value, altformavailXName);
                    }
                    else {
                        XTypedServices.SetList<altformavail>(this.altformavailField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<appraisal> appraisal {
            get {
                if ((this.appraisalField == null)) {
                    this.appraisalField = new XTypedList<appraisal>(this, LinqToXsdTypeManager.Instance, appraisalXName);
                }
                return this.appraisalField;
            }
            set {
                if ((value == null)) {
                    this.appraisalField = null;
                }
                else {
                    if ((this.appraisalField == null)) {
                        this.appraisalField = XTypedList<appraisal>.Initialize(this, LinqToXsdTypeManager.Instance, value, appraisalXName);
                    }
                    else {
                        XTypedServices.SetList<appraisal>(this.appraisalField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<arrangement> arrangement {
            get {
                if ((this.arrangementField == null)) {
                    this.arrangementField = new XTypedList<arrangement>(this, LinqToXsdTypeManager.Instance, arrangementXName);
                }
                return this.arrangementField;
            }
            set {
                if ((value == null)) {
                    this.arrangementField = null;
                }
                else {
                    if ((this.arrangementField == null)) {
                        this.arrangementField = XTypedList<arrangement>.Initialize(this, LinqToXsdTypeManager.Instance, value, arrangementXName);
                    }
                    else {
                        XTypedServices.SetList<arrangement>(this.arrangementField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<bibliography> bibliography {
            get {
                if ((this.bibliographyField == null)) {
                    this.bibliographyField = new XTypedList<bibliography>(this, LinqToXsdTypeManager.Instance, bibliographyXName);
                }
                return this.bibliographyField;
            }
            set {
                if ((value == null)) {
                    this.bibliographyField = null;
                }
                else {
                    if ((this.bibliographyField == null)) {
                        this.bibliographyField = XTypedList<bibliography>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibliographyXName);
                    }
                    else {
                        XTypedServices.SetList<bibliography>(this.bibliographyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<bioghist> bioghist {
            get {
                if ((this.bioghistField == null)) {
                    this.bioghistField = new XTypedList<bioghist>(this, LinqToXsdTypeManager.Instance, bioghistXName);
                }
                return this.bioghistField;
            }
            set {
                if ((value == null)) {
                    this.bioghistField = null;
                }
                else {
                    if ((this.bioghistField == null)) {
                        this.bioghistField = XTypedList<bioghist>.Initialize(this, LinqToXsdTypeManager.Instance, value, bioghistXName);
                    }
                    else {
                        XTypedServices.SetList<bioghist>(this.bioghistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<controlaccess> controlaccess {
            get {
                if ((this.controlaccessField == null)) {
                    this.controlaccessField = new XTypedList<controlaccess>(this, LinqToXsdTypeManager.Instance, controlaccessXName);
                }
                return this.controlaccessField;
            }
            set {
                if ((value == null)) {
                    this.controlaccessField = null;
                }
                else {
                    if ((this.controlaccessField == null)) {
                        this.controlaccessField = XTypedList<controlaccess>.Initialize(this, LinqToXsdTypeManager.Instance, value, controlaccessXName);
                    }
                    else {
                        XTypedServices.SetList<controlaccess>(this.controlaccessField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<custodhist> custodhist {
            get {
                if ((this.custodhistField == null)) {
                    this.custodhistField = new XTypedList<custodhist>(this, LinqToXsdTypeManager.Instance, custodhistXName);
                }
                return this.custodhistField;
            }
            set {
                if ((value == null)) {
                    this.custodhistField = null;
                }
                else {
                    if ((this.custodhistField == null)) {
                        this.custodhistField = XTypedList<custodhist>.Initialize(this, LinqToXsdTypeManager.Instance, value, custodhistXName);
                    }
                    else {
                        XTypedServices.SetList<custodhist>(this.custodhistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<descgrp> descgrp {
            get {
                if ((this.descgrpField == null)) {
                    this.descgrpField = new XTypedList<descgrp>(this, LinqToXsdTypeManager.Instance, descgrpXName);
                }
                return this.descgrpField;
            }
            set {
                if ((value == null)) {
                    this.descgrpField = null;
                }
                else {
                    if ((this.descgrpField == null)) {
                        this.descgrpField = XTypedList<descgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, descgrpXName);
                    }
                    else {
                        XTypedServices.SetList<descgrp>(this.descgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<fileplan> fileplan {
            get {
                if ((this.fileplanField == null)) {
                    this.fileplanField = new XTypedList<fileplan>(this, LinqToXsdTypeManager.Instance, fileplanXName);
                }
                return this.fileplanField;
            }
            set {
                if ((value == null)) {
                    this.fileplanField = null;
                }
                else {
                    if ((this.fileplanField == null)) {
                        this.fileplanField = XTypedList<fileplan>.Initialize(this, LinqToXsdTypeManager.Instance, value, fileplanXName);
                    }
                    else {
                        XTypedServices.SetList<fileplan>(this.fileplanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<index> index {
            get {
                if ((this.indexField == null)) {
                    this.indexField = new XTypedList<index>(this, LinqToXsdTypeManager.Instance, indexXName);
                }
                return this.indexField;
            }
            set {
                if ((value == null)) {
                    this.indexField = null;
                }
                else {
                    if ((this.indexField == null)) {
                        this.indexField = XTypedList<index>.Initialize(this, LinqToXsdTypeManager.Instance, value, indexXName);
                    }
                    else {
                        XTypedServices.SetList<index>(this.indexField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<odd> odd {
            get {
                if ((this.oddField == null)) {
                    this.oddField = new XTypedList<odd>(this, LinqToXsdTypeManager.Instance, oddXName);
                }
                return this.oddField;
            }
            set {
                if ((value == null)) {
                    this.oddField = null;
                }
                else {
                    if ((this.oddField == null)) {
                        this.oddField = XTypedList<odd>.Initialize(this, LinqToXsdTypeManager.Instance, value, oddXName);
                    }
                    else {
                        XTypedServices.SetList<odd>(this.oddField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<originalsloc> originalsloc {
            get {
                if ((this.originalslocField == null)) {
                    this.originalslocField = new XTypedList<originalsloc>(this, LinqToXsdTypeManager.Instance, originalslocXName);
                }
                return this.originalslocField;
            }
            set {
                if ((value == null)) {
                    this.originalslocField = null;
                }
                else {
                    if ((this.originalslocField == null)) {
                        this.originalslocField = XTypedList<originalsloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, originalslocXName);
                    }
                    else {
                        XTypedServices.SetList<originalsloc>(this.originalslocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<otherfindaid> otherfindaid {
            get {
                if ((this.otherfindaidField == null)) {
                    this.otherfindaidField = new XTypedList<otherfindaid>(this, LinqToXsdTypeManager.Instance, otherfindaidXName);
                }
                return this.otherfindaidField;
            }
            set {
                if ((value == null)) {
                    this.otherfindaidField = null;
                }
                else {
                    if ((this.otherfindaidField == null)) {
                        this.otherfindaidField = XTypedList<otherfindaid>.Initialize(this, LinqToXsdTypeManager.Instance, value, otherfindaidXName);
                    }
                    else {
                        XTypedServices.SetList<otherfindaid>(this.otherfindaidField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<phystech> phystech {
            get {
                if ((this.phystechField == null)) {
                    this.phystechField = new XTypedList<phystech>(this, LinqToXsdTypeManager.Instance, phystechXName);
                }
                return this.phystechField;
            }
            set {
                if ((value == null)) {
                    this.phystechField = null;
                }
                else {
                    if ((this.phystechField == null)) {
                        this.phystechField = XTypedList<phystech>.Initialize(this, LinqToXsdTypeManager.Instance, value, phystechXName);
                    }
                    else {
                        XTypedServices.SetList<phystech>(this.phystechField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<prefercite> prefercite {
            get {
                if ((this.preferciteField == null)) {
                    this.preferciteField = new XTypedList<prefercite>(this, LinqToXsdTypeManager.Instance, preferciteXName);
                }
                return this.preferciteField;
            }
            set {
                if ((value == null)) {
                    this.preferciteField = null;
                }
                else {
                    if ((this.preferciteField == null)) {
                        this.preferciteField = XTypedList<prefercite>.Initialize(this, LinqToXsdTypeManager.Instance, value, preferciteXName);
                    }
                    else {
                        XTypedServices.SetList<prefercite>(this.preferciteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<processinfo> processinfo {
            get {
                if ((this.processinfoField == null)) {
                    this.processinfoField = new XTypedList<processinfo>(this, LinqToXsdTypeManager.Instance, processinfoXName);
                }
                return this.processinfoField;
            }
            set {
                if ((value == null)) {
                    this.processinfoField = null;
                }
                else {
                    if ((this.processinfoField == null)) {
                        this.processinfoField = XTypedList<processinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, processinfoXName);
                    }
                    else {
                        XTypedServices.SetList<processinfo>(this.processinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<relatedmaterial> relatedmaterial {
            get {
                if ((this.relatedmaterialField == null)) {
                    this.relatedmaterialField = new XTypedList<relatedmaterial>(this, LinqToXsdTypeManager.Instance, relatedmaterialXName);
                }
                return this.relatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.relatedmaterialField = null;
                }
                else {
                    if ((this.relatedmaterialField == null)) {
                        this.relatedmaterialField = XTypedList<relatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, relatedmaterialXName);
                    }
                    else {
                        XTypedServices.SetList<relatedmaterial>(this.relatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<scopecontent> scopecontent {
            get {
                if ((this.scopecontentField == null)) {
                    this.scopecontentField = new XTypedList<scopecontent>(this, LinqToXsdTypeManager.Instance, scopecontentXName);
                }
                return this.scopecontentField;
            }
            set {
                if ((value == null)) {
                    this.scopecontentField = null;
                }
                else {
                    if ((this.scopecontentField == null)) {
                        this.scopecontentField = XTypedList<scopecontent>.Initialize(this, LinqToXsdTypeManager.Instance, value, scopecontentXName);
                    }
                    else {
                        XTypedServices.SetList<scopecontent>(this.scopecontentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<separatedmaterial> separatedmaterial {
            get {
                if ((this.separatedmaterialField == null)) {
                    this.separatedmaterialField = new XTypedList<separatedmaterial>(this, LinqToXsdTypeManager.Instance, separatedmaterialXName);
                }
                return this.separatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.separatedmaterialField = null;
                }
                else {
                    if ((this.separatedmaterialField == null)) {
                        this.separatedmaterialField = XTypedList<separatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, separatedmaterialXName);
                    }
                    else {
                        XTypedServices.SetList<separatedmaterial>(this.separatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<userestrict> userestrict {
            get {
                if ((this.userestrictField == null)) {
                    this.userestrictField = new XTypedList<userestrict>(this, LinqToXsdTypeManager.Instance, userestrictXName);
                }
                return this.userestrictField;
            }
            set {
                if ((value == null)) {
                    this.userestrictField = null;
                }
                else {
                    if ((this.userestrictField == null)) {
                        this.userestrictField = XTypedList<userestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, userestrictXName);
                    }
                    else {
                        XTypedServices.SetList<userestrict>(this.userestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<dsc> dsc {
            get {
                if ((this.dscField == null)) {
                    this.dscField = new XTypedList<dsc>(this, LinqToXsdTypeManager.Instance, dscXName);
                }
                return this.dscField;
            }
            set {
                if ((value == null)) {
                    this.dscField = null;
                }
                else {
                    if ((this.dscField == null)) {
                        this.dscField = XTypedList<dsc>.Initialize(this, LinqToXsdTypeManager.Instance, value, dscXName);
                    }
                    else {
                        XTypedServices.SetList<dsc>(this.dscField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<dao> dao {
            get {
                if ((this.daoField == null)) {
                    this.daoField = new XTypedList<dao>(this, LinqToXsdTypeManager.Instance, daoXName);
                }
                return this.daoField;
            }
            set {
                if ((value == null)) {
                    this.daoField = null;
                }
                else {
                    if ((this.daoField == null)) {
                        this.daoField = XTypedList<dao>.Initialize(this, LinqToXsdTypeManager.Instance, value, daoXName);
                    }
                    else {
                        XTypedServices.SetList<dao>(this.daoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<daogrp> daogrp {
            get {
                if ((this.daogrpField == null)) {
                    this.daogrpField = new XTypedList<daogrp>(this, LinqToXsdTypeManager.Instance, daogrpXName);
                }
                return this.daogrpField;
            }
            set {
                if ((value == null)) {
                    this.daogrpField = null;
                }
                else {
                    if ((this.daogrpField == null)) {
                        this.daogrpField = XTypedList<daogrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, daogrpXName);
                    }
                    else {
                        XTypedServices.SetList<daogrp>(this.daogrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<thead> thead {
            get {
                if ((this.theadField == null)) {
                    this.theadField = new XTypedList<thead>(this, LinqToXsdTypeManager.Instance, theadXName);
                }
                return this.theadField;
            }
            set {
                if ((value == null)) {
                    this.theadField = null;
                }
                else {
                    if ((this.theadField == null)) {
                        this.theadField = XTypedList<thead>.Initialize(this, LinqToXsdTypeManager.Instance, value, theadXName);
                    }
                    else {
                        XTypedServices.SetList<thead>(this.theadField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c05+)*)
        /// </para>
        /// </summary>
        public virtual IList<c05> c05 {
            get {
                if ((this.c05Field == null)) {
                    this.c05Field = new XTypedList<c05>(this, LinqToXsdTypeManager.Instance, c05XName);
                }
                return this.c05Field;
            }
            set {
                if ((value == null)) {
                    this.c05Field = null;
                }
                else {
                    if ((this.c05Field == null)) {
                        this.c05Field = XTypedList<c05>.Initialize(this, LinqToXsdTypeManager.Instance, value, c05XName);
                    }
                    else {
                        XTypedServices.SetList<c05>(this.c05Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string level {
            get {
                XAttribute x = this.Attribute(levelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(levelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string otherlevel {
            get {
                XAttribute x = this.Attribute(otherlevelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(otherlevelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string tpattern {
            get {
                XAttribute x = this.Attribute(tpatternXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(tpatternXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<c04>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(didXName, typeof(did));
            localElementDictionary.Add(accessrestrictXName, typeof(accessrestrict));
            localElementDictionary.Add(accrualsXName, typeof(accruals));
            localElementDictionary.Add(acqinfoXName, typeof(acqinfo));
            localElementDictionary.Add(altformavailXName, typeof(altformavail));
            localElementDictionary.Add(appraisalXName, typeof(appraisal));
            localElementDictionary.Add(arrangementXName, typeof(arrangement));
            localElementDictionary.Add(bibliographyXName, typeof(bibliography));
            localElementDictionary.Add(bioghistXName, typeof(bioghist));
            localElementDictionary.Add(controlaccessXName, typeof(controlaccess));
            localElementDictionary.Add(custodhistXName, typeof(custodhist));
            localElementDictionary.Add(descgrpXName, typeof(descgrp));
            localElementDictionary.Add(fileplanXName, typeof(fileplan));
            localElementDictionary.Add(indexXName, typeof(index));
            localElementDictionary.Add(oddXName, typeof(odd));
            localElementDictionary.Add(originalslocXName, typeof(originalsloc));
            localElementDictionary.Add(otherfindaidXName, typeof(otherfindaid));
            localElementDictionary.Add(phystechXName, typeof(phystech));
            localElementDictionary.Add(preferciteXName, typeof(prefercite));
            localElementDictionary.Add(processinfoXName, typeof(processinfo));
            localElementDictionary.Add(relatedmaterialXName, typeof(relatedmaterial));
            localElementDictionary.Add(scopecontentXName, typeof(scopecontent));
            localElementDictionary.Add(separatedmaterialXName, typeof(separatedmaterial));
            localElementDictionary.Add(userestrictXName, typeof(userestrict));
            localElementDictionary.Add(dscXName, typeof(dsc));
            localElementDictionary.Add(daoXName, typeof(dao));
            localElementDictionary.Add(daogrpXName, typeof(daogrp));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(theadXName, typeof(thead));
            localElementDictionary.Add(c05XName, typeof(c05));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
    /// </para>
    /// </summary>
    public partial class c05 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName didXName = System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName accessrestrictXName = System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accessrestrict> accessrestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName accrualsXName = System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accruals> accrualsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName acqinfoXName = System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<acqinfo> acqinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altformavailXName = System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<altformavail> altformavailField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName appraisalXName = System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<appraisal> appraisalField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arrangementXName = System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<arrangement> arrangementField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibliographyXName = System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibliography> bibliographyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bioghistXName = System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bioghist> bioghistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName controlaccessXName = System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<controlaccess> controlaccessField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName custodhistXName = System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<custodhist> custodhistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descgrpXName = System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<descgrp> descgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName fileplanXName = System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<fileplan> fileplanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName indexXName = System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<index> indexField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName oddXName = System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<odd> oddField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName originalslocXName = System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<originalsloc> originalslocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName otherfindaidXName = System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<otherfindaid> otherfindaidField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phystechXName = System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phystech> phystechField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName preferciteXName = System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<prefercite> preferciteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName processinfoXName = System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<processinfo> processinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName relatedmaterialXName = System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<relatedmaterial> relatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName scopecontentXName = System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<scopecontent> scopecontentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName separatedmaterialXName = System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<separatedmaterial> separatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userestrictXName = System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<userestrict> userestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dscXName = System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dsc> dscField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName daoXName = System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dao> daoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName daogrpXName = System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<daogrp> daogrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName theadXName = System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<thead> theadField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName c06XName = System.Xml.Linq.XName.Get("c06", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<c06> c06Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName levelXName = System.Xml.Linq.XName.Get("level", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName otherlevelXName = System.Xml.Linq.XName.Get("otherlevel", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tpatternXName = System.Xml.Linq.XName.Get("tpattern", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("c05", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator c05(XElement xe) { return XTypedServices.ToXTypedElement<c05>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static c05() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new NamedContentModelEntity(didXName), new ChoiceContentModelEntity(new NamedContentModelEntity(accessrestrictXName), new NamedContentModelEntity(accrualsXName), new NamedContentModelEntity(acqinfoXName), new NamedContentModelEntity(altformavailXName), new NamedContentModelEntity(appraisalXName), new NamedContentModelEntity(arrangementXName), new NamedContentModelEntity(bibliographyXName), new NamedContentModelEntity(bioghistXName), new NamedContentModelEntity(controlaccessXName), new NamedContentModelEntity(custodhistXName), new NamedContentModelEntity(descgrpXName), new NamedContentModelEntity(fileplanXName), new NamedContentModelEntity(indexXName), new NamedContentModelEntity(oddXName), new NamedContentModelEntity(originalslocXName), new NamedContentModelEntity(otherfindaidXName), new NamedContentModelEntity(phystechXName), new NamedContentModelEntity(preferciteXName), new NamedContentModelEntity(processinfoXName), new NamedContentModelEntity(relatedmaterialXName), new NamedContentModelEntity(scopecontentXName), new NamedContentModelEntity(separatedmaterialXName), new NamedContentModelEntity(userestrictXName), new NamedContentModelEntity(dscXName), new NamedContentModelEntity(daoXName), new NamedContentModelEntity(daogrpXName), new NamedContentModelEntity(noteXName)), new SequenceContentModelEntity(new NamedContentModelEntity(theadXName), new NamedContentModelEntity(c06XName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public c05() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual did did {
            get {
                XElement x = this.GetElement(didXName);
                return ((did)(x));
            }
            set {
                this.SetElement(didXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<accessrestrict> accessrestrict {
            get {
                if ((this.accessrestrictField == null)) {
                    this.accessrestrictField = new XTypedList<accessrestrict>(this, LinqToXsdTypeManager.Instance, accessrestrictXName);
                }
                return this.accessrestrictField;
            }
            set {
                if ((value == null)) {
                    this.accessrestrictField = null;
                }
                else {
                    if ((this.accessrestrictField == null)) {
                        this.accessrestrictField = XTypedList<accessrestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, accessrestrictXName);
                    }
                    else {
                        XTypedServices.SetList<accessrestrict>(this.accessrestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<accruals> accruals {
            get {
                if ((this.accrualsField == null)) {
                    this.accrualsField = new XTypedList<accruals>(this, LinqToXsdTypeManager.Instance, accrualsXName);
                }
                return this.accrualsField;
            }
            set {
                if ((value == null)) {
                    this.accrualsField = null;
                }
                else {
                    if ((this.accrualsField == null)) {
                        this.accrualsField = XTypedList<accruals>.Initialize(this, LinqToXsdTypeManager.Instance, value, accrualsXName);
                    }
                    else {
                        XTypedServices.SetList<accruals>(this.accrualsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<acqinfo> acqinfo {
            get {
                if ((this.acqinfoField == null)) {
                    this.acqinfoField = new XTypedList<acqinfo>(this, LinqToXsdTypeManager.Instance, acqinfoXName);
                }
                return this.acqinfoField;
            }
            set {
                if ((value == null)) {
                    this.acqinfoField = null;
                }
                else {
                    if ((this.acqinfoField == null)) {
                        this.acqinfoField = XTypedList<acqinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, acqinfoXName);
                    }
                    else {
                        XTypedServices.SetList<acqinfo>(this.acqinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<altformavail> altformavail {
            get {
                if ((this.altformavailField == null)) {
                    this.altformavailField = new XTypedList<altformavail>(this, LinqToXsdTypeManager.Instance, altformavailXName);
                }
                return this.altformavailField;
            }
            set {
                if ((value == null)) {
                    this.altformavailField = null;
                }
                else {
                    if ((this.altformavailField == null)) {
                        this.altformavailField = XTypedList<altformavail>.Initialize(this, LinqToXsdTypeManager.Instance, value, altformavailXName);
                    }
                    else {
                        XTypedServices.SetList<altformavail>(this.altformavailField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<appraisal> appraisal {
            get {
                if ((this.appraisalField == null)) {
                    this.appraisalField = new XTypedList<appraisal>(this, LinqToXsdTypeManager.Instance, appraisalXName);
                }
                return this.appraisalField;
            }
            set {
                if ((value == null)) {
                    this.appraisalField = null;
                }
                else {
                    if ((this.appraisalField == null)) {
                        this.appraisalField = XTypedList<appraisal>.Initialize(this, LinqToXsdTypeManager.Instance, value, appraisalXName);
                    }
                    else {
                        XTypedServices.SetList<appraisal>(this.appraisalField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<arrangement> arrangement {
            get {
                if ((this.arrangementField == null)) {
                    this.arrangementField = new XTypedList<arrangement>(this, LinqToXsdTypeManager.Instance, arrangementXName);
                }
                return this.arrangementField;
            }
            set {
                if ((value == null)) {
                    this.arrangementField = null;
                }
                else {
                    if ((this.arrangementField == null)) {
                        this.arrangementField = XTypedList<arrangement>.Initialize(this, LinqToXsdTypeManager.Instance, value, arrangementXName);
                    }
                    else {
                        XTypedServices.SetList<arrangement>(this.arrangementField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<bibliography> bibliography {
            get {
                if ((this.bibliographyField == null)) {
                    this.bibliographyField = new XTypedList<bibliography>(this, LinqToXsdTypeManager.Instance, bibliographyXName);
                }
                return this.bibliographyField;
            }
            set {
                if ((value == null)) {
                    this.bibliographyField = null;
                }
                else {
                    if ((this.bibliographyField == null)) {
                        this.bibliographyField = XTypedList<bibliography>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibliographyXName);
                    }
                    else {
                        XTypedServices.SetList<bibliography>(this.bibliographyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<bioghist> bioghist {
            get {
                if ((this.bioghistField == null)) {
                    this.bioghistField = new XTypedList<bioghist>(this, LinqToXsdTypeManager.Instance, bioghistXName);
                }
                return this.bioghistField;
            }
            set {
                if ((value == null)) {
                    this.bioghistField = null;
                }
                else {
                    if ((this.bioghistField == null)) {
                        this.bioghistField = XTypedList<bioghist>.Initialize(this, LinqToXsdTypeManager.Instance, value, bioghistXName);
                    }
                    else {
                        XTypedServices.SetList<bioghist>(this.bioghistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<controlaccess> controlaccess {
            get {
                if ((this.controlaccessField == null)) {
                    this.controlaccessField = new XTypedList<controlaccess>(this, LinqToXsdTypeManager.Instance, controlaccessXName);
                }
                return this.controlaccessField;
            }
            set {
                if ((value == null)) {
                    this.controlaccessField = null;
                }
                else {
                    if ((this.controlaccessField == null)) {
                        this.controlaccessField = XTypedList<controlaccess>.Initialize(this, LinqToXsdTypeManager.Instance, value, controlaccessXName);
                    }
                    else {
                        XTypedServices.SetList<controlaccess>(this.controlaccessField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<custodhist> custodhist {
            get {
                if ((this.custodhistField == null)) {
                    this.custodhistField = new XTypedList<custodhist>(this, LinqToXsdTypeManager.Instance, custodhistXName);
                }
                return this.custodhistField;
            }
            set {
                if ((value == null)) {
                    this.custodhistField = null;
                }
                else {
                    if ((this.custodhistField == null)) {
                        this.custodhistField = XTypedList<custodhist>.Initialize(this, LinqToXsdTypeManager.Instance, value, custodhistXName);
                    }
                    else {
                        XTypedServices.SetList<custodhist>(this.custodhistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<descgrp> descgrp {
            get {
                if ((this.descgrpField == null)) {
                    this.descgrpField = new XTypedList<descgrp>(this, LinqToXsdTypeManager.Instance, descgrpXName);
                }
                return this.descgrpField;
            }
            set {
                if ((value == null)) {
                    this.descgrpField = null;
                }
                else {
                    if ((this.descgrpField == null)) {
                        this.descgrpField = XTypedList<descgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, descgrpXName);
                    }
                    else {
                        XTypedServices.SetList<descgrp>(this.descgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<fileplan> fileplan {
            get {
                if ((this.fileplanField == null)) {
                    this.fileplanField = new XTypedList<fileplan>(this, LinqToXsdTypeManager.Instance, fileplanXName);
                }
                return this.fileplanField;
            }
            set {
                if ((value == null)) {
                    this.fileplanField = null;
                }
                else {
                    if ((this.fileplanField == null)) {
                        this.fileplanField = XTypedList<fileplan>.Initialize(this, LinqToXsdTypeManager.Instance, value, fileplanXName);
                    }
                    else {
                        XTypedServices.SetList<fileplan>(this.fileplanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<index> index {
            get {
                if ((this.indexField == null)) {
                    this.indexField = new XTypedList<index>(this, LinqToXsdTypeManager.Instance, indexXName);
                }
                return this.indexField;
            }
            set {
                if ((value == null)) {
                    this.indexField = null;
                }
                else {
                    if ((this.indexField == null)) {
                        this.indexField = XTypedList<index>.Initialize(this, LinqToXsdTypeManager.Instance, value, indexXName);
                    }
                    else {
                        XTypedServices.SetList<index>(this.indexField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<odd> odd {
            get {
                if ((this.oddField == null)) {
                    this.oddField = new XTypedList<odd>(this, LinqToXsdTypeManager.Instance, oddXName);
                }
                return this.oddField;
            }
            set {
                if ((value == null)) {
                    this.oddField = null;
                }
                else {
                    if ((this.oddField == null)) {
                        this.oddField = XTypedList<odd>.Initialize(this, LinqToXsdTypeManager.Instance, value, oddXName);
                    }
                    else {
                        XTypedServices.SetList<odd>(this.oddField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<originalsloc> originalsloc {
            get {
                if ((this.originalslocField == null)) {
                    this.originalslocField = new XTypedList<originalsloc>(this, LinqToXsdTypeManager.Instance, originalslocXName);
                }
                return this.originalslocField;
            }
            set {
                if ((value == null)) {
                    this.originalslocField = null;
                }
                else {
                    if ((this.originalslocField == null)) {
                        this.originalslocField = XTypedList<originalsloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, originalslocXName);
                    }
                    else {
                        XTypedServices.SetList<originalsloc>(this.originalslocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<otherfindaid> otherfindaid {
            get {
                if ((this.otherfindaidField == null)) {
                    this.otherfindaidField = new XTypedList<otherfindaid>(this, LinqToXsdTypeManager.Instance, otherfindaidXName);
                }
                return this.otherfindaidField;
            }
            set {
                if ((value == null)) {
                    this.otherfindaidField = null;
                }
                else {
                    if ((this.otherfindaidField == null)) {
                        this.otherfindaidField = XTypedList<otherfindaid>.Initialize(this, LinqToXsdTypeManager.Instance, value, otherfindaidXName);
                    }
                    else {
                        XTypedServices.SetList<otherfindaid>(this.otherfindaidField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<phystech> phystech {
            get {
                if ((this.phystechField == null)) {
                    this.phystechField = new XTypedList<phystech>(this, LinqToXsdTypeManager.Instance, phystechXName);
                }
                return this.phystechField;
            }
            set {
                if ((value == null)) {
                    this.phystechField = null;
                }
                else {
                    if ((this.phystechField == null)) {
                        this.phystechField = XTypedList<phystech>.Initialize(this, LinqToXsdTypeManager.Instance, value, phystechXName);
                    }
                    else {
                        XTypedServices.SetList<phystech>(this.phystechField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<prefercite> prefercite {
            get {
                if ((this.preferciteField == null)) {
                    this.preferciteField = new XTypedList<prefercite>(this, LinqToXsdTypeManager.Instance, preferciteXName);
                }
                return this.preferciteField;
            }
            set {
                if ((value == null)) {
                    this.preferciteField = null;
                }
                else {
                    if ((this.preferciteField == null)) {
                        this.preferciteField = XTypedList<prefercite>.Initialize(this, LinqToXsdTypeManager.Instance, value, preferciteXName);
                    }
                    else {
                        XTypedServices.SetList<prefercite>(this.preferciteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<processinfo> processinfo {
            get {
                if ((this.processinfoField == null)) {
                    this.processinfoField = new XTypedList<processinfo>(this, LinqToXsdTypeManager.Instance, processinfoXName);
                }
                return this.processinfoField;
            }
            set {
                if ((value == null)) {
                    this.processinfoField = null;
                }
                else {
                    if ((this.processinfoField == null)) {
                        this.processinfoField = XTypedList<processinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, processinfoXName);
                    }
                    else {
                        XTypedServices.SetList<processinfo>(this.processinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<relatedmaterial> relatedmaterial {
            get {
                if ((this.relatedmaterialField == null)) {
                    this.relatedmaterialField = new XTypedList<relatedmaterial>(this, LinqToXsdTypeManager.Instance, relatedmaterialXName);
                }
                return this.relatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.relatedmaterialField = null;
                }
                else {
                    if ((this.relatedmaterialField == null)) {
                        this.relatedmaterialField = XTypedList<relatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, relatedmaterialXName);
                    }
                    else {
                        XTypedServices.SetList<relatedmaterial>(this.relatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<scopecontent> scopecontent {
            get {
                if ((this.scopecontentField == null)) {
                    this.scopecontentField = new XTypedList<scopecontent>(this, LinqToXsdTypeManager.Instance, scopecontentXName);
                }
                return this.scopecontentField;
            }
            set {
                if ((value == null)) {
                    this.scopecontentField = null;
                }
                else {
                    if ((this.scopecontentField == null)) {
                        this.scopecontentField = XTypedList<scopecontent>.Initialize(this, LinqToXsdTypeManager.Instance, value, scopecontentXName);
                    }
                    else {
                        XTypedServices.SetList<scopecontent>(this.scopecontentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<separatedmaterial> separatedmaterial {
            get {
                if ((this.separatedmaterialField == null)) {
                    this.separatedmaterialField = new XTypedList<separatedmaterial>(this, LinqToXsdTypeManager.Instance, separatedmaterialXName);
                }
                return this.separatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.separatedmaterialField = null;
                }
                else {
                    if ((this.separatedmaterialField == null)) {
                        this.separatedmaterialField = XTypedList<separatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, separatedmaterialXName);
                    }
                    else {
                        XTypedServices.SetList<separatedmaterial>(this.separatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<userestrict> userestrict {
            get {
                if ((this.userestrictField == null)) {
                    this.userestrictField = new XTypedList<userestrict>(this, LinqToXsdTypeManager.Instance, userestrictXName);
                }
                return this.userestrictField;
            }
            set {
                if ((value == null)) {
                    this.userestrictField = null;
                }
                else {
                    if ((this.userestrictField == null)) {
                        this.userestrictField = XTypedList<userestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, userestrictXName);
                    }
                    else {
                        XTypedServices.SetList<userestrict>(this.userestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<dsc> dsc {
            get {
                if ((this.dscField == null)) {
                    this.dscField = new XTypedList<dsc>(this, LinqToXsdTypeManager.Instance, dscXName);
                }
                return this.dscField;
            }
            set {
                if ((value == null)) {
                    this.dscField = null;
                }
                else {
                    if ((this.dscField == null)) {
                        this.dscField = XTypedList<dsc>.Initialize(this, LinqToXsdTypeManager.Instance, value, dscXName);
                    }
                    else {
                        XTypedServices.SetList<dsc>(this.dscField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<dao> dao {
            get {
                if ((this.daoField == null)) {
                    this.daoField = new XTypedList<dao>(this, LinqToXsdTypeManager.Instance, daoXName);
                }
                return this.daoField;
            }
            set {
                if ((value == null)) {
                    this.daoField = null;
                }
                else {
                    if ((this.daoField == null)) {
                        this.daoField = XTypedList<dao>.Initialize(this, LinqToXsdTypeManager.Instance, value, daoXName);
                    }
                    else {
                        XTypedServices.SetList<dao>(this.daoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<daogrp> daogrp {
            get {
                if ((this.daogrpField == null)) {
                    this.daogrpField = new XTypedList<daogrp>(this, LinqToXsdTypeManager.Instance, daogrpXName);
                }
                return this.daogrpField;
            }
            set {
                if ((value == null)) {
                    this.daogrpField = null;
                }
                else {
                    if ((this.daogrpField == null)) {
                        this.daogrpField = XTypedList<daogrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, daogrpXName);
                    }
                    else {
                        XTypedServices.SetList<daogrp>(this.daogrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<thead> thead {
            get {
                if ((this.theadField == null)) {
                    this.theadField = new XTypedList<thead>(this, LinqToXsdTypeManager.Instance, theadXName);
                }
                return this.theadField;
            }
            set {
                if ((value == null)) {
                    this.theadField = null;
                }
                else {
                    if ((this.theadField == null)) {
                        this.theadField = XTypedList<thead>.Initialize(this, LinqToXsdTypeManager.Instance, value, theadXName);
                    }
                    else {
                        XTypedServices.SetList<thead>(this.theadField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c06+)*)
        /// </para>
        /// </summary>
        public virtual IList<c06> c06 {
            get {
                if ((this.c06Field == null)) {
                    this.c06Field = new XTypedList<c06>(this, LinqToXsdTypeManager.Instance, c06XName);
                }
                return this.c06Field;
            }
            set {
                if ((value == null)) {
                    this.c06Field = null;
                }
                else {
                    if ((this.c06Field == null)) {
                        this.c06Field = XTypedList<c06>.Initialize(this, LinqToXsdTypeManager.Instance, value, c06XName);
                    }
                    else {
                        XTypedServices.SetList<c06>(this.c06Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string level {
            get {
                XAttribute x = this.Attribute(levelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(levelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string otherlevel {
            get {
                XAttribute x = this.Attribute(otherlevelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(otherlevelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string tpattern {
            get {
                XAttribute x = this.Attribute(tpatternXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(tpatternXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<c05>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(didXName, typeof(did));
            localElementDictionary.Add(accessrestrictXName, typeof(accessrestrict));
            localElementDictionary.Add(accrualsXName, typeof(accruals));
            localElementDictionary.Add(acqinfoXName, typeof(acqinfo));
            localElementDictionary.Add(altformavailXName, typeof(altformavail));
            localElementDictionary.Add(appraisalXName, typeof(appraisal));
            localElementDictionary.Add(arrangementXName, typeof(arrangement));
            localElementDictionary.Add(bibliographyXName, typeof(bibliography));
            localElementDictionary.Add(bioghistXName, typeof(bioghist));
            localElementDictionary.Add(controlaccessXName, typeof(controlaccess));
            localElementDictionary.Add(custodhistXName, typeof(custodhist));
            localElementDictionary.Add(descgrpXName, typeof(descgrp));
            localElementDictionary.Add(fileplanXName, typeof(fileplan));
            localElementDictionary.Add(indexXName, typeof(index));
            localElementDictionary.Add(oddXName, typeof(odd));
            localElementDictionary.Add(originalslocXName, typeof(originalsloc));
            localElementDictionary.Add(otherfindaidXName, typeof(otherfindaid));
            localElementDictionary.Add(phystechXName, typeof(phystech));
            localElementDictionary.Add(preferciteXName, typeof(prefercite));
            localElementDictionary.Add(processinfoXName, typeof(processinfo));
            localElementDictionary.Add(relatedmaterialXName, typeof(relatedmaterial));
            localElementDictionary.Add(scopecontentXName, typeof(scopecontent));
            localElementDictionary.Add(separatedmaterialXName, typeof(separatedmaterial));
            localElementDictionary.Add(userestrictXName, typeof(userestrict));
            localElementDictionary.Add(dscXName, typeof(dsc));
            localElementDictionary.Add(daoXName, typeof(dao));
            localElementDictionary.Add(daogrpXName, typeof(daogrp));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(theadXName, typeof(thead));
            localElementDictionary.Add(c06XName, typeof(c06));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
    /// </para>
    /// </summary>
    public partial class c06 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName didXName = System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName accessrestrictXName = System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accessrestrict> accessrestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName accrualsXName = System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accruals> accrualsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName acqinfoXName = System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<acqinfo> acqinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altformavailXName = System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<altformavail> altformavailField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName appraisalXName = System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<appraisal> appraisalField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arrangementXName = System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<arrangement> arrangementField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibliographyXName = System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibliography> bibliographyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bioghistXName = System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bioghist> bioghistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName controlaccessXName = System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<controlaccess> controlaccessField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName custodhistXName = System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<custodhist> custodhistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descgrpXName = System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<descgrp> descgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName fileplanXName = System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<fileplan> fileplanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName indexXName = System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<index> indexField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName oddXName = System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<odd> oddField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName originalslocXName = System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<originalsloc> originalslocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName otherfindaidXName = System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<otherfindaid> otherfindaidField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phystechXName = System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phystech> phystechField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName preferciteXName = System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<prefercite> preferciteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName processinfoXName = System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<processinfo> processinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName relatedmaterialXName = System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<relatedmaterial> relatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName scopecontentXName = System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<scopecontent> scopecontentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName separatedmaterialXName = System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<separatedmaterial> separatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userestrictXName = System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<userestrict> userestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dscXName = System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dsc> dscField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName daoXName = System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dao> daoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName daogrpXName = System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<daogrp> daogrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName theadXName = System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<thead> theadField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName c07XName = System.Xml.Linq.XName.Get("c07", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<c07> c07Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName levelXName = System.Xml.Linq.XName.Get("level", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName otherlevelXName = System.Xml.Linq.XName.Get("otherlevel", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tpatternXName = System.Xml.Linq.XName.Get("tpattern", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("c06", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator c06(XElement xe) { return XTypedServices.ToXTypedElement<c06>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static c06() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new NamedContentModelEntity(didXName), new ChoiceContentModelEntity(new NamedContentModelEntity(accessrestrictXName), new NamedContentModelEntity(accrualsXName), new NamedContentModelEntity(acqinfoXName), new NamedContentModelEntity(altformavailXName), new NamedContentModelEntity(appraisalXName), new NamedContentModelEntity(arrangementXName), new NamedContentModelEntity(bibliographyXName), new NamedContentModelEntity(bioghistXName), new NamedContentModelEntity(controlaccessXName), new NamedContentModelEntity(custodhistXName), new NamedContentModelEntity(descgrpXName), new NamedContentModelEntity(fileplanXName), new NamedContentModelEntity(indexXName), new NamedContentModelEntity(oddXName), new NamedContentModelEntity(originalslocXName), new NamedContentModelEntity(otherfindaidXName), new NamedContentModelEntity(phystechXName), new NamedContentModelEntity(preferciteXName), new NamedContentModelEntity(processinfoXName), new NamedContentModelEntity(relatedmaterialXName), new NamedContentModelEntity(scopecontentXName), new NamedContentModelEntity(separatedmaterialXName), new NamedContentModelEntity(userestrictXName), new NamedContentModelEntity(dscXName), new NamedContentModelEntity(daoXName), new NamedContentModelEntity(daogrpXName), new NamedContentModelEntity(noteXName)), new SequenceContentModelEntity(new NamedContentModelEntity(theadXName), new NamedContentModelEntity(c07XName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public c06() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual did did {
            get {
                XElement x = this.GetElement(didXName);
                return ((did)(x));
            }
            set {
                this.SetElement(didXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<accessrestrict> accessrestrict {
            get {
                if ((this.accessrestrictField == null)) {
                    this.accessrestrictField = new XTypedList<accessrestrict>(this, LinqToXsdTypeManager.Instance, accessrestrictXName);
                }
                return this.accessrestrictField;
            }
            set {
                if ((value == null)) {
                    this.accessrestrictField = null;
                }
                else {
                    if ((this.accessrestrictField == null)) {
                        this.accessrestrictField = XTypedList<accessrestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, accessrestrictXName);
                    }
                    else {
                        XTypedServices.SetList<accessrestrict>(this.accessrestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<accruals> accruals {
            get {
                if ((this.accrualsField == null)) {
                    this.accrualsField = new XTypedList<accruals>(this, LinqToXsdTypeManager.Instance, accrualsXName);
                }
                return this.accrualsField;
            }
            set {
                if ((value == null)) {
                    this.accrualsField = null;
                }
                else {
                    if ((this.accrualsField == null)) {
                        this.accrualsField = XTypedList<accruals>.Initialize(this, LinqToXsdTypeManager.Instance, value, accrualsXName);
                    }
                    else {
                        XTypedServices.SetList<accruals>(this.accrualsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<acqinfo> acqinfo {
            get {
                if ((this.acqinfoField == null)) {
                    this.acqinfoField = new XTypedList<acqinfo>(this, LinqToXsdTypeManager.Instance, acqinfoXName);
                }
                return this.acqinfoField;
            }
            set {
                if ((value == null)) {
                    this.acqinfoField = null;
                }
                else {
                    if ((this.acqinfoField == null)) {
                        this.acqinfoField = XTypedList<acqinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, acqinfoXName);
                    }
                    else {
                        XTypedServices.SetList<acqinfo>(this.acqinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<altformavail> altformavail {
            get {
                if ((this.altformavailField == null)) {
                    this.altformavailField = new XTypedList<altformavail>(this, LinqToXsdTypeManager.Instance, altformavailXName);
                }
                return this.altformavailField;
            }
            set {
                if ((value == null)) {
                    this.altformavailField = null;
                }
                else {
                    if ((this.altformavailField == null)) {
                        this.altformavailField = XTypedList<altformavail>.Initialize(this, LinqToXsdTypeManager.Instance, value, altformavailXName);
                    }
                    else {
                        XTypedServices.SetList<altformavail>(this.altformavailField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<appraisal> appraisal {
            get {
                if ((this.appraisalField == null)) {
                    this.appraisalField = new XTypedList<appraisal>(this, LinqToXsdTypeManager.Instance, appraisalXName);
                }
                return this.appraisalField;
            }
            set {
                if ((value == null)) {
                    this.appraisalField = null;
                }
                else {
                    if ((this.appraisalField == null)) {
                        this.appraisalField = XTypedList<appraisal>.Initialize(this, LinqToXsdTypeManager.Instance, value, appraisalXName);
                    }
                    else {
                        XTypedServices.SetList<appraisal>(this.appraisalField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<arrangement> arrangement {
            get {
                if ((this.arrangementField == null)) {
                    this.arrangementField = new XTypedList<arrangement>(this, LinqToXsdTypeManager.Instance, arrangementXName);
                }
                return this.arrangementField;
            }
            set {
                if ((value == null)) {
                    this.arrangementField = null;
                }
                else {
                    if ((this.arrangementField == null)) {
                        this.arrangementField = XTypedList<arrangement>.Initialize(this, LinqToXsdTypeManager.Instance, value, arrangementXName);
                    }
                    else {
                        XTypedServices.SetList<arrangement>(this.arrangementField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<bibliography> bibliography {
            get {
                if ((this.bibliographyField == null)) {
                    this.bibliographyField = new XTypedList<bibliography>(this, LinqToXsdTypeManager.Instance, bibliographyXName);
                }
                return this.bibliographyField;
            }
            set {
                if ((value == null)) {
                    this.bibliographyField = null;
                }
                else {
                    if ((this.bibliographyField == null)) {
                        this.bibliographyField = XTypedList<bibliography>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibliographyXName);
                    }
                    else {
                        XTypedServices.SetList<bibliography>(this.bibliographyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<bioghist> bioghist {
            get {
                if ((this.bioghistField == null)) {
                    this.bioghistField = new XTypedList<bioghist>(this, LinqToXsdTypeManager.Instance, bioghistXName);
                }
                return this.bioghistField;
            }
            set {
                if ((value == null)) {
                    this.bioghistField = null;
                }
                else {
                    if ((this.bioghistField == null)) {
                        this.bioghistField = XTypedList<bioghist>.Initialize(this, LinqToXsdTypeManager.Instance, value, bioghistXName);
                    }
                    else {
                        XTypedServices.SetList<bioghist>(this.bioghistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<controlaccess> controlaccess {
            get {
                if ((this.controlaccessField == null)) {
                    this.controlaccessField = new XTypedList<controlaccess>(this, LinqToXsdTypeManager.Instance, controlaccessXName);
                }
                return this.controlaccessField;
            }
            set {
                if ((value == null)) {
                    this.controlaccessField = null;
                }
                else {
                    if ((this.controlaccessField == null)) {
                        this.controlaccessField = XTypedList<controlaccess>.Initialize(this, LinqToXsdTypeManager.Instance, value, controlaccessXName);
                    }
                    else {
                        XTypedServices.SetList<controlaccess>(this.controlaccessField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<custodhist> custodhist {
            get {
                if ((this.custodhistField == null)) {
                    this.custodhistField = new XTypedList<custodhist>(this, LinqToXsdTypeManager.Instance, custodhistXName);
                }
                return this.custodhistField;
            }
            set {
                if ((value == null)) {
                    this.custodhistField = null;
                }
                else {
                    if ((this.custodhistField == null)) {
                        this.custodhistField = XTypedList<custodhist>.Initialize(this, LinqToXsdTypeManager.Instance, value, custodhistXName);
                    }
                    else {
                        XTypedServices.SetList<custodhist>(this.custodhistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<descgrp> descgrp {
            get {
                if ((this.descgrpField == null)) {
                    this.descgrpField = new XTypedList<descgrp>(this, LinqToXsdTypeManager.Instance, descgrpXName);
                }
                return this.descgrpField;
            }
            set {
                if ((value == null)) {
                    this.descgrpField = null;
                }
                else {
                    if ((this.descgrpField == null)) {
                        this.descgrpField = XTypedList<descgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, descgrpXName);
                    }
                    else {
                        XTypedServices.SetList<descgrp>(this.descgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<fileplan> fileplan {
            get {
                if ((this.fileplanField == null)) {
                    this.fileplanField = new XTypedList<fileplan>(this, LinqToXsdTypeManager.Instance, fileplanXName);
                }
                return this.fileplanField;
            }
            set {
                if ((value == null)) {
                    this.fileplanField = null;
                }
                else {
                    if ((this.fileplanField == null)) {
                        this.fileplanField = XTypedList<fileplan>.Initialize(this, LinqToXsdTypeManager.Instance, value, fileplanXName);
                    }
                    else {
                        XTypedServices.SetList<fileplan>(this.fileplanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<index> index {
            get {
                if ((this.indexField == null)) {
                    this.indexField = new XTypedList<index>(this, LinqToXsdTypeManager.Instance, indexXName);
                }
                return this.indexField;
            }
            set {
                if ((value == null)) {
                    this.indexField = null;
                }
                else {
                    if ((this.indexField == null)) {
                        this.indexField = XTypedList<index>.Initialize(this, LinqToXsdTypeManager.Instance, value, indexXName);
                    }
                    else {
                        XTypedServices.SetList<index>(this.indexField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<odd> odd {
            get {
                if ((this.oddField == null)) {
                    this.oddField = new XTypedList<odd>(this, LinqToXsdTypeManager.Instance, oddXName);
                }
                return this.oddField;
            }
            set {
                if ((value == null)) {
                    this.oddField = null;
                }
                else {
                    if ((this.oddField == null)) {
                        this.oddField = XTypedList<odd>.Initialize(this, LinqToXsdTypeManager.Instance, value, oddXName);
                    }
                    else {
                        XTypedServices.SetList<odd>(this.oddField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<originalsloc> originalsloc {
            get {
                if ((this.originalslocField == null)) {
                    this.originalslocField = new XTypedList<originalsloc>(this, LinqToXsdTypeManager.Instance, originalslocXName);
                }
                return this.originalslocField;
            }
            set {
                if ((value == null)) {
                    this.originalslocField = null;
                }
                else {
                    if ((this.originalslocField == null)) {
                        this.originalslocField = XTypedList<originalsloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, originalslocXName);
                    }
                    else {
                        XTypedServices.SetList<originalsloc>(this.originalslocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<otherfindaid> otherfindaid {
            get {
                if ((this.otherfindaidField == null)) {
                    this.otherfindaidField = new XTypedList<otherfindaid>(this, LinqToXsdTypeManager.Instance, otherfindaidXName);
                }
                return this.otherfindaidField;
            }
            set {
                if ((value == null)) {
                    this.otherfindaidField = null;
                }
                else {
                    if ((this.otherfindaidField == null)) {
                        this.otherfindaidField = XTypedList<otherfindaid>.Initialize(this, LinqToXsdTypeManager.Instance, value, otherfindaidXName);
                    }
                    else {
                        XTypedServices.SetList<otherfindaid>(this.otherfindaidField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<phystech> phystech {
            get {
                if ((this.phystechField == null)) {
                    this.phystechField = new XTypedList<phystech>(this, LinqToXsdTypeManager.Instance, phystechXName);
                }
                return this.phystechField;
            }
            set {
                if ((value == null)) {
                    this.phystechField = null;
                }
                else {
                    if ((this.phystechField == null)) {
                        this.phystechField = XTypedList<phystech>.Initialize(this, LinqToXsdTypeManager.Instance, value, phystechXName);
                    }
                    else {
                        XTypedServices.SetList<phystech>(this.phystechField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<prefercite> prefercite {
            get {
                if ((this.preferciteField == null)) {
                    this.preferciteField = new XTypedList<prefercite>(this, LinqToXsdTypeManager.Instance, preferciteXName);
                }
                return this.preferciteField;
            }
            set {
                if ((value == null)) {
                    this.preferciteField = null;
                }
                else {
                    if ((this.preferciteField == null)) {
                        this.preferciteField = XTypedList<prefercite>.Initialize(this, LinqToXsdTypeManager.Instance, value, preferciteXName);
                    }
                    else {
                        XTypedServices.SetList<prefercite>(this.preferciteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<processinfo> processinfo {
            get {
                if ((this.processinfoField == null)) {
                    this.processinfoField = new XTypedList<processinfo>(this, LinqToXsdTypeManager.Instance, processinfoXName);
                }
                return this.processinfoField;
            }
            set {
                if ((value == null)) {
                    this.processinfoField = null;
                }
                else {
                    if ((this.processinfoField == null)) {
                        this.processinfoField = XTypedList<processinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, processinfoXName);
                    }
                    else {
                        XTypedServices.SetList<processinfo>(this.processinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<relatedmaterial> relatedmaterial {
            get {
                if ((this.relatedmaterialField == null)) {
                    this.relatedmaterialField = new XTypedList<relatedmaterial>(this, LinqToXsdTypeManager.Instance, relatedmaterialXName);
                }
                return this.relatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.relatedmaterialField = null;
                }
                else {
                    if ((this.relatedmaterialField == null)) {
                        this.relatedmaterialField = XTypedList<relatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, relatedmaterialXName);
                    }
                    else {
                        XTypedServices.SetList<relatedmaterial>(this.relatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<scopecontent> scopecontent {
            get {
                if ((this.scopecontentField == null)) {
                    this.scopecontentField = new XTypedList<scopecontent>(this, LinqToXsdTypeManager.Instance, scopecontentXName);
                }
                return this.scopecontentField;
            }
            set {
                if ((value == null)) {
                    this.scopecontentField = null;
                }
                else {
                    if ((this.scopecontentField == null)) {
                        this.scopecontentField = XTypedList<scopecontent>.Initialize(this, LinqToXsdTypeManager.Instance, value, scopecontentXName);
                    }
                    else {
                        XTypedServices.SetList<scopecontent>(this.scopecontentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<separatedmaterial> separatedmaterial {
            get {
                if ((this.separatedmaterialField == null)) {
                    this.separatedmaterialField = new XTypedList<separatedmaterial>(this, LinqToXsdTypeManager.Instance, separatedmaterialXName);
                }
                return this.separatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.separatedmaterialField = null;
                }
                else {
                    if ((this.separatedmaterialField == null)) {
                        this.separatedmaterialField = XTypedList<separatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, separatedmaterialXName);
                    }
                    else {
                        XTypedServices.SetList<separatedmaterial>(this.separatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<userestrict> userestrict {
            get {
                if ((this.userestrictField == null)) {
                    this.userestrictField = new XTypedList<userestrict>(this, LinqToXsdTypeManager.Instance, userestrictXName);
                }
                return this.userestrictField;
            }
            set {
                if ((value == null)) {
                    this.userestrictField = null;
                }
                else {
                    if ((this.userestrictField == null)) {
                        this.userestrictField = XTypedList<userestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, userestrictXName);
                    }
                    else {
                        XTypedServices.SetList<userestrict>(this.userestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<dsc> dsc {
            get {
                if ((this.dscField == null)) {
                    this.dscField = new XTypedList<dsc>(this, LinqToXsdTypeManager.Instance, dscXName);
                }
                return this.dscField;
            }
            set {
                if ((value == null)) {
                    this.dscField = null;
                }
                else {
                    if ((this.dscField == null)) {
                        this.dscField = XTypedList<dsc>.Initialize(this, LinqToXsdTypeManager.Instance, value, dscXName);
                    }
                    else {
                        XTypedServices.SetList<dsc>(this.dscField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<dao> dao {
            get {
                if ((this.daoField == null)) {
                    this.daoField = new XTypedList<dao>(this, LinqToXsdTypeManager.Instance, daoXName);
                }
                return this.daoField;
            }
            set {
                if ((value == null)) {
                    this.daoField = null;
                }
                else {
                    if ((this.daoField == null)) {
                        this.daoField = XTypedList<dao>.Initialize(this, LinqToXsdTypeManager.Instance, value, daoXName);
                    }
                    else {
                        XTypedServices.SetList<dao>(this.daoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<daogrp> daogrp {
            get {
                if ((this.daogrpField == null)) {
                    this.daogrpField = new XTypedList<daogrp>(this, LinqToXsdTypeManager.Instance, daogrpXName);
                }
                return this.daogrpField;
            }
            set {
                if ((value == null)) {
                    this.daogrpField = null;
                }
                else {
                    if ((this.daogrpField == null)) {
                        this.daogrpField = XTypedList<daogrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, daogrpXName);
                    }
                    else {
                        XTypedServices.SetList<daogrp>(this.daogrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<thead> thead {
            get {
                if ((this.theadField == null)) {
                    this.theadField = new XTypedList<thead>(this, LinqToXsdTypeManager.Instance, theadXName);
                }
                return this.theadField;
            }
            set {
                if ((value == null)) {
                    this.theadField = null;
                }
                else {
                    if ((this.theadField == null)) {
                        this.theadField = XTypedList<thead>.Initialize(this, LinqToXsdTypeManager.Instance, value, theadXName);
                    }
                    else {
                        XTypedServices.SetList<thead>(this.theadField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c07+)*)
        /// </para>
        /// </summary>
        public virtual IList<c07> c07 {
            get {
                if ((this.c07Field == null)) {
                    this.c07Field = new XTypedList<c07>(this, LinqToXsdTypeManager.Instance, c07XName);
                }
                return this.c07Field;
            }
            set {
                if ((value == null)) {
                    this.c07Field = null;
                }
                else {
                    if ((this.c07Field == null)) {
                        this.c07Field = XTypedList<c07>.Initialize(this, LinqToXsdTypeManager.Instance, value, c07XName);
                    }
                    else {
                        XTypedServices.SetList<c07>(this.c07Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string level {
            get {
                XAttribute x = this.Attribute(levelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(levelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string otherlevel {
            get {
                XAttribute x = this.Attribute(otherlevelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(otherlevelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string tpattern {
            get {
                XAttribute x = this.Attribute(tpatternXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(tpatternXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<c06>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(didXName, typeof(did));
            localElementDictionary.Add(accessrestrictXName, typeof(accessrestrict));
            localElementDictionary.Add(accrualsXName, typeof(accruals));
            localElementDictionary.Add(acqinfoXName, typeof(acqinfo));
            localElementDictionary.Add(altformavailXName, typeof(altformavail));
            localElementDictionary.Add(appraisalXName, typeof(appraisal));
            localElementDictionary.Add(arrangementXName, typeof(arrangement));
            localElementDictionary.Add(bibliographyXName, typeof(bibliography));
            localElementDictionary.Add(bioghistXName, typeof(bioghist));
            localElementDictionary.Add(controlaccessXName, typeof(controlaccess));
            localElementDictionary.Add(custodhistXName, typeof(custodhist));
            localElementDictionary.Add(descgrpXName, typeof(descgrp));
            localElementDictionary.Add(fileplanXName, typeof(fileplan));
            localElementDictionary.Add(indexXName, typeof(index));
            localElementDictionary.Add(oddXName, typeof(odd));
            localElementDictionary.Add(originalslocXName, typeof(originalsloc));
            localElementDictionary.Add(otherfindaidXName, typeof(otherfindaid));
            localElementDictionary.Add(phystechXName, typeof(phystech));
            localElementDictionary.Add(preferciteXName, typeof(prefercite));
            localElementDictionary.Add(processinfoXName, typeof(processinfo));
            localElementDictionary.Add(relatedmaterialXName, typeof(relatedmaterial));
            localElementDictionary.Add(scopecontentXName, typeof(scopecontent));
            localElementDictionary.Add(separatedmaterialXName, typeof(separatedmaterial));
            localElementDictionary.Add(userestrictXName, typeof(userestrict));
            localElementDictionary.Add(dscXName, typeof(dsc));
            localElementDictionary.Add(daoXName, typeof(dao));
            localElementDictionary.Add(daogrpXName, typeof(daogrp));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(theadXName, typeof(thead));
            localElementDictionary.Add(c07XName, typeof(c07));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
    /// </para>
    /// </summary>
    public partial class c07 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName didXName = System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName accessrestrictXName = System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accessrestrict> accessrestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName accrualsXName = System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accruals> accrualsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName acqinfoXName = System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<acqinfo> acqinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altformavailXName = System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<altformavail> altformavailField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName appraisalXName = System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<appraisal> appraisalField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arrangementXName = System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<arrangement> arrangementField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibliographyXName = System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibliography> bibliographyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bioghistXName = System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bioghist> bioghistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName controlaccessXName = System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<controlaccess> controlaccessField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName custodhistXName = System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<custodhist> custodhistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descgrpXName = System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<descgrp> descgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName fileplanXName = System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<fileplan> fileplanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName indexXName = System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<index> indexField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName oddXName = System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<odd> oddField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName originalslocXName = System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<originalsloc> originalslocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName otherfindaidXName = System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<otherfindaid> otherfindaidField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phystechXName = System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phystech> phystechField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName preferciteXName = System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<prefercite> preferciteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName processinfoXName = System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<processinfo> processinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName relatedmaterialXName = System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<relatedmaterial> relatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName scopecontentXName = System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<scopecontent> scopecontentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName separatedmaterialXName = System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<separatedmaterial> separatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userestrictXName = System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<userestrict> userestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dscXName = System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dsc> dscField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName daoXName = System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dao> daoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName daogrpXName = System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<daogrp> daogrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName theadXName = System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<thead> theadField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName c08XName = System.Xml.Linq.XName.Get("c08", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<c08> c08Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName levelXName = System.Xml.Linq.XName.Get("level", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName otherlevelXName = System.Xml.Linq.XName.Get("otherlevel", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tpatternXName = System.Xml.Linq.XName.Get("tpattern", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("c07", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator c07(XElement xe) { return XTypedServices.ToXTypedElement<c07>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static c07() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new NamedContentModelEntity(didXName), new ChoiceContentModelEntity(new NamedContentModelEntity(accessrestrictXName), new NamedContentModelEntity(accrualsXName), new NamedContentModelEntity(acqinfoXName), new NamedContentModelEntity(altformavailXName), new NamedContentModelEntity(appraisalXName), new NamedContentModelEntity(arrangementXName), new NamedContentModelEntity(bibliographyXName), new NamedContentModelEntity(bioghistXName), new NamedContentModelEntity(controlaccessXName), new NamedContentModelEntity(custodhistXName), new NamedContentModelEntity(descgrpXName), new NamedContentModelEntity(fileplanXName), new NamedContentModelEntity(indexXName), new NamedContentModelEntity(oddXName), new NamedContentModelEntity(originalslocXName), new NamedContentModelEntity(otherfindaidXName), new NamedContentModelEntity(phystechXName), new NamedContentModelEntity(preferciteXName), new NamedContentModelEntity(processinfoXName), new NamedContentModelEntity(relatedmaterialXName), new NamedContentModelEntity(scopecontentXName), new NamedContentModelEntity(separatedmaterialXName), new NamedContentModelEntity(userestrictXName), new NamedContentModelEntity(dscXName), new NamedContentModelEntity(daoXName), new NamedContentModelEntity(daogrpXName), new NamedContentModelEntity(noteXName)), new SequenceContentModelEntity(new NamedContentModelEntity(theadXName), new NamedContentModelEntity(c08XName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public c07() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual did did {
            get {
                XElement x = this.GetElement(didXName);
                return ((did)(x));
            }
            set {
                this.SetElement(didXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<accessrestrict> accessrestrict {
            get {
                if ((this.accessrestrictField == null)) {
                    this.accessrestrictField = new XTypedList<accessrestrict>(this, LinqToXsdTypeManager.Instance, accessrestrictXName);
                }
                return this.accessrestrictField;
            }
            set {
                if ((value == null)) {
                    this.accessrestrictField = null;
                }
                else {
                    if ((this.accessrestrictField == null)) {
                        this.accessrestrictField = XTypedList<accessrestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, accessrestrictXName);
                    }
                    else {
                        XTypedServices.SetList<accessrestrict>(this.accessrestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<accruals> accruals {
            get {
                if ((this.accrualsField == null)) {
                    this.accrualsField = new XTypedList<accruals>(this, LinqToXsdTypeManager.Instance, accrualsXName);
                }
                return this.accrualsField;
            }
            set {
                if ((value == null)) {
                    this.accrualsField = null;
                }
                else {
                    if ((this.accrualsField == null)) {
                        this.accrualsField = XTypedList<accruals>.Initialize(this, LinqToXsdTypeManager.Instance, value, accrualsXName);
                    }
                    else {
                        XTypedServices.SetList<accruals>(this.accrualsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<acqinfo> acqinfo {
            get {
                if ((this.acqinfoField == null)) {
                    this.acqinfoField = new XTypedList<acqinfo>(this, LinqToXsdTypeManager.Instance, acqinfoXName);
                }
                return this.acqinfoField;
            }
            set {
                if ((value == null)) {
                    this.acqinfoField = null;
                }
                else {
                    if ((this.acqinfoField == null)) {
                        this.acqinfoField = XTypedList<acqinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, acqinfoXName);
                    }
                    else {
                        XTypedServices.SetList<acqinfo>(this.acqinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<altformavail> altformavail {
            get {
                if ((this.altformavailField == null)) {
                    this.altformavailField = new XTypedList<altformavail>(this, LinqToXsdTypeManager.Instance, altformavailXName);
                }
                return this.altformavailField;
            }
            set {
                if ((value == null)) {
                    this.altformavailField = null;
                }
                else {
                    if ((this.altformavailField == null)) {
                        this.altformavailField = XTypedList<altformavail>.Initialize(this, LinqToXsdTypeManager.Instance, value, altformavailXName);
                    }
                    else {
                        XTypedServices.SetList<altformavail>(this.altformavailField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<appraisal> appraisal {
            get {
                if ((this.appraisalField == null)) {
                    this.appraisalField = new XTypedList<appraisal>(this, LinqToXsdTypeManager.Instance, appraisalXName);
                }
                return this.appraisalField;
            }
            set {
                if ((value == null)) {
                    this.appraisalField = null;
                }
                else {
                    if ((this.appraisalField == null)) {
                        this.appraisalField = XTypedList<appraisal>.Initialize(this, LinqToXsdTypeManager.Instance, value, appraisalXName);
                    }
                    else {
                        XTypedServices.SetList<appraisal>(this.appraisalField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<arrangement> arrangement {
            get {
                if ((this.arrangementField == null)) {
                    this.arrangementField = new XTypedList<arrangement>(this, LinqToXsdTypeManager.Instance, arrangementXName);
                }
                return this.arrangementField;
            }
            set {
                if ((value == null)) {
                    this.arrangementField = null;
                }
                else {
                    if ((this.arrangementField == null)) {
                        this.arrangementField = XTypedList<arrangement>.Initialize(this, LinqToXsdTypeManager.Instance, value, arrangementXName);
                    }
                    else {
                        XTypedServices.SetList<arrangement>(this.arrangementField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<bibliography> bibliography {
            get {
                if ((this.bibliographyField == null)) {
                    this.bibliographyField = new XTypedList<bibliography>(this, LinqToXsdTypeManager.Instance, bibliographyXName);
                }
                return this.bibliographyField;
            }
            set {
                if ((value == null)) {
                    this.bibliographyField = null;
                }
                else {
                    if ((this.bibliographyField == null)) {
                        this.bibliographyField = XTypedList<bibliography>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibliographyXName);
                    }
                    else {
                        XTypedServices.SetList<bibliography>(this.bibliographyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<bioghist> bioghist {
            get {
                if ((this.bioghistField == null)) {
                    this.bioghistField = new XTypedList<bioghist>(this, LinqToXsdTypeManager.Instance, bioghistXName);
                }
                return this.bioghistField;
            }
            set {
                if ((value == null)) {
                    this.bioghistField = null;
                }
                else {
                    if ((this.bioghistField == null)) {
                        this.bioghistField = XTypedList<bioghist>.Initialize(this, LinqToXsdTypeManager.Instance, value, bioghistXName);
                    }
                    else {
                        XTypedServices.SetList<bioghist>(this.bioghistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<controlaccess> controlaccess {
            get {
                if ((this.controlaccessField == null)) {
                    this.controlaccessField = new XTypedList<controlaccess>(this, LinqToXsdTypeManager.Instance, controlaccessXName);
                }
                return this.controlaccessField;
            }
            set {
                if ((value == null)) {
                    this.controlaccessField = null;
                }
                else {
                    if ((this.controlaccessField == null)) {
                        this.controlaccessField = XTypedList<controlaccess>.Initialize(this, LinqToXsdTypeManager.Instance, value, controlaccessXName);
                    }
                    else {
                        XTypedServices.SetList<controlaccess>(this.controlaccessField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<custodhist> custodhist {
            get {
                if ((this.custodhistField == null)) {
                    this.custodhistField = new XTypedList<custodhist>(this, LinqToXsdTypeManager.Instance, custodhistXName);
                }
                return this.custodhistField;
            }
            set {
                if ((value == null)) {
                    this.custodhistField = null;
                }
                else {
                    if ((this.custodhistField == null)) {
                        this.custodhistField = XTypedList<custodhist>.Initialize(this, LinqToXsdTypeManager.Instance, value, custodhistXName);
                    }
                    else {
                        XTypedServices.SetList<custodhist>(this.custodhistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<descgrp> descgrp {
            get {
                if ((this.descgrpField == null)) {
                    this.descgrpField = new XTypedList<descgrp>(this, LinqToXsdTypeManager.Instance, descgrpXName);
                }
                return this.descgrpField;
            }
            set {
                if ((value == null)) {
                    this.descgrpField = null;
                }
                else {
                    if ((this.descgrpField == null)) {
                        this.descgrpField = XTypedList<descgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, descgrpXName);
                    }
                    else {
                        XTypedServices.SetList<descgrp>(this.descgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<fileplan> fileplan {
            get {
                if ((this.fileplanField == null)) {
                    this.fileplanField = new XTypedList<fileplan>(this, LinqToXsdTypeManager.Instance, fileplanXName);
                }
                return this.fileplanField;
            }
            set {
                if ((value == null)) {
                    this.fileplanField = null;
                }
                else {
                    if ((this.fileplanField == null)) {
                        this.fileplanField = XTypedList<fileplan>.Initialize(this, LinqToXsdTypeManager.Instance, value, fileplanXName);
                    }
                    else {
                        XTypedServices.SetList<fileplan>(this.fileplanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<index> index {
            get {
                if ((this.indexField == null)) {
                    this.indexField = new XTypedList<index>(this, LinqToXsdTypeManager.Instance, indexXName);
                }
                return this.indexField;
            }
            set {
                if ((value == null)) {
                    this.indexField = null;
                }
                else {
                    if ((this.indexField == null)) {
                        this.indexField = XTypedList<index>.Initialize(this, LinqToXsdTypeManager.Instance, value, indexXName);
                    }
                    else {
                        XTypedServices.SetList<index>(this.indexField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<odd> odd {
            get {
                if ((this.oddField == null)) {
                    this.oddField = new XTypedList<odd>(this, LinqToXsdTypeManager.Instance, oddXName);
                }
                return this.oddField;
            }
            set {
                if ((value == null)) {
                    this.oddField = null;
                }
                else {
                    if ((this.oddField == null)) {
                        this.oddField = XTypedList<odd>.Initialize(this, LinqToXsdTypeManager.Instance, value, oddXName);
                    }
                    else {
                        XTypedServices.SetList<odd>(this.oddField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<originalsloc> originalsloc {
            get {
                if ((this.originalslocField == null)) {
                    this.originalslocField = new XTypedList<originalsloc>(this, LinqToXsdTypeManager.Instance, originalslocXName);
                }
                return this.originalslocField;
            }
            set {
                if ((value == null)) {
                    this.originalslocField = null;
                }
                else {
                    if ((this.originalslocField == null)) {
                        this.originalslocField = XTypedList<originalsloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, originalslocXName);
                    }
                    else {
                        XTypedServices.SetList<originalsloc>(this.originalslocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<otherfindaid> otherfindaid {
            get {
                if ((this.otherfindaidField == null)) {
                    this.otherfindaidField = new XTypedList<otherfindaid>(this, LinqToXsdTypeManager.Instance, otherfindaidXName);
                }
                return this.otherfindaidField;
            }
            set {
                if ((value == null)) {
                    this.otherfindaidField = null;
                }
                else {
                    if ((this.otherfindaidField == null)) {
                        this.otherfindaidField = XTypedList<otherfindaid>.Initialize(this, LinqToXsdTypeManager.Instance, value, otherfindaidXName);
                    }
                    else {
                        XTypedServices.SetList<otherfindaid>(this.otherfindaidField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<phystech> phystech {
            get {
                if ((this.phystechField == null)) {
                    this.phystechField = new XTypedList<phystech>(this, LinqToXsdTypeManager.Instance, phystechXName);
                }
                return this.phystechField;
            }
            set {
                if ((value == null)) {
                    this.phystechField = null;
                }
                else {
                    if ((this.phystechField == null)) {
                        this.phystechField = XTypedList<phystech>.Initialize(this, LinqToXsdTypeManager.Instance, value, phystechXName);
                    }
                    else {
                        XTypedServices.SetList<phystech>(this.phystechField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<prefercite> prefercite {
            get {
                if ((this.preferciteField == null)) {
                    this.preferciteField = new XTypedList<prefercite>(this, LinqToXsdTypeManager.Instance, preferciteXName);
                }
                return this.preferciteField;
            }
            set {
                if ((value == null)) {
                    this.preferciteField = null;
                }
                else {
                    if ((this.preferciteField == null)) {
                        this.preferciteField = XTypedList<prefercite>.Initialize(this, LinqToXsdTypeManager.Instance, value, preferciteXName);
                    }
                    else {
                        XTypedServices.SetList<prefercite>(this.preferciteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<processinfo> processinfo {
            get {
                if ((this.processinfoField == null)) {
                    this.processinfoField = new XTypedList<processinfo>(this, LinqToXsdTypeManager.Instance, processinfoXName);
                }
                return this.processinfoField;
            }
            set {
                if ((value == null)) {
                    this.processinfoField = null;
                }
                else {
                    if ((this.processinfoField == null)) {
                        this.processinfoField = XTypedList<processinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, processinfoXName);
                    }
                    else {
                        XTypedServices.SetList<processinfo>(this.processinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<relatedmaterial> relatedmaterial {
            get {
                if ((this.relatedmaterialField == null)) {
                    this.relatedmaterialField = new XTypedList<relatedmaterial>(this, LinqToXsdTypeManager.Instance, relatedmaterialXName);
                }
                return this.relatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.relatedmaterialField = null;
                }
                else {
                    if ((this.relatedmaterialField == null)) {
                        this.relatedmaterialField = XTypedList<relatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, relatedmaterialXName);
                    }
                    else {
                        XTypedServices.SetList<relatedmaterial>(this.relatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<scopecontent> scopecontent {
            get {
                if ((this.scopecontentField == null)) {
                    this.scopecontentField = new XTypedList<scopecontent>(this, LinqToXsdTypeManager.Instance, scopecontentXName);
                }
                return this.scopecontentField;
            }
            set {
                if ((value == null)) {
                    this.scopecontentField = null;
                }
                else {
                    if ((this.scopecontentField == null)) {
                        this.scopecontentField = XTypedList<scopecontent>.Initialize(this, LinqToXsdTypeManager.Instance, value, scopecontentXName);
                    }
                    else {
                        XTypedServices.SetList<scopecontent>(this.scopecontentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<separatedmaterial> separatedmaterial {
            get {
                if ((this.separatedmaterialField == null)) {
                    this.separatedmaterialField = new XTypedList<separatedmaterial>(this, LinqToXsdTypeManager.Instance, separatedmaterialXName);
                }
                return this.separatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.separatedmaterialField = null;
                }
                else {
                    if ((this.separatedmaterialField == null)) {
                        this.separatedmaterialField = XTypedList<separatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, separatedmaterialXName);
                    }
                    else {
                        XTypedServices.SetList<separatedmaterial>(this.separatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<userestrict> userestrict {
            get {
                if ((this.userestrictField == null)) {
                    this.userestrictField = new XTypedList<userestrict>(this, LinqToXsdTypeManager.Instance, userestrictXName);
                }
                return this.userestrictField;
            }
            set {
                if ((value == null)) {
                    this.userestrictField = null;
                }
                else {
                    if ((this.userestrictField == null)) {
                        this.userestrictField = XTypedList<userestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, userestrictXName);
                    }
                    else {
                        XTypedServices.SetList<userestrict>(this.userestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<dsc> dsc {
            get {
                if ((this.dscField == null)) {
                    this.dscField = new XTypedList<dsc>(this, LinqToXsdTypeManager.Instance, dscXName);
                }
                return this.dscField;
            }
            set {
                if ((value == null)) {
                    this.dscField = null;
                }
                else {
                    if ((this.dscField == null)) {
                        this.dscField = XTypedList<dsc>.Initialize(this, LinqToXsdTypeManager.Instance, value, dscXName);
                    }
                    else {
                        XTypedServices.SetList<dsc>(this.dscField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<dao> dao {
            get {
                if ((this.daoField == null)) {
                    this.daoField = new XTypedList<dao>(this, LinqToXsdTypeManager.Instance, daoXName);
                }
                return this.daoField;
            }
            set {
                if ((value == null)) {
                    this.daoField = null;
                }
                else {
                    if ((this.daoField == null)) {
                        this.daoField = XTypedList<dao>.Initialize(this, LinqToXsdTypeManager.Instance, value, daoXName);
                    }
                    else {
                        XTypedServices.SetList<dao>(this.daoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<daogrp> daogrp {
            get {
                if ((this.daogrpField == null)) {
                    this.daogrpField = new XTypedList<daogrp>(this, LinqToXsdTypeManager.Instance, daogrpXName);
                }
                return this.daogrpField;
            }
            set {
                if ((value == null)) {
                    this.daogrpField = null;
                }
                else {
                    if ((this.daogrpField == null)) {
                        this.daogrpField = XTypedList<daogrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, daogrpXName);
                    }
                    else {
                        XTypedServices.SetList<daogrp>(this.daogrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<thead> thead {
            get {
                if ((this.theadField == null)) {
                    this.theadField = new XTypedList<thead>(this, LinqToXsdTypeManager.Instance, theadXName);
                }
                return this.theadField;
            }
            set {
                if ((value == null)) {
                    this.theadField = null;
                }
                else {
                    if ((this.theadField == null)) {
                        this.theadField = XTypedList<thead>.Initialize(this, LinqToXsdTypeManager.Instance, value, theadXName);
                    }
                    else {
                        XTypedServices.SetList<thead>(this.theadField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c08+)*)
        /// </para>
        /// </summary>
        public virtual IList<c08> c08 {
            get {
                if ((this.c08Field == null)) {
                    this.c08Field = new XTypedList<c08>(this, LinqToXsdTypeManager.Instance, c08XName);
                }
                return this.c08Field;
            }
            set {
                if ((value == null)) {
                    this.c08Field = null;
                }
                else {
                    if ((this.c08Field == null)) {
                        this.c08Field = XTypedList<c08>.Initialize(this, LinqToXsdTypeManager.Instance, value, c08XName);
                    }
                    else {
                        XTypedServices.SetList<c08>(this.c08Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string level {
            get {
                XAttribute x = this.Attribute(levelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(levelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string otherlevel {
            get {
                XAttribute x = this.Attribute(otherlevelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(otherlevelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string tpattern {
            get {
                XAttribute x = this.Attribute(tpatternXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(tpatternXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<c07>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(didXName, typeof(did));
            localElementDictionary.Add(accessrestrictXName, typeof(accessrestrict));
            localElementDictionary.Add(accrualsXName, typeof(accruals));
            localElementDictionary.Add(acqinfoXName, typeof(acqinfo));
            localElementDictionary.Add(altformavailXName, typeof(altformavail));
            localElementDictionary.Add(appraisalXName, typeof(appraisal));
            localElementDictionary.Add(arrangementXName, typeof(arrangement));
            localElementDictionary.Add(bibliographyXName, typeof(bibliography));
            localElementDictionary.Add(bioghistXName, typeof(bioghist));
            localElementDictionary.Add(controlaccessXName, typeof(controlaccess));
            localElementDictionary.Add(custodhistXName, typeof(custodhist));
            localElementDictionary.Add(descgrpXName, typeof(descgrp));
            localElementDictionary.Add(fileplanXName, typeof(fileplan));
            localElementDictionary.Add(indexXName, typeof(index));
            localElementDictionary.Add(oddXName, typeof(odd));
            localElementDictionary.Add(originalslocXName, typeof(originalsloc));
            localElementDictionary.Add(otherfindaidXName, typeof(otherfindaid));
            localElementDictionary.Add(phystechXName, typeof(phystech));
            localElementDictionary.Add(preferciteXName, typeof(prefercite));
            localElementDictionary.Add(processinfoXName, typeof(processinfo));
            localElementDictionary.Add(relatedmaterialXName, typeof(relatedmaterial));
            localElementDictionary.Add(scopecontentXName, typeof(scopecontent));
            localElementDictionary.Add(separatedmaterialXName, typeof(separatedmaterial));
            localElementDictionary.Add(userestrictXName, typeof(userestrict));
            localElementDictionary.Add(dscXName, typeof(dsc));
            localElementDictionary.Add(daoXName, typeof(dao));
            localElementDictionary.Add(daogrpXName, typeof(daogrp));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(theadXName, typeof(thead));
            localElementDictionary.Add(c08XName, typeof(c08));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
    /// </para>
    /// </summary>
    public partial class c08 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName didXName = System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName accessrestrictXName = System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accessrestrict> accessrestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName accrualsXName = System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accruals> accrualsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName acqinfoXName = System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<acqinfo> acqinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altformavailXName = System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<altformavail> altformavailField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName appraisalXName = System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<appraisal> appraisalField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arrangementXName = System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<arrangement> arrangementField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibliographyXName = System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibliography> bibliographyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bioghistXName = System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bioghist> bioghistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName controlaccessXName = System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<controlaccess> controlaccessField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName custodhistXName = System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<custodhist> custodhistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descgrpXName = System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<descgrp> descgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName fileplanXName = System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<fileplan> fileplanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName indexXName = System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<index> indexField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName oddXName = System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<odd> oddField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName originalslocXName = System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<originalsloc> originalslocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName otherfindaidXName = System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<otherfindaid> otherfindaidField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phystechXName = System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phystech> phystechField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName preferciteXName = System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<prefercite> preferciteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName processinfoXName = System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<processinfo> processinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName relatedmaterialXName = System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<relatedmaterial> relatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName scopecontentXName = System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<scopecontent> scopecontentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName separatedmaterialXName = System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<separatedmaterial> separatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userestrictXName = System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<userestrict> userestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dscXName = System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dsc> dscField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName daoXName = System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dao> daoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName daogrpXName = System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<daogrp> daogrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName theadXName = System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<thead> theadField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName c09XName = System.Xml.Linq.XName.Get("c09", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<c09> c09Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName levelXName = System.Xml.Linq.XName.Get("level", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName otherlevelXName = System.Xml.Linq.XName.Get("otherlevel", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tpatternXName = System.Xml.Linq.XName.Get("tpattern", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("c08", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator c08(XElement xe) { return XTypedServices.ToXTypedElement<c08>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static c08() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new NamedContentModelEntity(didXName), new ChoiceContentModelEntity(new NamedContentModelEntity(accessrestrictXName), new NamedContentModelEntity(accrualsXName), new NamedContentModelEntity(acqinfoXName), new NamedContentModelEntity(altformavailXName), new NamedContentModelEntity(appraisalXName), new NamedContentModelEntity(arrangementXName), new NamedContentModelEntity(bibliographyXName), new NamedContentModelEntity(bioghistXName), new NamedContentModelEntity(controlaccessXName), new NamedContentModelEntity(custodhistXName), new NamedContentModelEntity(descgrpXName), new NamedContentModelEntity(fileplanXName), new NamedContentModelEntity(indexXName), new NamedContentModelEntity(oddXName), new NamedContentModelEntity(originalslocXName), new NamedContentModelEntity(otherfindaidXName), new NamedContentModelEntity(phystechXName), new NamedContentModelEntity(preferciteXName), new NamedContentModelEntity(processinfoXName), new NamedContentModelEntity(relatedmaterialXName), new NamedContentModelEntity(scopecontentXName), new NamedContentModelEntity(separatedmaterialXName), new NamedContentModelEntity(userestrictXName), new NamedContentModelEntity(dscXName), new NamedContentModelEntity(daoXName), new NamedContentModelEntity(daogrpXName), new NamedContentModelEntity(noteXName)), new SequenceContentModelEntity(new NamedContentModelEntity(theadXName), new NamedContentModelEntity(c09XName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public c08() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual did did {
            get {
                XElement x = this.GetElement(didXName);
                return ((did)(x));
            }
            set {
                this.SetElement(didXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<accessrestrict> accessrestrict {
            get {
                if ((this.accessrestrictField == null)) {
                    this.accessrestrictField = new XTypedList<accessrestrict>(this, LinqToXsdTypeManager.Instance, accessrestrictXName);
                }
                return this.accessrestrictField;
            }
            set {
                if ((value == null)) {
                    this.accessrestrictField = null;
                }
                else {
                    if ((this.accessrestrictField == null)) {
                        this.accessrestrictField = XTypedList<accessrestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, accessrestrictXName);
                    }
                    else {
                        XTypedServices.SetList<accessrestrict>(this.accessrestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<accruals> accruals {
            get {
                if ((this.accrualsField == null)) {
                    this.accrualsField = new XTypedList<accruals>(this, LinqToXsdTypeManager.Instance, accrualsXName);
                }
                return this.accrualsField;
            }
            set {
                if ((value == null)) {
                    this.accrualsField = null;
                }
                else {
                    if ((this.accrualsField == null)) {
                        this.accrualsField = XTypedList<accruals>.Initialize(this, LinqToXsdTypeManager.Instance, value, accrualsXName);
                    }
                    else {
                        XTypedServices.SetList<accruals>(this.accrualsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<acqinfo> acqinfo {
            get {
                if ((this.acqinfoField == null)) {
                    this.acqinfoField = new XTypedList<acqinfo>(this, LinqToXsdTypeManager.Instance, acqinfoXName);
                }
                return this.acqinfoField;
            }
            set {
                if ((value == null)) {
                    this.acqinfoField = null;
                }
                else {
                    if ((this.acqinfoField == null)) {
                        this.acqinfoField = XTypedList<acqinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, acqinfoXName);
                    }
                    else {
                        XTypedServices.SetList<acqinfo>(this.acqinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<altformavail> altformavail {
            get {
                if ((this.altformavailField == null)) {
                    this.altformavailField = new XTypedList<altformavail>(this, LinqToXsdTypeManager.Instance, altformavailXName);
                }
                return this.altformavailField;
            }
            set {
                if ((value == null)) {
                    this.altformavailField = null;
                }
                else {
                    if ((this.altformavailField == null)) {
                        this.altformavailField = XTypedList<altformavail>.Initialize(this, LinqToXsdTypeManager.Instance, value, altformavailXName);
                    }
                    else {
                        XTypedServices.SetList<altformavail>(this.altformavailField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<appraisal> appraisal {
            get {
                if ((this.appraisalField == null)) {
                    this.appraisalField = new XTypedList<appraisal>(this, LinqToXsdTypeManager.Instance, appraisalXName);
                }
                return this.appraisalField;
            }
            set {
                if ((value == null)) {
                    this.appraisalField = null;
                }
                else {
                    if ((this.appraisalField == null)) {
                        this.appraisalField = XTypedList<appraisal>.Initialize(this, LinqToXsdTypeManager.Instance, value, appraisalXName);
                    }
                    else {
                        XTypedServices.SetList<appraisal>(this.appraisalField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<arrangement> arrangement {
            get {
                if ((this.arrangementField == null)) {
                    this.arrangementField = new XTypedList<arrangement>(this, LinqToXsdTypeManager.Instance, arrangementXName);
                }
                return this.arrangementField;
            }
            set {
                if ((value == null)) {
                    this.arrangementField = null;
                }
                else {
                    if ((this.arrangementField == null)) {
                        this.arrangementField = XTypedList<arrangement>.Initialize(this, LinqToXsdTypeManager.Instance, value, arrangementXName);
                    }
                    else {
                        XTypedServices.SetList<arrangement>(this.arrangementField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<bibliography> bibliography {
            get {
                if ((this.bibliographyField == null)) {
                    this.bibliographyField = new XTypedList<bibliography>(this, LinqToXsdTypeManager.Instance, bibliographyXName);
                }
                return this.bibliographyField;
            }
            set {
                if ((value == null)) {
                    this.bibliographyField = null;
                }
                else {
                    if ((this.bibliographyField == null)) {
                        this.bibliographyField = XTypedList<bibliography>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibliographyXName);
                    }
                    else {
                        XTypedServices.SetList<bibliography>(this.bibliographyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<bioghist> bioghist {
            get {
                if ((this.bioghistField == null)) {
                    this.bioghistField = new XTypedList<bioghist>(this, LinqToXsdTypeManager.Instance, bioghistXName);
                }
                return this.bioghistField;
            }
            set {
                if ((value == null)) {
                    this.bioghistField = null;
                }
                else {
                    if ((this.bioghistField == null)) {
                        this.bioghistField = XTypedList<bioghist>.Initialize(this, LinqToXsdTypeManager.Instance, value, bioghistXName);
                    }
                    else {
                        XTypedServices.SetList<bioghist>(this.bioghistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<controlaccess> controlaccess {
            get {
                if ((this.controlaccessField == null)) {
                    this.controlaccessField = new XTypedList<controlaccess>(this, LinqToXsdTypeManager.Instance, controlaccessXName);
                }
                return this.controlaccessField;
            }
            set {
                if ((value == null)) {
                    this.controlaccessField = null;
                }
                else {
                    if ((this.controlaccessField == null)) {
                        this.controlaccessField = XTypedList<controlaccess>.Initialize(this, LinqToXsdTypeManager.Instance, value, controlaccessXName);
                    }
                    else {
                        XTypedServices.SetList<controlaccess>(this.controlaccessField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<custodhist> custodhist {
            get {
                if ((this.custodhistField == null)) {
                    this.custodhistField = new XTypedList<custodhist>(this, LinqToXsdTypeManager.Instance, custodhistXName);
                }
                return this.custodhistField;
            }
            set {
                if ((value == null)) {
                    this.custodhistField = null;
                }
                else {
                    if ((this.custodhistField == null)) {
                        this.custodhistField = XTypedList<custodhist>.Initialize(this, LinqToXsdTypeManager.Instance, value, custodhistXName);
                    }
                    else {
                        XTypedServices.SetList<custodhist>(this.custodhistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<descgrp> descgrp {
            get {
                if ((this.descgrpField == null)) {
                    this.descgrpField = new XTypedList<descgrp>(this, LinqToXsdTypeManager.Instance, descgrpXName);
                }
                return this.descgrpField;
            }
            set {
                if ((value == null)) {
                    this.descgrpField = null;
                }
                else {
                    if ((this.descgrpField == null)) {
                        this.descgrpField = XTypedList<descgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, descgrpXName);
                    }
                    else {
                        XTypedServices.SetList<descgrp>(this.descgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<fileplan> fileplan {
            get {
                if ((this.fileplanField == null)) {
                    this.fileplanField = new XTypedList<fileplan>(this, LinqToXsdTypeManager.Instance, fileplanXName);
                }
                return this.fileplanField;
            }
            set {
                if ((value == null)) {
                    this.fileplanField = null;
                }
                else {
                    if ((this.fileplanField == null)) {
                        this.fileplanField = XTypedList<fileplan>.Initialize(this, LinqToXsdTypeManager.Instance, value, fileplanXName);
                    }
                    else {
                        XTypedServices.SetList<fileplan>(this.fileplanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<index> index {
            get {
                if ((this.indexField == null)) {
                    this.indexField = new XTypedList<index>(this, LinqToXsdTypeManager.Instance, indexXName);
                }
                return this.indexField;
            }
            set {
                if ((value == null)) {
                    this.indexField = null;
                }
                else {
                    if ((this.indexField == null)) {
                        this.indexField = XTypedList<index>.Initialize(this, LinqToXsdTypeManager.Instance, value, indexXName);
                    }
                    else {
                        XTypedServices.SetList<index>(this.indexField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<odd> odd {
            get {
                if ((this.oddField == null)) {
                    this.oddField = new XTypedList<odd>(this, LinqToXsdTypeManager.Instance, oddXName);
                }
                return this.oddField;
            }
            set {
                if ((value == null)) {
                    this.oddField = null;
                }
                else {
                    if ((this.oddField == null)) {
                        this.oddField = XTypedList<odd>.Initialize(this, LinqToXsdTypeManager.Instance, value, oddXName);
                    }
                    else {
                        XTypedServices.SetList<odd>(this.oddField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<originalsloc> originalsloc {
            get {
                if ((this.originalslocField == null)) {
                    this.originalslocField = new XTypedList<originalsloc>(this, LinqToXsdTypeManager.Instance, originalslocXName);
                }
                return this.originalslocField;
            }
            set {
                if ((value == null)) {
                    this.originalslocField = null;
                }
                else {
                    if ((this.originalslocField == null)) {
                        this.originalslocField = XTypedList<originalsloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, originalslocXName);
                    }
                    else {
                        XTypedServices.SetList<originalsloc>(this.originalslocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<otherfindaid> otherfindaid {
            get {
                if ((this.otherfindaidField == null)) {
                    this.otherfindaidField = new XTypedList<otherfindaid>(this, LinqToXsdTypeManager.Instance, otherfindaidXName);
                }
                return this.otherfindaidField;
            }
            set {
                if ((value == null)) {
                    this.otherfindaidField = null;
                }
                else {
                    if ((this.otherfindaidField == null)) {
                        this.otherfindaidField = XTypedList<otherfindaid>.Initialize(this, LinqToXsdTypeManager.Instance, value, otherfindaidXName);
                    }
                    else {
                        XTypedServices.SetList<otherfindaid>(this.otherfindaidField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<phystech> phystech {
            get {
                if ((this.phystechField == null)) {
                    this.phystechField = new XTypedList<phystech>(this, LinqToXsdTypeManager.Instance, phystechXName);
                }
                return this.phystechField;
            }
            set {
                if ((value == null)) {
                    this.phystechField = null;
                }
                else {
                    if ((this.phystechField == null)) {
                        this.phystechField = XTypedList<phystech>.Initialize(this, LinqToXsdTypeManager.Instance, value, phystechXName);
                    }
                    else {
                        XTypedServices.SetList<phystech>(this.phystechField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<prefercite> prefercite {
            get {
                if ((this.preferciteField == null)) {
                    this.preferciteField = new XTypedList<prefercite>(this, LinqToXsdTypeManager.Instance, preferciteXName);
                }
                return this.preferciteField;
            }
            set {
                if ((value == null)) {
                    this.preferciteField = null;
                }
                else {
                    if ((this.preferciteField == null)) {
                        this.preferciteField = XTypedList<prefercite>.Initialize(this, LinqToXsdTypeManager.Instance, value, preferciteXName);
                    }
                    else {
                        XTypedServices.SetList<prefercite>(this.preferciteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<processinfo> processinfo {
            get {
                if ((this.processinfoField == null)) {
                    this.processinfoField = new XTypedList<processinfo>(this, LinqToXsdTypeManager.Instance, processinfoXName);
                }
                return this.processinfoField;
            }
            set {
                if ((value == null)) {
                    this.processinfoField = null;
                }
                else {
                    if ((this.processinfoField == null)) {
                        this.processinfoField = XTypedList<processinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, processinfoXName);
                    }
                    else {
                        XTypedServices.SetList<processinfo>(this.processinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<relatedmaterial> relatedmaterial {
            get {
                if ((this.relatedmaterialField == null)) {
                    this.relatedmaterialField = new XTypedList<relatedmaterial>(this, LinqToXsdTypeManager.Instance, relatedmaterialXName);
                }
                return this.relatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.relatedmaterialField = null;
                }
                else {
                    if ((this.relatedmaterialField == null)) {
                        this.relatedmaterialField = XTypedList<relatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, relatedmaterialXName);
                    }
                    else {
                        XTypedServices.SetList<relatedmaterial>(this.relatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<scopecontent> scopecontent {
            get {
                if ((this.scopecontentField == null)) {
                    this.scopecontentField = new XTypedList<scopecontent>(this, LinqToXsdTypeManager.Instance, scopecontentXName);
                }
                return this.scopecontentField;
            }
            set {
                if ((value == null)) {
                    this.scopecontentField = null;
                }
                else {
                    if ((this.scopecontentField == null)) {
                        this.scopecontentField = XTypedList<scopecontent>.Initialize(this, LinqToXsdTypeManager.Instance, value, scopecontentXName);
                    }
                    else {
                        XTypedServices.SetList<scopecontent>(this.scopecontentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<separatedmaterial> separatedmaterial {
            get {
                if ((this.separatedmaterialField == null)) {
                    this.separatedmaterialField = new XTypedList<separatedmaterial>(this, LinqToXsdTypeManager.Instance, separatedmaterialXName);
                }
                return this.separatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.separatedmaterialField = null;
                }
                else {
                    if ((this.separatedmaterialField == null)) {
                        this.separatedmaterialField = XTypedList<separatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, separatedmaterialXName);
                    }
                    else {
                        XTypedServices.SetList<separatedmaterial>(this.separatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<userestrict> userestrict {
            get {
                if ((this.userestrictField == null)) {
                    this.userestrictField = new XTypedList<userestrict>(this, LinqToXsdTypeManager.Instance, userestrictXName);
                }
                return this.userestrictField;
            }
            set {
                if ((value == null)) {
                    this.userestrictField = null;
                }
                else {
                    if ((this.userestrictField == null)) {
                        this.userestrictField = XTypedList<userestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, userestrictXName);
                    }
                    else {
                        XTypedServices.SetList<userestrict>(this.userestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<dsc> dsc {
            get {
                if ((this.dscField == null)) {
                    this.dscField = new XTypedList<dsc>(this, LinqToXsdTypeManager.Instance, dscXName);
                }
                return this.dscField;
            }
            set {
                if ((value == null)) {
                    this.dscField = null;
                }
                else {
                    if ((this.dscField == null)) {
                        this.dscField = XTypedList<dsc>.Initialize(this, LinqToXsdTypeManager.Instance, value, dscXName);
                    }
                    else {
                        XTypedServices.SetList<dsc>(this.dscField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<dao> dao {
            get {
                if ((this.daoField == null)) {
                    this.daoField = new XTypedList<dao>(this, LinqToXsdTypeManager.Instance, daoXName);
                }
                return this.daoField;
            }
            set {
                if ((value == null)) {
                    this.daoField = null;
                }
                else {
                    if ((this.daoField == null)) {
                        this.daoField = XTypedList<dao>.Initialize(this, LinqToXsdTypeManager.Instance, value, daoXName);
                    }
                    else {
                        XTypedServices.SetList<dao>(this.daoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<daogrp> daogrp {
            get {
                if ((this.daogrpField == null)) {
                    this.daogrpField = new XTypedList<daogrp>(this, LinqToXsdTypeManager.Instance, daogrpXName);
                }
                return this.daogrpField;
            }
            set {
                if ((value == null)) {
                    this.daogrpField = null;
                }
                else {
                    if ((this.daogrpField == null)) {
                        this.daogrpField = XTypedList<daogrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, daogrpXName);
                    }
                    else {
                        XTypedServices.SetList<daogrp>(this.daogrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<thead> thead {
            get {
                if ((this.theadField == null)) {
                    this.theadField = new XTypedList<thead>(this, LinqToXsdTypeManager.Instance, theadXName);
                }
                return this.theadField;
            }
            set {
                if ((value == null)) {
                    this.theadField = null;
                }
                else {
                    if ((this.theadField == null)) {
                        this.theadField = XTypedList<thead>.Initialize(this, LinqToXsdTypeManager.Instance, value, theadXName);
                    }
                    else {
                        XTypedServices.SetList<thead>(this.theadField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c09+)*)
        /// </para>
        /// </summary>
        public virtual IList<c09> c09 {
            get {
                if ((this.c09Field == null)) {
                    this.c09Field = new XTypedList<c09>(this, LinqToXsdTypeManager.Instance, c09XName);
                }
                return this.c09Field;
            }
            set {
                if ((value == null)) {
                    this.c09Field = null;
                }
                else {
                    if ((this.c09Field == null)) {
                        this.c09Field = XTypedList<c09>.Initialize(this, LinqToXsdTypeManager.Instance, value, c09XName);
                    }
                    else {
                        XTypedServices.SetList<c09>(this.c09Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string level {
            get {
                XAttribute x = this.Attribute(levelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(levelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string otherlevel {
            get {
                XAttribute x = this.Attribute(otherlevelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(otherlevelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string tpattern {
            get {
                XAttribute x = this.Attribute(tpatternXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(tpatternXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<c08>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(didXName, typeof(did));
            localElementDictionary.Add(accessrestrictXName, typeof(accessrestrict));
            localElementDictionary.Add(accrualsXName, typeof(accruals));
            localElementDictionary.Add(acqinfoXName, typeof(acqinfo));
            localElementDictionary.Add(altformavailXName, typeof(altformavail));
            localElementDictionary.Add(appraisalXName, typeof(appraisal));
            localElementDictionary.Add(arrangementXName, typeof(arrangement));
            localElementDictionary.Add(bibliographyXName, typeof(bibliography));
            localElementDictionary.Add(bioghistXName, typeof(bioghist));
            localElementDictionary.Add(controlaccessXName, typeof(controlaccess));
            localElementDictionary.Add(custodhistXName, typeof(custodhist));
            localElementDictionary.Add(descgrpXName, typeof(descgrp));
            localElementDictionary.Add(fileplanXName, typeof(fileplan));
            localElementDictionary.Add(indexXName, typeof(index));
            localElementDictionary.Add(oddXName, typeof(odd));
            localElementDictionary.Add(originalslocXName, typeof(originalsloc));
            localElementDictionary.Add(otherfindaidXName, typeof(otherfindaid));
            localElementDictionary.Add(phystechXName, typeof(phystech));
            localElementDictionary.Add(preferciteXName, typeof(prefercite));
            localElementDictionary.Add(processinfoXName, typeof(processinfo));
            localElementDictionary.Add(relatedmaterialXName, typeof(relatedmaterial));
            localElementDictionary.Add(scopecontentXName, typeof(scopecontent));
            localElementDictionary.Add(separatedmaterialXName, typeof(separatedmaterial));
            localElementDictionary.Add(userestrictXName, typeof(userestrict));
            localElementDictionary.Add(dscXName, typeof(dsc));
            localElementDictionary.Add(daoXName, typeof(dao));
            localElementDictionary.Add(daogrpXName, typeof(daogrp));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(theadXName, typeof(thead));
            localElementDictionary.Add(c09XName, typeof(c09));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
    /// </para>
    /// </summary>
    public partial class c09 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName didXName = System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName accessrestrictXName = System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accessrestrict> accessrestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName accrualsXName = System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accruals> accrualsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName acqinfoXName = System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<acqinfo> acqinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altformavailXName = System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<altformavail> altformavailField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName appraisalXName = System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<appraisal> appraisalField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arrangementXName = System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<arrangement> arrangementField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibliographyXName = System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibliography> bibliographyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bioghistXName = System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bioghist> bioghistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName controlaccessXName = System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<controlaccess> controlaccessField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName custodhistXName = System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<custodhist> custodhistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descgrpXName = System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<descgrp> descgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName fileplanXName = System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<fileplan> fileplanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName indexXName = System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<index> indexField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName oddXName = System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<odd> oddField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName originalslocXName = System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<originalsloc> originalslocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName otherfindaidXName = System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<otherfindaid> otherfindaidField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phystechXName = System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phystech> phystechField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName preferciteXName = System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<prefercite> preferciteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName processinfoXName = System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<processinfo> processinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName relatedmaterialXName = System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<relatedmaterial> relatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName scopecontentXName = System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<scopecontent> scopecontentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName separatedmaterialXName = System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<separatedmaterial> separatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userestrictXName = System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<userestrict> userestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dscXName = System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dsc> dscField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName daoXName = System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dao> daoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName daogrpXName = System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<daogrp> daogrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName theadXName = System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<thead> theadField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName c10XName = System.Xml.Linq.XName.Get("c10", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<c10> c10Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName levelXName = System.Xml.Linq.XName.Get("level", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName otherlevelXName = System.Xml.Linq.XName.Get("otherlevel", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tpatternXName = System.Xml.Linq.XName.Get("tpattern", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("c09", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator c09(XElement xe) { return XTypedServices.ToXTypedElement<c09>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static c09() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new NamedContentModelEntity(didXName), new ChoiceContentModelEntity(new NamedContentModelEntity(accessrestrictXName), new NamedContentModelEntity(accrualsXName), new NamedContentModelEntity(acqinfoXName), new NamedContentModelEntity(altformavailXName), new NamedContentModelEntity(appraisalXName), new NamedContentModelEntity(arrangementXName), new NamedContentModelEntity(bibliographyXName), new NamedContentModelEntity(bioghistXName), new NamedContentModelEntity(controlaccessXName), new NamedContentModelEntity(custodhistXName), new NamedContentModelEntity(descgrpXName), new NamedContentModelEntity(fileplanXName), new NamedContentModelEntity(indexXName), new NamedContentModelEntity(oddXName), new NamedContentModelEntity(originalslocXName), new NamedContentModelEntity(otherfindaidXName), new NamedContentModelEntity(phystechXName), new NamedContentModelEntity(preferciteXName), new NamedContentModelEntity(processinfoXName), new NamedContentModelEntity(relatedmaterialXName), new NamedContentModelEntity(scopecontentXName), new NamedContentModelEntity(separatedmaterialXName), new NamedContentModelEntity(userestrictXName), new NamedContentModelEntity(dscXName), new NamedContentModelEntity(daoXName), new NamedContentModelEntity(daogrpXName), new NamedContentModelEntity(noteXName)), new SequenceContentModelEntity(new NamedContentModelEntity(theadXName), new NamedContentModelEntity(c10XName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public c09() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual did did {
            get {
                XElement x = this.GetElement(didXName);
                return ((did)(x));
            }
            set {
                this.SetElement(didXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<accessrestrict> accessrestrict {
            get {
                if ((this.accessrestrictField == null)) {
                    this.accessrestrictField = new XTypedList<accessrestrict>(this, LinqToXsdTypeManager.Instance, accessrestrictXName);
                }
                return this.accessrestrictField;
            }
            set {
                if ((value == null)) {
                    this.accessrestrictField = null;
                }
                else {
                    if ((this.accessrestrictField == null)) {
                        this.accessrestrictField = XTypedList<accessrestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, accessrestrictXName);
                    }
                    else {
                        XTypedServices.SetList<accessrestrict>(this.accessrestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<accruals> accruals {
            get {
                if ((this.accrualsField == null)) {
                    this.accrualsField = new XTypedList<accruals>(this, LinqToXsdTypeManager.Instance, accrualsXName);
                }
                return this.accrualsField;
            }
            set {
                if ((value == null)) {
                    this.accrualsField = null;
                }
                else {
                    if ((this.accrualsField == null)) {
                        this.accrualsField = XTypedList<accruals>.Initialize(this, LinqToXsdTypeManager.Instance, value, accrualsXName);
                    }
                    else {
                        XTypedServices.SetList<accruals>(this.accrualsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<acqinfo> acqinfo {
            get {
                if ((this.acqinfoField == null)) {
                    this.acqinfoField = new XTypedList<acqinfo>(this, LinqToXsdTypeManager.Instance, acqinfoXName);
                }
                return this.acqinfoField;
            }
            set {
                if ((value == null)) {
                    this.acqinfoField = null;
                }
                else {
                    if ((this.acqinfoField == null)) {
                        this.acqinfoField = XTypedList<acqinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, acqinfoXName);
                    }
                    else {
                        XTypedServices.SetList<acqinfo>(this.acqinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<altformavail> altformavail {
            get {
                if ((this.altformavailField == null)) {
                    this.altformavailField = new XTypedList<altformavail>(this, LinqToXsdTypeManager.Instance, altformavailXName);
                }
                return this.altformavailField;
            }
            set {
                if ((value == null)) {
                    this.altformavailField = null;
                }
                else {
                    if ((this.altformavailField == null)) {
                        this.altformavailField = XTypedList<altformavail>.Initialize(this, LinqToXsdTypeManager.Instance, value, altformavailXName);
                    }
                    else {
                        XTypedServices.SetList<altformavail>(this.altformavailField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<appraisal> appraisal {
            get {
                if ((this.appraisalField == null)) {
                    this.appraisalField = new XTypedList<appraisal>(this, LinqToXsdTypeManager.Instance, appraisalXName);
                }
                return this.appraisalField;
            }
            set {
                if ((value == null)) {
                    this.appraisalField = null;
                }
                else {
                    if ((this.appraisalField == null)) {
                        this.appraisalField = XTypedList<appraisal>.Initialize(this, LinqToXsdTypeManager.Instance, value, appraisalXName);
                    }
                    else {
                        XTypedServices.SetList<appraisal>(this.appraisalField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<arrangement> arrangement {
            get {
                if ((this.arrangementField == null)) {
                    this.arrangementField = new XTypedList<arrangement>(this, LinqToXsdTypeManager.Instance, arrangementXName);
                }
                return this.arrangementField;
            }
            set {
                if ((value == null)) {
                    this.arrangementField = null;
                }
                else {
                    if ((this.arrangementField == null)) {
                        this.arrangementField = XTypedList<arrangement>.Initialize(this, LinqToXsdTypeManager.Instance, value, arrangementXName);
                    }
                    else {
                        XTypedServices.SetList<arrangement>(this.arrangementField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<bibliography> bibliography {
            get {
                if ((this.bibliographyField == null)) {
                    this.bibliographyField = new XTypedList<bibliography>(this, LinqToXsdTypeManager.Instance, bibliographyXName);
                }
                return this.bibliographyField;
            }
            set {
                if ((value == null)) {
                    this.bibliographyField = null;
                }
                else {
                    if ((this.bibliographyField == null)) {
                        this.bibliographyField = XTypedList<bibliography>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibliographyXName);
                    }
                    else {
                        XTypedServices.SetList<bibliography>(this.bibliographyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<bioghist> bioghist {
            get {
                if ((this.bioghistField == null)) {
                    this.bioghistField = new XTypedList<bioghist>(this, LinqToXsdTypeManager.Instance, bioghistXName);
                }
                return this.bioghistField;
            }
            set {
                if ((value == null)) {
                    this.bioghistField = null;
                }
                else {
                    if ((this.bioghistField == null)) {
                        this.bioghistField = XTypedList<bioghist>.Initialize(this, LinqToXsdTypeManager.Instance, value, bioghistXName);
                    }
                    else {
                        XTypedServices.SetList<bioghist>(this.bioghistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<controlaccess> controlaccess {
            get {
                if ((this.controlaccessField == null)) {
                    this.controlaccessField = new XTypedList<controlaccess>(this, LinqToXsdTypeManager.Instance, controlaccessXName);
                }
                return this.controlaccessField;
            }
            set {
                if ((value == null)) {
                    this.controlaccessField = null;
                }
                else {
                    if ((this.controlaccessField == null)) {
                        this.controlaccessField = XTypedList<controlaccess>.Initialize(this, LinqToXsdTypeManager.Instance, value, controlaccessXName);
                    }
                    else {
                        XTypedServices.SetList<controlaccess>(this.controlaccessField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<custodhist> custodhist {
            get {
                if ((this.custodhistField == null)) {
                    this.custodhistField = new XTypedList<custodhist>(this, LinqToXsdTypeManager.Instance, custodhistXName);
                }
                return this.custodhistField;
            }
            set {
                if ((value == null)) {
                    this.custodhistField = null;
                }
                else {
                    if ((this.custodhistField == null)) {
                        this.custodhistField = XTypedList<custodhist>.Initialize(this, LinqToXsdTypeManager.Instance, value, custodhistXName);
                    }
                    else {
                        XTypedServices.SetList<custodhist>(this.custodhistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<descgrp> descgrp {
            get {
                if ((this.descgrpField == null)) {
                    this.descgrpField = new XTypedList<descgrp>(this, LinqToXsdTypeManager.Instance, descgrpXName);
                }
                return this.descgrpField;
            }
            set {
                if ((value == null)) {
                    this.descgrpField = null;
                }
                else {
                    if ((this.descgrpField == null)) {
                        this.descgrpField = XTypedList<descgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, descgrpXName);
                    }
                    else {
                        XTypedServices.SetList<descgrp>(this.descgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<fileplan> fileplan {
            get {
                if ((this.fileplanField == null)) {
                    this.fileplanField = new XTypedList<fileplan>(this, LinqToXsdTypeManager.Instance, fileplanXName);
                }
                return this.fileplanField;
            }
            set {
                if ((value == null)) {
                    this.fileplanField = null;
                }
                else {
                    if ((this.fileplanField == null)) {
                        this.fileplanField = XTypedList<fileplan>.Initialize(this, LinqToXsdTypeManager.Instance, value, fileplanXName);
                    }
                    else {
                        XTypedServices.SetList<fileplan>(this.fileplanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<index> index {
            get {
                if ((this.indexField == null)) {
                    this.indexField = new XTypedList<index>(this, LinqToXsdTypeManager.Instance, indexXName);
                }
                return this.indexField;
            }
            set {
                if ((value == null)) {
                    this.indexField = null;
                }
                else {
                    if ((this.indexField == null)) {
                        this.indexField = XTypedList<index>.Initialize(this, LinqToXsdTypeManager.Instance, value, indexXName);
                    }
                    else {
                        XTypedServices.SetList<index>(this.indexField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<odd> odd {
            get {
                if ((this.oddField == null)) {
                    this.oddField = new XTypedList<odd>(this, LinqToXsdTypeManager.Instance, oddXName);
                }
                return this.oddField;
            }
            set {
                if ((value == null)) {
                    this.oddField = null;
                }
                else {
                    if ((this.oddField == null)) {
                        this.oddField = XTypedList<odd>.Initialize(this, LinqToXsdTypeManager.Instance, value, oddXName);
                    }
                    else {
                        XTypedServices.SetList<odd>(this.oddField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<originalsloc> originalsloc {
            get {
                if ((this.originalslocField == null)) {
                    this.originalslocField = new XTypedList<originalsloc>(this, LinqToXsdTypeManager.Instance, originalslocXName);
                }
                return this.originalslocField;
            }
            set {
                if ((value == null)) {
                    this.originalslocField = null;
                }
                else {
                    if ((this.originalslocField == null)) {
                        this.originalslocField = XTypedList<originalsloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, originalslocXName);
                    }
                    else {
                        XTypedServices.SetList<originalsloc>(this.originalslocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<otherfindaid> otherfindaid {
            get {
                if ((this.otherfindaidField == null)) {
                    this.otherfindaidField = new XTypedList<otherfindaid>(this, LinqToXsdTypeManager.Instance, otherfindaidXName);
                }
                return this.otherfindaidField;
            }
            set {
                if ((value == null)) {
                    this.otherfindaidField = null;
                }
                else {
                    if ((this.otherfindaidField == null)) {
                        this.otherfindaidField = XTypedList<otherfindaid>.Initialize(this, LinqToXsdTypeManager.Instance, value, otherfindaidXName);
                    }
                    else {
                        XTypedServices.SetList<otherfindaid>(this.otherfindaidField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<phystech> phystech {
            get {
                if ((this.phystechField == null)) {
                    this.phystechField = new XTypedList<phystech>(this, LinqToXsdTypeManager.Instance, phystechXName);
                }
                return this.phystechField;
            }
            set {
                if ((value == null)) {
                    this.phystechField = null;
                }
                else {
                    if ((this.phystechField == null)) {
                        this.phystechField = XTypedList<phystech>.Initialize(this, LinqToXsdTypeManager.Instance, value, phystechXName);
                    }
                    else {
                        XTypedServices.SetList<phystech>(this.phystechField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<prefercite> prefercite {
            get {
                if ((this.preferciteField == null)) {
                    this.preferciteField = new XTypedList<prefercite>(this, LinqToXsdTypeManager.Instance, preferciteXName);
                }
                return this.preferciteField;
            }
            set {
                if ((value == null)) {
                    this.preferciteField = null;
                }
                else {
                    if ((this.preferciteField == null)) {
                        this.preferciteField = XTypedList<prefercite>.Initialize(this, LinqToXsdTypeManager.Instance, value, preferciteXName);
                    }
                    else {
                        XTypedServices.SetList<prefercite>(this.preferciteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<processinfo> processinfo {
            get {
                if ((this.processinfoField == null)) {
                    this.processinfoField = new XTypedList<processinfo>(this, LinqToXsdTypeManager.Instance, processinfoXName);
                }
                return this.processinfoField;
            }
            set {
                if ((value == null)) {
                    this.processinfoField = null;
                }
                else {
                    if ((this.processinfoField == null)) {
                        this.processinfoField = XTypedList<processinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, processinfoXName);
                    }
                    else {
                        XTypedServices.SetList<processinfo>(this.processinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<relatedmaterial> relatedmaterial {
            get {
                if ((this.relatedmaterialField == null)) {
                    this.relatedmaterialField = new XTypedList<relatedmaterial>(this, LinqToXsdTypeManager.Instance, relatedmaterialXName);
                }
                return this.relatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.relatedmaterialField = null;
                }
                else {
                    if ((this.relatedmaterialField == null)) {
                        this.relatedmaterialField = XTypedList<relatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, relatedmaterialXName);
                    }
                    else {
                        XTypedServices.SetList<relatedmaterial>(this.relatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<scopecontent> scopecontent {
            get {
                if ((this.scopecontentField == null)) {
                    this.scopecontentField = new XTypedList<scopecontent>(this, LinqToXsdTypeManager.Instance, scopecontentXName);
                }
                return this.scopecontentField;
            }
            set {
                if ((value == null)) {
                    this.scopecontentField = null;
                }
                else {
                    if ((this.scopecontentField == null)) {
                        this.scopecontentField = XTypedList<scopecontent>.Initialize(this, LinqToXsdTypeManager.Instance, value, scopecontentXName);
                    }
                    else {
                        XTypedServices.SetList<scopecontent>(this.scopecontentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<separatedmaterial> separatedmaterial {
            get {
                if ((this.separatedmaterialField == null)) {
                    this.separatedmaterialField = new XTypedList<separatedmaterial>(this, LinqToXsdTypeManager.Instance, separatedmaterialXName);
                }
                return this.separatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.separatedmaterialField = null;
                }
                else {
                    if ((this.separatedmaterialField == null)) {
                        this.separatedmaterialField = XTypedList<separatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, separatedmaterialXName);
                    }
                    else {
                        XTypedServices.SetList<separatedmaterial>(this.separatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<userestrict> userestrict {
            get {
                if ((this.userestrictField == null)) {
                    this.userestrictField = new XTypedList<userestrict>(this, LinqToXsdTypeManager.Instance, userestrictXName);
                }
                return this.userestrictField;
            }
            set {
                if ((value == null)) {
                    this.userestrictField = null;
                }
                else {
                    if ((this.userestrictField == null)) {
                        this.userestrictField = XTypedList<userestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, userestrictXName);
                    }
                    else {
                        XTypedServices.SetList<userestrict>(this.userestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<dsc> dsc {
            get {
                if ((this.dscField == null)) {
                    this.dscField = new XTypedList<dsc>(this, LinqToXsdTypeManager.Instance, dscXName);
                }
                return this.dscField;
            }
            set {
                if ((value == null)) {
                    this.dscField = null;
                }
                else {
                    if ((this.dscField == null)) {
                        this.dscField = XTypedList<dsc>.Initialize(this, LinqToXsdTypeManager.Instance, value, dscXName);
                    }
                    else {
                        XTypedServices.SetList<dsc>(this.dscField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<dao> dao {
            get {
                if ((this.daoField == null)) {
                    this.daoField = new XTypedList<dao>(this, LinqToXsdTypeManager.Instance, daoXName);
                }
                return this.daoField;
            }
            set {
                if ((value == null)) {
                    this.daoField = null;
                }
                else {
                    if ((this.daoField == null)) {
                        this.daoField = XTypedList<dao>.Initialize(this, LinqToXsdTypeManager.Instance, value, daoXName);
                    }
                    else {
                        XTypedServices.SetList<dao>(this.daoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<daogrp> daogrp {
            get {
                if ((this.daogrpField == null)) {
                    this.daogrpField = new XTypedList<daogrp>(this, LinqToXsdTypeManager.Instance, daogrpXName);
                }
                return this.daogrpField;
            }
            set {
                if ((value == null)) {
                    this.daogrpField = null;
                }
                else {
                    if ((this.daogrpField == null)) {
                        this.daogrpField = XTypedList<daogrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, daogrpXName);
                    }
                    else {
                        XTypedServices.SetList<daogrp>(this.daogrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<thead> thead {
            get {
                if ((this.theadField == null)) {
                    this.theadField = new XTypedList<thead>(this, LinqToXsdTypeManager.Instance, theadXName);
                }
                return this.theadField;
            }
            set {
                if ((value == null)) {
                    this.theadField = null;
                }
                else {
                    if ((this.theadField == null)) {
                        this.theadField = XTypedList<thead>.Initialize(this, LinqToXsdTypeManager.Instance, value, theadXName);
                    }
                    else {
                        XTypedServices.SetList<thead>(this.theadField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c10+)*)
        /// </para>
        /// </summary>
        public virtual IList<c10> c10 {
            get {
                if ((this.c10Field == null)) {
                    this.c10Field = new XTypedList<c10>(this, LinqToXsdTypeManager.Instance, c10XName);
                }
                return this.c10Field;
            }
            set {
                if ((value == null)) {
                    this.c10Field = null;
                }
                else {
                    if ((this.c10Field == null)) {
                        this.c10Field = XTypedList<c10>.Initialize(this, LinqToXsdTypeManager.Instance, value, c10XName);
                    }
                    else {
                        XTypedServices.SetList<c10>(this.c10Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string level {
            get {
                XAttribute x = this.Attribute(levelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(levelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string otherlevel {
            get {
                XAttribute x = this.Attribute(otherlevelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(otherlevelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string tpattern {
            get {
                XAttribute x = this.Attribute(tpatternXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(tpatternXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<c09>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(didXName, typeof(did));
            localElementDictionary.Add(accessrestrictXName, typeof(accessrestrict));
            localElementDictionary.Add(accrualsXName, typeof(accruals));
            localElementDictionary.Add(acqinfoXName, typeof(acqinfo));
            localElementDictionary.Add(altformavailXName, typeof(altformavail));
            localElementDictionary.Add(appraisalXName, typeof(appraisal));
            localElementDictionary.Add(arrangementXName, typeof(arrangement));
            localElementDictionary.Add(bibliographyXName, typeof(bibliography));
            localElementDictionary.Add(bioghistXName, typeof(bioghist));
            localElementDictionary.Add(controlaccessXName, typeof(controlaccess));
            localElementDictionary.Add(custodhistXName, typeof(custodhist));
            localElementDictionary.Add(descgrpXName, typeof(descgrp));
            localElementDictionary.Add(fileplanXName, typeof(fileplan));
            localElementDictionary.Add(indexXName, typeof(index));
            localElementDictionary.Add(oddXName, typeof(odd));
            localElementDictionary.Add(originalslocXName, typeof(originalsloc));
            localElementDictionary.Add(otherfindaidXName, typeof(otherfindaid));
            localElementDictionary.Add(phystechXName, typeof(phystech));
            localElementDictionary.Add(preferciteXName, typeof(prefercite));
            localElementDictionary.Add(processinfoXName, typeof(processinfo));
            localElementDictionary.Add(relatedmaterialXName, typeof(relatedmaterial));
            localElementDictionary.Add(scopecontentXName, typeof(scopecontent));
            localElementDictionary.Add(separatedmaterialXName, typeof(separatedmaterial));
            localElementDictionary.Add(userestrictXName, typeof(userestrict));
            localElementDictionary.Add(dscXName, typeof(dsc));
            localElementDictionary.Add(daoXName, typeof(dao));
            localElementDictionary.Add(daogrpXName, typeof(daogrp));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(theadXName, typeof(thead));
            localElementDictionary.Add(c10XName, typeof(c10));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
    /// </para>
    /// </summary>
    public partial class c10 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName didXName = System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName accessrestrictXName = System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accessrestrict> accessrestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName accrualsXName = System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accruals> accrualsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName acqinfoXName = System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<acqinfo> acqinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altformavailXName = System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<altformavail> altformavailField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName appraisalXName = System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<appraisal> appraisalField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arrangementXName = System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<arrangement> arrangementField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibliographyXName = System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibliography> bibliographyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bioghistXName = System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bioghist> bioghistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName controlaccessXName = System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<controlaccess> controlaccessField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName custodhistXName = System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<custodhist> custodhistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descgrpXName = System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<descgrp> descgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName fileplanXName = System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<fileplan> fileplanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName indexXName = System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<index> indexField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName oddXName = System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<odd> oddField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName originalslocXName = System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<originalsloc> originalslocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName otherfindaidXName = System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<otherfindaid> otherfindaidField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phystechXName = System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phystech> phystechField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName preferciteXName = System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<prefercite> preferciteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName processinfoXName = System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<processinfo> processinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName relatedmaterialXName = System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<relatedmaterial> relatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName scopecontentXName = System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<scopecontent> scopecontentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName separatedmaterialXName = System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<separatedmaterial> separatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userestrictXName = System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<userestrict> userestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dscXName = System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dsc> dscField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName daoXName = System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dao> daoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName daogrpXName = System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<daogrp> daogrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName theadXName = System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<thead> theadField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName c11XName = System.Xml.Linq.XName.Get("c11", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<c11> c11Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName levelXName = System.Xml.Linq.XName.Get("level", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName otherlevelXName = System.Xml.Linq.XName.Get("otherlevel", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tpatternXName = System.Xml.Linq.XName.Get("tpattern", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("c10", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator c10(XElement xe) { return XTypedServices.ToXTypedElement<c10>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static c10() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new NamedContentModelEntity(didXName), new ChoiceContentModelEntity(new NamedContentModelEntity(accessrestrictXName), new NamedContentModelEntity(accrualsXName), new NamedContentModelEntity(acqinfoXName), new NamedContentModelEntity(altformavailXName), new NamedContentModelEntity(appraisalXName), new NamedContentModelEntity(arrangementXName), new NamedContentModelEntity(bibliographyXName), new NamedContentModelEntity(bioghistXName), new NamedContentModelEntity(controlaccessXName), new NamedContentModelEntity(custodhistXName), new NamedContentModelEntity(descgrpXName), new NamedContentModelEntity(fileplanXName), new NamedContentModelEntity(indexXName), new NamedContentModelEntity(oddXName), new NamedContentModelEntity(originalslocXName), new NamedContentModelEntity(otherfindaidXName), new NamedContentModelEntity(phystechXName), new NamedContentModelEntity(preferciteXName), new NamedContentModelEntity(processinfoXName), new NamedContentModelEntity(relatedmaterialXName), new NamedContentModelEntity(scopecontentXName), new NamedContentModelEntity(separatedmaterialXName), new NamedContentModelEntity(userestrictXName), new NamedContentModelEntity(dscXName), new NamedContentModelEntity(daoXName), new NamedContentModelEntity(daogrpXName), new NamedContentModelEntity(noteXName)), new SequenceContentModelEntity(new NamedContentModelEntity(theadXName), new NamedContentModelEntity(c11XName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public c10() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual did did {
            get {
                XElement x = this.GetElement(didXName);
                return ((did)(x));
            }
            set {
                this.SetElement(didXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<accessrestrict> accessrestrict {
            get {
                if ((this.accessrestrictField == null)) {
                    this.accessrestrictField = new XTypedList<accessrestrict>(this, LinqToXsdTypeManager.Instance, accessrestrictXName);
                }
                return this.accessrestrictField;
            }
            set {
                if ((value == null)) {
                    this.accessrestrictField = null;
                }
                else {
                    if ((this.accessrestrictField == null)) {
                        this.accessrestrictField = XTypedList<accessrestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, accessrestrictXName);
                    }
                    else {
                        XTypedServices.SetList<accessrestrict>(this.accessrestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<accruals> accruals {
            get {
                if ((this.accrualsField == null)) {
                    this.accrualsField = new XTypedList<accruals>(this, LinqToXsdTypeManager.Instance, accrualsXName);
                }
                return this.accrualsField;
            }
            set {
                if ((value == null)) {
                    this.accrualsField = null;
                }
                else {
                    if ((this.accrualsField == null)) {
                        this.accrualsField = XTypedList<accruals>.Initialize(this, LinqToXsdTypeManager.Instance, value, accrualsXName);
                    }
                    else {
                        XTypedServices.SetList<accruals>(this.accrualsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<acqinfo> acqinfo {
            get {
                if ((this.acqinfoField == null)) {
                    this.acqinfoField = new XTypedList<acqinfo>(this, LinqToXsdTypeManager.Instance, acqinfoXName);
                }
                return this.acqinfoField;
            }
            set {
                if ((value == null)) {
                    this.acqinfoField = null;
                }
                else {
                    if ((this.acqinfoField == null)) {
                        this.acqinfoField = XTypedList<acqinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, acqinfoXName);
                    }
                    else {
                        XTypedServices.SetList<acqinfo>(this.acqinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<altformavail> altformavail {
            get {
                if ((this.altformavailField == null)) {
                    this.altformavailField = new XTypedList<altformavail>(this, LinqToXsdTypeManager.Instance, altformavailXName);
                }
                return this.altformavailField;
            }
            set {
                if ((value == null)) {
                    this.altformavailField = null;
                }
                else {
                    if ((this.altformavailField == null)) {
                        this.altformavailField = XTypedList<altformavail>.Initialize(this, LinqToXsdTypeManager.Instance, value, altformavailXName);
                    }
                    else {
                        XTypedServices.SetList<altformavail>(this.altformavailField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<appraisal> appraisal {
            get {
                if ((this.appraisalField == null)) {
                    this.appraisalField = new XTypedList<appraisal>(this, LinqToXsdTypeManager.Instance, appraisalXName);
                }
                return this.appraisalField;
            }
            set {
                if ((value == null)) {
                    this.appraisalField = null;
                }
                else {
                    if ((this.appraisalField == null)) {
                        this.appraisalField = XTypedList<appraisal>.Initialize(this, LinqToXsdTypeManager.Instance, value, appraisalXName);
                    }
                    else {
                        XTypedServices.SetList<appraisal>(this.appraisalField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<arrangement> arrangement {
            get {
                if ((this.arrangementField == null)) {
                    this.arrangementField = new XTypedList<arrangement>(this, LinqToXsdTypeManager.Instance, arrangementXName);
                }
                return this.arrangementField;
            }
            set {
                if ((value == null)) {
                    this.arrangementField = null;
                }
                else {
                    if ((this.arrangementField == null)) {
                        this.arrangementField = XTypedList<arrangement>.Initialize(this, LinqToXsdTypeManager.Instance, value, arrangementXName);
                    }
                    else {
                        XTypedServices.SetList<arrangement>(this.arrangementField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<bibliography> bibliography {
            get {
                if ((this.bibliographyField == null)) {
                    this.bibliographyField = new XTypedList<bibliography>(this, LinqToXsdTypeManager.Instance, bibliographyXName);
                }
                return this.bibliographyField;
            }
            set {
                if ((value == null)) {
                    this.bibliographyField = null;
                }
                else {
                    if ((this.bibliographyField == null)) {
                        this.bibliographyField = XTypedList<bibliography>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibliographyXName);
                    }
                    else {
                        XTypedServices.SetList<bibliography>(this.bibliographyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<bioghist> bioghist {
            get {
                if ((this.bioghistField == null)) {
                    this.bioghistField = new XTypedList<bioghist>(this, LinqToXsdTypeManager.Instance, bioghistXName);
                }
                return this.bioghistField;
            }
            set {
                if ((value == null)) {
                    this.bioghistField = null;
                }
                else {
                    if ((this.bioghistField == null)) {
                        this.bioghistField = XTypedList<bioghist>.Initialize(this, LinqToXsdTypeManager.Instance, value, bioghistXName);
                    }
                    else {
                        XTypedServices.SetList<bioghist>(this.bioghistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<controlaccess> controlaccess {
            get {
                if ((this.controlaccessField == null)) {
                    this.controlaccessField = new XTypedList<controlaccess>(this, LinqToXsdTypeManager.Instance, controlaccessXName);
                }
                return this.controlaccessField;
            }
            set {
                if ((value == null)) {
                    this.controlaccessField = null;
                }
                else {
                    if ((this.controlaccessField == null)) {
                        this.controlaccessField = XTypedList<controlaccess>.Initialize(this, LinqToXsdTypeManager.Instance, value, controlaccessXName);
                    }
                    else {
                        XTypedServices.SetList<controlaccess>(this.controlaccessField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<custodhist> custodhist {
            get {
                if ((this.custodhistField == null)) {
                    this.custodhistField = new XTypedList<custodhist>(this, LinqToXsdTypeManager.Instance, custodhistXName);
                }
                return this.custodhistField;
            }
            set {
                if ((value == null)) {
                    this.custodhistField = null;
                }
                else {
                    if ((this.custodhistField == null)) {
                        this.custodhistField = XTypedList<custodhist>.Initialize(this, LinqToXsdTypeManager.Instance, value, custodhistXName);
                    }
                    else {
                        XTypedServices.SetList<custodhist>(this.custodhistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<descgrp> descgrp {
            get {
                if ((this.descgrpField == null)) {
                    this.descgrpField = new XTypedList<descgrp>(this, LinqToXsdTypeManager.Instance, descgrpXName);
                }
                return this.descgrpField;
            }
            set {
                if ((value == null)) {
                    this.descgrpField = null;
                }
                else {
                    if ((this.descgrpField == null)) {
                        this.descgrpField = XTypedList<descgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, descgrpXName);
                    }
                    else {
                        XTypedServices.SetList<descgrp>(this.descgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<fileplan> fileplan {
            get {
                if ((this.fileplanField == null)) {
                    this.fileplanField = new XTypedList<fileplan>(this, LinqToXsdTypeManager.Instance, fileplanXName);
                }
                return this.fileplanField;
            }
            set {
                if ((value == null)) {
                    this.fileplanField = null;
                }
                else {
                    if ((this.fileplanField == null)) {
                        this.fileplanField = XTypedList<fileplan>.Initialize(this, LinqToXsdTypeManager.Instance, value, fileplanXName);
                    }
                    else {
                        XTypedServices.SetList<fileplan>(this.fileplanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<index> index {
            get {
                if ((this.indexField == null)) {
                    this.indexField = new XTypedList<index>(this, LinqToXsdTypeManager.Instance, indexXName);
                }
                return this.indexField;
            }
            set {
                if ((value == null)) {
                    this.indexField = null;
                }
                else {
                    if ((this.indexField == null)) {
                        this.indexField = XTypedList<index>.Initialize(this, LinqToXsdTypeManager.Instance, value, indexXName);
                    }
                    else {
                        XTypedServices.SetList<index>(this.indexField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<odd> odd {
            get {
                if ((this.oddField == null)) {
                    this.oddField = new XTypedList<odd>(this, LinqToXsdTypeManager.Instance, oddXName);
                }
                return this.oddField;
            }
            set {
                if ((value == null)) {
                    this.oddField = null;
                }
                else {
                    if ((this.oddField == null)) {
                        this.oddField = XTypedList<odd>.Initialize(this, LinqToXsdTypeManager.Instance, value, oddXName);
                    }
                    else {
                        XTypedServices.SetList<odd>(this.oddField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<originalsloc> originalsloc {
            get {
                if ((this.originalslocField == null)) {
                    this.originalslocField = new XTypedList<originalsloc>(this, LinqToXsdTypeManager.Instance, originalslocXName);
                }
                return this.originalslocField;
            }
            set {
                if ((value == null)) {
                    this.originalslocField = null;
                }
                else {
                    if ((this.originalslocField == null)) {
                        this.originalslocField = XTypedList<originalsloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, originalslocXName);
                    }
                    else {
                        XTypedServices.SetList<originalsloc>(this.originalslocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<otherfindaid> otherfindaid {
            get {
                if ((this.otherfindaidField == null)) {
                    this.otherfindaidField = new XTypedList<otherfindaid>(this, LinqToXsdTypeManager.Instance, otherfindaidXName);
                }
                return this.otherfindaidField;
            }
            set {
                if ((value == null)) {
                    this.otherfindaidField = null;
                }
                else {
                    if ((this.otherfindaidField == null)) {
                        this.otherfindaidField = XTypedList<otherfindaid>.Initialize(this, LinqToXsdTypeManager.Instance, value, otherfindaidXName);
                    }
                    else {
                        XTypedServices.SetList<otherfindaid>(this.otherfindaidField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<phystech> phystech {
            get {
                if ((this.phystechField == null)) {
                    this.phystechField = new XTypedList<phystech>(this, LinqToXsdTypeManager.Instance, phystechXName);
                }
                return this.phystechField;
            }
            set {
                if ((value == null)) {
                    this.phystechField = null;
                }
                else {
                    if ((this.phystechField == null)) {
                        this.phystechField = XTypedList<phystech>.Initialize(this, LinqToXsdTypeManager.Instance, value, phystechXName);
                    }
                    else {
                        XTypedServices.SetList<phystech>(this.phystechField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<prefercite> prefercite {
            get {
                if ((this.preferciteField == null)) {
                    this.preferciteField = new XTypedList<prefercite>(this, LinqToXsdTypeManager.Instance, preferciteXName);
                }
                return this.preferciteField;
            }
            set {
                if ((value == null)) {
                    this.preferciteField = null;
                }
                else {
                    if ((this.preferciteField == null)) {
                        this.preferciteField = XTypedList<prefercite>.Initialize(this, LinqToXsdTypeManager.Instance, value, preferciteXName);
                    }
                    else {
                        XTypedServices.SetList<prefercite>(this.preferciteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<processinfo> processinfo {
            get {
                if ((this.processinfoField == null)) {
                    this.processinfoField = new XTypedList<processinfo>(this, LinqToXsdTypeManager.Instance, processinfoXName);
                }
                return this.processinfoField;
            }
            set {
                if ((value == null)) {
                    this.processinfoField = null;
                }
                else {
                    if ((this.processinfoField == null)) {
                        this.processinfoField = XTypedList<processinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, processinfoXName);
                    }
                    else {
                        XTypedServices.SetList<processinfo>(this.processinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<relatedmaterial> relatedmaterial {
            get {
                if ((this.relatedmaterialField == null)) {
                    this.relatedmaterialField = new XTypedList<relatedmaterial>(this, LinqToXsdTypeManager.Instance, relatedmaterialXName);
                }
                return this.relatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.relatedmaterialField = null;
                }
                else {
                    if ((this.relatedmaterialField == null)) {
                        this.relatedmaterialField = XTypedList<relatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, relatedmaterialXName);
                    }
                    else {
                        XTypedServices.SetList<relatedmaterial>(this.relatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<scopecontent> scopecontent {
            get {
                if ((this.scopecontentField == null)) {
                    this.scopecontentField = new XTypedList<scopecontent>(this, LinqToXsdTypeManager.Instance, scopecontentXName);
                }
                return this.scopecontentField;
            }
            set {
                if ((value == null)) {
                    this.scopecontentField = null;
                }
                else {
                    if ((this.scopecontentField == null)) {
                        this.scopecontentField = XTypedList<scopecontent>.Initialize(this, LinqToXsdTypeManager.Instance, value, scopecontentXName);
                    }
                    else {
                        XTypedServices.SetList<scopecontent>(this.scopecontentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<separatedmaterial> separatedmaterial {
            get {
                if ((this.separatedmaterialField == null)) {
                    this.separatedmaterialField = new XTypedList<separatedmaterial>(this, LinqToXsdTypeManager.Instance, separatedmaterialXName);
                }
                return this.separatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.separatedmaterialField = null;
                }
                else {
                    if ((this.separatedmaterialField == null)) {
                        this.separatedmaterialField = XTypedList<separatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, separatedmaterialXName);
                    }
                    else {
                        XTypedServices.SetList<separatedmaterial>(this.separatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<userestrict> userestrict {
            get {
                if ((this.userestrictField == null)) {
                    this.userestrictField = new XTypedList<userestrict>(this, LinqToXsdTypeManager.Instance, userestrictXName);
                }
                return this.userestrictField;
            }
            set {
                if ((value == null)) {
                    this.userestrictField = null;
                }
                else {
                    if ((this.userestrictField == null)) {
                        this.userestrictField = XTypedList<userestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, userestrictXName);
                    }
                    else {
                        XTypedServices.SetList<userestrict>(this.userestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<dsc> dsc {
            get {
                if ((this.dscField == null)) {
                    this.dscField = new XTypedList<dsc>(this, LinqToXsdTypeManager.Instance, dscXName);
                }
                return this.dscField;
            }
            set {
                if ((value == null)) {
                    this.dscField = null;
                }
                else {
                    if ((this.dscField == null)) {
                        this.dscField = XTypedList<dsc>.Initialize(this, LinqToXsdTypeManager.Instance, value, dscXName);
                    }
                    else {
                        XTypedServices.SetList<dsc>(this.dscField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<dao> dao {
            get {
                if ((this.daoField == null)) {
                    this.daoField = new XTypedList<dao>(this, LinqToXsdTypeManager.Instance, daoXName);
                }
                return this.daoField;
            }
            set {
                if ((value == null)) {
                    this.daoField = null;
                }
                else {
                    if ((this.daoField == null)) {
                        this.daoField = XTypedList<dao>.Initialize(this, LinqToXsdTypeManager.Instance, value, daoXName);
                    }
                    else {
                        XTypedServices.SetList<dao>(this.daoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<daogrp> daogrp {
            get {
                if ((this.daogrpField == null)) {
                    this.daogrpField = new XTypedList<daogrp>(this, LinqToXsdTypeManager.Instance, daogrpXName);
                }
                return this.daogrpField;
            }
            set {
                if ((value == null)) {
                    this.daogrpField = null;
                }
                else {
                    if ((this.daogrpField == null)) {
                        this.daogrpField = XTypedList<daogrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, daogrpXName);
                    }
                    else {
                        XTypedServices.SetList<daogrp>(this.daogrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<thead> thead {
            get {
                if ((this.theadField == null)) {
                    this.theadField = new XTypedList<thead>(this, LinqToXsdTypeManager.Instance, theadXName);
                }
                return this.theadField;
            }
            set {
                if ((value == null)) {
                    this.theadField = null;
                }
                else {
                    if ((this.theadField == null)) {
                        this.theadField = XTypedList<thead>.Initialize(this, LinqToXsdTypeManager.Instance, value, theadXName);
                    }
                    else {
                        XTypedServices.SetList<thead>(this.theadField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c11+)*)
        /// </para>
        /// </summary>
        public virtual IList<c11> c11 {
            get {
                if ((this.c11Field == null)) {
                    this.c11Field = new XTypedList<c11>(this, LinqToXsdTypeManager.Instance, c11XName);
                }
                return this.c11Field;
            }
            set {
                if ((value == null)) {
                    this.c11Field = null;
                }
                else {
                    if ((this.c11Field == null)) {
                        this.c11Field = XTypedList<c11>.Initialize(this, LinqToXsdTypeManager.Instance, value, c11XName);
                    }
                    else {
                        XTypedServices.SetList<c11>(this.c11Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string level {
            get {
                XAttribute x = this.Attribute(levelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(levelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string otherlevel {
            get {
                XAttribute x = this.Attribute(otherlevelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(otherlevelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string tpattern {
            get {
                XAttribute x = this.Attribute(tpatternXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(tpatternXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<c10>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(didXName, typeof(did));
            localElementDictionary.Add(accessrestrictXName, typeof(accessrestrict));
            localElementDictionary.Add(accrualsXName, typeof(accruals));
            localElementDictionary.Add(acqinfoXName, typeof(acqinfo));
            localElementDictionary.Add(altformavailXName, typeof(altformavail));
            localElementDictionary.Add(appraisalXName, typeof(appraisal));
            localElementDictionary.Add(arrangementXName, typeof(arrangement));
            localElementDictionary.Add(bibliographyXName, typeof(bibliography));
            localElementDictionary.Add(bioghistXName, typeof(bioghist));
            localElementDictionary.Add(controlaccessXName, typeof(controlaccess));
            localElementDictionary.Add(custodhistXName, typeof(custodhist));
            localElementDictionary.Add(descgrpXName, typeof(descgrp));
            localElementDictionary.Add(fileplanXName, typeof(fileplan));
            localElementDictionary.Add(indexXName, typeof(index));
            localElementDictionary.Add(oddXName, typeof(odd));
            localElementDictionary.Add(originalslocXName, typeof(originalsloc));
            localElementDictionary.Add(otherfindaidXName, typeof(otherfindaid));
            localElementDictionary.Add(phystechXName, typeof(phystech));
            localElementDictionary.Add(preferciteXName, typeof(prefercite));
            localElementDictionary.Add(processinfoXName, typeof(processinfo));
            localElementDictionary.Add(relatedmaterialXName, typeof(relatedmaterial));
            localElementDictionary.Add(scopecontentXName, typeof(scopecontent));
            localElementDictionary.Add(separatedmaterialXName, typeof(separatedmaterial));
            localElementDictionary.Add(userestrictXName, typeof(userestrict));
            localElementDictionary.Add(dscXName, typeof(dsc));
            localElementDictionary.Add(daoXName, typeof(dao));
            localElementDictionary.Add(daogrpXName, typeof(daogrp));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(theadXName, typeof(thead));
            localElementDictionary.Add(c11XName, typeof(c11));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
    /// </para>
    /// </summary>
    public partial class c11 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName didXName = System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName accessrestrictXName = System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accessrestrict> accessrestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName accrualsXName = System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accruals> accrualsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName acqinfoXName = System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<acqinfo> acqinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altformavailXName = System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<altformavail> altformavailField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName appraisalXName = System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<appraisal> appraisalField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arrangementXName = System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<arrangement> arrangementField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibliographyXName = System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibliography> bibliographyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bioghistXName = System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bioghist> bioghistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName controlaccessXName = System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<controlaccess> controlaccessField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName custodhistXName = System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<custodhist> custodhistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descgrpXName = System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<descgrp> descgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName fileplanXName = System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<fileplan> fileplanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName indexXName = System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<index> indexField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName oddXName = System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<odd> oddField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName originalslocXName = System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<originalsloc> originalslocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName otherfindaidXName = System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<otherfindaid> otherfindaidField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phystechXName = System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phystech> phystechField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName preferciteXName = System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<prefercite> preferciteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName processinfoXName = System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<processinfo> processinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName relatedmaterialXName = System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<relatedmaterial> relatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName scopecontentXName = System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<scopecontent> scopecontentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName separatedmaterialXName = System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<separatedmaterial> separatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userestrictXName = System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<userestrict> userestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dscXName = System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dsc> dscField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName daoXName = System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dao> daoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName daogrpXName = System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<daogrp> daogrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName theadXName = System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<thead> theadField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName c12XName = System.Xml.Linq.XName.Get("c12", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<c12> c12Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName levelXName = System.Xml.Linq.XName.Get("level", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName otherlevelXName = System.Xml.Linq.XName.Get("otherlevel", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tpatternXName = System.Xml.Linq.XName.Get("tpattern", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("c11", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator c11(XElement xe) { return XTypedServices.ToXTypedElement<c11>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static c11() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new NamedContentModelEntity(didXName), new ChoiceContentModelEntity(new NamedContentModelEntity(accessrestrictXName), new NamedContentModelEntity(accrualsXName), new NamedContentModelEntity(acqinfoXName), new NamedContentModelEntity(altformavailXName), new NamedContentModelEntity(appraisalXName), new NamedContentModelEntity(arrangementXName), new NamedContentModelEntity(bibliographyXName), new NamedContentModelEntity(bioghistXName), new NamedContentModelEntity(controlaccessXName), new NamedContentModelEntity(custodhistXName), new NamedContentModelEntity(descgrpXName), new NamedContentModelEntity(fileplanXName), new NamedContentModelEntity(indexXName), new NamedContentModelEntity(oddXName), new NamedContentModelEntity(originalslocXName), new NamedContentModelEntity(otherfindaidXName), new NamedContentModelEntity(phystechXName), new NamedContentModelEntity(preferciteXName), new NamedContentModelEntity(processinfoXName), new NamedContentModelEntity(relatedmaterialXName), new NamedContentModelEntity(scopecontentXName), new NamedContentModelEntity(separatedmaterialXName), new NamedContentModelEntity(userestrictXName), new NamedContentModelEntity(dscXName), new NamedContentModelEntity(daoXName), new NamedContentModelEntity(daogrpXName), new NamedContentModelEntity(noteXName)), new SequenceContentModelEntity(new NamedContentModelEntity(theadXName), new NamedContentModelEntity(c12XName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public c11() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual did did {
            get {
                XElement x = this.GetElement(didXName);
                return ((did)(x));
            }
            set {
                this.SetElement(didXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<accessrestrict> accessrestrict {
            get {
                if ((this.accessrestrictField == null)) {
                    this.accessrestrictField = new XTypedList<accessrestrict>(this, LinqToXsdTypeManager.Instance, accessrestrictXName);
                }
                return this.accessrestrictField;
            }
            set {
                if ((value == null)) {
                    this.accessrestrictField = null;
                }
                else {
                    if ((this.accessrestrictField == null)) {
                        this.accessrestrictField = XTypedList<accessrestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, accessrestrictXName);
                    }
                    else {
                        XTypedServices.SetList<accessrestrict>(this.accessrestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<accruals> accruals {
            get {
                if ((this.accrualsField == null)) {
                    this.accrualsField = new XTypedList<accruals>(this, LinqToXsdTypeManager.Instance, accrualsXName);
                }
                return this.accrualsField;
            }
            set {
                if ((value == null)) {
                    this.accrualsField = null;
                }
                else {
                    if ((this.accrualsField == null)) {
                        this.accrualsField = XTypedList<accruals>.Initialize(this, LinqToXsdTypeManager.Instance, value, accrualsXName);
                    }
                    else {
                        XTypedServices.SetList<accruals>(this.accrualsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<acqinfo> acqinfo {
            get {
                if ((this.acqinfoField == null)) {
                    this.acqinfoField = new XTypedList<acqinfo>(this, LinqToXsdTypeManager.Instance, acqinfoXName);
                }
                return this.acqinfoField;
            }
            set {
                if ((value == null)) {
                    this.acqinfoField = null;
                }
                else {
                    if ((this.acqinfoField == null)) {
                        this.acqinfoField = XTypedList<acqinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, acqinfoXName);
                    }
                    else {
                        XTypedServices.SetList<acqinfo>(this.acqinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<altformavail> altformavail {
            get {
                if ((this.altformavailField == null)) {
                    this.altformavailField = new XTypedList<altformavail>(this, LinqToXsdTypeManager.Instance, altformavailXName);
                }
                return this.altformavailField;
            }
            set {
                if ((value == null)) {
                    this.altformavailField = null;
                }
                else {
                    if ((this.altformavailField == null)) {
                        this.altformavailField = XTypedList<altformavail>.Initialize(this, LinqToXsdTypeManager.Instance, value, altformavailXName);
                    }
                    else {
                        XTypedServices.SetList<altformavail>(this.altformavailField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<appraisal> appraisal {
            get {
                if ((this.appraisalField == null)) {
                    this.appraisalField = new XTypedList<appraisal>(this, LinqToXsdTypeManager.Instance, appraisalXName);
                }
                return this.appraisalField;
            }
            set {
                if ((value == null)) {
                    this.appraisalField = null;
                }
                else {
                    if ((this.appraisalField == null)) {
                        this.appraisalField = XTypedList<appraisal>.Initialize(this, LinqToXsdTypeManager.Instance, value, appraisalXName);
                    }
                    else {
                        XTypedServices.SetList<appraisal>(this.appraisalField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<arrangement> arrangement {
            get {
                if ((this.arrangementField == null)) {
                    this.arrangementField = new XTypedList<arrangement>(this, LinqToXsdTypeManager.Instance, arrangementXName);
                }
                return this.arrangementField;
            }
            set {
                if ((value == null)) {
                    this.arrangementField = null;
                }
                else {
                    if ((this.arrangementField == null)) {
                        this.arrangementField = XTypedList<arrangement>.Initialize(this, LinqToXsdTypeManager.Instance, value, arrangementXName);
                    }
                    else {
                        XTypedServices.SetList<arrangement>(this.arrangementField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<bibliography> bibliography {
            get {
                if ((this.bibliographyField == null)) {
                    this.bibliographyField = new XTypedList<bibliography>(this, LinqToXsdTypeManager.Instance, bibliographyXName);
                }
                return this.bibliographyField;
            }
            set {
                if ((value == null)) {
                    this.bibliographyField = null;
                }
                else {
                    if ((this.bibliographyField == null)) {
                        this.bibliographyField = XTypedList<bibliography>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibliographyXName);
                    }
                    else {
                        XTypedServices.SetList<bibliography>(this.bibliographyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<bioghist> bioghist {
            get {
                if ((this.bioghistField == null)) {
                    this.bioghistField = new XTypedList<bioghist>(this, LinqToXsdTypeManager.Instance, bioghistXName);
                }
                return this.bioghistField;
            }
            set {
                if ((value == null)) {
                    this.bioghistField = null;
                }
                else {
                    if ((this.bioghistField == null)) {
                        this.bioghistField = XTypedList<bioghist>.Initialize(this, LinqToXsdTypeManager.Instance, value, bioghistXName);
                    }
                    else {
                        XTypedServices.SetList<bioghist>(this.bioghistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<controlaccess> controlaccess {
            get {
                if ((this.controlaccessField == null)) {
                    this.controlaccessField = new XTypedList<controlaccess>(this, LinqToXsdTypeManager.Instance, controlaccessXName);
                }
                return this.controlaccessField;
            }
            set {
                if ((value == null)) {
                    this.controlaccessField = null;
                }
                else {
                    if ((this.controlaccessField == null)) {
                        this.controlaccessField = XTypedList<controlaccess>.Initialize(this, LinqToXsdTypeManager.Instance, value, controlaccessXName);
                    }
                    else {
                        XTypedServices.SetList<controlaccess>(this.controlaccessField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<custodhist> custodhist {
            get {
                if ((this.custodhistField == null)) {
                    this.custodhistField = new XTypedList<custodhist>(this, LinqToXsdTypeManager.Instance, custodhistXName);
                }
                return this.custodhistField;
            }
            set {
                if ((value == null)) {
                    this.custodhistField = null;
                }
                else {
                    if ((this.custodhistField == null)) {
                        this.custodhistField = XTypedList<custodhist>.Initialize(this, LinqToXsdTypeManager.Instance, value, custodhistXName);
                    }
                    else {
                        XTypedServices.SetList<custodhist>(this.custodhistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<descgrp> descgrp {
            get {
                if ((this.descgrpField == null)) {
                    this.descgrpField = new XTypedList<descgrp>(this, LinqToXsdTypeManager.Instance, descgrpXName);
                }
                return this.descgrpField;
            }
            set {
                if ((value == null)) {
                    this.descgrpField = null;
                }
                else {
                    if ((this.descgrpField == null)) {
                        this.descgrpField = XTypedList<descgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, descgrpXName);
                    }
                    else {
                        XTypedServices.SetList<descgrp>(this.descgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<fileplan> fileplan {
            get {
                if ((this.fileplanField == null)) {
                    this.fileplanField = new XTypedList<fileplan>(this, LinqToXsdTypeManager.Instance, fileplanXName);
                }
                return this.fileplanField;
            }
            set {
                if ((value == null)) {
                    this.fileplanField = null;
                }
                else {
                    if ((this.fileplanField == null)) {
                        this.fileplanField = XTypedList<fileplan>.Initialize(this, LinqToXsdTypeManager.Instance, value, fileplanXName);
                    }
                    else {
                        XTypedServices.SetList<fileplan>(this.fileplanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<index> index {
            get {
                if ((this.indexField == null)) {
                    this.indexField = new XTypedList<index>(this, LinqToXsdTypeManager.Instance, indexXName);
                }
                return this.indexField;
            }
            set {
                if ((value == null)) {
                    this.indexField = null;
                }
                else {
                    if ((this.indexField == null)) {
                        this.indexField = XTypedList<index>.Initialize(this, LinqToXsdTypeManager.Instance, value, indexXName);
                    }
                    else {
                        XTypedServices.SetList<index>(this.indexField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<odd> odd {
            get {
                if ((this.oddField == null)) {
                    this.oddField = new XTypedList<odd>(this, LinqToXsdTypeManager.Instance, oddXName);
                }
                return this.oddField;
            }
            set {
                if ((value == null)) {
                    this.oddField = null;
                }
                else {
                    if ((this.oddField == null)) {
                        this.oddField = XTypedList<odd>.Initialize(this, LinqToXsdTypeManager.Instance, value, oddXName);
                    }
                    else {
                        XTypedServices.SetList<odd>(this.oddField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<originalsloc> originalsloc {
            get {
                if ((this.originalslocField == null)) {
                    this.originalslocField = new XTypedList<originalsloc>(this, LinqToXsdTypeManager.Instance, originalslocXName);
                }
                return this.originalslocField;
            }
            set {
                if ((value == null)) {
                    this.originalslocField = null;
                }
                else {
                    if ((this.originalslocField == null)) {
                        this.originalslocField = XTypedList<originalsloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, originalslocXName);
                    }
                    else {
                        XTypedServices.SetList<originalsloc>(this.originalslocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<otherfindaid> otherfindaid {
            get {
                if ((this.otherfindaidField == null)) {
                    this.otherfindaidField = new XTypedList<otherfindaid>(this, LinqToXsdTypeManager.Instance, otherfindaidXName);
                }
                return this.otherfindaidField;
            }
            set {
                if ((value == null)) {
                    this.otherfindaidField = null;
                }
                else {
                    if ((this.otherfindaidField == null)) {
                        this.otherfindaidField = XTypedList<otherfindaid>.Initialize(this, LinqToXsdTypeManager.Instance, value, otherfindaidXName);
                    }
                    else {
                        XTypedServices.SetList<otherfindaid>(this.otherfindaidField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<phystech> phystech {
            get {
                if ((this.phystechField == null)) {
                    this.phystechField = new XTypedList<phystech>(this, LinqToXsdTypeManager.Instance, phystechXName);
                }
                return this.phystechField;
            }
            set {
                if ((value == null)) {
                    this.phystechField = null;
                }
                else {
                    if ((this.phystechField == null)) {
                        this.phystechField = XTypedList<phystech>.Initialize(this, LinqToXsdTypeManager.Instance, value, phystechXName);
                    }
                    else {
                        XTypedServices.SetList<phystech>(this.phystechField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<prefercite> prefercite {
            get {
                if ((this.preferciteField == null)) {
                    this.preferciteField = new XTypedList<prefercite>(this, LinqToXsdTypeManager.Instance, preferciteXName);
                }
                return this.preferciteField;
            }
            set {
                if ((value == null)) {
                    this.preferciteField = null;
                }
                else {
                    if ((this.preferciteField == null)) {
                        this.preferciteField = XTypedList<prefercite>.Initialize(this, LinqToXsdTypeManager.Instance, value, preferciteXName);
                    }
                    else {
                        XTypedServices.SetList<prefercite>(this.preferciteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<processinfo> processinfo {
            get {
                if ((this.processinfoField == null)) {
                    this.processinfoField = new XTypedList<processinfo>(this, LinqToXsdTypeManager.Instance, processinfoXName);
                }
                return this.processinfoField;
            }
            set {
                if ((value == null)) {
                    this.processinfoField = null;
                }
                else {
                    if ((this.processinfoField == null)) {
                        this.processinfoField = XTypedList<processinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, processinfoXName);
                    }
                    else {
                        XTypedServices.SetList<processinfo>(this.processinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<relatedmaterial> relatedmaterial {
            get {
                if ((this.relatedmaterialField == null)) {
                    this.relatedmaterialField = new XTypedList<relatedmaterial>(this, LinqToXsdTypeManager.Instance, relatedmaterialXName);
                }
                return this.relatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.relatedmaterialField = null;
                }
                else {
                    if ((this.relatedmaterialField == null)) {
                        this.relatedmaterialField = XTypedList<relatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, relatedmaterialXName);
                    }
                    else {
                        XTypedServices.SetList<relatedmaterial>(this.relatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<scopecontent> scopecontent {
            get {
                if ((this.scopecontentField == null)) {
                    this.scopecontentField = new XTypedList<scopecontent>(this, LinqToXsdTypeManager.Instance, scopecontentXName);
                }
                return this.scopecontentField;
            }
            set {
                if ((value == null)) {
                    this.scopecontentField = null;
                }
                else {
                    if ((this.scopecontentField == null)) {
                        this.scopecontentField = XTypedList<scopecontent>.Initialize(this, LinqToXsdTypeManager.Instance, value, scopecontentXName);
                    }
                    else {
                        XTypedServices.SetList<scopecontent>(this.scopecontentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<separatedmaterial> separatedmaterial {
            get {
                if ((this.separatedmaterialField == null)) {
                    this.separatedmaterialField = new XTypedList<separatedmaterial>(this, LinqToXsdTypeManager.Instance, separatedmaterialXName);
                }
                return this.separatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.separatedmaterialField = null;
                }
                else {
                    if ((this.separatedmaterialField == null)) {
                        this.separatedmaterialField = XTypedList<separatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, separatedmaterialXName);
                    }
                    else {
                        XTypedServices.SetList<separatedmaterial>(this.separatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<userestrict> userestrict {
            get {
                if ((this.userestrictField == null)) {
                    this.userestrictField = new XTypedList<userestrict>(this, LinqToXsdTypeManager.Instance, userestrictXName);
                }
                return this.userestrictField;
            }
            set {
                if ((value == null)) {
                    this.userestrictField = null;
                }
                else {
                    if ((this.userestrictField == null)) {
                        this.userestrictField = XTypedList<userestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, userestrictXName);
                    }
                    else {
                        XTypedServices.SetList<userestrict>(this.userestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<dsc> dsc {
            get {
                if ((this.dscField == null)) {
                    this.dscField = new XTypedList<dsc>(this, LinqToXsdTypeManager.Instance, dscXName);
                }
                return this.dscField;
            }
            set {
                if ((value == null)) {
                    this.dscField = null;
                }
                else {
                    if ((this.dscField == null)) {
                        this.dscField = XTypedList<dsc>.Initialize(this, LinqToXsdTypeManager.Instance, value, dscXName);
                    }
                    else {
                        XTypedServices.SetList<dsc>(this.dscField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<dao> dao {
            get {
                if ((this.daoField == null)) {
                    this.daoField = new XTypedList<dao>(this, LinqToXsdTypeManager.Instance, daoXName);
                }
                return this.daoField;
            }
            set {
                if ((value == null)) {
                    this.daoField = null;
                }
                else {
                    if ((this.daoField == null)) {
                        this.daoField = XTypedList<dao>.Initialize(this, LinqToXsdTypeManager.Instance, value, daoXName);
                    }
                    else {
                        XTypedServices.SetList<dao>(this.daoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<daogrp> daogrp {
            get {
                if ((this.daogrpField == null)) {
                    this.daogrpField = new XTypedList<daogrp>(this, LinqToXsdTypeManager.Instance, daogrpXName);
                }
                return this.daogrpField;
            }
            set {
                if ((value == null)) {
                    this.daogrpField = null;
                }
                else {
                    if ((this.daogrpField == null)) {
                        this.daogrpField = XTypedList<daogrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, daogrpXName);
                    }
                    else {
                        XTypedServices.SetList<daogrp>(this.daogrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<thead> thead {
            get {
                if ((this.theadField == null)) {
                    this.theadField = new XTypedList<thead>(this, LinqToXsdTypeManager.Instance, theadXName);
                }
                return this.theadField;
            }
            set {
                if ((value == null)) {
                    this.theadField = null;
                }
                else {
                    if ((this.theadField == null)) {
                        this.theadField = XTypedList<thead>.Initialize(this, LinqToXsdTypeManager.Instance, value, theadXName);
                    }
                    else {
                        XTypedServices.SetList<thead>(this.theadField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*, (thead?, c12+)*)
        /// </para>
        /// </summary>
        public virtual IList<c12> c12 {
            get {
                if ((this.c12Field == null)) {
                    this.c12Field = new XTypedList<c12>(this, LinqToXsdTypeManager.Instance, c12XName);
                }
                return this.c12Field;
            }
            set {
                if ((value == null)) {
                    this.c12Field = null;
                }
                else {
                    if ((this.c12Field == null)) {
                        this.c12Field = XTypedList<c12>.Initialize(this, LinqToXsdTypeManager.Instance, value, c12XName);
                    }
                    else {
                        XTypedServices.SetList<c12>(this.c12Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string level {
            get {
                XAttribute x = this.Attribute(levelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(levelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string otherlevel {
            get {
                XAttribute x = this.Attribute(otherlevelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(otherlevelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string tpattern {
            get {
                XAttribute x = this.Attribute(tpatternXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(tpatternXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<c11>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(didXName, typeof(did));
            localElementDictionary.Add(accessrestrictXName, typeof(accessrestrict));
            localElementDictionary.Add(accrualsXName, typeof(accruals));
            localElementDictionary.Add(acqinfoXName, typeof(acqinfo));
            localElementDictionary.Add(altformavailXName, typeof(altformavail));
            localElementDictionary.Add(appraisalXName, typeof(appraisal));
            localElementDictionary.Add(arrangementXName, typeof(arrangement));
            localElementDictionary.Add(bibliographyXName, typeof(bibliography));
            localElementDictionary.Add(bioghistXName, typeof(bioghist));
            localElementDictionary.Add(controlaccessXName, typeof(controlaccess));
            localElementDictionary.Add(custodhistXName, typeof(custodhist));
            localElementDictionary.Add(descgrpXName, typeof(descgrp));
            localElementDictionary.Add(fileplanXName, typeof(fileplan));
            localElementDictionary.Add(indexXName, typeof(index));
            localElementDictionary.Add(oddXName, typeof(odd));
            localElementDictionary.Add(originalslocXName, typeof(originalsloc));
            localElementDictionary.Add(otherfindaidXName, typeof(otherfindaid));
            localElementDictionary.Add(phystechXName, typeof(phystech));
            localElementDictionary.Add(preferciteXName, typeof(prefercite));
            localElementDictionary.Add(processinfoXName, typeof(processinfo));
            localElementDictionary.Add(relatedmaterialXName, typeof(relatedmaterial));
            localElementDictionary.Add(scopecontentXName, typeof(scopecontent));
            localElementDictionary.Add(separatedmaterialXName, typeof(separatedmaterial));
            localElementDictionary.Add(userestrictXName, typeof(userestrict));
            localElementDictionary.Add(dscXName, typeof(dsc));
            localElementDictionary.Add(daoXName, typeof(dao));
            localElementDictionary.Add(daogrpXName, typeof(daogrp));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(theadXName, typeof(thead));
            localElementDictionary.Add(c12XName, typeof(c12));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
    /// </para>
    /// </summary>
    public partial class c12 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName didXName = System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName accessrestrictXName = System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accessrestrict> accessrestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName accrualsXName = System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<accruals> accrualsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName acqinfoXName = System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<acqinfo> acqinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altformavailXName = System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<altformavail> altformavailField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName appraisalXName = System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<appraisal> appraisalField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arrangementXName = System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<arrangement> arrangementField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibliographyXName = System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibliography> bibliographyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bioghistXName = System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bioghist> bioghistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName controlaccessXName = System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<controlaccess> controlaccessField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName custodhistXName = System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<custodhist> custodhistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descgrpXName = System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<descgrp> descgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName fileplanXName = System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<fileplan> fileplanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName indexXName = System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<index> indexField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName oddXName = System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<odd> oddField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName originalslocXName = System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<originalsloc> originalslocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName otherfindaidXName = System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<otherfindaid> otherfindaidField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName phystechXName = System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<phystech> phystechField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName preferciteXName = System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<prefercite> preferciteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName processinfoXName = System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<processinfo> processinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName relatedmaterialXName = System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<relatedmaterial> relatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName scopecontentXName = System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<scopecontent> scopecontentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName separatedmaterialXName = System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<separatedmaterial> separatedmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userestrictXName = System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<userestrict> userestrictField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dscXName = System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dsc> dscField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName daoXName = System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dao> daoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName daogrpXName = System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<daogrp> daogrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName levelXName = System.Xml.Linq.XName.Get("level", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName otherlevelXName = System.Xml.Linq.XName.Get("otherlevel", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tpatternXName = System.Xml.Linq.XName.Get("tpattern", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("c12", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator c12(XElement xe) { return XTypedServices.ToXTypedElement<c12>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static c12() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new NamedContentModelEntity(didXName), new ChoiceContentModelEntity(new NamedContentModelEntity(accessrestrictXName), new NamedContentModelEntity(accrualsXName), new NamedContentModelEntity(acqinfoXName), new NamedContentModelEntity(altformavailXName), new NamedContentModelEntity(appraisalXName), new NamedContentModelEntity(arrangementXName), new NamedContentModelEntity(bibliographyXName), new NamedContentModelEntity(bioghistXName), new NamedContentModelEntity(controlaccessXName), new NamedContentModelEntity(custodhistXName), new NamedContentModelEntity(descgrpXName), new NamedContentModelEntity(fileplanXName), new NamedContentModelEntity(indexXName), new NamedContentModelEntity(oddXName), new NamedContentModelEntity(originalslocXName), new NamedContentModelEntity(otherfindaidXName), new NamedContentModelEntity(phystechXName), new NamedContentModelEntity(preferciteXName), new NamedContentModelEntity(processinfoXName), new NamedContentModelEntity(relatedmaterialXName), new NamedContentModelEntity(scopecontentXName), new NamedContentModelEntity(separatedmaterialXName), new NamedContentModelEntity(userestrictXName), new NamedContentModelEntity(dscXName), new NamedContentModelEntity(daoXName), new NamedContentModelEntity(daogrpXName), new NamedContentModelEntity(noteXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public c12() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual did did {
            get {
                XElement x = this.GetElement(didXName);
                return ((did)(x));
            }
            set {
                this.SetElement(didXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<accessrestrict> accessrestrict {
            get {
                if ((this.accessrestrictField == null)) {
                    this.accessrestrictField = new XTypedList<accessrestrict>(this, LinqToXsdTypeManager.Instance, accessrestrictXName);
                }
                return this.accessrestrictField;
            }
            set {
                if ((value == null)) {
                    this.accessrestrictField = null;
                }
                else {
                    if ((this.accessrestrictField == null)) {
                        this.accessrestrictField = XTypedList<accessrestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, accessrestrictXName);
                    }
                    else {
                        XTypedServices.SetList<accessrestrict>(this.accessrestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<accruals> accruals {
            get {
                if ((this.accrualsField == null)) {
                    this.accrualsField = new XTypedList<accruals>(this, LinqToXsdTypeManager.Instance, accrualsXName);
                }
                return this.accrualsField;
            }
            set {
                if ((value == null)) {
                    this.accrualsField = null;
                }
                else {
                    if ((this.accrualsField == null)) {
                        this.accrualsField = XTypedList<accruals>.Initialize(this, LinqToXsdTypeManager.Instance, value, accrualsXName);
                    }
                    else {
                        XTypedServices.SetList<accruals>(this.accrualsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<acqinfo> acqinfo {
            get {
                if ((this.acqinfoField == null)) {
                    this.acqinfoField = new XTypedList<acqinfo>(this, LinqToXsdTypeManager.Instance, acqinfoXName);
                }
                return this.acqinfoField;
            }
            set {
                if ((value == null)) {
                    this.acqinfoField = null;
                }
                else {
                    if ((this.acqinfoField == null)) {
                        this.acqinfoField = XTypedList<acqinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, acqinfoXName);
                    }
                    else {
                        XTypedServices.SetList<acqinfo>(this.acqinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<altformavail> altformavail {
            get {
                if ((this.altformavailField == null)) {
                    this.altformavailField = new XTypedList<altformavail>(this, LinqToXsdTypeManager.Instance, altformavailXName);
                }
                return this.altformavailField;
            }
            set {
                if ((value == null)) {
                    this.altformavailField = null;
                }
                else {
                    if ((this.altformavailField == null)) {
                        this.altformavailField = XTypedList<altformavail>.Initialize(this, LinqToXsdTypeManager.Instance, value, altformavailXName);
                    }
                    else {
                        XTypedServices.SetList<altformavail>(this.altformavailField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<appraisal> appraisal {
            get {
                if ((this.appraisalField == null)) {
                    this.appraisalField = new XTypedList<appraisal>(this, LinqToXsdTypeManager.Instance, appraisalXName);
                }
                return this.appraisalField;
            }
            set {
                if ((value == null)) {
                    this.appraisalField = null;
                }
                else {
                    if ((this.appraisalField == null)) {
                        this.appraisalField = XTypedList<appraisal>.Initialize(this, LinqToXsdTypeManager.Instance, value, appraisalXName);
                    }
                    else {
                        XTypedServices.SetList<appraisal>(this.appraisalField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<arrangement> arrangement {
            get {
                if ((this.arrangementField == null)) {
                    this.arrangementField = new XTypedList<arrangement>(this, LinqToXsdTypeManager.Instance, arrangementXName);
                }
                return this.arrangementField;
            }
            set {
                if ((value == null)) {
                    this.arrangementField = null;
                }
                else {
                    if ((this.arrangementField == null)) {
                        this.arrangementField = XTypedList<arrangement>.Initialize(this, LinqToXsdTypeManager.Instance, value, arrangementXName);
                    }
                    else {
                        XTypedServices.SetList<arrangement>(this.arrangementField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<bibliography> bibliography {
            get {
                if ((this.bibliographyField == null)) {
                    this.bibliographyField = new XTypedList<bibliography>(this, LinqToXsdTypeManager.Instance, bibliographyXName);
                }
                return this.bibliographyField;
            }
            set {
                if ((value == null)) {
                    this.bibliographyField = null;
                }
                else {
                    if ((this.bibliographyField == null)) {
                        this.bibliographyField = XTypedList<bibliography>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibliographyXName);
                    }
                    else {
                        XTypedServices.SetList<bibliography>(this.bibliographyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<bioghist> bioghist {
            get {
                if ((this.bioghistField == null)) {
                    this.bioghistField = new XTypedList<bioghist>(this, LinqToXsdTypeManager.Instance, bioghistXName);
                }
                return this.bioghistField;
            }
            set {
                if ((value == null)) {
                    this.bioghistField = null;
                }
                else {
                    if ((this.bioghistField == null)) {
                        this.bioghistField = XTypedList<bioghist>.Initialize(this, LinqToXsdTypeManager.Instance, value, bioghistXName);
                    }
                    else {
                        XTypedServices.SetList<bioghist>(this.bioghistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<controlaccess> controlaccess {
            get {
                if ((this.controlaccessField == null)) {
                    this.controlaccessField = new XTypedList<controlaccess>(this, LinqToXsdTypeManager.Instance, controlaccessXName);
                }
                return this.controlaccessField;
            }
            set {
                if ((value == null)) {
                    this.controlaccessField = null;
                }
                else {
                    if ((this.controlaccessField == null)) {
                        this.controlaccessField = XTypedList<controlaccess>.Initialize(this, LinqToXsdTypeManager.Instance, value, controlaccessXName);
                    }
                    else {
                        XTypedServices.SetList<controlaccess>(this.controlaccessField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<custodhist> custodhist {
            get {
                if ((this.custodhistField == null)) {
                    this.custodhistField = new XTypedList<custodhist>(this, LinqToXsdTypeManager.Instance, custodhistXName);
                }
                return this.custodhistField;
            }
            set {
                if ((value == null)) {
                    this.custodhistField = null;
                }
                else {
                    if ((this.custodhistField == null)) {
                        this.custodhistField = XTypedList<custodhist>.Initialize(this, LinqToXsdTypeManager.Instance, value, custodhistXName);
                    }
                    else {
                        XTypedServices.SetList<custodhist>(this.custodhistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<descgrp> descgrp {
            get {
                if ((this.descgrpField == null)) {
                    this.descgrpField = new XTypedList<descgrp>(this, LinqToXsdTypeManager.Instance, descgrpXName);
                }
                return this.descgrpField;
            }
            set {
                if ((value == null)) {
                    this.descgrpField = null;
                }
                else {
                    if ((this.descgrpField == null)) {
                        this.descgrpField = XTypedList<descgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, descgrpXName);
                    }
                    else {
                        XTypedServices.SetList<descgrp>(this.descgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<fileplan> fileplan {
            get {
                if ((this.fileplanField == null)) {
                    this.fileplanField = new XTypedList<fileplan>(this, LinqToXsdTypeManager.Instance, fileplanXName);
                }
                return this.fileplanField;
            }
            set {
                if ((value == null)) {
                    this.fileplanField = null;
                }
                else {
                    if ((this.fileplanField == null)) {
                        this.fileplanField = XTypedList<fileplan>.Initialize(this, LinqToXsdTypeManager.Instance, value, fileplanXName);
                    }
                    else {
                        XTypedServices.SetList<fileplan>(this.fileplanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<index> index {
            get {
                if ((this.indexField == null)) {
                    this.indexField = new XTypedList<index>(this, LinqToXsdTypeManager.Instance, indexXName);
                }
                return this.indexField;
            }
            set {
                if ((value == null)) {
                    this.indexField = null;
                }
                else {
                    if ((this.indexField == null)) {
                        this.indexField = XTypedList<index>.Initialize(this, LinqToXsdTypeManager.Instance, value, indexXName);
                    }
                    else {
                        XTypedServices.SetList<index>(this.indexField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<odd> odd {
            get {
                if ((this.oddField == null)) {
                    this.oddField = new XTypedList<odd>(this, LinqToXsdTypeManager.Instance, oddXName);
                }
                return this.oddField;
            }
            set {
                if ((value == null)) {
                    this.oddField = null;
                }
                else {
                    if ((this.oddField == null)) {
                        this.oddField = XTypedList<odd>.Initialize(this, LinqToXsdTypeManager.Instance, value, oddXName);
                    }
                    else {
                        XTypedServices.SetList<odd>(this.oddField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<originalsloc> originalsloc {
            get {
                if ((this.originalslocField == null)) {
                    this.originalslocField = new XTypedList<originalsloc>(this, LinqToXsdTypeManager.Instance, originalslocXName);
                }
                return this.originalslocField;
            }
            set {
                if ((value == null)) {
                    this.originalslocField = null;
                }
                else {
                    if ((this.originalslocField == null)) {
                        this.originalslocField = XTypedList<originalsloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, originalslocXName);
                    }
                    else {
                        XTypedServices.SetList<originalsloc>(this.originalslocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<otherfindaid> otherfindaid {
            get {
                if ((this.otherfindaidField == null)) {
                    this.otherfindaidField = new XTypedList<otherfindaid>(this, LinqToXsdTypeManager.Instance, otherfindaidXName);
                }
                return this.otherfindaidField;
            }
            set {
                if ((value == null)) {
                    this.otherfindaidField = null;
                }
                else {
                    if ((this.otherfindaidField == null)) {
                        this.otherfindaidField = XTypedList<otherfindaid>.Initialize(this, LinqToXsdTypeManager.Instance, value, otherfindaidXName);
                    }
                    else {
                        XTypedServices.SetList<otherfindaid>(this.otherfindaidField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<phystech> phystech {
            get {
                if ((this.phystechField == null)) {
                    this.phystechField = new XTypedList<phystech>(this, LinqToXsdTypeManager.Instance, phystechXName);
                }
                return this.phystechField;
            }
            set {
                if ((value == null)) {
                    this.phystechField = null;
                }
                else {
                    if ((this.phystechField == null)) {
                        this.phystechField = XTypedList<phystech>.Initialize(this, LinqToXsdTypeManager.Instance, value, phystechXName);
                    }
                    else {
                        XTypedServices.SetList<phystech>(this.phystechField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<prefercite> prefercite {
            get {
                if ((this.preferciteField == null)) {
                    this.preferciteField = new XTypedList<prefercite>(this, LinqToXsdTypeManager.Instance, preferciteXName);
                }
                return this.preferciteField;
            }
            set {
                if ((value == null)) {
                    this.preferciteField = null;
                }
                else {
                    if ((this.preferciteField == null)) {
                        this.preferciteField = XTypedList<prefercite>.Initialize(this, LinqToXsdTypeManager.Instance, value, preferciteXName);
                    }
                    else {
                        XTypedServices.SetList<prefercite>(this.preferciteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<processinfo> processinfo {
            get {
                if ((this.processinfoField == null)) {
                    this.processinfoField = new XTypedList<processinfo>(this, LinqToXsdTypeManager.Instance, processinfoXName);
                }
                return this.processinfoField;
            }
            set {
                if ((value == null)) {
                    this.processinfoField = null;
                }
                else {
                    if ((this.processinfoField == null)) {
                        this.processinfoField = XTypedList<processinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, processinfoXName);
                    }
                    else {
                        XTypedServices.SetList<processinfo>(this.processinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<relatedmaterial> relatedmaterial {
            get {
                if ((this.relatedmaterialField == null)) {
                    this.relatedmaterialField = new XTypedList<relatedmaterial>(this, LinqToXsdTypeManager.Instance, relatedmaterialXName);
                }
                return this.relatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.relatedmaterialField = null;
                }
                else {
                    if ((this.relatedmaterialField == null)) {
                        this.relatedmaterialField = XTypedList<relatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, relatedmaterialXName);
                    }
                    else {
                        XTypedServices.SetList<relatedmaterial>(this.relatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<scopecontent> scopecontent {
            get {
                if ((this.scopecontentField == null)) {
                    this.scopecontentField = new XTypedList<scopecontent>(this, LinqToXsdTypeManager.Instance, scopecontentXName);
                }
                return this.scopecontentField;
            }
            set {
                if ((value == null)) {
                    this.scopecontentField = null;
                }
                else {
                    if ((this.scopecontentField == null)) {
                        this.scopecontentField = XTypedList<scopecontent>.Initialize(this, LinqToXsdTypeManager.Instance, value, scopecontentXName);
                    }
                    else {
                        XTypedServices.SetList<scopecontent>(this.scopecontentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<separatedmaterial> separatedmaterial {
            get {
                if ((this.separatedmaterialField == null)) {
                    this.separatedmaterialField = new XTypedList<separatedmaterial>(this, LinqToXsdTypeManager.Instance, separatedmaterialXName);
                }
                return this.separatedmaterialField;
            }
            set {
                if ((value == null)) {
                    this.separatedmaterialField = null;
                }
                else {
                    if ((this.separatedmaterialField == null)) {
                        this.separatedmaterialField = XTypedList<separatedmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, separatedmaterialXName);
                    }
                    else {
                        XTypedServices.SetList<separatedmaterial>(this.separatedmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<userestrict> userestrict {
            get {
                if ((this.userestrictField == null)) {
                    this.userestrictField = new XTypedList<userestrict>(this, LinqToXsdTypeManager.Instance, userestrictXName);
                }
                return this.userestrictField;
            }
            set {
                if ((value == null)) {
                    this.userestrictField = null;
                }
                else {
                    if ((this.userestrictField == null)) {
                        this.userestrictField = XTypedList<userestrict>.Initialize(this, LinqToXsdTypeManager.Instance, value, userestrictXName);
                    }
                    else {
                        XTypedServices.SetList<userestrict>(this.userestrictField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<dsc> dsc {
            get {
                if ((this.dscField == null)) {
                    this.dscField = new XTypedList<dsc>(this, LinqToXsdTypeManager.Instance, dscXName);
                }
                return this.dscField;
            }
            set {
                if ((value == null)) {
                    this.dscField = null;
                }
                else {
                    if ((this.dscField == null)) {
                        this.dscField = XTypedList<dsc>.Initialize(this, LinqToXsdTypeManager.Instance, value, dscXName);
                    }
                    else {
                        XTypedServices.SetList<dsc>(this.dscField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<dao> dao {
            get {
                if ((this.daoField == null)) {
                    this.daoField = new XTypedList<dao>(this, LinqToXsdTypeManager.Instance, daoXName);
                }
                return this.daoField;
            }
            set {
                if ((value == null)) {
                    this.daoField = null;
                }
                else {
                    if ((this.daoField == null)) {
                        this.daoField = XTypedList<dao>.Initialize(this, LinqToXsdTypeManager.Instance, value, daoXName);
                    }
                    else {
                        XTypedServices.SetList<dao>(this.daoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<daogrp> daogrp {
            get {
                if ((this.daogrpField == null)) {
                    this.daogrpField = new XTypedList<daogrp>(this, LinqToXsdTypeManager.Instance, daogrpXName);
                }
                return this.daogrpField;
            }
            set {
                if ((value == null)) {
                    this.daogrpField = null;
                }
                else {
                    if ((this.daogrpField == null)) {
                        this.daogrpField = XTypedList<daogrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, daogrpXName);
                    }
                    else {
                        XTypedServices.SetList<daogrp>(this.daogrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, did, (accessrestrict | accruals | acqinfo | altformavail | appraisal | arrangement | bibliography | bioghist | controlaccess | custodhist | descgrp | fileplan | index | odd | originalsloc | otherfindaid | phystech | prefercite | processinfo | relatedmaterial | scopecontent | separatedmaterial | userestrict | dsc | dao | daogrp | note)*)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string level {
            get {
                XAttribute x = this.Attribute(levelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(levelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string otherlevel {
            get {
                XAttribute x = this.Attribute(otherlevelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(otherlevelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string tpattern {
            get {
                XAttribute x = this.Attribute(tpatternXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(tpatternXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<c12>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(didXName, typeof(did));
            localElementDictionary.Add(accessrestrictXName, typeof(accessrestrict));
            localElementDictionary.Add(accrualsXName, typeof(accruals));
            localElementDictionary.Add(acqinfoXName, typeof(acqinfo));
            localElementDictionary.Add(altformavailXName, typeof(altformavail));
            localElementDictionary.Add(appraisalXName, typeof(appraisal));
            localElementDictionary.Add(arrangementXName, typeof(arrangement));
            localElementDictionary.Add(bibliographyXName, typeof(bibliography));
            localElementDictionary.Add(bioghistXName, typeof(bioghist));
            localElementDictionary.Add(controlaccessXName, typeof(controlaccess));
            localElementDictionary.Add(custodhistXName, typeof(custodhist));
            localElementDictionary.Add(descgrpXName, typeof(descgrp));
            localElementDictionary.Add(fileplanXName, typeof(fileplan));
            localElementDictionary.Add(indexXName, typeof(index));
            localElementDictionary.Add(oddXName, typeof(odd));
            localElementDictionary.Add(originalslocXName, typeof(originalsloc));
            localElementDictionary.Add(otherfindaidXName, typeof(otherfindaid));
            localElementDictionary.Add(phystechXName, typeof(phystech));
            localElementDictionary.Add(preferciteXName, typeof(prefercite));
            localElementDictionary.Add(processinfoXName, typeof(processinfo));
            localElementDictionary.Add(relatedmaterialXName, typeof(relatedmaterial));
            localElementDictionary.Add(scopecontentXName, typeof(scopecontent));
            localElementDictionary.Add(separatedmaterialXName, typeof(separatedmaterial));
            localElementDictionary.Add(userestrictXName, typeof(userestrict));
            localElementDictionary.Add(dscXName, typeof(dsc));
            localElementDictionary.Add(daoXName, typeof(dao));
            localElementDictionary.Add(daogrpXName, typeof(daogrp));
            localElementDictionary.Add(noteXName, typeof(note));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb)*
    /// </para>
    /// </summary>
    public partial class head : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altheadXName = System.Xml.Linq.XName.Get("althead", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator head(XElement xe) { return XTypedServices.ToXTypedElement<head>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static head() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public head() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string althead {
            get {
                XAttribute x = this.Attribute(altheadXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altheadXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<head>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
    /// </para>
    /// </summary>
    public partial class p : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName abbrXName = System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName expanXName = System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName corpnameXName = System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<corpname> corpnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName famnameXName = System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<famname> famnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geognameXName = System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<geogname> geognameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<name> nameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName occupationXName = System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<occupation> occupationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName persnameXName = System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<persname> persnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName subjectXName = System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<subject> subjectField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName genreformXName = System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<genreform> genreformField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName functionXName = System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<function> functionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dateXName = System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<date> dateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName numXName = System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<num> numField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName originationXName = System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<origination> originationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName repositoryXName = System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<repository> repositoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unitdateXName = System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unitdate> unitdateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unittitleXName = System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unittitle> unittitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @refXName = System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extrefXName = System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName linkgrpXName = System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibrefXName = System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName archrefXName = System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName addressXName = System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName chronlistXName = System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listXName = System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tableXName = System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName blockquoteXName = System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator p(XElement xe) { return XTypedServices.ToXTypedElement<p>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static p() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName), new NamedContentModelEntity(abbrXName), new NamedContentModelEntity(expanXName), new NamedContentModelEntity(corpnameXName), new NamedContentModelEntity(famnameXName), new NamedContentModelEntity(geognameXName), new NamedContentModelEntity(nameXName), new NamedContentModelEntity(occupationXName), new NamedContentModelEntity(persnameXName), new NamedContentModelEntity(subjectXName), new NamedContentModelEntity(genreformXName), new NamedContentModelEntity(functionXName), new NamedContentModelEntity(dateXName), new NamedContentModelEntity(numXName), new NamedContentModelEntity(originationXName), new NamedContentModelEntity(repositoryXName), new NamedContentModelEntity(unitdateXName), new NamedContentModelEntity(unittitleXName), new NamedContentModelEntity(@refXName), new NamedContentModelEntity(extrefXName), new NamedContentModelEntity(linkgrpXName), new NamedContentModelEntity(bibrefXName), new NamedContentModelEntity(titleXName), new NamedContentModelEntity(archrefXName), new NamedContentModelEntity(addressXName), new NamedContentModelEntity(chronlistXName), new NamedContentModelEntity(listXName), new NamedContentModelEntity(noteXName), new NamedContentModelEntity(tableXName), new NamedContentModelEntity(blockquoteXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public p() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, abbrXName);
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, abbrXName);
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, expanXName);
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, expanXName);
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<corpname> corpname {
            get {
                if ((this.corpnameField == null)) {
                    this.corpnameField = new XTypedList<corpname>(this, LinqToXsdTypeManager.Instance, corpnameXName);
                }
                return this.corpnameField;
            }
            set {
                if ((value == null)) {
                    this.corpnameField = null;
                }
                else {
                    if ((this.corpnameField == null)) {
                        this.corpnameField = XTypedList<corpname>.Initialize(this, LinqToXsdTypeManager.Instance, value, corpnameXName);
                    }
                    else {
                        XTypedServices.SetList<corpname>(this.corpnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<famname> famname {
            get {
                if ((this.famnameField == null)) {
                    this.famnameField = new XTypedList<famname>(this, LinqToXsdTypeManager.Instance, famnameXName);
                }
                return this.famnameField;
            }
            set {
                if ((value == null)) {
                    this.famnameField = null;
                }
                else {
                    if ((this.famnameField == null)) {
                        this.famnameField = XTypedList<famname>.Initialize(this, LinqToXsdTypeManager.Instance, value, famnameXName);
                    }
                    else {
                        XTypedServices.SetList<famname>(this.famnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<geogname> geogname {
            get {
                if ((this.geognameField == null)) {
                    this.geognameField = new XTypedList<geogname>(this, LinqToXsdTypeManager.Instance, geognameXName);
                }
                return this.geognameField;
            }
            set {
                if ((value == null)) {
                    this.geognameField = null;
                }
                else {
                    if ((this.geognameField == null)) {
                        this.geognameField = XTypedList<geogname>.Initialize(this, LinqToXsdTypeManager.Instance, value, geognameXName);
                    }
                    else {
                        XTypedServices.SetList<geogname>(this.geognameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<name> name {
            get {
                if ((this.nameField == null)) {
                    this.nameField = new XTypedList<name>(this, LinqToXsdTypeManager.Instance, nameXName);
                }
                return this.nameField;
            }
            set {
                if ((value == null)) {
                    this.nameField = null;
                }
                else {
                    if ((this.nameField == null)) {
                        this.nameField = XTypedList<name>.Initialize(this, LinqToXsdTypeManager.Instance, value, nameXName);
                    }
                    else {
                        XTypedServices.SetList<name>(this.nameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<occupation> occupation {
            get {
                if ((this.occupationField == null)) {
                    this.occupationField = new XTypedList<occupation>(this, LinqToXsdTypeManager.Instance, occupationXName);
                }
                return this.occupationField;
            }
            set {
                if ((value == null)) {
                    this.occupationField = null;
                }
                else {
                    if ((this.occupationField == null)) {
                        this.occupationField = XTypedList<occupation>.Initialize(this, LinqToXsdTypeManager.Instance, value, occupationXName);
                    }
                    else {
                        XTypedServices.SetList<occupation>(this.occupationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<persname> persname {
            get {
                if ((this.persnameField == null)) {
                    this.persnameField = new XTypedList<persname>(this, LinqToXsdTypeManager.Instance, persnameXName);
                }
                return this.persnameField;
            }
            set {
                if ((value == null)) {
                    this.persnameField = null;
                }
                else {
                    if ((this.persnameField == null)) {
                        this.persnameField = XTypedList<persname>.Initialize(this, LinqToXsdTypeManager.Instance, value, persnameXName);
                    }
                    else {
                        XTypedServices.SetList<persname>(this.persnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<subject> subject {
            get {
                if ((this.subjectField == null)) {
                    this.subjectField = new XTypedList<subject>(this, LinqToXsdTypeManager.Instance, subjectXName);
                }
                return this.subjectField;
            }
            set {
                if ((value == null)) {
                    this.subjectField = null;
                }
                else {
                    if ((this.subjectField == null)) {
                        this.subjectField = XTypedList<subject>.Initialize(this, LinqToXsdTypeManager.Instance, value, subjectXName);
                    }
                    else {
                        XTypedServices.SetList<subject>(this.subjectField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<genreform> genreform {
            get {
                if ((this.genreformField == null)) {
                    this.genreformField = new XTypedList<genreform>(this, LinqToXsdTypeManager.Instance, genreformXName);
                }
                return this.genreformField;
            }
            set {
                if ((value == null)) {
                    this.genreformField = null;
                }
                else {
                    if ((this.genreformField == null)) {
                        this.genreformField = XTypedList<genreform>.Initialize(this, LinqToXsdTypeManager.Instance, value, genreformXName);
                    }
                    else {
                        XTypedServices.SetList<genreform>(this.genreformField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<function> function {
            get {
                if ((this.functionField == null)) {
                    this.functionField = new XTypedList<function>(this, LinqToXsdTypeManager.Instance, functionXName);
                }
                return this.functionField;
            }
            set {
                if ((value == null)) {
                    this.functionField = null;
                }
                else {
                    if ((this.functionField == null)) {
                        this.functionField = XTypedList<function>.Initialize(this, LinqToXsdTypeManager.Instance, value, functionXName);
                    }
                    else {
                        XTypedServices.SetList<function>(this.functionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<date> date {
            get {
                if ((this.dateField == null)) {
                    this.dateField = new XTypedList<date>(this, LinqToXsdTypeManager.Instance, dateXName);
                }
                return this.dateField;
            }
            set {
                if ((value == null)) {
                    this.dateField = null;
                }
                else {
                    if ((this.dateField == null)) {
                        this.dateField = XTypedList<date>.Initialize(this, LinqToXsdTypeManager.Instance, value, dateXName);
                    }
                    else {
                        XTypedServices.SetList<date>(this.dateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<num> num {
            get {
                if ((this.numField == null)) {
                    this.numField = new XTypedList<num>(this, LinqToXsdTypeManager.Instance, numXName);
                }
                return this.numField;
            }
            set {
                if ((value == null)) {
                    this.numField = null;
                }
                else {
                    if ((this.numField == null)) {
                        this.numField = XTypedList<num>.Initialize(this, LinqToXsdTypeManager.Instance, value, numXName);
                    }
                    else {
                        XTypedServices.SetList<num>(this.numField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<origination> origination {
            get {
                if ((this.originationField == null)) {
                    this.originationField = new XTypedList<origination>(this, LinqToXsdTypeManager.Instance, originationXName);
                }
                return this.originationField;
            }
            set {
                if ((value == null)) {
                    this.originationField = null;
                }
                else {
                    if ((this.originationField == null)) {
                        this.originationField = XTypedList<origination>.Initialize(this, LinqToXsdTypeManager.Instance, value, originationXName);
                    }
                    else {
                        XTypedServices.SetList<origination>(this.originationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<repository> repository {
            get {
                if ((this.repositoryField == null)) {
                    this.repositoryField = new XTypedList<repository>(this, LinqToXsdTypeManager.Instance, repositoryXName);
                }
                return this.repositoryField;
            }
            set {
                if ((value == null)) {
                    this.repositoryField = null;
                }
                else {
                    if ((this.repositoryField == null)) {
                        this.repositoryField = XTypedList<repository>.Initialize(this, LinqToXsdTypeManager.Instance, value, repositoryXName);
                    }
                    else {
                        XTypedServices.SetList<repository>(this.repositoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<unitdate> unitdate {
            get {
                if ((this.unitdateField == null)) {
                    this.unitdateField = new XTypedList<unitdate>(this, LinqToXsdTypeManager.Instance, unitdateXName);
                }
                return this.unitdateField;
            }
            set {
                if ((value == null)) {
                    this.unitdateField = null;
                }
                else {
                    if ((this.unitdateField == null)) {
                        this.unitdateField = XTypedList<unitdate>.Initialize(this, LinqToXsdTypeManager.Instance, value, unitdateXName);
                    }
                    else {
                        XTypedServices.SetList<unitdate>(this.unitdateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<unittitle> unittitle {
            get {
                if ((this.unittitleField == null)) {
                    this.unittitleField = new XTypedList<unittitle>(this, LinqToXsdTypeManager.Instance, unittitleXName);
                }
                return this.unittitleField;
            }
            set {
                if ((value == null)) {
                    this.unittitleField = null;
                }
                else {
                    if ((this.unittitleField == null)) {
                        this.unittitleField = XTypedList<unittitle>.Initialize(this, LinqToXsdTypeManager.Instance, value, unittitleXName);
                    }
                    else {
                        XTypedServices.SetList<unittitle>(this.unittitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, @refXName);
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, @refXName);
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, extrefXName);
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, extrefXName);
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, linkgrpXName);
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, linkgrpXName);
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, bibrefXName);
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibrefXName);
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, titleXName);
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, titleXName);
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, archrefXName);
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, archrefXName);
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, addressXName);
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, addressXName);
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, chronlistXName);
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, chronlistXName);
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, listXName);
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, listXName);
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, tableXName);
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, tableXName);
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, blockquoteXName);
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, blockquoteXName);
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<p>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
            localElementDictionary.Add(abbrXName, typeof(abbr));
            localElementDictionary.Add(expanXName, typeof(expan));
            localElementDictionary.Add(corpnameXName, typeof(corpname));
            localElementDictionary.Add(famnameXName, typeof(famname));
            localElementDictionary.Add(geognameXName, typeof(geogname));
            localElementDictionary.Add(nameXName, typeof(name));
            localElementDictionary.Add(occupationXName, typeof(occupation));
            localElementDictionary.Add(persnameXName, typeof(persname));
            localElementDictionary.Add(subjectXName, typeof(subject));
            localElementDictionary.Add(genreformXName, typeof(genreform));
            localElementDictionary.Add(functionXName, typeof(function));
            localElementDictionary.Add(dateXName, typeof(date));
            localElementDictionary.Add(numXName, typeof(num));
            localElementDictionary.Add(originationXName, typeof(origination));
            localElementDictionary.Add(repositoryXName, typeof(repository));
            localElementDictionary.Add(unitdateXName, typeof(unitdate));
            localElementDictionary.Add(unittitleXName, typeof(unittitle));
            localElementDictionary.Add(@refXName, typeof(@ref));
            localElementDictionary.Add(extrefXName, typeof(extref));
            localElementDictionary.Add(linkgrpXName, typeof(linkgrp));
            localElementDictionary.Add(bibrefXName, typeof(bibref));
            localElementDictionary.Add(titleXName, typeof(title));
            localElementDictionary.Add(archrefXName, typeof(archref));
            localElementDictionary.Add(addressXName, typeof(address));
            localElementDictionary.Add(chronlistXName, typeof(chronlist));
            localElementDictionary.Add(listXName, typeof(list));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(tableXName, typeof(table));
            localElementDictionary.Add(blockquoteXName, typeof(blockquote));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (daodesc?)
    /// </para>
    /// </summary>
    public partial class dao : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName daodescXName = System.Xml.Linq.XName.Get("daodesc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName entityrefXName = System.Xml.Linq.XName.Get("entityref", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName xpointerXName = System.Xml.Linq.XName.Get("xpointer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string typeFixedValue = "simple";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName hrefXName = System.Xml.Linq.XName.Get("href", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arcroleXName = System.Xml.Linq.XName.Get("arcrole", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName showXName = System.Xml.Linq.XName.Get("show", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName actuateXName = System.Xml.Linq.XName.Get("actuate", "http://www.w3.org/1999/xlink");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator dao(XElement xe) { return XTypedServices.ToXTypedElement<dao>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static dao() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(daodescXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (daodesc?)
        /// </para>
        /// </summary>
        public dao() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (daodesc?)
        /// </para>
        /// </summary>
        public virtual daodesc daodesc {
            get {
                XElement x = this.GetElement(daodescXName);
                return ((daodesc)(x));
            }
            set {
                this.SetElement(daodescXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string entityref {
            get {
                XAttribute x = this.Attribute(entityrefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Entity).Datatype);
            }
            set {
                this.SetAttribute(entityrefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Entity).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string xpointer {
            get {
                XAttribute x = this.Attribute(xpointerXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(xpointerXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                return typeFixedValue;
            }
            set {
                if (value.Equals(typeFixedValue)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, typeFixedValue);
                }
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri href {
            get {
                XAttribute x = this.Attribute(hrefXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(hrefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string arcrole {
            get {
                XAttribute x = this.Attribute(arcroleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(arcroleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title {
            get {
                XAttribute x = this.Attribute(titleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(titleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string show {
            get {
                XAttribute x = this.Attribute(showXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(showXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LibraryOfCongress.EAD.ActuateEnum? actuate {
            get {
                XAttribute x = this.Attribute(actuateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LibraryOfCongress.EAD.ActuateEnum)(Enum.Parse(typeof(LibraryOfCongress.EAD.ActuateEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(actuateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<dao>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(daodescXName, typeof(daodesc));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)+)
    /// </para>
    /// </summary>
    public partial class daodesc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName addressXName = System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName chronlistXName = System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listXName = System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tableXName = System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName blockquoteXName = System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("daodesc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator daodesc(XElement xe) { return XTypedServices.ToXTypedElement<daodesc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static daodesc() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new ChoiceContentModelEntity(new NamedContentModelEntity(addressXName), new NamedContentModelEntity(chronlistXName), new NamedContentModelEntity(listXName), new NamedContentModelEntity(noteXName), new NamedContentModelEntity(tableXName), new NamedContentModelEntity(blockquoteXName), new NamedContentModelEntity(pXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)+)
        /// </para>
        /// </summary>
        public daodesc() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)+)
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)+)
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, addressXName);
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, addressXName);
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)+)
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, chronlistXName);
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, chronlistXName);
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)+)
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, listXName);
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, listXName);
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)+)
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)+)
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, tableXName);
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, tableXName);
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)+)
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, blockquoteXName);
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, blockquoteXName);
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (address | chronlist | list | note | table | blockquote | p)+)
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<daodesc>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(addressXName, typeof(address));
            localElementDictionary.Add(chronlistXName, typeof(chronlist));
            localElementDictionary.Add(listXName, typeof(list));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(tableXName, typeof(table));
            localElementDictionary.Add(blockquoteXName, typeof(blockquote));
            localElementDictionary.Add(pXName, typeof(p));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (daodesc?, (daoloc | resource | arc | ptrloc | extptrloc | refloc | extrefloc)+)
    /// </para>
    /// </summary>
    public partial class daogrp : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName daodescXName = System.Xml.Linq.XName.Get("daodesc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName daolocXName = System.Xml.Linq.XName.Get("daoloc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<daoloc> daolocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName resourceXName = System.Xml.Linq.XName.Get("resource", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<resource> resourceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arcXName = System.Xml.Linq.XName.Get("arc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<arc> arcField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrlocXName = System.Xml.Linq.XName.Get("ptrloc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptrloc> ptrlocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrlocXName = System.Xml.Linq.XName.Get("extptrloc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptrloc> extptrlocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName reflocXName = System.Xml.Linq.XName.Get("refloc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<refloc> reflocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extreflocXName = System.Xml.Linq.XName.Get("extrefloc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extrefloc> extreflocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string typeFixedValue = "extended";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator daogrp(XElement xe) { return XTypedServices.ToXTypedElement<daogrp>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static daogrp() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(daodescXName), new ChoiceContentModelEntity(new NamedContentModelEntity(daolocXName), new NamedContentModelEntity(resourceXName), new NamedContentModelEntity(arcXName), new NamedContentModelEntity(ptrlocXName), new NamedContentModelEntity(extptrlocXName), new NamedContentModelEntity(reflocXName), new NamedContentModelEntity(extreflocXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (daodesc?, (daoloc | resource | arc | ptrloc | extptrloc | refloc | extrefloc)+)
        /// </para>
        /// </summary>
        public daogrp() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (daodesc?, (daoloc | resource | arc | ptrloc | extptrloc | refloc | extrefloc)+)
        /// </para>
        /// </summary>
        public virtual daodesc daodesc {
            get {
                XElement x = this.GetElement(daodescXName);
                return ((daodesc)(x));
            }
            set {
                this.SetElement(daodescXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (daodesc?, (daoloc | resource | arc | ptrloc | extptrloc | refloc | extrefloc)+)
        /// </para>
        /// </summary>
        public virtual IList<daoloc> daoloc {
            get {
                if ((this.daolocField == null)) {
                    this.daolocField = new XTypedList<daoloc>(this, LinqToXsdTypeManager.Instance, daolocXName);
                }
                return this.daolocField;
            }
            set {
                if ((value == null)) {
                    this.daolocField = null;
                }
                else {
                    if ((this.daolocField == null)) {
                        this.daolocField = XTypedList<daoloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, daolocXName);
                    }
                    else {
                        XTypedServices.SetList<daoloc>(this.daolocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (daodesc?, (daoloc | resource | arc | ptrloc | extptrloc | refloc | extrefloc)+)
        /// </para>
        /// </summary>
        public virtual IList<resource> resource {
            get {
                if ((this.resourceField == null)) {
                    this.resourceField = new XTypedList<resource>(this, LinqToXsdTypeManager.Instance, resourceXName);
                }
                return this.resourceField;
            }
            set {
                if ((value == null)) {
                    this.resourceField = null;
                }
                else {
                    if ((this.resourceField == null)) {
                        this.resourceField = XTypedList<resource>.Initialize(this, LinqToXsdTypeManager.Instance, value, resourceXName);
                    }
                    else {
                        XTypedServices.SetList<resource>(this.resourceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (daodesc?, (daoloc | resource | arc | ptrloc | extptrloc | refloc | extrefloc)+)
        /// </para>
        /// </summary>
        public virtual IList<arc> arc {
            get {
                if ((this.arcField == null)) {
                    this.arcField = new XTypedList<arc>(this, LinqToXsdTypeManager.Instance, arcXName);
                }
                return this.arcField;
            }
            set {
                if ((value == null)) {
                    this.arcField = null;
                }
                else {
                    if ((this.arcField == null)) {
                        this.arcField = XTypedList<arc>.Initialize(this, LinqToXsdTypeManager.Instance, value, arcXName);
                    }
                    else {
                        XTypedServices.SetList<arc>(this.arcField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (daodesc?, (daoloc | resource | arc | ptrloc | extptrloc | refloc | extrefloc)+)
        /// </para>
        /// </summary>
        public virtual IList<ptrloc> ptrloc {
            get {
                if ((this.ptrlocField == null)) {
                    this.ptrlocField = new XTypedList<ptrloc>(this, LinqToXsdTypeManager.Instance, ptrlocXName);
                }
                return this.ptrlocField;
            }
            set {
                if ((value == null)) {
                    this.ptrlocField = null;
                }
                else {
                    if ((this.ptrlocField == null)) {
                        this.ptrlocField = XTypedList<ptrloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrlocXName);
                    }
                    else {
                        XTypedServices.SetList<ptrloc>(this.ptrlocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (daodesc?, (daoloc | resource | arc | ptrloc | extptrloc | refloc | extrefloc)+)
        /// </para>
        /// </summary>
        public virtual IList<extptrloc> extptrloc {
            get {
                if ((this.extptrlocField == null)) {
                    this.extptrlocField = new XTypedList<extptrloc>(this, LinqToXsdTypeManager.Instance, extptrlocXName);
                }
                return this.extptrlocField;
            }
            set {
                if ((value == null)) {
                    this.extptrlocField = null;
                }
                else {
                    if ((this.extptrlocField == null)) {
                        this.extptrlocField = XTypedList<extptrloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrlocXName);
                    }
                    else {
                        XTypedServices.SetList<extptrloc>(this.extptrlocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (daodesc?, (daoloc | resource | arc | ptrloc | extptrloc | refloc | extrefloc)+)
        /// </para>
        /// </summary>
        public virtual IList<refloc> refloc {
            get {
                if ((this.reflocField == null)) {
                    this.reflocField = new XTypedList<refloc>(this, LinqToXsdTypeManager.Instance, reflocXName);
                }
                return this.reflocField;
            }
            set {
                if ((value == null)) {
                    this.reflocField = null;
                }
                else {
                    if ((this.reflocField == null)) {
                        this.reflocField = XTypedList<refloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, reflocXName);
                    }
                    else {
                        XTypedServices.SetList<refloc>(this.reflocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (daodesc?, (daoloc | resource | arc | ptrloc | extptrloc | refloc | extrefloc)+)
        /// </para>
        /// </summary>
        public virtual IList<extrefloc> extrefloc {
            get {
                if ((this.extreflocField == null)) {
                    this.extreflocField = new XTypedList<extrefloc>(this, LinqToXsdTypeManager.Instance, extreflocXName);
                }
                return this.extreflocField;
            }
            set {
                if ((value == null)) {
                    this.extreflocField = null;
                }
                else {
                    if ((this.extreflocField == null)) {
                        this.extreflocField = XTypedList<extrefloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, extreflocXName);
                    }
                    else {
                        XTypedServices.SetList<extrefloc>(this.extreflocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                return typeFixedValue;
            }
            set {
                if (value.Equals(typeFixedValue)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, typeFixedValue);
                }
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title {
            get {
                XAttribute x = this.Attribute(titleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(titleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<daogrp>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(daodescXName, typeof(daodesc));
            localElementDictionary.Add(daolocXName, typeof(daoloc));
            localElementDictionary.Add(resourceXName, typeof(resource));
            localElementDictionary.Add(arcXName, typeof(arc));
            localElementDictionary.Add(ptrlocXName, typeof(ptrloc));
            localElementDictionary.Add(extptrlocXName, typeof(extptrloc));
            localElementDictionary.Add(reflocXName, typeof(refloc));
            localElementDictionary.Add(extreflocXName, typeof(extrefloc));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (daodesc?)
    /// </para>
    /// </summary>
    public partial class daoloc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName daodescXName = System.Xml.Linq.XName.Get("daodesc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string typeFixedValue = "locator";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName hrefXName = System.Xml.Linq.XName.Get("href", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName labelXName = System.Xml.Linq.XName.Get("label", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName entityrefXName = System.Xml.Linq.XName.Get("entityref", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName xpointerXName = System.Xml.Linq.XName.Get("xpointer", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("daoloc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator daoloc(XElement xe) { return XTypedServices.ToXTypedElement<daoloc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static daoloc() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(daodescXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (daodesc?)
        /// </para>
        /// </summary>
        public daoloc() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (daodesc?)
        /// </para>
        /// </summary>
        public virtual daodesc daodesc {
            get {
                XElement x = this.GetElement(daodescXName);
                return ((daodesc)(x));
            }
            set {
                this.SetElement(daodescXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                return typeFixedValue;
            }
            set {
                if (value.Equals(typeFixedValue)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, typeFixedValue);
                }
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual System.Uri href {
            get {
                XAttribute x = this.Attribute(hrefXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(hrefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title {
            get {
                XAttribute x = this.Attribute(titleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(titleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(labelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(labelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string entityref {
            get {
                XAttribute x = this.Attribute(entityrefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Entity).Datatype);
            }
            set {
                this.SetAttribute(entityrefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Entity).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string xpointer {
            get {
                XAttribute x = this.Attribute(xpointerXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(xpointerXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<daoloc>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(daodescXName, typeof(daodesc));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class ptr : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName targetXName = System.Xml.Linq.XName.Get("target", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName xpointerXName = System.Xml.Linq.XName.Get("xpointer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string typeFixedValue = "simple";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName hrefXName = System.Xml.Linq.XName.Get("href", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arcroleXName = System.Xml.Linq.XName.Get("arcrole", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName showXName = System.Xml.Linq.XName.Get("show", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName actuateXName = System.Xml.Linq.XName.Get("actuate", "http://www.w3.org/1999/xlink");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
		public static explicit operator ptr(XElement xe) { return XTypedServices.ToXTypedElement<ptr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ptr() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string target {
            get {
                XAttribute x = this.Attribute(targetXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(targetXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string xpointer {
            get {
                XAttribute x = this.Attribute(xpointerXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(xpointerXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                return typeFixedValue;
            }
            set {
                if (value.Equals(typeFixedValue)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, typeFixedValue);
                }
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri href {
            get {
                XAttribute x = this.Attribute(hrefXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(hrefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string arcrole {
            get {
                XAttribute x = this.Attribute(arcroleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(arcroleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title {
            get {
                XAttribute x = this.Attribute(titleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(titleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string show {
            get {
                XAttribute x = this.Attribute(showXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(showXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LibraryOfCongress.EAD.ActuateEnum? actuate {
            get {
                XAttribute x = this.Attribute(actuateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LibraryOfCongress.EAD.ActuateEnum)(Enum.Parse(typeof(LibraryOfCongress.EAD.ActuateEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(actuateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ptr>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
    /// </para>
    /// </summary>
    public partial class @ref : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName abbrXName = System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName expanXName = System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName corpnameXName = System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<corpname> corpnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName famnameXName = System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<famname> famnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geognameXName = System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<geogname> geognameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<name> nameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName occupationXName = System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<occupation> occupationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName persnameXName = System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<persname> persnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName subjectXName = System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<subject> subjectField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName genreformXName = System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<genreform> genreformField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName functionXName = System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<function> functionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dateXName = System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<date> dateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName numXName = System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<num> numField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName originationXName = System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<origination> originationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName repositoryXName = System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<repository> repositoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unitdateXName = System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unitdate> unitdateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unittitleXName = System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unittitle> unittitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName addressXName = System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName chronlistXName = System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listXName = System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tableXName = System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName blockquoteXName = System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibrefXName = System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extrefXName = System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName archrefXName = System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName targetXName = System.Xml.Linq.XName.Get("target", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName xpointerXName = System.Xml.Linq.XName.Get("xpointer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string typeFixedValue = "simple";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName hrefXName = System.Xml.Linq.XName.Get("href", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arcroleXName = System.Xml.Linq.XName.Get("arcrole", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName title1XName = System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName showXName = System.Xml.Linq.XName.Get("show", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName actuateXName = System.Xml.Linq.XName.Get("actuate", "http://www.w3.org/1999/xlink");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator @ref(XElement xe) { return XTypedServices.ToXTypedElement<@ref>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static @ref() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName), new NamedContentModelEntity(abbrXName), new NamedContentModelEntity(expanXName), new NamedContentModelEntity(corpnameXName), new NamedContentModelEntity(famnameXName), new NamedContentModelEntity(geognameXName), new NamedContentModelEntity(nameXName), new NamedContentModelEntity(occupationXName), new NamedContentModelEntity(persnameXName), new NamedContentModelEntity(subjectXName), new NamedContentModelEntity(genreformXName), new NamedContentModelEntity(functionXName), new NamedContentModelEntity(dateXName), new NamedContentModelEntity(numXName), new NamedContentModelEntity(originationXName), new NamedContentModelEntity(repositoryXName), new NamedContentModelEntity(unitdateXName), new NamedContentModelEntity(unittitleXName), new NamedContentModelEntity(addressXName), new NamedContentModelEntity(chronlistXName), new NamedContentModelEntity(listXName), new NamedContentModelEntity(noteXName), new NamedContentModelEntity(tableXName), new NamedContentModelEntity(blockquoteXName), new NamedContentModelEntity(bibrefXName), new NamedContentModelEntity(titleXName), new NamedContentModelEntity(extrefXName), new NamedContentModelEntity(archrefXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public @ref() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, abbrXName);
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, abbrXName);
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, expanXName);
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, expanXName);
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<corpname> corpname {
            get {
                if ((this.corpnameField == null)) {
                    this.corpnameField = new XTypedList<corpname>(this, LinqToXsdTypeManager.Instance, corpnameXName);
                }
                return this.corpnameField;
            }
            set {
                if ((value == null)) {
                    this.corpnameField = null;
                }
                else {
                    if ((this.corpnameField == null)) {
                        this.corpnameField = XTypedList<corpname>.Initialize(this, LinqToXsdTypeManager.Instance, value, corpnameXName);
                    }
                    else {
                        XTypedServices.SetList<corpname>(this.corpnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<famname> famname {
            get {
                if ((this.famnameField == null)) {
                    this.famnameField = new XTypedList<famname>(this, LinqToXsdTypeManager.Instance, famnameXName);
                }
                return this.famnameField;
            }
            set {
                if ((value == null)) {
                    this.famnameField = null;
                }
                else {
                    if ((this.famnameField == null)) {
                        this.famnameField = XTypedList<famname>.Initialize(this, LinqToXsdTypeManager.Instance, value, famnameXName);
                    }
                    else {
                        XTypedServices.SetList<famname>(this.famnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<geogname> geogname {
            get {
                if ((this.geognameField == null)) {
                    this.geognameField = new XTypedList<geogname>(this, LinqToXsdTypeManager.Instance, geognameXName);
                }
                return this.geognameField;
            }
            set {
                if ((value == null)) {
                    this.geognameField = null;
                }
                else {
                    if ((this.geognameField == null)) {
                        this.geognameField = XTypedList<geogname>.Initialize(this, LinqToXsdTypeManager.Instance, value, geognameXName);
                    }
                    else {
                        XTypedServices.SetList<geogname>(this.geognameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<name> name {
            get {
                if ((this.nameField == null)) {
                    this.nameField = new XTypedList<name>(this, LinqToXsdTypeManager.Instance, nameXName);
                }
                return this.nameField;
            }
            set {
                if ((value == null)) {
                    this.nameField = null;
                }
                else {
                    if ((this.nameField == null)) {
                        this.nameField = XTypedList<name>.Initialize(this, LinqToXsdTypeManager.Instance, value, nameXName);
                    }
                    else {
                        XTypedServices.SetList<name>(this.nameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<occupation> occupation {
            get {
                if ((this.occupationField == null)) {
                    this.occupationField = new XTypedList<occupation>(this, LinqToXsdTypeManager.Instance, occupationXName);
                }
                return this.occupationField;
            }
            set {
                if ((value == null)) {
                    this.occupationField = null;
                }
                else {
                    if ((this.occupationField == null)) {
                        this.occupationField = XTypedList<occupation>.Initialize(this, LinqToXsdTypeManager.Instance, value, occupationXName);
                    }
                    else {
                        XTypedServices.SetList<occupation>(this.occupationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<persname> persname {
            get {
                if ((this.persnameField == null)) {
                    this.persnameField = new XTypedList<persname>(this, LinqToXsdTypeManager.Instance, persnameXName);
                }
                return this.persnameField;
            }
            set {
                if ((value == null)) {
                    this.persnameField = null;
                }
                else {
                    if ((this.persnameField == null)) {
                        this.persnameField = XTypedList<persname>.Initialize(this, LinqToXsdTypeManager.Instance, value, persnameXName);
                    }
                    else {
                        XTypedServices.SetList<persname>(this.persnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<subject> subject {
            get {
                if ((this.subjectField == null)) {
                    this.subjectField = new XTypedList<subject>(this, LinqToXsdTypeManager.Instance, subjectXName);
                }
                return this.subjectField;
            }
            set {
                if ((value == null)) {
                    this.subjectField = null;
                }
                else {
                    if ((this.subjectField == null)) {
                        this.subjectField = XTypedList<subject>.Initialize(this, LinqToXsdTypeManager.Instance, value, subjectXName);
                    }
                    else {
                        XTypedServices.SetList<subject>(this.subjectField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<genreform> genreform {
            get {
                if ((this.genreformField == null)) {
                    this.genreformField = new XTypedList<genreform>(this, LinqToXsdTypeManager.Instance, genreformXName);
                }
                return this.genreformField;
            }
            set {
                if ((value == null)) {
                    this.genreformField = null;
                }
                else {
                    if ((this.genreformField == null)) {
                        this.genreformField = XTypedList<genreform>.Initialize(this, LinqToXsdTypeManager.Instance, value, genreformXName);
                    }
                    else {
                        XTypedServices.SetList<genreform>(this.genreformField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<function> function {
            get {
                if ((this.functionField == null)) {
                    this.functionField = new XTypedList<function>(this, LinqToXsdTypeManager.Instance, functionXName);
                }
                return this.functionField;
            }
            set {
                if ((value == null)) {
                    this.functionField = null;
                }
                else {
                    if ((this.functionField == null)) {
                        this.functionField = XTypedList<function>.Initialize(this, LinqToXsdTypeManager.Instance, value, functionXName);
                    }
                    else {
                        XTypedServices.SetList<function>(this.functionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<date> date {
            get {
                if ((this.dateField == null)) {
                    this.dateField = new XTypedList<date>(this, LinqToXsdTypeManager.Instance, dateXName);
                }
                return this.dateField;
            }
            set {
                if ((value == null)) {
                    this.dateField = null;
                }
                else {
                    if ((this.dateField == null)) {
                        this.dateField = XTypedList<date>.Initialize(this, LinqToXsdTypeManager.Instance, value, dateXName);
                    }
                    else {
                        XTypedServices.SetList<date>(this.dateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<num> num {
            get {
                if ((this.numField == null)) {
                    this.numField = new XTypedList<num>(this, LinqToXsdTypeManager.Instance, numXName);
                }
                return this.numField;
            }
            set {
                if ((value == null)) {
                    this.numField = null;
                }
                else {
                    if ((this.numField == null)) {
                        this.numField = XTypedList<num>.Initialize(this, LinqToXsdTypeManager.Instance, value, numXName);
                    }
                    else {
                        XTypedServices.SetList<num>(this.numField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<origination> origination {
            get {
                if ((this.originationField == null)) {
                    this.originationField = new XTypedList<origination>(this, LinqToXsdTypeManager.Instance, originationXName);
                }
                return this.originationField;
            }
            set {
                if ((value == null)) {
                    this.originationField = null;
                }
                else {
                    if ((this.originationField == null)) {
                        this.originationField = XTypedList<origination>.Initialize(this, LinqToXsdTypeManager.Instance, value, originationXName);
                    }
                    else {
                        XTypedServices.SetList<origination>(this.originationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<repository> repository {
            get {
                if ((this.repositoryField == null)) {
                    this.repositoryField = new XTypedList<repository>(this, LinqToXsdTypeManager.Instance, repositoryXName);
                }
                return this.repositoryField;
            }
            set {
                if ((value == null)) {
                    this.repositoryField = null;
                }
                else {
                    if ((this.repositoryField == null)) {
                        this.repositoryField = XTypedList<repository>.Initialize(this, LinqToXsdTypeManager.Instance, value, repositoryXName);
                    }
                    else {
                        XTypedServices.SetList<repository>(this.repositoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<unitdate> unitdate {
            get {
                if ((this.unitdateField == null)) {
                    this.unitdateField = new XTypedList<unitdate>(this, LinqToXsdTypeManager.Instance, unitdateXName);
                }
                return this.unitdateField;
            }
            set {
                if ((value == null)) {
                    this.unitdateField = null;
                }
                else {
                    if ((this.unitdateField == null)) {
                        this.unitdateField = XTypedList<unitdate>.Initialize(this, LinqToXsdTypeManager.Instance, value, unitdateXName);
                    }
                    else {
                        XTypedServices.SetList<unitdate>(this.unitdateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<unittitle> unittitle {
            get {
                if ((this.unittitleField == null)) {
                    this.unittitleField = new XTypedList<unittitle>(this, LinqToXsdTypeManager.Instance, unittitleXName);
                }
                return this.unittitleField;
            }
            set {
                if ((value == null)) {
                    this.unittitleField = null;
                }
                else {
                    if ((this.unittitleField == null)) {
                        this.unittitleField = XTypedList<unittitle>.Initialize(this, LinqToXsdTypeManager.Instance, value, unittitleXName);
                    }
                    else {
                        XTypedServices.SetList<unittitle>(this.unittitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, addressXName);
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, addressXName);
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, chronlistXName);
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, chronlistXName);
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, listXName);
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, listXName);
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, tableXName);
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, tableXName);
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, blockquoteXName);
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, blockquoteXName);
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, bibrefXName);
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibrefXName);
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, titleXName);
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, titleXName);
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, extrefXName);
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, extrefXName);
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, archrefXName);
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, archrefXName);
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string target {
            get {
                XAttribute x = this.Attribute(targetXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(targetXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string xpointer {
            get {
                XAttribute x = this.Attribute(xpointerXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(xpointerXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                return typeFixedValue;
            }
            set {
                if (value.Equals(typeFixedValue)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, typeFixedValue);
                }
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri href {
            get {
                XAttribute x = this.Attribute(hrefXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(hrefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string arcrole {
            get {
                XAttribute x = this.Attribute(arcroleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(arcroleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title1 {
            get {
                XAttribute x = this.Attribute(title1XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(title1XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string show {
            get {
                XAttribute x = this.Attribute(showXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(showXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LibraryOfCongress.EAD.ActuateEnum? actuate {
            get {
                XAttribute x = this.Attribute(actuateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LibraryOfCongress.EAD.ActuateEnum)(Enum.Parse(typeof(LibraryOfCongress.EAD.ActuateEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(actuateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<@ref>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
            localElementDictionary.Add(abbrXName, typeof(abbr));
            localElementDictionary.Add(expanXName, typeof(expan));
            localElementDictionary.Add(corpnameXName, typeof(corpname));
            localElementDictionary.Add(famnameXName, typeof(famname));
            localElementDictionary.Add(geognameXName, typeof(geogname));
            localElementDictionary.Add(nameXName, typeof(name));
            localElementDictionary.Add(occupationXName, typeof(occupation));
            localElementDictionary.Add(persnameXName, typeof(persname));
            localElementDictionary.Add(subjectXName, typeof(subject));
            localElementDictionary.Add(genreformXName, typeof(genreform));
            localElementDictionary.Add(functionXName, typeof(function));
            localElementDictionary.Add(dateXName, typeof(date));
            localElementDictionary.Add(numXName, typeof(num));
            localElementDictionary.Add(originationXName, typeof(origination));
            localElementDictionary.Add(repositoryXName, typeof(repository));
            localElementDictionary.Add(unitdateXName, typeof(unitdate));
            localElementDictionary.Add(unittitleXName, typeof(unittitle));
            localElementDictionary.Add(addressXName, typeof(address));
            localElementDictionary.Add(chronlistXName, typeof(chronlist));
            localElementDictionary.Add(listXName, typeof(list));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(tableXName, typeof(table));
            localElementDictionary.Add(blockquoteXName, typeof(blockquote));
            localElementDictionary.Add(bibrefXName, typeof(bibref));
            localElementDictionary.Add(titleXName, typeof(title));
            localElementDictionary.Add(extrefXName, typeof(extref));
            localElementDictionary.Add(archrefXName, typeof(archref));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
    /// </para>
    /// </summary>
    public partial class extref : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName abbrXName = System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName expanXName = System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName corpnameXName = System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<corpname> corpnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName famnameXName = System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<famname> famnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geognameXName = System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<geogname> geognameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<name> nameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName occupationXName = System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<occupation> occupationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName persnameXName = System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<persname> persnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName subjectXName = System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<subject> subjectField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName genreformXName = System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<genreform> genreformField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName functionXName = System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<function> functionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dateXName = System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<date> dateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName numXName = System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<num> numField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName originationXName = System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<origination> originationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName repositoryXName = System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<repository> repositoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unitdateXName = System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unitdate> unitdateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unittitleXName = System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unittitle> unittitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName addressXName = System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName chronlistXName = System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listXName = System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tableXName = System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName blockquoteXName = System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibrefXName = System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName archrefXName = System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @refXName = System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName entityrefXName = System.Xml.Linq.XName.Get("entityref", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName xpointerXName = System.Xml.Linq.XName.Get("xpointer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string typeFixedValue = "simple";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName hrefXName = System.Xml.Linq.XName.Get("href", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arcroleXName = System.Xml.Linq.XName.Get("arcrole", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName title1XName = System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName showXName = System.Xml.Linq.XName.Get("show", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName actuateXName = System.Xml.Linq.XName.Get("actuate", "http://www.w3.org/1999/xlink");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator extref(XElement xe) { return XTypedServices.ToXTypedElement<extref>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static extref() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName), new NamedContentModelEntity(abbrXName), new NamedContentModelEntity(expanXName), new NamedContentModelEntity(corpnameXName), new NamedContentModelEntity(famnameXName), new NamedContentModelEntity(geognameXName), new NamedContentModelEntity(nameXName), new NamedContentModelEntity(occupationXName), new NamedContentModelEntity(persnameXName), new NamedContentModelEntity(subjectXName), new NamedContentModelEntity(genreformXName), new NamedContentModelEntity(functionXName), new NamedContentModelEntity(dateXName), new NamedContentModelEntity(numXName), new NamedContentModelEntity(originationXName), new NamedContentModelEntity(repositoryXName), new NamedContentModelEntity(unitdateXName), new NamedContentModelEntity(unittitleXName), new NamedContentModelEntity(addressXName), new NamedContentModelEntity(chronlistXName), new NamedContentModelEntity(listXName), new NamedContentModelEntity(noteXName), new NamedContentModelEntity(tableXName), new NamedContentModelEntity(blockquoteXName), new NamedContentModelEntity(bibrefXName), new NamedContentModelEntity(titleXName), new NamedContentModelEntity(archrefXName), new NamedContentModelEntity(@refXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public extref() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, abbrXName);
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, abbrXName);
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, expanXName);
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, expanXName);
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<corpname> corpname {
            get {
                if ((this.corpnameField == null)) {
                    this.corpnameField = new XTypedList<corpname>(this, LinqToXsdTypeManager.Instance, corpnameXName);
                }
                return this.corpnameField;
            }
            set {
                if ((value == null)) {
                    this.corpnameField = null;
                }
                else {
                    if ((this.corpnameField == null)) {
                        this.corpnameField = XTypedList<corpname>.Initialize(this, LinqToXsdTypeManager.Instance, value, corpnameXName);
                    }
                    else {
                        XTypedServices.SetList<corpname>(this.corpnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<famname> famname {
            get {
                if ((this.famnameField == null)) {
                    this.famnameField = new XTypedList<famname>(this, LinqToXsdTypeManager.Instance, famnameXName);
                }
                return this.famnameField;
            }
            set {
                if ((value == null)) {
                    this.famnameField = null;
                }
                else {
                    if ((this.famnameField == null)) {
                        this.famnameField = XTypedList<famname>.Initialize(this, LinqToXsdTypeManager.Instance, value, famnameXName);
                    }
                    else {
                        XTypedServices.SetList<famname>(this.famnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<geogname> geogname {
            get {
                if ((this.geognameField == null)) {
                    this.geognameField = new XTypedList<geogname>(this, LinqToXsdTypeManager.Instance, geognameXName);
                }
                return this.geognameField;
            }
            set {
                if ((value == null)) {
                    this.geognameField = null;
                }
                else {
                    if ((this.geognameField == null)) {
                        this.geognameField = XTypedList<geogname>.Initialize(this, LinqToXsdTypeManager.Instance, value, geognameXName);
                    }
                    else {
                        XTypedServices.SetList<geogname>(this.geognameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<name> name {
            get {
                if ((this.nameField == null)) {
                    this.nameField = new XTypedList<name>(this, LinqToXsdTypeManager.Instance, nameXName);
                }
                return this.nameField;
            }
            set {
                if ((value == null)) {
                    this.nameField = null;
                }
                else {
                    if ((this.nameField == null)) {
                        this.nameField = XTypedList<name>.Initialize(this, LinqToXsdTypeManager.Instance, value, nameXName);
                    }
                    else {
                        XTypedServices.SetList<name>(this.nameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<occupation> occupation {
            get {
                if ((this.occupationField == null)) {
                    this.occupationField = new XTypedList<occupation>(this, LinqToXsdTypeManager.Instance, occupationXName);
                }
                return this.occupationField;
            }
            set {
                if ((value == null)) {
                    this.occupationField = null;
                }
                else {
                    if ((this.occupationField == null)) {
                        this.occupationField = XTypedList<occupation>.Initialize(this, LinqToXsdTypeManager.Instance, value, occupationXName);
                    }
                    else {
                        XTypedServices.SetList<occupation>(this.occupationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<persname> persname {
            get {
                if ((this.persnameField == null)) {
                    this.persnameField = new XTypedList<persname>(this, LinqToXsdTypeManager.Instance, persnameXName);
                }
                return this.persnameField;
            }
            set {
                if ((value == null)) {
                    this.persnameField = null;
                }
                else {
                    if ((this.persnameField == null)) {
                        this.persnameField = XTypedList<persname>.Initialize(this, LinqToXsdTypeManager.Instance, value, persnameXName);
                    }
                    else {
                        XTypedServices.SetList<persname>(this.persnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<subject> subject {
            get {
                if ((this.subjectField == null)) {
                    this.subjectField = new XTypedList<subject>(this, LinqToXsdTypeManager.Instance, subjectXName);
                }
                return this.subjectField;
            }
            set {
                if ((value == null)) {
                    this.subjectField = null;
                }
                else {
                    if ((this.subjectField == null)) {
                        this.subjectField = XTypedList<subject>.Initialize(this, LinqToXsdTypeManager.Instance, value, subjectXName);
                    }
                    else {
                        XTypedServices.SetList<subject>(this.subjectField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<genreform> genreform {
            get {
                if ((this.genreformField == null)) {
                    this.genreformField = new XTypedList<genreform>(this, LinqToXsdTypeManager.Instance, genreformXName);
                }
                return this.genreformField;
            }
            set {
                if ((value == null)) {
                    this.genreformField = null;
                }
                else {
                    if ((this.genreformField == null)) {
                        this.genreformField = XTypedList<genreform>.Initialize(this, LinqToXsdTypeManager.Instance, value, genreformXName);
                    }
                    else {
                        XTypedServices.SetList<genreform>(this.genreformField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<function> function {
            get {
                if ((this.functionField == null)) {
                    this.functionField = new XTypedList<function>(this, LinqToXsdTypeManager.Instance, functionXName);
                }
                return this.functionField;
            }
            set {
                if ((value == null)) {
                    this.functionField = null;
                }
                else {
                    if ((this.functionField == null)) {
                        this.functionField = XTypedList<function>.Initialize(this, LinqToXsdTypeManager.Instance, value, functionXName);
                    }
                    else {
                        XTypedServices.SetList<function>(this.functionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<date> date {
            get {
                if ((this.dateField == null)) {
                    this.dateField = new XTypedList<date>(this, LinqToXsdTypeManager.Instance, dateXName);
                }
                return this.dateField;
            }
            set {
                if ((value == null)) {
                    this.dateField = null;
                }
                else {
                    if ((this.dateField == null)) {
                        this.dateField = XTypedList<date>.Initialize(this, LinqToXsdTypeManager.Instance, value, dateXName);
                    }
                    else {
                        XTypedServices.SetList<date>(this.dateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<num> num {
            get {
                if ((this.numField == null)) {
                    this.numField = new XTypedList<num>(this, LinqToXsdTypeManager.Instance, numXName);
                }
                return this.numField;
            }
            set {
                if ((value == null)) {
                    this.numField = null;
                }
                else {
                    if ((this.numField == null)) {
                        this.numField = XTypedList<num>.Initialize(this, LinqToXsdTypeManager.Instance, value, numXName);
                    }
                    else {
                        XTypedServices.SetList<num>(this.numField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<origination> origination {
            get {
                if ((this.originationField == null)) {
                    this.originationField = new XTypedList<origination>(this, LinqToXsdTypeManager.Instance, originationXName);
                }
                return this.originationField;
            }
            set {
                if ((value == null)) {
                    this.originationField = null;
                }
                else {
                    if ((this.originationField == null)) {
                        this.originationField = XTypedList<origination>.Initialize(this, LinqToXsdTypeManager.Instance, value, originationXName);
                    }
                    else {
                        XTypedServices.SetList<origination>(this.originationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<repository> repository {
            get {
                if ((this.repositoryField == null)) {
                    this.repositoryField = new XTypedList<repository>(this, LinqToXsdTypeManager.Instance, repositoryXName);
                }
                return this.repositoryField;
            }
            set {
                if ((value == null)) {
                    this.repositoryField = null;
                }
                else {
                    if ((this.repositoryField == null)) {
                        this.repositoryField = XTypedList<repository>.Initialize(this, LinqToXsdTypeManager.Instance, value, repositoryXName);
                    }
                    else {
                        XTypedServices.SetList<repository>(this.repositoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<unitdate> unitdate {
            get {
                if ((this.unitdateField == null)) {
                    this.unitdateField = new XTypedList<unitdate>(this, LinqToXsdTypeManager.Instance, unitdateXName);
                }
                return this.unitdateField;
            }
            set {
                if ((value == null)) {
                    this.unitdateField = null;
                }
                else {
                    if ((this.unitdateField == null)) {
                        this.unitdateField = XTypedList<unitdate>.Initialize(this, LinqToXsdTypeManager.Instance, value, unitdateXName);
                    }
                    else {
                        XTypedServices.SetList<unitdate>(this.unitdateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<unittitle> unittitle {
            get {
                if ((this.unittitleField == null)) {
                    this.unittitleField = new XTypedList<unittitle>(this, LinqToXsdTypeManager.Instance, unittitleXName);
                }
                return this.unittitleField;
            }
            set {
                if ((value == null)) {
                    this.unittitleField = null;
                }
                else {
                    if ((this.unittitleField == null)) {
                        this.unittitleField = XTypedList<unittitle>.Initialize(this, LinqToXsdTypeManager.Instance, value, unittitleXName);
                    }
                    else {
                        XTypedServices.SetList<unittitle>(this.unittitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, addressXName);
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, addressXName);
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, chronlistXName);
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, chronlistXName);
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, listXName);
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, listXName);
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, tableXName);
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, tableXName);
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, blockquoteXName);
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, blockquoteXName);
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, bibrefXName);
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibrefXName);
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, titleXName);
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, titleXName);
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, archrefXName);
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, archrefXName);
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote | bibref | title | archref | @ref)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, @refXName);
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, @refXName);
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string entityref {
            get {
                XAttribute x = this.Attribute(entityrefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Entity).Datatype);
            }
            set {
                this.SetAttribute(entityrefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Entity).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string xpointer {
            get {
                XAttribute x = this.Attribute(xpointerXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(xpointerXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                return typeFixedValue;
            }
            set {
                if (value.Equals(typeFixedValue)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, typeFixedValue);
                }
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri href {
            get {
                XAttribute x = this.Attribute(hrefXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(hrefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string arcrole {
            get {
                XAttribute x = this.Attribute(arcroleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(arcroleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title1 {
            get {
                XAttribute x = this.Attribute(title1XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(title1XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string show {
            get {
                XAttribute x = this.Attribute(showXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(showXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LibraryOfCongress.EAD.ActuateEnum? actuate {
            get {
                XAttribute x = this.Attribute(actuateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LibraryOfCongress.EAD.ActuateEnum)(Enum.Parse(typeof(LibraryOfCongress.EAD.ActuateEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(actuateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<extref>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
            localElementDictionary.Add(abbrXName, typeof(abbr));
            localElementDictionary.Add(expanXName, typeof(expan));
            localElementDictionary.Add(corpnameXName, typeof(corpname));
            localElementDictionary.Add(famnameXName, typeof(famname));
            localElementDictionary.Add(geognameXName, typeof(geogname));
            localElementDictionary.Add(nameXName, typeof(name));
            localElementDictionary.Add(occupationXName, typeof(occupation));
            localElementDictionary.Add(persnameXName, typeof(persname));
            localElementDictionary.Add(subjectXName, typeof(subject));
            localElementDictionary.Add(genreformXName, typeof(genreform));
            localElementDictionary.Add(functionXName, typeof(function));
            localElementDictionary.Add(dateXName, typeof(date));
            localElementDictionary.Add(numXName, typeof(num));
            localElementDictionary.Add(originationXName, typeof(origination));
            localElementDictionary.Add(repositoryXName, typeof(repository));
            localElementDictionary.Add(unitdateXName, typeof(unitdate));
            localElementDictionary.Add(unittitleXName, typeof(unittitle));
            localElementDictionary.Add(addressXName, typeof(address));
            localElementDictionary.Add(chronlistXName, typeof(chronlist));
            localElementDictionary.Add(listXName, typeof(list));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(tableXName, typeof(table));
            localElementDictionary.Add(blockquoteXName, typeof(blockquote));
            localElementDictionary.Add(bibrefXName, typeof(bibref));
            localElementDictionary.Add(titleXName, typeof(title));
            localElementDictionary.Add(archrefXName, typeof(archref));
            localElementDictionary.Add(@refXName, typeof(@ref));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | date | num)*
    /// </para>
    /// </summary>
    public partial class title : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dateXName = System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<date> dateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName numXName = System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<num> numField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName renderXName = System.Xml.Linq.XName.Get("render", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rulesXName = System.Xml.Linq.XName.Get("rules", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName authfilenumberXName = System.Xml.Linq.XName.Get("authfilenumber", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName normalXName = System.Xml.Linq.XName.Get("normal", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName entityrefXName = System.Xml.Linq.XName.Get("entityref", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName xpointerXName = System.Xml.Linq.XName.Get("xpointer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName type1XName = System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string type1FixedValue = "simple";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName hrefXName = System.Xml.Linq.XName.Get("href", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arcroleXName = System.Xml.Linq.XName.Get("arcrole", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName title1XName = System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName showXName = System.Xml.Linq.XName.Get("show", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName actuateXName = System.Xml.Linq.XName.Get("actuate", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator title(XElement xe) { return XTypedServices.ToXTypedElement<title>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static title() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName), new NamedContentModelEntity(dateXName), new NamedContentModelEntity(numXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | date | num)*
        /// </para>
        /// </summary>
        public title() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | date | num)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | date | num)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | date | num)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | date | num)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | date | num)*
        /// </para>
        /// </summary>
        public virtual IList<date> date {
            get {
                if ((this.dateField == null)) {
                    this.dateField = new XTypedList<date>(this, LinqToXsdTypeManager.Instance, dateXName);
                }
                return this.dateField;
            }
            set {
                if ((value == null)) {
                    this.dateField = null;
                }
                else {
                    if ((this.dateField == null)) {
                        this.dateField = XTypedList<date>.Initialize(this, LinqToXsdTypeManager.Instance, value, dateXName);
                    }
                    else {
                        XTypedServices.SetList<date>(this.dateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | date | num)*
        /// </para>
        /// </summary>
        public virtual IList<num> num {
            get {
                if ((this.numField == null)) {
                    this.numField = new XTypedList<num>(this, LinqToXsdTypeManager.Instance, numXName);
                }
                return this.numField;
            }
            set {
                if ((value == null)) {
                    this.numField = null;
                }
                else {
                    if ((this.numField == null)) {
                        this.numField = XTypedList<num>.Initialize(this, LinqToXsdTypeManager.Instance, value, numXName);
                    }
                    else {
                        XTypedServices.SetList<num>(this.numField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LibraryOfCongress.EAD.avrender? render {
            get {
                XAttribute x = this.Attribute(renderXName);
                if ((x == null)) {
                    return null;
                }
                return ((LibraryOfCongress.EAD.avrender)(Enum.Parse(typeof(LibraryOfCongress.EAD.avrender), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(renderXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string rules {
            get {
                XAttribute x = this.Attribute(rulesXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(rulesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string authfilenumber {
            get {
                XAttribute x = this.Attribute(authfilenumberXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(authfilenumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string normal {
            get {
                XAttribute x = this.Attribute(normalXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(normalXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string entityref {
            get {
                XAttribute x = this.Attribute(entityrefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Entity).Datatype);
            }
            set {
                this.SetAttribute(entityrefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Entity).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string xpointer {
            get {
                XAttribute x = this.Attribute(xpointerXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(xpointerXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type1 {
            get {
                return type1FixedValue;
            }
            set {
                if (value.Equals(type1FixedValue)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, type1FixedValue);
                }
                this.SetAttribute(type1XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri href {
            get {
                XAttribute x = this.Attribute(hrefXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(hrefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string arcrole {
            get {
                XAttribute x = this.Attribute(arcroleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(arcroleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title1 {
            get {
                XAttribute x = this.Attribute(title1XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(title1XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string show {
            get {
                XAttribute x = this.Attribute(showXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(showXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LibraryOfCongress.EAD.ActuateEnum? actuate {
            get {
                XAttribute x = this.Attribute(actuateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LibraryOfCongress.EAD.ActuateEnum)(Enum.Parse(typeof(LibraryOfCongress.EAD.ActuateEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(actuateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<title>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
            localElementDictionary.Add(dateXName, typeof(date));
            localElementDictionary.Add(numXName, typeof(num));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
    /// </para>
    /// </summary>
    public partial class archref : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName abbrXName = System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName expanXName = System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibrefXName = System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @refXName = System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extrefXName = System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @abstractXName = System.Xml.Linq.XName.Get("abstract", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@abstract> @abstractField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName containerXName = System.Xml.Linq.XName.Get("container", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<container> containerField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName daoXName = System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dao> daoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName daogrpXName = System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<daogrp> daogrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName langmaterialXName = System.Xml.Linq.XName.Get("langmaterial", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<langmaterial> langmaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName materialspecXName = System.Xml.Linq.XName.Get("materialspec", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<materialspec> materialspecField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName originationXName = System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<origination> originationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName physdescXName = System.Xml.Linq.XName.Get("physdesc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<physdesc> physdescField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName physlocXName = System.Xml.Linq.XName.Get("physloc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<physloc> physlocField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName repositoryXName = System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<repository> repositoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unitdateXName = System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unitdate> unitdateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unitidXName = System.Xml.Linq.XName.Get("unitid", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unitid> unitidField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unittitleXName = System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unittitle> unittitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName entityrefXName = System.Xml.Linq.XName.Get("entityref", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName xpointerXName = System.Xml.Linq.XName.Get("xpointer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string typeFixedValue = "simple";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName hrefXName = System.Xml.Linq.XName.Get("href", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arcroleXName = System.Xml.Linq.XName.Get("arcrole", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName title1XName = System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName showXName = System.Xml.Linq.XName.Get("show", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName actuateXName = System.Xml.Linq.XName.Get("actuate", "http://www.w3.org/1999/xlink");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator archref(XElement xe) { return XTypedServices.ToXTypedElement<archref>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static archref() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName), new NamedContentModelEntity(abbrXName), new NamedContentModelEntity(expanXName), new NamedContentModelEntity(bibrefXName), new NamedContentModelEntity(@refXName), new NamedContentModelEntity(titleXName), new NamedContentModelEntity(extrefXName), new NamedContentModelEntity(@abstractXName), new NamedContentModelEntity(containerXName), new NamedContentModelEntity(daoXName), new NamedContentModelEntity(daogrpXName), new NamedContentModelEntity(langmaterialXName), new NamedContentModelEntity(materialspecXName), new NamedContentModelEntity(noteXName), new NamedContentModelEntity(originationXName), new NamedContentModelEntity(physdescXName), new NamedContentModelEntity(physlocXName), new NamedContentModelEntity(repositoryXName), new NamedContentModelEntity(unitdateXName), new NamedContentModelEntity(unitidXName), new NamedContentModelEntity(unittitleXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public archref() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, abbrXName);
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, abbrXName);
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, expanXName);
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, expanXName);
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, bibrefXName);
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibrefXName);
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, @refXName);
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, @refXName);
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, titleXName);
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, titleXName);
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, extrefXName);
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, extrefXName);
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<@abstract> @abstract {
            get {
                if ((this.@abstractField == null)) {
                    this.@abstractField = new XTypedList<@abstract>(this, LinqToXsdTypeManager.Instance, @abstractXName);
                }
                return this.@abstractField;
            }
            set {
                if ((value == null)) {
                    this.@abstractField = null;
                }
                else {
                    if ((this.@abstractField == null)) {
                        this.@abstractField = XTypedList<@abstract>.Initialize(this, LinqToXsdTypeManager.Instance, value, @abstractXName);
                    }
                    else {
                        XTypedServices.SetList<@abstract>(this.@abstractField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<container> container {
            get {
                if ((this.containerField == null)) {
                    this.containerField = new XTypedList<container>(this, LinqToXsdTypeManager.Instance, containerXName);
                }
                return this.containerField;
            }
            set {
                if ((value == null)) {
                    this.containerField = null;
                }
                else {
                    if ((this.containerField == null)) {
                        this.containerField = XTypedList<container>.Initialize(this, LinqToXsdTypeManager.Instance, value, containerXName);
                    }
                    else {
                        XTypedServices.SetList<container>(this.containerField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<dao> dao {
            get {
                if ((this.daoField == null)) {
                    this.daoField = new XTypedList<dao>(this, LinqToXsdTypeManager.Instance, daoXName);
                }
                return this.daoField;
            }
            set {
                if ((value == null)) {
                    this.daoField = null;
                }
                else {
                    if ((this.daoField == null)) {
                        this.daoField = XTypedList<dao>.Initialize(this, LinqToXsdTypeManager.Instance, value, daoXName);
                    }
                    else {
                        XTypedServices.SetList<dao>(this.daoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<daogrp> daogrp {
            get {
                if ((this.daogrpField == null)) {
                    this.daogrpField = new XTypedList<daogrp>(this, LinqToXsdTypeManager.Instance, daogrpXName);
                }
                return this.daogrpField;
            }
            set {
                if ((value == null)) {
                    this.daogrpField = null;
                }
                else {
                    if ((this.daogrpField == null)) {
                        this.daogrpField = XTypedList<daogrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, daogrpXName);
                    }
                    else {
                        XTypedServices.SetList<daogrp>(this.daogrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<langmaterial> langmaterial {
            get {
                if ((this.langmaterialField == null)) {
                    this.langmaterialField = new XTypedList<langmaterial>(this, LinqToXsdTypeManager.Instance, langmaterialXName);
                }
                return this.langmaterialField;
            }
            set {
                if ((value == null)) {
                    this.langmaterialField = null;
                }
                else {
                    if ((this.langmaterialField == null)) {
                        this.langmaterialField = XTypedList<langmaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, langmaterialXName);
                    }
                    else {
                        XTypedServices.SetList<langmaterial>(this.langmaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<materialspec> materialspec {
            get {
                if ((this.materialspecField == null)) {
                    this.materialspecField = new XTypedList<materialspec>(this, LinqToXsdTypeManager.Instance, materialspecXName);
                }
                return this.materialspecField;
            }
            set {
                if ((value == null)) {
                    this.materialspecField = null;
                }
                else {
                    if ((this.materialspecField == null)) {
                        this.materialspecField = XTypedList<materialspec>.Initialize(this, LinqToXsdTypeManager.Instance, value, materialspecXName);
                    }
                    else {
                        XTypedServices.SetList<materialspec>(this.materialspecField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<origination> origination {
            get {
                if ((this.originationField == null)) {
                    this.originationField = new XTypedList<origination>(this, LinqToXsdTypeManager.Instance, originationXName);
                }
                return this.originationField;
            }
            set {
                if ((value == null)) {
                    this.originationField = null;
                }
                else {
                    if ((this.originationField == null)) {
                        this.originationField = XTypedList<origination>.Initialize(this, LinqToXsdTypeManager.Instance, value, originationXName);
                    }
                    else {
                        XTypedServices.SetList<origination>(this.originationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<physdesc> physdesc {
            get {
                if ((this.physdescField == null)) {
                    this.physdescField = new XTypedList<physdesc>(this, LinqToXsdTypeManager.Instance, physdescXName);
                }
                return this.physdescField;
            }
            set {
                if ((value == null)) {
                    this.physdescField = null;
                }
                else {
                    if ((this.physdescField == null)) {
                        this.physdescField = XTypedList<physdesc>.Initialize(this, LinqToXsdTypeManager.Instance, value, physdescXName);
                    }
                    else {
                        XTypedServices.SetList<physdesc>(this.physdescField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<physloc> physloc {
            get {
                if ((this.physlocField == null)) {
                    this.physlocField = new XTypedList<physloc>(this, LinqToXsdTypeManager.Instance, physlocXName);
                }
                return this.physlocField;
            }
            set {
                if ((value == null)) {
                    this.physlocField = null;
                }
                else {
                    if ((this.physlocField == null)) {
                        this.physlocField = XTypedList<physloc>.Initialize(this, LinqToXsdTypeManager.Instance, value, physlocXName);
                    }
                    else {
                        XTypedServices.SetList<physloc>(this.physlocField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<repository> repository {
            get {
                if ((this.repositoryField == null)) {
                    this.repositoryField = new XTypedList<repository>(this, LinqToXsdTypeManager.Instance, repositoryXName);
                }
                return this.repositoryField;
            }
            set {
                if ((value == null)) {
                    this.repositoryField = null;
                }
                else {
                    if ((this.repositoryField == null)) {
                        this.repositoryField = XTypedList<repository>.Initialize(this, LinqToXsdTypeManager.Instance, value, repositoryXName);
                    }
                    else {
                        XTypedServices.SetList<repository>(this.repositoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<unitdate> unitdate {
            get {
                if ((this.unitdateField == null)) {
                    this.unitdateField = new XTypedList<unitdate>(this, LinqToXsdTypeManager.Instance, unitdateXName);
                }
                return this.unitdateField;
            }
            set {
                if ((value == null)) {
                    this.unitdateField = null;
                }
                else {
                    if ((this.unitdateField == null)) {
                        this.unitdateField = XTypedList<unitdate>.Initialize(this, LinqToXsdTypeManager.Instance, value, unitdateXName);
                    }
                    else {
                        XTypedServices.SetList<unitdate>(this.unitdateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<unitid> unitid {
            get {
                if ((this.unitidField == null)) {
                    this.unitidField = new XTypedList<unitid>(this, LinqToXsdTypeManager.Instance, unitidXName);
                }
                return this.unitidField;
            }
            set {
                if ((value == null)) {
                    this.unitidField = null;
                }
                else {
                    if ((this.unitidField == null)) {
                        this.unitidField = XTypedList<unitid>.Initialize(this, LinqToXsdTypeManager.Instance, value, unitidXName);
                    }
                    else {
                        XTypedServices.SetList<unitid>(this.unitidField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | bibref | @ref | title | extref | @abstract | container | dao | daogrp | langmaterial | materialspec | note | origination | physdesc | physloc | repository | unitdate | unitid | unittitle)*
        /// </para>
        /// </summary>
        public virtual IList<unittitle> unittitle {
            get {
                if ((this.unittitleField == null)) {
                    this.unittitleField = new XTypedList<unittitle>(this, LinqToXsdTypeManager.Instance, unittitleXName);
                }
                return this.unittitleField;
            }
            set {
                if ((value == null)) {
                    this.unittitleField = null;
                }
                else {
                    if ((this.unittitleField == null)) {
                        this.unittitleField = XTypedList<unittitle>.Initialize(this, LinqToXsdTypeManager.Instance, value, unittitleXName);
                    }
                    else {
                        XTypedServices.SetList<unittitle>(this.unittitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string entityref {
            get {
                XAttribute x = this.Attribute(entityrefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Entity).Datatype);
            }
            set {
                this.SetAttribute(entityrefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Entity).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string xpointer {
            get {
                XAttribute x = this.Attribute(xpointerXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(xpointerXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                return typeFixedValue;
            }
            set {
                if (value.Equals(typeFixedValue)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, typeFixedValue);
                }
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri href {
            get {
                XAttribute x = this.Attribute(hrefXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(hrefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string arcrole {
            get {
                XAttribute x = this.Attribute(arcroleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(arcroleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title1 {
            get {
                XAttribute x = this.Attribute(title1XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(title1XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string show {
            get {
                XAttribute x = this.Attribute(showXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(showXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LibraryOfCongress.EAD.ActuateEnum? actuate {
            get {
                XAttribute x = this.Attribute(actuateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LibraryOfCongress.EAD.ActuateEnum)(Enum.Parse(typeof(LibraryOfCongress.EAD.ActuateEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(actuateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<archref>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
            localElementDictionary.Add(abbrXName, typeof(abbr));
            localElementDictionary.Add(expanXName, typeof(expan));
            localElementDictionary.Add(bibrefXName, typeof(bibref));
            localElementDictionary.Add(@refXName, typeof(@ref));
            localElementDictionary.Add(titleXName, typeof(title));
            localElementDictionary.Add(extrefXName, typeof(extref));
            localElementDictionary.Add(@abstractXName, typeof(@abstract));
            localElementDictionary.Add(containerXName, typeof(container));
            localElementDictionary.Add(daoXName, typeof(dao));
            localElementDictionary.Add(daogrpXName, typeof(daogrp));
            localElementDictionary.Add(langmaterialXName, typeof(langmaterial));
            localElementDictionary.Add(materialspecXName, typeof(materialspec));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(originationXName, typeof(origination));
            localElementDictionary.Add(physdescXName, typeof(physdesc));
            localElementDictionary.Add(physlocXName, typeof(physloc));
            localElementDictionary.Add(repositoryXName, typeof(repository));
            localElementDictionary.Add(unitdateXName, typeof(unitdate));
            localElementDictionary.Add(unitidXName, typeof(unitid));
            localElementDictionary.Add(unittitleXName, typeof(unittitle));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | edition | imprint | name | num | bibseries | @ref | title | famname | persname | corpname | extref | archref)*
    /// </para>
    /// </summary>
    public partial class bibref : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName abbrXName = System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName expanXName = System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName editionXName = System.Xml.Linq.XName.Get("edition", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<edition> editionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName imprintXName = System.Xml.Linq.XName.Get("imprint", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<imprint> imprintField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<name> nameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName numXName = System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<num> numField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibseriesXName = System.Xml.Linq.XName.Get("bibseries", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibseries> bibseriesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @refXName = System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName famnameXName = System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<famname> famnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName persnameXName = System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<persname> persnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName corpnameXName = System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<corpname> corpnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extrefXName = System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName archrefXName = System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName entityrefXName = System.Xml.Linq.XName.Get("entityref", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName xpointerXName = System.Xml.Linq.XName.Get("xpointer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string typeFixedValue = "simple";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName hrefXName = System.Xml.Linq.XName.Get("href", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arcroleXName = System.Xml.Linq.XName.Get("arcrole", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName title1XName = System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName showXName = System.Xml.Linq.XName.Get("show", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName actuateXName = System.Xml.Linq.XName.Get("actuate", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator bibref(XElement xe) { return XTypedServices.ToXTypedElement<bibref>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static bibref() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName), new NamedContentModelEntity(abbrXName), new NamedContentModelEntity(expanXName), new NamedContentModelEntity(editionXName), new NamedContentModelEntity(imprintXName), new NamedContentModelEntity(nameXName), new NamedContentModelEntity(numXName), new NamedContentModelEntity(bibseriesXName), new NamedContentModelEntity(@refXName), new NamedContentModelEntity(titleXName), new NamedContentModelEntity(famnameXName), new NamedContentModelEntity(persnameXName), new NamedContentModelEntity(corpnameXName), new NamedContentModelEntity(extrefXName), new NamedContentModelEntity(archrefXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | edition | imprint | name | num | bibseries | @ref | title | famname | persname | corpname | extref | archref)*
        /// </para>
        /// </summary>
        public bibref() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | edition | imprint | name | num | bibseries | @ref | title | famname | persname | corpname | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | edition | imprint | name | num | bibseries | @ref | title | famname | persname | corpname | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | edition | imprint | name | num | bibseries | @ref | title | famname | persname | corpname | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | edition | imprint | name | num | bibseries | @ref | title | famname | persname | corpname | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | edition | imprint | name | num | bibseries | @ref | title | famname | persname | corpname | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, abbrXName);
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, abbrXName);
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | edition | imprint | name | num | bibseries | @ref | title | famname | persname | corpname | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, expanXName);
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, expanXName);
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | edition | imprint | name | num | bibseries | @ref | title | famname | persname | corpname | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<edition> edition {
            get {
                if ((this.editionField == null)) {
                    this.editionField = new XTypedList<edition>(this, LinqToXsdTypeManager.Instance, editionXName);
                }
                return this.editionField;
            }
            set {
                if ((value == null)) {
                    this.editionField = null;
                }
                else {
                    if ((this.editionField == null)) {
                        this.editionField = XTypedList<edition>.Initialize(this, LinqToXsdTypeManager.Instance, value, editionXName);
                    }
                    else {
                        XTypedServices.SetList<edition>(this.editionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | edition | imprint | name | num | bibseries | @ref | title | famname | persname | corpname | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<imprint> imprint {
            get {
                if ((this.imprintField == null)) {
                    this.imprintField = new XTypedList<imprint>(this, LinqToXsdTypeManager.Instance, imprintXName);
                }
                return this.imprintField;
            }
            set {
                if ((value == null)) {
                    this.imprintField = null;
                }
                else {
                    if ((this.imprintField == null)) {
                        this.imprintField = XTypedList<imprint>.Initialize(this, LinqToXsdTypeManager.Instance, value, imprintXName);
                    }
                    else {
                        XTypedServices.SetList<imprint>(this.imprintField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | edition | imprint | name | num | bibseries | @ref | title | famname | persname | corpname | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<name> name {
            get {
                if ((this.nameField == null)) {
                    this.nameField = new XTypedList<name>(this, LinqToXsdTypeManager.Instance, nameXName);
                }
                return this.nameField;
            }
            set {
                if ((value == null)) {
                    this.nameField = null;
                }
                else {
                    if ((this.nameField == null)) {
                        this.nameField = XTypedList<name>.Initialize(this, LinqToXsdTypeManager.Instance, value, nameXName);
                    }
                    else {
                        XTypedServices.SetList<name>(this.nameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | edition | imprint | name | num | bibseries | @ref | title | famname | persname | corpname | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<num> num {
            get {
                if ((this.numField == null)) {
                    this.numField = new XTypedList<num>(this, LinqToXsdTypeManager.Instance, numXName);
                }
                return this.numField;
            }
            set {
                if ((value == null)) {
                    this.numField = null;
                }
                else {
                    if ((this.numField == null)) {
                        this.numField = XTypedList<num>.Initialize(this, LinqToXsdTypeManager.Instance, value, numXName);
                    }
                    else {
                        XTypedServices.SetList<num>(this.numField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | edition | imprint | name | num | bibseries | @ref | title | famname | persname | corpname | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<bibseries> bibseries {
            get {
                if ((this.bibseriesField == null)) {
                    this.bibseriesField = new XTypedList<bibseries>(this, LinqToXsdTypeManager.Instance, bibseriesXName);
                }
                return this.bibseriesField;
            }
            set {
                if ((value == null)) {
                    this.bibseriesField = null;
                }
                else {
                    if ((this.bibseriesField == null)) {
                        this.bibseriesField = XTypedList<bibseries>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibseriesXName);
                    }
                    else {
                        XTypedServices.SetList<bibseries>(this.bibseriesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | edition | imprint | name | num | bibseries | @ref | title | famname | persname | corpname | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, @refXName);
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, @refXName);
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | edition | imprint | name | num | bibseries | @ref | title | famname | persname | corpname | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, titleXName);
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, titleXName);
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | edition | imprint | name | num | bibseries | @ref | title | famname | persname | corpname | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<famname> famname {
            get {
                if ((this.famnameField == null)) {
                    this.famnameField = new XTypedList<famname>(this, LinqToXsdTypeManager.Instance, famnameXName);
                }
                return this.famnameField;
            }
            set {
                if ((value == null)) {
                    this.famnameField = null;
                }
                else {
                    if ((this.famnameField == null)) {
                        this.famnameField = XTypedList<famname>.Initialize(this, LinqToXsdTypeManager.Instance, value, famnameXName);
                    }
                    else {
                        XTypedServices.SetList<famname>(this.famnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | edition | imprint | name | num | bibseries | @ref | title | famname | persname | corpname | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<persname> persname {
            get {
                if ((this.persnameField == null)) {
                    this.persnameField = new XTypedList<persname>(this, LinqToXsdTypeManager.Instance, persnameXName);
                }
                return this.persnameField;
            }
            set {
                if ((value == null)) {
                    this.persnameField = null;
                }
                else {
                    if ((this.persnameField == null)) {
                        this.persnameField = XTypedList<persname>.Initialize(this, LinqToXsdTypeManager.Instance, value, persnameXName);
                    }
                    else {
                        XTypedServices.SetList<persname>(this.persnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | edition | imprint | name | num | bibseries | @ref | title | famname | persname | corpname | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<corpname> corpname {
            get {
                if ((this.corpnameField == null)) {
                    this.corpnameField = new XTypedList<corpname>(this, LinqToXsdTypeManager.Instance, corpnameXName);
                }
                return this.corpnameField;
            }
            set {
                if ((value == null)) {
                    this.corpnameField = null;
                }
                else {
                    if ((this.corpnameField == null)) {
                        this.corpnameField = XTypedList<corpname>.Initialize(this, LinqToXsdTypeManager.Instance, value, corpnameXName);
                    }
                    else {
                        XTypedServices.SetList<corpname>(this.corpnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | edition | imprint | name | num | bibseries | @ref | title | famname | persname | corpname | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, extrefXName);
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, extrefXName);
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | edition | imprint | name | num | bibseries | @ref | title | famname | persname | corpname | extref | archref)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, archrefXName);
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, archrefXName);
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string entityref {
            get {
                XAttribute x = this.Attribute(entityrefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Entity).Datatype);
            }
            set {
                this.SetAttribute(entityrefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Entity).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string xpointer {
            get {
                XAttribute x = this.Attribute(xpointerXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(xpointerXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                return typeFixedValue;
            }
            set {
                if (value.Equals(typeFixedValue)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, typeFixedValue);
                }
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri href {
            get {
                XAttribute x = this.Attribute(hrefXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(hrefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string arcrole {
            get {
                XAttribute x = this.Attribute(arcroleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(arcroleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title1 {
            get {
                XAttribute x = this.Attribute(title1XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(title1XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string show {
            get {
                XAttribute x = this.Attribute(showXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(showXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LibraryOfCongress.EAD.ActuateEnum? actuate {
            get {
                XAttribute x = this.Attribute(actuateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LibraryOfCongress.EAD.ActuateEnum)(Enum.Parse(typeof(LibraryOfCongress.EAD.ActuateEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(actuateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<bibref>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
            localElementDictionary.Add(abbrXName, typeof(abbr));
            localElementDictionary.Add(expanXName, typeof(expan));
            localElementDictionary.Add(editionXName, typeof(edition));
            localElementDictionary.Add(imprintXName, typeof(imprint));
            localElementDictionary.Add(nameXName, typeof(name));
            localElementDictionary.Add(numXName, typeof(num));
            localElementDictionary.Add(bibseriesXName, typeof(bibseries));
            localElementDictionary.Add(@refXName, typeof(@ref));
            localElementDictionary.Add(titleXName, typeof(title));
            localElementDictionary.Add(famnameXName, typeof(famname));
            localElementDictionary.Add(persnameXName, typeof(persname));
            localElementDictionary.Add(corpnameXName, typeof(corpname));
            localElementDictionary.Add(extrefXName, typeof(extref));
            localElementDictionary.Add(archrefXName, typeof(archref));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb)*
    /// </para>
    /// </summary>
    public partial class edition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("edition", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator edition(XElement xe) { return XTypedServices.ToXTypedElement<edition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static edition() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public edition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<edition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | title | num)*
    /// </para>
    /// </summary>
    public partial class bibseries : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName numXName = System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<num> numField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("bibseries", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator bibseries(XElement xe) { return XTypedServices.ToXTypedElement<bibseries>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static bibseries() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName), new NamedContentModelEntity(titleXName), new NamedContentModelEntity(numXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | title | num)*
        /// </para>
        /// </summary>
        public bibseries() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | title | num)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | title | num)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | title | num)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | title | num)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | title | num)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, titleXName);
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, titleXName);
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | title | num)*
        /// </para>
        /// </summary>
        public virtual IList<num> num {
            get {
                if ((this.numField == null)) {
                    this.numField = new XTypedList<num>(this, LinqToXsdTypeManager.Instance, numXName);
                }
                return this.numField;
            }
            set {
                if ((value == null)) {
                    this.numField = null;
                }
                else {
                    if ((this.numField == null)) {
                        this.numField = XTypedList<num>.Initialize(this, LinqToXsdTypeManager.Instance, value, numXName);
                    }
                    else {
                        XTypedServices.SetList<num>(this.numField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<bibseries>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
            localElementDictionary.Add(titleXName, typeof(title));
            localElementDictionary.Add(numXName, typeof(num));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | publisher | geogname | date)*
    /// </para>
    /// </summary>
    public partial class imprint : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName publisherXName = System.Xml.Linq.XName.Get("publisher", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<publisher> publisherField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geognameXName = System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<geogname> geognameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dateXName = System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<date> dateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("imprint", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator imprint(XElement xe) { return XTypedServices.ToXTypedElement<imprint>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static imprint() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName), new NamedContentModelEntity(publisherXName), new NamedContentModelEntity(geognameXName), new NamedContentModelEntity(dateXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | publisher | geogname | date)*
        /// </para>
        /// </summary>
        public imprint() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | publisher | geogname | date)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | publisher | geogname | date)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | publisher | geogname | date)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | publisher | geogname | date)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | publisher | geogname | date)*
        /// </para>
        /// </summary>
        public virtual IList<publisher> publisher {
            get {
                if ((this.publisherField == null)) {
                    this.publisherField = new XTypedList<publisher>(this, LinqToXsdTypeManager.Instance, publisherXName);
                }
                return this.publisherField;
            }
            set {
                if ((value == null)) {
                    this.publisherField = null;
                }
                else {
                    if ((this.publisherField == null)) {
                        this.publisherField = XTypedList<publisher>.Initialize(this, LinqToXsdTypeManager.Instance, value, publisherXName);
                    }
                    else {
                        XTypedServices.SetList<publisher>(this.publisherField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | publisher | geogname | date)*
        /// </para>
        /// </summary>
        public virtual IList<geogname> geogname {
            get {
                if ((this.geognameField == null)) {
                    this.geognameField = new XTypedList<geogname>(this, LinqToXsdTypeManager.Instance, geognameXName);
                }
                return this.geognameField;
            }
            set {
                if ((value == null)) {
                    this.geognameField = null;
                }
                else {
                    if ((this.geognameField == null)) {
                        this.geognameField = XTypedList<geogname>.Initialize(this, LinqToXsdTypeManager.Instance, value, geognameXName);
                    }
                    else {
                        XTypedServices.SetList<geogname>(this.geognameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | publisher | geogname | date)*
        /// </para>
        /// </summary>
        public virtual IList<date> date {
            get {
                if ((this.dateField == null)) {
                    this.dateField = new XTypedList<date>(this, LinqToXsdTypeManager.Instance, dateXName);
                }
                return this.dateField;
            }
            set {
                if ((value == null)) {
                    this.dateField = null;
                }
                else {
                    if ((this.dateField == null)) {
                        this.dateField = XTypedList<date>.Initialize(this, LinqToXsdTypeManager.Instance, value, dateXName);
                    }
                    else {
                        XTypedServices.SetList<date>(this.dateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<imprint>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
            localElementDictionary.Add(publisherXName, typeof(publisher));
            localElementDictionary.Add(geognameXName, typeof(geogname));
            localElementDictionary.Add(dateXName, typeof(date));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb)*
    /// </para>
    /// </summary>
    public partial class publisher : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("publisher", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator publisher(XElement xe) { return XTypedServices.ToXTypedElement<publisher>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static publisher() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public publisher() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<publisher>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | subarea)*
    /// </para>
    /// </summary>
    public partial class corpname : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName subareaXName = System.Xml.Linq.XName.Get("subarea", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<subarea> subareaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rulesXName = System.Xml.Linq.XName.Get("rules", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName authfilenumberXName = System.Xml.Linq.XName.Get("authfilenumber", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName normalXName = System.Xml.Linq.XName.Get("normal", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator corpname(XElement xe) { return XTypedServices.ToXTypedElement<corpname>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static corpname() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName), new NamedContentModelEntity(subareaXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | subarea)*
        /// </para>
        /// </summary>
        public corpname() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | subarea)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | subarea)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | subarea)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | subarea)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | subarea)*
        /// </para>
        /// </summary>
        public virtual IList<subarea> subarea {
            get {
                if ((this.subareaField == null)) {
                    this.subareaField = new XTypedList<subarea>(this, LinqToXsdTypeManager.Instance, subareaXName);
                }
                return this.subareaField;
            }
            set {
                if ((value == null)) {
                    this.subareaField = null;
                }
                else {
                    if ((this.subareaField == null)) {
                        this.subareaField = XTypedList<subarea>.Initialize(this, LinqToXsdTypeManager.Instance, value, subareaXName);
                    }
                    else {
                        XTypedServices.SetList<subarea>(this.subareaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string rules {
            get {
                XAttribute x = this.Attribute(rulesXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(rulesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string authfilenumber {
            get {
                XAttribute x = this.Attribute(authfilenumberXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(authfilenumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string normal {
            get {
                XAttribute x = this.Attribute(normalXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(normalXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<corpname>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
            localElementDictionary.Add(subareaXName, typeof(subarea));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb)*
    /// </para>
    /// </summary>
    public partial class famname : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rulesXName = System.Xml.Linq.XName.Get("rules", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName authfilenumberXName = System.Xml.Linq.XName.Get("authfilenumber", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName normalXName = System.Xml.Linq.XName.Get("normal", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator famname(XElement xe) { return XTypedServices.ToXTypedElement<famname>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static famname() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public famname() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string rules {
            get {
                XAttribute x = this.Attribute(rulesXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(rulesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string authfilenumber {
            get {
                XAttribute x = this.Attribute(authfilenumberXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(authfilenumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string normal {
            get {
                XAttribute x = this.Attribute(normalXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(normalXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<famname>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb)*
    /// </para>
    /// </summary>
    public partial class geogname : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rulesXName = System.Xml.Linq.XName.Get("rules", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName authfilenumberXName = System.Xml.Linq.XName.Get("authfilenumber", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName normalXName = System.Xml.Linq.XName.Get("normal", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator geogname(XElement xe) { return XTypedServices.ToXTypedElement<geogname>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static geogname() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public geogname() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string rules {
            get {
                XAttribute x = this.Attribute(rulesXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(rulesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string authfilenumber {
            get {
                XAttribute x = this.Attribute(authfilenumberXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(authfilenumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string normal {
            get {
                XAttribute x = this.Attribute(normalXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(normalXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<geogname>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb)*
    /// </para>
    /// </summary>
    public partial class name : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rulesXName = System.Xml.Linq.XName.Get("rules", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName authfilenumberXName = System.Xml.Linq.XName.Get("authfilenumber", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName normalXName = System.Xml.Linq.XName.Get("normal", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator name(XElement xe) { return XTypedServices.ToXTypedElement<name>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static name() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public name() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string rules {
            get {
                XAttribute x = this.Attribute(rulesXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(rulesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string authfilenumber {
            get {
                XAttribute x = this.Attribute(authfilenumberXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(authfilenumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string normal {
            get {
                XAttribute x = this.Attribute(normalXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(normalXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<name>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb)*
    /// </para>
    /// </summary>
    public partial class persname : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rulesXName = System.Xml.Linq.XName.Get("rules", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName authfilenumberXName = System.Xml.Linq.XName.Get("authfilenumber", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName normalXName = System.Xml.Linq.XName.Get("normal", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator persname(XElement xe) { return XTypedServices.ToXTypedElement<persname>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static persname() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public persname() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string rules {
            get {
                XAttribute x = this.Attribute(rulesXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(rulesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string authfilenumber {
            get {
                XAttribute x = this.Attribute(authfilenumberXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(authfilenumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string normal {
            get {
                XAttribute x = this.Attribute(normalXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(normalXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<persname>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb)*
    /// </para>
    /// </summary>
    public partial class date : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName eraXName = System.Xml.Linq.XName.Get("era", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string eraDefaultValue = "ce";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName calendarXName = System.Xml.Linq.XName.Get("calendar", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string calendarDefaultValue = "gregorian";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName normalXName = System.Xml.Linq.XName.Get("normal", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName certaintyXName = System.Xml.Linq.XName.Get("certainty", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator date(XElement xe) { return XTypedServices.ToXTypedElement<date>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static date() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public date() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string era {
            get {
                XAttribute x = this.Attribute(eraXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, eraDefaultValue);
            }
            set {
                this.SetAttribute(eraXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string calendar {
            get {
                XAttribute x = this.Attribute(calendarXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, calendarDefaultValue);
            }
            set {
                this.SetAttribute(calendarXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string normal {
            get {
                XAttribute x = this.Attribute(normalXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(normalXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string certainty {
            get {
                XAttribute x = this.Attribute(certaintyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(certaintyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<date>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb)*
    /// </para>
    /// </summary>
    public partial class num : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator num(XElement xe) { return XTypedServices.ToXTypedElement<num>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static num() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public num() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<num>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class abbr : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName expanXName = System.Xml.Linq.XName.Get("expan", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9");
        
		public static explicit operator abbr(XElement xe) { return XTypedServices.ToXTypedElement<abbr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public abbr() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string expan {
            get {
                XAttribute x = this.Attribute(expanXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(expanXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<abbr>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class expan : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName abbrXName = System.Xml.Linq.XName.Get("abbr", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9");
        
		public static explicit operator expan(XElement xe) { return XTypedServices.ToXTypedElement<expan>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public expan() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string abbr {
            get {
                XAttribute x = this.Attribute(abbrXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(abbrXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<expan>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (addressline+)
    /// </para>
    /// </summary>
    public partial class address : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName addresslineXName = System.Xml.Linq.XName.Get("addressline", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<addressline> addresslineField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator address(XElement xe) { return XTypedServices.ToXTypedElement<address>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static address() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(addresslineXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (addressline+)
        /// </para>
        /// </summary>
        public address() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (addressline+)
        /// </para>
        /// </summary>
        public virtual IList<addressline> addressline {
            get {
                if ((this.addresslineField == null)) {
                    this.addresslineField = new XTypedList<addressline>(this, LinqToXsdTypeManager.Instance, addresslineXName);
                }
                return this.addresslineField;
            }
            set {
                if ((value == null)) {
                    this.addresslineField = null;
                }
                else {
                    if ((this.addresslineField == null)) {
                        this.addresslineField = XTypedList<addressline>.Initialize(this, LinqToXsdTypeManager.Instance, value, addresslineXName);
                    }
                    else {
                        XTypedServices.SetList<addressline>(this.addresslineField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<address>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(addresslineXName, typeof(addressline));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb)*
    /// </para>
    /// </summary>
    public partial class addressline : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("addressline", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator addressline(XElement xe) { return XTypedServices.ToXTypedElement<addressline>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static addressline() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public addressline() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<addressline>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
    /// </para>
    /// </summary>
    public partial class @event : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName abbrXName = System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName expanXName = System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName corpnameXName = System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<corpname> corpnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName famnameXName = System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<famname> famnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geognameXName = System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<geogname> geognameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<name> nameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName occupationXName = System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<occupation> occupationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName persnameXName = System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<persname> persnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName subjectXName = System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<subject> subjectField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName genreformXName = System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<genreform> genreformField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName functionXName = System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<function> functionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dateXName = System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<date> dateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName numXName = System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<num> numField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName originationXName = System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<origination> originationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName repositoryXName = System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<repository> repositoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unitdateXName = System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unitdate> unitdateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unittitleXName = System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unittitle> unittitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @refXName = System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extrefXName = System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName linkgrpXName = System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibrefXName = System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName archrefXName = System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName addressXName = System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName chronlistXName = System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listXName = System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tableXName = System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName blockquoteXName = System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("event", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator @event(XElement xe) { return XTypedServices.ToXTypedElement<@event>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static @event() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName), new NamedContentModelEntity(abbrXName), new NamedContentModelEntity(expanXName), new NamedContentModelEntity(corpnameXName), new NamedContentModelEntity(famnameXName), new NamedContentModelEntity(geognameXName), new NamedContentModelEntity(nameXName), new NamedContentModelEntity(occupationXName), new NamedContentModelEntity(persnameXName), new NamedContentModelEntity(subjectXName), new NamedContentModelEntity(genreformXName), new NamedContentModelEntity(functionXName), new NamedContentModelEntity(dateXName), new NamedContentModelEntity(numXName), new NamedContentModelEntity(originationXName), new NamedContentModelEntity(repositoryXName), new NamedContentModelEntity(unitdateXName), new NamedContentModelEntity(unittitleXName), new NamedContentModelEntity(@refXName), new NamedContentModelEntity(extrefXName), new NamedContentModelEntity(linkgrpXName), new NamedContentModelEntity(bibrefXName), new NamedContentModelEntity(titleXName), new NamedContentModelEntity(archrefXName), new NamedContentModelEntity(addressXName), new NamedContentModelEntity(chronlistXName), new NamedContentModelEntity(listXName), new NamedContentModelEntity(noteXName), new NamedContentModelEntity(tableXName), new NamedContentModelEntity(blockquoteXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public @event() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, abbrXName);
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, abbrXName);
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, expanXName);
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, expanXName);
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<corpname> corpname {
            get {
                if ((this.corpnameField == null)) {
                    this.corpnameField = new XTypedList<corpname>(this, LinqToXsdTypeManager.Instance, corpnameXName);
                }
                return this.corpnameField;
            }
            set {
                if ((value == null)) {
                    this.corpnameField = null;
                }
                else {
                    if ((this.corpnameField == null)) {
                        this.corpnameField = XTypedList<corpname>.Initialize(this, LinqToXsdTypeManager.Instance, value, corpnameXName);
                    }
                    else {
                        XTypedServices.SetList<corpname>(this.corpnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<famname> famname {
            get {
                if ((this.famnameField == null)) {
                    this.famnameField = new XTypedList<famname>(this, LinqToXsdTypeManager.Instance, famnameXName);
                }
                return this.famnameField;
            }
            set {
                if ((value == null)) {
                    this.famnameField = null;
                }
                else {
                    if ((this.famnameField == null)) {
                        this.famnameField = XTypedList<famname>.Initialize(this, LinqToXsdTypeManager.Instance, value, famnameXName);
                    }
                    else {
                        XTypedServices.SetList<famname>(this.famnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<geogname> geogname {
            get {
                if ((this.geognameField == null)) {
                    this.geognameField = new XTypedList<geogname>(this, LinqToXsdTypeManager.Instance, geognameXName);
                }
                return this.geognameField;
            }
            set {
                if ((value == null)) {
                    this.geognameField = null;
                }
                else {
                    if ((this.geognameField == null)) {
                        this.geognameField = XTypedList<geogname>.Initialize(this, LinqToXsdTypeManager.Instance, value, geognameXName);
                    }
                    else {
                        XTypedServices.SetList<geogname>(this.geognameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<name> name {
            get {
                if ((this.nameField == null)) {
                    this.nameField = new XTypedList<name>(this, LinqToXsdTypeManager.Instance, nameXName);
                }
                return this.nameField;
            }
            set {
                if ((value == null)) {
                    this.nameField = null;
                }
                else {
                    if ((this.nameField == null)) {
                        this.nameField = XTypedList<name>.Initialize(this, LinqToXsdTypeManager.Instance, value, nameXName);
                    }
                    else {
                        XTypedServices.SetList<name>(this.nameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<occupation> occupation {
            get {
                if ((this.occupationField == null)) {
                    this.occupationField = new XTypedList<occupation>(this, LinqToXsdTypeManager.Instance, occupationXName);
                }
                return this.occupationField;
            }
            set {
                if ((value == null)) {
                    this.occupationField = null;
                }
                else {
                    if ((this.occupationField == null)) {
                        this.occupationField = XTypedList<occupation>.Initialize(this, LinqToXsdTypeManager.Instance, value, occupationXName);
                    }
                    else {
                        XTypedServices.SetList<occupation>(this.occupationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<persname> persname {
            get {
                if ((this.persnameField == null)) {
                    this.persnameField = new XTypedList<persname>(this, LinqToXsdTypeManager.Instance, persnameXName);
                }
                return this.persnameField;
            }
            set {
                if ((value == null)) {
                    this.persnameField = null;
                }
                else {
                    if ((this.persnameField == null)) {
                        this.persnameField = XTypedList<persname>.Initialize(this, LinqToXsdTypeManager.Instance, value, persnameXName);
                    }
                    else {
                        XTypedServices.SetList<persname>(this.persnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<subject> subject {
            get {
                if ((this.subjectField == null)) {
                    this.subjectField = new XTypedList<subject>(this, LinqToXsdTypeManager.Instance, subjectXName);
                }
                return this.subjectField;
            }
            set {
                if ((value == null)) {
                    this.subjectField = null;
                }
                else {
                    if ((this.subjectField == null)) {
                        this.subjectField = XTypedList<subject>.Initialize(this, LinqToXsdTypeManager.Instance, value, subjectXName);
                    }
                    else {
                        XTypedServices.SetList<subject>(this.subjectField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<genreform> genreform {
            get {
                if ((this.genreformField == null)) {
                    this.genreformField = new XTypedList<genreform>(this, LinqToXsdTypeManager.Instance, genreformXName);
                }
                return this.genreformField;
            }
            set {
                if ((value == null)) {
                    this.genreformField = null;
                }
                else {
                    if ((this.genreformField == null)) {
                        this.genreformField = XTypedList<genreform>.Initialize(this, LinqToXsdTypeManager.Instance, value, genreformXName);
                    }
                    else {
                        XTypedServices.SetList<genreform>(this.genreformField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<function> function {
            get {
                if ((this.functionField == null)) {
                    this.functionField = new XTypedList<function>(this, LinqToXsdTypeManager.Instance, functionXName);
                }
                return this.functionField;
            }
            set {
                if ((value == null)) {
                    this.functionField = null;
                }
                else {
                    if ((this.functionField == null)) {
                        this.functionField = XTypedList<function>.Initialize(this, LinqToXsdTypeManager.Instance, value, functionXName);
                    }
                    else {
                        XTypedServices.SetList<function>(this.functionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<date> date {
            get {
                if ((this.dateField == null)) {
                    this.dateField = new XTypedList<date>(this, LinqToXsdTypeManager.Instance, dateXName);
                }
                return this.dateField;
            }
            set {
                if ((value == null)) {
                    this.dateField = null;
                }
                else {
                    if ((this.dateField == null)) {
                        this.dateField = XTypedList<date>.Initialize(this, LinqToXsdTypeManager.Instance, value, dateXName);
                    }
                    else {
                        XTypedServices.SetList<date>(this.dateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<num> num {
            get {
                if ((this.numField == null)) {
                    this.numField = new XTypedList<num>(this, LinqToXsdTypeManager.Instance, numXName);
                }
                return this.numField;
            }
            set {
                if ((value == null)) {
                    this.numField = null;
                }
                else {
                    if ((this.numField == null)) {
                        this.numField = XTypedList<num>.Initialize(this, LinqToXsdTypeManager.Instance, value, numXName);
                    }
                    else {
                        XTypedServices.SetList<num>(this.numField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<origination> origination {
            get {
                if ((this.originationField == null)) {
                    this.originationField = new XTypedList<origination>(this, LinqToXsdTypeManager.Instance, originationXName);
                }
                return this.originationField;
            }
            set {
                if ((value == null)) {
                    this.originationField = null;
                }
                else {
                    if ((this.originationField == null)) {
                        this.originationField = XTypedList<origination>.Initialize(this, LinqToXsdTypeManager.Instance, value, originationXName);
                    }
                    else {
                        XTypedServices.SetList<origination>(this.originationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<repository> repository {
            get {
                if ((this.repositoryField == null)) {
                    this.repositoryField = new XTypedList<repository>(this, LinqToXsdTypeManager.Instance, repositoryXName);
                }
                return this.repositoryField;
            }
            set {
                if ((value == null)) {
                    this.repositoryField = null;
                }
                else {
                    if ((this.repositoryField == null)) {
                        this.repositoryField = XTypedList<repository>.Initialize(this, LinqToXsdTypeManager.Instance, value, repositoryXName);
                    }
                    else {
                        XTypedServices.SetList<repository>(this.repositoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<unitdate> unitdate {
            get {
                if ((this.unitdateField == null)) {
                    this.unitdateField = new XTypedList<unitdate>(this, LinqToXsdTypeManager.Instance, unitdateXName);
                }
                return this.unitdateField;
            }
            set {
                if ((value == null)) {
                    this.unitdateField = null;
                }
                else {
                    if ((this.unitdateField == null)) {
                        this.unitdateField = XTypedList<unitdate>.Initialize(this, LinqToXsdTypeManager.Instance, value, unitdateXName);
                    }
                    else {
                        XTypedServices.SetList<unitdate>(this.unitdateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<unittitle> unittitle {
            get {
                if ((this.unittitleField == null)) {
                    this.unittitleField = new XTypedList<unittitle>(this, LinqToXsdTypeManager.Instance, unittitleXName);
                }
                return this.unittitleField;
            }
            set {
                if ((value == null)) {
                    this.unittitleField = null;
                }
                else {
                    if ((this.unittitleField == null)) {
                        this.unittitleField = XTypedList<unittitle>.Initialize(this, LinqToXsdTypeManager.Instance, value, unittitleXName);
                    }
                    else {
                        XTypedServices.SetList<unittitle>(this.unittitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, @refXName);
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, @refXName);
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, extrefXName);
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, extrefXName);
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, linkgrpXName);
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, linkgrpXName);
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, bibrefXName);
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibrefXName);
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, titleXName);
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, titleXName);
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, archrefXName);
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, archrefXName);
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, addressXName);
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, addressXName);
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, chronlistXName);
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, chronlistXName);
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, listXName);
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, listXName);
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, tableXName);
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, tableXName);
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, blockquoteXName);
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, blockquoteXName);
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<@event>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
            localElementDictionary.Add(abbrXName, typeof(abbr));
            localElementDictionary.Add(expanXName, typeof(expan));
            localElementDictionary.Add(corpnameXName, typeof(corpname));
            localElementDictionary.Add(famnameXName, typeof(famname));
            localElementDictionary.Add(geognameXName, typeof(geogname));
            localElementDictionary.Add(nameXName, typeof(name));
            localElementDictionary.Add(occupationXName, typeof(occupation));
            localElementDictionary.Add(persnameXName, typeof(persname));
            localElementDictionary.Add(subjectXName, typeof(subject));
            localElementDictionary.Add(genreformXName, typeof(genreform));
            localElementDictionary.Add(functionXName, typeof(function));
            localElementDictionary.Add(dateXName, typeof(date));
            localElementDictionary.Add(numXName, typeof(num));
            localElementDictionary.Add(originationXName, typeof(origination));
            localElementDictionary.Add(repositoryXName, typeof(repository));
            localElementDictionary.Add(unitdateXName, typeof(unitdate));
            localElementDictionary.Add(unittitleXName, typeof(unittitle));
            localElementDictionary.Add(@refXName, typeof(@ref));
            localElementDictionary.Add(extrefXName, typeof(extref));
            localElementDictionary.Add(linkgrpXName, typeof(linkgrp));
            localElementDictionary.Add(bibrefXName, typeof(bibref));
            localElementDictionary.Add(titleXName, typeof(title));
            localElementDictionary.Add(archrefXName, typeof(archref));
            localElementDictionary.Add(addressXName, typeof(address));
            localElementDictionary.Add(chronlistXName, typeof(chronlist));
            localElementDictionary.Add(listXName, typeof(list));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(tableXName, typeof(table));
            localElementDictionary.Add(blockquoteXName, typeof(blockquote));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head?, (item+ | (listhead?, defitem+)))
    /// </para>
    /// </summary>
    public partial class list : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName itemXName = System.Xml.Linq.XName.Get("item", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<item> itemField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listheadXName = System.Xml.Linq.XName.Get("listhead", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName defitemXName = System.Xml.Linq.XName.Get("defitem", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<defitem> defitemField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName markXName = System.Xml.Linq.XName.Get("mark", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName numerationXName = System.Xml.Linq.XName.Get("numeration", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName continuationXName = System.Xml.Linq.XName.Get("continuation", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator list(XElement xe) { return XTypedServices.ToXTypedElement<list>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static list() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new ChoiceContentModelEntity(new NamedContentModelEntity(itemXName), new SequenceContentModelEntity(new NamedContentModelEntity(listheadXName), new NamedContentModelEntity(defitemXName))));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head?, (item+ | (listhead?, defitem+)))
        /// </para>
        /// </summary>
        public list() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head?, (item+ | (listhead?, defitem+)))
        /// </para>
        /// </summary>
        public virtual head head {
            get {
                XElement x = this.GetElement(headXName);
                return ((head)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (item+ | (listhead?, defitem+)))
        /// </para>
        /// </summary>
        public virtual IList<item> item {
            get {
                if ((this.itemField == null)) {
                    this.itemField = new XTypedList<item>(this, LinqToXsdTypeManager.Instance, itemXName);
                }
                return this.itemField;
            }
            set {
                if ((value == null)) {
                    this.itemField = null;
                }
                else {
                    if ((this.itemField == null)) {
                        this.itemField = XTypedList<item>.Initialize(this, LinqToXsdTypeManager.Instance, value, itemXName);
                    }
                    else {
                        XTypedServices.SetList<item>(this.itemField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (item+ | (listhead?, defitem+)))
        /// </para>
        /// </summary>
        public virtual listhead listhead {
            get {
                XElement x = this.GetElement(listheadXName);
                return ((listhead)(x));
            }
            set {
                this.SetElement(listheadXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (head?, (item+ | (listhead?, defitem+)))
        /// </para>
        /// </summary>
        public virtual IList<defitem> defitem {
            get {
                if ((this.defitemField == null)) {
                    this.defitemField = new XTypedList<defitem>(this, LinqToXsdTypeManager.Instance, defitemXName);
                }
                return this.defitemField;
            }
            set {
                if ((value == null)) {
                    this.defitemField = null;
                }
                else {
                    if ((this.defitemField == null)) {
                        this.defitemField = XTypedList<defitem>.Initialize(this, LinqToXsdTypeManager.Instance, value, defitemXName);
                    }
                    else {
                        XTypedServices.SetList<defitem>(this.defitemField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LibraryOfCongress.EAD.list.TypeEnum? type {
            get {
                XAttribute x = this.Attribute(typeXName);
                if ((x == null)) {
                    return null;
                }
                return ((LibraryOfCongress.EAD.list.TypeEnum)(Enum.Parse(typeof(LibraryOfCongress.EAD.list.TypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(typeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mark {
            get {
                XAttribute x = this.Attribute(markXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(markXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LibraryOfCongress.EAD.list.NumerationEnum? numeration {
            get {
                XAttribute x = this.Attribute(numerationXName);
                if ((x == null)) {
                    return null;
                }
                return ((LibraryOfCongress.EAD.list.NumerationEnum)(Enum.Parse(typeof(LibraryOfCongress.EAD.list.NumerationEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(numerationXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LibraryOfCongress.EAD.list.ContinuationEnum? continuation {
            get {
                XAttribute x = this.Attribute(continuationXName);
                if ((x == null)) {
                    return null;
                }
                return ((LibraryOfCongress.EAD.list.ContinuationEnum)(Enum.Parse(typeof(LibraryOfCongress.EAD.list.ContinuationEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(continuationXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<list>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(head));
            localElementDictionary.Add(itemXName, typeof(item));
            localElementDictionary.Add(listheadXName, typeof(listhead));
            localElementDictionary.Add(defitemXName, typeof(defitem));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum TypeEnum {
            
            simple,
            
            deflist,
            
            marked,
            
            ordered,
        }
        
        public enum NumerationEnum {
            
            arabic,
            
            upperalpha,
            
            loweralpha,
            
            upperroman,
            
            lowerroman,
        }
        
        public enum ContinuationEnum {
            
            continues,
            
            starts,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (label, item)
    /// </para>
    /// </summary>
    public partial class defitem : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName labelXName = System.Xml.Linq.XName.Get("label", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName itemXName = System.Xml.Linq.XName.Get("item", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("defitem", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator defitem(XElement xe) { return XTypedServices.ToXTypedElement<defitem>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static defitem() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(labelXName), new NamedContentModelEntity(itemXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (label, item)
        /// </para>
        /// </summary>
        public defitem() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (label, item)
        /// </para>
        /// </summary>
        public virtual label label {
            get {
                XElement x = this.GetElement(labelXName);
                return ((label)(x));
            }
            set {
                this.SetElement(labelXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (label, item)
        /// </para>
        /// </summary>
        public virtual item item {
            get {
                XElement x = this.GetElement(itemXName);
                return ((item)(x));
            }
            set {
                this.SetElement(itemXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<defitem>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(labelXName, typeof(label));
            localElementDictionary.Add(itemXName, typeof(item));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
    /// </para>
    /// </summary>
    public partial class label : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName abbrXName = System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName expanXName = System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName corpnameXName = System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<corpname> corpnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName famnameXName = System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<famname> famnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geognameXName = System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<geogname> geognameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<name> nameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName occupationXName = System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<occupation> occupationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName persnameXName = System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<persname> persnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName subjectXName = System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<subject> subjectField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName genreformXName = System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<genreform> genreformField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName functionXName = System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<function> functionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dateXName = System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<date> dateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName numXName = System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<num> numField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName originationXName = System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<origination> originationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName repositoryXName = System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<repository> repositoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unitdateXName = System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unitdate> unitdateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unittitleXName = System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unittitle> unittitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @refXName = System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extrefXName = System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName linkgrpXName = System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibrefXName = System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName archrefXName = System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("label", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator label(XElement xe) { return XTypedServices.ToXTypedElement<label>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static label() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName), new NamedContentModelEntity(abbrXName), new NamedContentModelEntity(expanXName), new NamedContentModelEntity(corpnameXName), new NamedContentModelEntity(famnameXName), new NamedContentModelEntity(geognameXName), new NamedContentModelEntity(nameXName), new NamedContentModelEntity(occupationXName), new NamedContentModelEntity(persnameXName), new NamedContentModelEntity(subjectXName), new NamedContentModelEntity(genreformXName), new NamedContentModelEntity(functionXName), new NamedContentModelEntity(dateXName), new NamedContentModelEntity(numXName), new NamedContentModelEntity(originationXName), new NamedContentModelEntity(repositoryXName), new NamedContentModelEntity(unitdateXName), new NamedContentModelEntity(unittitleXName), new NamedContentModelEntity(@refXName), new NamedContentModelEntity(extrefXName), new NamedContentModelEntity(linkgrpXName), new NamedContentModelEntity(bibrefXName), new NamedContentModelEntity(titleXName), new NamedContentModelEntity(archrefXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public label() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, abbrXName);
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, abbrXName);
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, expanXName);
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, expanXName);
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<corpname> corpname {
            get {
                if ((this.corpnameField == null)) {
                    this.corpnameField = new XTypedList<corpname>(this, LinqToXsdTypeManager.Instance, corpnameXName);
                }
                return this.corpnameField;
            }
            set {
                if ((value == null)) {
                    this.corpnameField = null;
                }
                else {
                    if ((this.corpnameField == null)) {
                        this.corpnameField = XTypedList<corpname>.Initialize(this, LinqToXsdTypeManager.Instance, value, corpnameXName);
                    }
                    else {
                        XTypedServices.SetList<corpname>(this.corpnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<famname> famname {
            get {
                if ((this.famnameField == null)) {
                    this.famnameField = new XTypedList<famname>(this, LinqToXsdTypeManager.Instance, famnameXName);
                }
                return this.famnameField;
            }
            set {
                if ((value == null)) {
                    this.famnameField = null;
                }
                else {
                    if ((this.famnameField == null)) {
                        this.famnameField = XTypedList<famname>.Initialize(this, LinqToXsdTypeManager.Instance, value, famnameXName);
                    }
                    else {
                        XTypedServices.SetList<famname>(this.famnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<geogname> geogname {
            get {
                if ((this.geognameField == null)) {
                    this.geognameField = new XTypedList<geogname>(this, LinqToXsdTypeManager.Instance, geognameXName);
                }
                return this.geognameField;
            }
            set {
                if ((value == null)) {
                    this.geognameField = null;
                }
                else {
                    if ((this.geognameField == null)) {
                        this.geognameField = XTypedList<geogname>.Initialize(this, LinqToXsdTypeManager.Instance, value, geognameXName);
                    }
                    else {
                        XTypedServices.SetList<geogname>(this.geognameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<name> name {
            get {
                if ((this.nameField == null)) {
                    this.nameField = new XTypedList<name>(this, LinqToXsdTypeManager.Instance, nameXName);
                }
                return this.nameField;
            }
            set {
                if ((value == null)) {
                    this.nameField = null;
                }
                else {
                    if ((this.nameField == null)) {
                        this.nameField = XTypedList<name>.Initialize(this, LinqToXsdTypeManager.Instance, value, nameXName);
                    }
                    else {
                        XTypedServices.SetList<name>(this.nameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<occupation> occupation {
            get {
                if ((this.occupationField == null)) {
                    this.occupationField = new XTypedList<occupation>(this, LinqToXsdTypeManager.Instance, occupationXName);
                }
                return this.occupationField;
            }
            set {
                if ((value == null)) {
                    this.occupationField = null;
                }
                else {
                    if ((this.occupationField == null)) {
                        this.occupationField = XTypedList<occupation>.Initialize(this, LinqToXsdTypeManager.Instance, value, occupationXName);
                    }
                    else {
                        XTypedServices.SetList<occupation>(this.occupationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<persname> persname {
            get {
                if ((this.persnameField == null)) {
                    this.persnameField = new XTypedList<persname>(this, LinqToXsdTypeManager.Instance, persnameXName);
                }
                return this.persnameField;
            }
            set {
                if ((value == null)) {
                    this.persnameField = null;
                }
                else {
                    if ((this.persnameField == null)) {
                        this.persnameField = XTypedList<persname>.Initialize(this, LinqToXsdTypeManager.Instance, value, persnameXName);
                    }
                    else {
                        XTypedServices.SetList<persname>(this.persnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<subject> subject {
            get {
                if ((this.subjectField == null)) {
                    this.subjectField = new XTypedList<subject>(this, LinqToXsdTypeManager.Instance, subjectXName);
                }
                return this.subjectField;
            }
            set {
                if ((value == null)) {
                    this.subjectField = null;
                }
                else {
                    if ((this.subjectField == null)) {
                        this.subjectField = XTypedList<subject>.Initialize(this, LinqToXsdTypeManager.Instance, value, subjectXName);
                    }
                    else {
                        XTypedServices.SetList<subject>(this.subjectField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<genreform> genreform {
            get {
                if ((this.genreformField == null)) {
                    this.genreformField = new XTypedList<genreform>(this, LinqToXsdTypeManager.Instance, genreformXName);
                }
                return this.genreformField;
            }
            set {
                if ((value == null)) {
                    this.genreformField = null;
                }
                else {
                    if ((this.genreformField == null)) {
                        this.genreformField = XTypedList<genreform>.Initialize(this, LinqToXsdTypeManager.Instance, value, genreformXName);
                    }
                    else {
                        XTypedServices.SetList<genreform>(this.genreformField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<function> function {
            get {
                if ((this.functionField == null)) {
                    this.functionField = new XTypedList<function>(this, LinqToXsdTypeManager.Instance, functionXName);
                }
                return this.functionField;
            }
            set {
                if ((value == null)) {
                    this.functionField = null;
                }
                else {
                    if ((this.functionField == null)) {
                        this.functionField = XTypedList<function>.Initialize(this, LinqToXsdTypeManager.Instance, value, functionXName);
                    }
                    else {
                        XTypedServices.SetList<function>(this.functionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<date> date {
            get {
                if ((this.dateField == null)) {
                    this.dateField = new XTypedList<date>(this, LinqToXsdTypeManager.Instance, dateXName);
                }
                return this.dateField;
            }
            set {
                if ((value == null)) {
                    this.dateField = null;
                }
                else {
                    if ((this.dateField == null)) {
                        this.dateField = XTypedList<date>.Initialize(this, LinqToXsdTypeManager.Instance, value, dateXName);
                    }
                    else {
                        XTypedServices.SetList<date>(this.dateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<num> num {
            get {
                if ((this.numField == null)) {
                    this.numField = new XTypedList<num>(this, LinqToXsdTypeManager.Instance, numXName);
                }
                return this.numField;
            }
            set {
                if ((value == null)) {
                    this.numField = null;
                }
                else {
                    if ((this.numField == null)) {
                        this.numField = XTypedList<num>.Initialize(this, LinqToXsdTypeManager.Instance, value, numXName);
                    }
                    else {
                        XTypedServices.SetList<num>(this.numField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<origination> origination {
            get {
                if ((this.originationField == null)) {
                    this.originationField = new XTypedList<origination>(this, LinqToXsdTypeManager.Instance, originationXName);
                }
                return this.originationField;
            }
            set {
                if ((value == null)) {
                    this.originationField = null;
                }
                else {
                    if ((this.originationField == null)) {
                        this.originationField = XTypedList<origination>.Initialize(this, LinqToXsdTypeManager.Instance, value, originationXName);
                    }
                    else {
                        XTypedServices.SetList<origination>(this.originationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<repository> repository {
            get {
                if ((this.repositoryField == null)) {
                    this.repositoryField = new XTypedList<repository>(this, LinqToXsdTypeManager.Instance, repositoryXName);
                }
                return this.repositoryField;
            }
            set {
                if ((value == null)) {
                    this.repositoryField = null;
                }
                else {
                    if ((this.repositoryField == null)) {
                        this.repositoryField = XTypedList<repository>.Initialize(this, LinqToXsdTypeManager.Instance, value, repositoryXName);
                    }
                    else {
                        XTypedServices.SetList<repository>(this.repositoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<unitdate> unitdate {
            get {
                if ((this.unitdateField == null)) {
                    this.unitdateField = new XTypedList<unitdate>(this, LinqToXsdTypeManager.Instance, unitdateXName);
                }
                return this.unitdateField;
            }
            set {
                if ((value == null)) {
                    this.unitdateField = null;
                }
                else {
                    if ((this.unitdateField == null)) {
                        this.unitdateField = XTypedList<unitdate>.Initialize(this, LinqToXsdTypeManager.Instance, value, unitdateXName);
                    }
                    else {
                        XTypedServices.SetList<unitdate>(this.unitdateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<unittitle> unittitle {
            get {
                if ((this.unittitleField == null)) {
                    this.unittitleField = new XTypedList<unittitle>(this, LinqToXsdTypeManager.Instance, unittitleXName);
                }
                return this.unittitleField;
            }
            set {
                if ((value == null)) {
                    this.unittitleField = null;
                }
                else {
                    if ((this.unittitleField == null)) {
                        this.unittitleField = XTypedList<unittitle>.Initialize(this, LinqToXsdTypeManager.Instance, value, unittitleXName);
                    }
                    else {
                        XTypedServices.SetList<unittitle>(this.unittitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, @refXName);
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, @refXName);
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, extrefXName);
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, extrefXName);
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, linkgrpXName);
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, linkgrpXName);
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, bibrefXName);
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibrefXName);
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, titleXName);
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, titleXName);
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, archrefXName);
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, archrefXName);
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<label>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
            localElementDictionary.Add(abbrXName, typeof(abbr));
            localElementDictionary.Add(expanXName, typeof(expan));
            localElementDictionary.Add(corpnameXName, typeof(corpname));
            localElementDictionary.Add(famnameXName, typeof(famname));
            localElementDictionary.Add(geognameXName, typeof(geogname));
            localElementDictionary.Add(nameXName, typeof(name));
            localElementDictionary.Add(occupationXName, typeof(occupation));
            localElementDictionary.Add(persnameXName, typeof(persname));
            localElementDictionary.Add(subjectXName, typeof(subject));
            localElementDictionary.Add(genreformXName, typeof(genreform));
            localElementDictionary.Add(functionXName, typeof(function));
            localElementDictionary.Add(dateXName, typeof(date));
            localElementDictionary.Add(numXName, typeof(num));
            localElementDictionary.Add(originationXName, typeof(origination));
            localElementDictionary.Add(repositoryXName, typeof(repository));
            localElementDictionary.Add(unitdateXName, typeof(unitdate));
            localElementDictionary.Add(unittitleXName, typeof(unittitle));
            localElementDictionary.Add(@refXName, typeof(@ref));
            localElementDictionary.Add(extrefXName, typeof(extref));
            localElementDictionary.Add(linkgrpXName, typeof(linkgrp));
            localElementDictionary.Add(bibrefXName, typeof(bibref));
            localElementDictionary.Add(titleXName, typeof(title));
            localElementDictionary.Add(archrefXName, typeof(archref));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head01?, head02?)
    /// </para>
    /// </summary>
    public partial class listhead : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName head01XName = System.Xml.Linq.XName.Get("head01", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName head02XName = System.Xml.Linq.XName.Get("head02", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("listhead", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator listhead(XElement xe) { return XTypedServices.ToXTypedElement<listhead>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static listhead() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(head01XName), new NamedContentModelEntity(head02XName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head01?, head02?)
        /// </para>
        /// </summary>
        public listhead() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head01?, head02?)
        /// </para>
        /// </summary>
        public virtual head01 head01 {
            get {
                XElement x = this.GetElement(head01XName);
                return ((head01)(x));
            }
            set {
                this.SetElement(head01XName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (head01?, head02?)
        /// </para>
        /// </summary>
        public virtual head02 head02 {
            get {
                XElement x = this.GetElement(head02XName);
                return ((head02)(x));
            }
            set {
                this.SetElement(head02XName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<listhead>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(head01XName, typeof(head01));
            localElementDictionary.Add(head02XName, typeof(head02));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb)*
    /// </para>
    /// </summary>
    public partial class head01 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("head01", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator head01(XElement xe) { return XTypedServices.ToXTypedElement<head01>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static head01() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public head01() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<head01>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb)*
    /// </para>
    /// </summary>
    public partial class head02 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("head02", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator head02(XElement xe) { return XTypedServices.ToXTypedElement<head02>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static head02() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public head02() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<head02>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
    /// </para>
    /// </summary>
    public partial class item : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName abbrXName = System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName expanXName = System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName corpnameXName = System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<corpname> corpnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName famnameXName = System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<famname> famnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geognameXName = System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<geogname> geognameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<name> nameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName occupationXName = System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<occupation> occupationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName persnameXName = System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<persname> persnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName subjectXName = System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<subject> subjectField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName genreformXName = System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<genreform> genreformField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName functionXName = System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<function> functionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dateXName = System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<date> dateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName numXName = System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<num> numField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName originationXName = System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<origination> originationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName repositoryXName = System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<repository> repositoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unitdateXName = System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unitdate> unitdateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unittitleXName = System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unittitle> unittitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @refXName = System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extrefXName = System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName linkgrpXName = System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibrefXName = System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName archrefXName = System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName addressXName = System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName chronlistXName = System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listXName = System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tableXName = System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName blockquoteXName = System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("item", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator item(XElement xe) { return XTypedServices.ToXTypedElement<item>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static item() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName), new NamedContentModelEntity(abbrXName), new NamedContentModelEntity(expanXName), new NamedContentModelEntity(corpnameXName), new NamedContentModelEntity(famnameXName), new NamedContentModelEntity(geognameXName), new NamedContentModelEntity(nameXName), new NamedContentModelEntity(occupationXName), new NamedContentModelEntity(persnameXName), new NamedContentModelEntity(subjectXName), new NamedContentModelEntity(genreformXName), new NamedContentModelEntity(functionXName), new NamedContentModelEntity(dateXName), new NamedContentModelEntity(numXName), new NamedContentModelEntity(originationXName), new NamedContentModelEntity(repositoryXName), new NamedContentModelEntity(unitdateXName), new NamedContentModelEntity(unittitleXName), new NamedContentModelEntity(@refXName), new NamedContentModelEntity(extrefXName), new NamedContentModelEntity(linkgrpXName), new NamedContentModelEntity(bibrefXName), new NamedContentModelEntity(titleXName), new NamedContentModelEntity(archrefXName), new NamedContentModelEntity(addressXName), new NamedContentModelEntity(chronlistXName), new NamedContentModelEntity(listXName), new NamedContentModelEntity(noteXName), new NamedContentModelEntity(tableXName), new NamedContentModelEntity(blockquoteXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public item() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, abbrXName);
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, abbrXName);
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, expanXName);
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, expanXName);
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<corpname> corpname {
            get {
                if ((this.corpnameField == null)) {
                    this.corpnameField = new XTypedList<corpname>(this, LinqToXsdTypeManager.Instance, corpnameXName);
                }
                return this.corpnameField;
            }
            set {
                if ((value == null)) {
                    this.corpnameField = null;
                }
                else {
                    if ((this.corpnameField == null)) {
                        this.corpnameField = XTypedList<corpname>.Initialize(this, LinqToXsdTypeManager.Instance, value, corpnameXName);
                    }
                    else {
                        XTypedServices.SetList<corpname>(this.corpnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<famname> famname {
            get {
                if ((this.famnameField == null)) {
                    this.famnameField = new XTypedList<famname>(this, LinqToXsdTypeManager.Instance, famnameXName);
                }
                return this.famnameField;
            }
            set {
                if ((value == null)) {
                    this.famnameField = null;
                }
                else {
                    if ((this.famnameField == null)) {
                        this.famnameField = XTypedList<famname>.Initialize(this, LinqToXsdTypeManager.Instance, value, famnameXName);
                    }
                    else {
                        XTypedServices.SetList<famname>(this.famnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<geogname> geogname {
            get {
                if ((this.geognameField == null)) {
                    this.geognameField = new XTypedList<geogname>(this, LinqToXsdTypeManager.Instance, geognameXName);
                }
                return this.geognameField;
            }
            set {
                if ((value == null)) {
                    this.geognameField = null;
                }
                else {
                    if ((this.geognameField == null)) {
                        this.geognameField = XTypedList<geogname>.Initialize(this, LinqToXsdTypeManager.Instance, value, geognameXName);
                    }
                    else {
                        XTypedServices.SetList<geogname>(this.geognameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<name> name {
            get {
                if ((this.nameField == null)) {
                    this.nameField = new XTypedList<name>(this, LinqToXsdTypeManager.Instance, nameXName);
                }
                return this.nameField;
            }
            set {
                if ((value == null)) {
                    this.nameField = null;
                }
                else {
                    if ((this.nameField == null)) {
                        this.nameField = XTypedList<name>.Initialize(this, LinqToXsdTypeManager.Instance, value, nameXName);
                    }
                    else {
                        XTypedServices.SetList<name>(this.nameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<occupation> occupation {
            get {
                if ((this.occupationField == null)) {
                    this.occupationField = new XTypedList<occupation>(this, LinqToXsdTypeManager.Instance, occupationXName);
                }
                return this.occupationField;
            }
            set {
                if ((value == null)) {
                    this.occupationField = null;
                }
                else {
                    if ((this.occupationField == null)) {
                        this.occupationField = XTypedList<occupation>.Initialize(this, LinqToXsdTypeManager.Instance, value, occupationXName);
                    }
                    else {
                        XTypedServices.SetList<occupation>(this.occupationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<persname> persname {
            get {
                if ((this.persnameField == null)) {
                    this.persnameField = new XTypedList<persname>(this, LinqToXsdTypeManager.Instance, persnameXName);
                }
                return this.persnameField;
            }
            set {
                if ((value == null)) {
                    this.persnameField = null;
                }
                else {
                    if ((this.persnameField == null)) {
                        this.persnameField = XTypedList<persname>.Initialize(this, LinqToXsdTypeManager.Instance, value, persnameXName);
                    }
                    else {
                        XTypedServices.SetList<persname>(this.persnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<subject> subject {
            get {
                if ((this.subjectField == null)) {
                    this.subjectField = new XTypedList<subject>(this, LinqToXsdTypeManager.Instance, subjectXName);
                }
                return this.subjectField;
            }
            set {
                if ((value == null)) {
                    this.subjectField = null;
                }
                else {
                    if ((this.subjectField == null)) {
                        this.subjectField = XTypedList<subject>.Initialize(this, LinqToXsdTypeManager.Instance, value, subjectXName);
                    }
                    else {
                        XTypedServices.SetList<subject>(this.subjectField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<genreform> genreform {
            get {
                if ((this.genreformField == null)) {
                    this.genreformField = new XTypedList<genreform>(this, LinqToXsdTypeManager.Instance, genreformXName);
                }
                return this.genreformField;
            }
            set {
                if ((value == null)) {
                    this.genreformField = null;
                }
                else {
                    if ((this.genreformField == null)) {
                        this.genreformField = XTypedList<genreform>.Initialize(this, LinqToXsdTypeManager.Instance, value, genreformXName);
                    }
                    else {
                        XTypedServices.SetList<genreform>(this.genreformField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<function> function {
            get {
                if ((this.functionField == null)) {
                    this.functionField = new XTypedList<function>(this, LinqToXsdTypeManager.Instance, functionXName);
                }
                return this.functionField;
            }
            set {
                if ((value == null)) {
                    this.functionField = null;
                }
                else {
                    if ((this.functionField == null)) {
                        this.functionField = XTypedList<function>.Initialize(this, LinqToXsdTypeManager.Instance, value, functionXName);
                    }
                    else {
                        XTypedServices.SetList<function>(this.functionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<date> date {
            get {
                if ((this.dateField == null)) {
                    this.dateField = new XTypedList<date>(this, LinqToXsdTypeManager.Instance, dateXName);
                }
                return this.dateField;
            }
            set {
                if ((value == null)) {
                    this.dateField = null;
                }
                else {
                    if ((this.dateField == null)) {
                        this.dateField = XTypedList<date>.Initialize(this, LinqToXsdTypeManager.Instance, value, dateXName);
                    }
                    else {
                        XTypedServices.SetList<date>(this.dateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<num> num {
            get {
                if ((this.numField == null)) {
                    this.numField = new XTypedList<num>(this, LinqToXsdTypeManager.Instance, numXName);
                }
                return this.numField;
            }
            set {
                if ((value == null)) {
                    this.numField = null;
                }
                else {
                    if ((this.numField == null)) {
                        this.numField = XTypedList<num>.Initialize(this, LinqToXsdTypeManager.Instance, value, numXName);
                    }
                    else {
                        XTypedServices.SetList<num>(this.numField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<origination> origination {
            get {
                if ((this.originationField == null)) {
                    this.originationField = new XTypedList<origination>(this, LinqToXsdTypeManager.Instance, originationXName);
                }
                return this.originationField;
            }
            set {
                if ((value == null)) {
                    this.originationField = null;
                }
                else {
                    if ((this.originationField == null)) {
                        this.originationField = XTypedList<origination>.Initialize(this, LinqToXsdTypeManager.Instance, value, originationXName);
                    }
                    else {
                        XTypedServices.SetList<origination>(this.originationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<repository> repository {
            get {
                if ((this.repositoryField == null)) {
                    this.repositoryField = new XTypedList<repository>(this, LinqToXsdTypeManager.Instance, repositoryXName);
                }
                return this.repositoryField;
            }
            set {
                if ((value == null)) {
                    this.repositoryField = null;
                }
                else {
                    if ((this.repositoryField == null)) {
                        this.repositoryField = XTypedList<repository>.Initialize(this, LinqToXsdTypeManager.Instance, value, repositoryXName);
                    }
                    else {
                        XTypedServices.SetList<repository>(this.repositoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<unitdate> unitdate {
            get {
                if ((this.unitdateField == null)) {
                    this.unitdateField = new XTypedList<unitdate>(this, LinqToXsdTypeManager.Instance, unitdateXName);
                }
                return this.unitdateField;
            }
            set {
                if ((value == null)) {
                    this.unitdateField = null;
                }
                else {
                    if ((this.unitdateField == null)) {
                        this.unitdateField = XTypedList<unitdate>.Initialize(this, LinqToXsdTypeManager.Instance, value, unitdateXName);
                    }
                    else {
                        XTypedServices.SetList<unitdate>(this.unitdateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<unittitle> unittitle {
            get {
                if ((this.unittitleField == null)) {
                    this.unittitleField = new XTypedList<unittitle>(this, LinqToXsdTypeManager.Instance, unittitleXName);
                }
                return this.unittitleField;
            }
            set {
                if ((value == null)) {
                    this.unittitleField = null;
                }
                else {
                    if ((this.unittitleField == null)) {
                        this.unittitleField = XTypedList<unittitle>.Initialize(this, LinqToXsdTypeManager.Instance, value, unittitleXName);
                    }
                    else {
                        XTypedServices.SetList<unittitle>(this.unittitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, @refXName);
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, @refXName);
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, extrefXName);
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, extrefXName);
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, linkgrpXName);
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, linkgrpXName);
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, bibrefXName);
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibrefXName);
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, titleXName);
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, titleXName);
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, archrefXName);
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, archrefXName);
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, addressXName);
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, addressXName);
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, chronlistXName);
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, chronlistXName);
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, listXName);
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, listXName);
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, tableXName);
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, tableXName);
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, blockquoteXName);
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, blockquoteXName);
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<item>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
            localElementDictionary.Add(abbrXName, typeof(abbr));
            localElementDictionary.Add(expanXName, typeof(expan));
            localElementDictionary.Add(corpnameXName, typeof(corpname));
            localElementDictionary.Add(famnameXName, typeof(famname));
            localElementDictionary.Add(geognameXName, typeof(geogname));
            localElementDictionary.Add(nameXName, typeof(name));
            localElementDictionary.Add(occupationXName, typeof(occupation));
            localElementDictionary.Add(persnameXName, typeof(persname));
            localElementDictionary.Add(subjectXName, typeof(subject));
            localElementDictionary.Add(genreformXName, typeof(genreform));
            localElementDictionary.Add(functionXName, typeof(function));
            localElementDictionary.Add(dateXName, typeof(date));
            localElementDictionary.Add(numXName, typeof(num));
            localElementDictionary.Add(originationXName, typeof(origination));
            localElementDictionary.Add(repositoryXName, typeof(repository));
            localElementDictionary.Add(unitdateXName, typeof(unitdate));
            localElementDictionary.Add(unittitleXName, typeof(unittitle));
            localElementDictionary.Add(@refXName, typeof(@ref));
            localElementDictionary.Add(extrefXName, typeof(extref));
            localElementDictionary.Add(linkgrpXName, typeof(linkgrp));
            localElementDictionary.Add(bibrefXName, typeof(bibref));
            localElementDictionary.Add(titleXName, typeof(title));
            localElementDictionary.Add(archrefXName, typeof(archref));
            localElementDictionary.Add(addressXName, typeof(address));
            localElementDictionary.Add(chronlistXName, typeof(chronlist));
            localElementDictionary.Add(listXName, typeof(list));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(tableXName, typeof(table));
            localElementDictionary.Add(blockquoteXName, typeof(blockquote));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (address | chronlist | list | note1 | table | blockquote | p)+
    /// </para>
    /// </summary>
    public partial class note : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName addressXName = System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName chronlistXName = System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listXName = System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName note1XName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> note1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tableXName = System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName blockquoteXName = System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pXName = System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<p> pField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName labelXName = System.Xml.Linq.XName.Get("label", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName showXName = System.Xml.Linq.XName.Get("show", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName actuateXName = System.Xml.Linq.XName.Get("actuate", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodinganalogXName = System.Xml.Linq.XName.Get("encodinganalog", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator note(XElement xe) { return XTypedServices.ToXTypedElement<note>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static note() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(addressXName), new NamedContentModelEntity(chronlistXName), new NamedContentModelEntity(listXName), new NamedContentModelEntity(note1XName), new NamedContentModelEntity(tableXName), new NamedContentModelEntity(blockquoteXName), new NamedContentModelEntity(pXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (address | chronlist | list | note1 | table | blockquote | p)+
        /// </para>
        /// </summary>
        public note() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note1 | table | blockquote | p)+
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, addressXName);
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, addressXName);
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note1 | table | blockquote | p)+
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, chronlistXName);
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, chronlistXName);
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note1 | table | blockquote | p)+
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, listXName);
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, listXName);
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note1 | table | blockquote | p)+
        /// </para>
        /// </summary>
        public virtual IList<note> note1 {
            get {
                if ((this.note1Field == null)) {
                    this.note1Field = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, note1XName);
                }
                return this.note1Field;
            }
            set {
                if ((value == null)) {
                    this.note1Field = null;
                }
                else {
                    if ((this.note1Field == null)) {
                        this.note1Field = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, note1XName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.note1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note1 | table | blockquote | p)+
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, tableXName);
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, tableXName);
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note1 | table | blockquote | p)+
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, blockquoteXName);
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, blockquoteXName);
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (address | chronlist | list | note1 | table | blockquote | p)+
        /// </para>
        /// </summary>
        public virtual IList<p> p {
            get {
                if ((this.pField == null)) {
                    this.pField = new XTypedList<p>(this, LinqToXsdTypeManager.Instance, pXName);
                }
                return this.pField;
            }
            set {
                if ((value == null)) {
                    this.pField = null;
                }
                else {
                    if ((this.pField == null)) {
                        this.pField = XTypedList<p>.Initialize(this, LinqToXsdTypeManager.Instance, value, pXName);
                    }
                    else {
                        XTypedServices.SetList<p>(this.pField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(labelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(labelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string show {
            get {
                XAttribute x = this.Attribute(showXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(showXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LibraryOfCongress.EAD.note.ActuateEnum? actuate {
            get {
                XAttribute x = this.Attribute(actuateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LibraryOfCongress.EAD.note.ActuateEnum)(Enum.Parse(typeof(LibraryOfCongress.EAD.note.ActuateEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(actuateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string encodinganalog {
            get {
                XAttribute x = this.Attribute(encodinganalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(encodinganalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<note>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(addressXName, typeof(address));
            localElementDictionary.Add(chronlistXName, typeof(chronlist));
            localElementDictionary.Add(listXName, typeof(list));
            localElementDictionary.Add(note1XName, typeof(note));
            localElementDictionary.Add(tableXName, typeof(table));
            localElementDictionary.Add(blockquoteXName, typeof(blockquote));
            localElementDictionary.Add(pXName, typeof(p));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum ActuateEnum {
            
            onload,
            
            onrequest,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (row+)
    /// </para>
    /// </summary>
    public partial class thead : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rowXName = System.Xml.Linq.XName.Get("row", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<row> rowField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valignXName = System.Xml.Linq.XName.Get("valign", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator thead(XElement xe) { return XTypedServices.ToXTypedElement<thead>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static thead() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(rowXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (row+)
        /// </para>
        /// </summary>
        public thead() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (row+)
        /// </para>
        /// </summary>
        public virtual IList<row> row {
            get {
                if ((this.rowField == null)) {
                    this.rowField = new XTypedList<row>(this, LinqToXsdTypeManager.Instance, rowXName);
                }
                return this.rowField;
            }
            set {
                if ((value == null)) {
                    this.rowField = null;
                }
                else {
                    if ((this.rowField == null)) {
                        this.rowField = XTypedList<row>.Initialize(this, LinqToXsdTypeManager.Instance, value, rowXName);
                    }
                    else {
                        XTypedServices.SetList<row>(this.rowField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LibraryOfCongress.EAD.thead.ValignEnum? valign {
            get {
                XAttribute x = this.Attribute(valignXName);
                if ((x == null)) {
                    return null;
                }
                return ((LibraryOfCongress.EAD.thead.ValignEnum)(Enum.Parse(typeof(LibraryOfCongress.EAD.thead.ValignEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(valignXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<thead>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(rowXName, typeof(row));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum ValignEnum {
            
            top,
            
            middle,
            
            bottom,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (entry+)
    /// </para>
    /// </summary>
    public partial class row : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName entryXName = System.Xml.Linq.XName.Get("entry", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<entry> entryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rowsepXName = System.Xml.Linq.XName.Get("rowsep", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valignXName = System.Xml.Linq.XName.Get("valign", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("row", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator row(XElement xe) { return XTypedServices.ToXTypedElement<row>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static row() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(entryXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (entry+)
        /// </para>
        /// </summary>
        public row() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (entry+)
        /// </para>
        /// </summary>
        public virtual IList<entry> entry {
            get {
                if ((this.entryField == null)) {
                    this.entryField = new XTypedList<entry>(this, LinqToXsdTypeManager.Instance, entryXName);
                }
                return this.entryField;
            }
            set {
                if ((value == null)) {
                    this.entryField = null;
                }
                else {
                    if ((this.entryField == null)) {
                        this.entryField = XTypedList<entry>.Initialize(this, LinqToXsdTypeManager.Instance, value, entryXName);
                    }
                    else {
                        XTypedServices.SetList<entry>(this.entryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string rowsep {
            get {
                XAttribute x = this.Attribute(rowsepXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(rowsepXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LibraryOfCongress.EAD.row.ValignEnum? valign {
            get {
                XAttribute x = this.Attribute(valignXName);
                if ((x == null)) {
                    return null;
                }
                return ((LibraryOfCongress.EAD.row.ValignEnum)(Enum.Parse(typeof(LibraryOfCongress.EAD.row.ValignEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(valignXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<row>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(entryXName, typeof(entry));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum ValignEnum {
            
            top,
            
            middle,
            
            bottom,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
    /// </para>
    /// </summary>
    public partial class entry : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName abbrXName = System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName expanXName = System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName corpnameXName = System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<corpname> corpnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName famnameXName = System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<famname> famnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geognameXName = System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<geogname> geognameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<name> nameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName occupationXName = System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<occupation> occupationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName persnameXName = System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<persname> persnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName subjectXName = System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<subject> subjectField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName genreformXName = System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<genreform> genreformField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName functionXName = System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<function> functionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dateXName = System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<date> dateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName numXName = System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<num> numField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName originationXName = System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<origination> originationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName repositoryXName = System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<repository> repositoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unitdateXName = System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unitdate> unitdateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unittitleXName = System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unittitle> unittitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @refXName = System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<@ref> @refField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extrefXName = System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extref> extrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName linkgrpXName = System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkgrp> linkgrpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bibrefXName = System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bibref> bibrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName archrefXName = System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<archref> archrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName addressXName = System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listXName = System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName colnameXName = System.Xml.Linq.XName.Get("colname", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName namestXName = System.Xml.Linq.XName.Get("namest", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameendXName = System.Xml.Linq.XName.Get("nameend", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName morerowsXName = System.Xml.Linq.XName.Get("morerows", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName colsepXName = System.Xml.Linq.XName.Get("colsep", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rowsepXName = System.Xml.Linq.XName.Get("rowsep", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName alignXName = System.Xml.Linq.XName.Get("align", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @charXName = System.Xml.Linq.XName.Get("char", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName charoffXName = System.Xml.Linq.XName.Get("charoff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valignXName = System.Xml.Linq.XName.Get("valign", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("entry", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator entry(XElement xe) { return XTypedServices.ToXTypedElement<entry>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static entry() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName), new NamedContentModelEntity(abbrXName), new NamedContentModelEntity(expanXName), new NamedContentModelEntity(corpnameXName), new NamedContentModelEntity(famnameXName), new NamedContentModelEntity(geognameXName), new NamedContentModelEntity(nameXName), new NamedContentModelEntity(occupationXName), new NamedContentModelEntity(persnameXName), new NamedContentModelEntity(subjectXName), new NamedContentModelEntity(genreformXName), new NamedContentModelEntity(functionXName), new NamedContentModelEntity(dateXName), new NamedContentModelEntity(numXName), new NamedContentModelEntity(originationXName), new NamedContentModelEntity(repositoryXName), new NamedContentModelEntity(unitdateXName), new NamedContentModelEntity(unittitleXName), new NamedContentModelEntity(@refXName), new NamedContentModelEntity(extrefXName), new NamedContentModelEntity(linkgrpXName), new NamedContentModelEntity(bibrefXName), new NamedContentModelEntity(titleXName), new NamedContentModelEntity(archrefXName), new NamedContentModelEntity(addressXName), new NamedContentModelEntity(listXName), new NamedContentModelEntity(noteXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public entry() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, abbrXName);
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, abbrXName);
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, expanXName);
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, expanXName);
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<corpname> corpname {
            get {
                if ((this.corpnameField == null)) {
                    this.corpnameField = new XTypedList<corpname>(this, LinqToXsdTypeManager.Instance, corpnameXName);
                }
                return this.corpnameField;
            }
            set {
                if ((value == null)) {
                    this.corpnameField = null;
                }
                else {
                    if ((this.corpnameField == null)) {
                        this.corpnameField = XTypedList<corpname>.Initialize(this, LinqToXsdTypeManager.Instance, value, corpnameXName);
                    }
                    else {
                        XTypedServices.SetList<corpname>(this.corpnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<famname> famname {
            get {
                if ((this.famnameField == null)) {
                    this.famnameField = new XTypedList<famname>(this, LinqToXsdTypeManager.Instance, famnameXName);
                }
                return this.famnameField;
            }
            set {
                if ((value == null)) {
                    this.famnameField = null;
                }
                else {
                    if ((this.famnameField == null)) {
                        this.famnameField = XTypedList<famname>.Initialize(this, LinqToXsdTypeManager.Instance, value, famnameXName);
                    }
                    else {
                        XTypedServices.SetList<famname>(this.famnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<geogname> geogname {
            get {
                if ((this.geognameField == null)) {
                    this.geognameField = new XTypedList<geogname>(this, LinqToXsdTypeManager.Instance, geognameXName);
                }
                return this.geognameField;
            }
            set {
                if ((value == null)) {
                    this.geognameField = null;
                }
                else {
                    if ((this.geognameField == null)) {
                        this.geognameField = XTypedList<geogname>.Initialize(this, LinqToXsdTypeManager.Instance, value, geognameXName);
                    }
                    else {
                        XTypedServices.SetList<geogname>(this.geognameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<name> name {
            get {
                if ((this.nameField == null)) {
                    this.nameField = new XTypedList<name>(this, LinqToXsdTypeManager.Instance, nameXName);
                }
                return this.nameField;
            }
            set {
                if ((value == null)) {
                    this.nameField = null;
                }
                else {
                    if ((this.nameField == null)) {
                        this.nameField = XTypedList<name>.Initialize(this, LinqToXsdTypeManager.Instance, value, nameXName);
                    }
                    else {
                        XTypedServices.SetList<name>(this.nameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<occupation> occupation {
            get {
                if ((this.occupationField == null)) {
                    this.occupationField = new XTypedList<occupation>(this, LinqToXsdTypeManager.Instance, occupationXName);
                }
                return this.occupationField;
            }
            set {
                if ((value == null)) {
                    this.occupationField = null;
                }
                else {
                    if ((this.occupationField == null)) {
                        this.occupationField = XTypedList<occupation>.Initialize(this, LinqToXsdTypeManager.Instance, value, occupationXName);
                    }
                    else {
                        XTypedServices.SetList<occupation>(this.occupationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<persname> persname {
            get {
                if ((this.persnameField == null)) {
                    this.persnameField = new XTypedList<persname>(this, LinqToXsdTypeManager.Instance, persnameXName);
                }
                return this.persnameField;
            }
            set {
                if ((value == null)) {
                    this.persnameField = null;
                }
                else {
                    if ((this.persnameField == null)) {
                        this.persnameField = XTypedList<persname>.Initialize(this, LinqToXsdTypeManager.Instance, value, persnameXName);
                    }
                    else {
                        XTypedServices.SetList<persname>(this.persnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<subject> subject {
            get {
                if ((this.subjectField == null)) {
                    this.subjectField = new XTypedList<subject>(this, LinqToXsdTypeManager.Instance, subjectXName);
                }
                return this.subjectField;
            }
            set {
                if ((value == null)) {
                    this.subjectField = null;
                }
                else {
                    if ((this.subjectField == null)) {
                        this.subjectField = XTypedList<subject>.Initialize(this, LinqToXsdTypeManager.Instance, value, subjectXName);
                    }
                    else {
                        XTypedServices.SetList<subject>(this.subjectField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<genreform> genreform {
            get {
                if ((this.genreformField == null)) {
                    this.genreformField = new XTypedList<genreform>(this, LinqToXsdTypeManager.Instance, genreformXName);
                }
                return this.genreformField;
            }
            set {
                if ((value == null)) {
                    this.genreformField = null;
                }
                else {
                    if ((this.genreformField == null)) {
                        this.genreformField = XTypedList<genreform>.Initialize(this, LinqToXsdTypeManager.Instance, value, genreformXName);
                    }
                    else {
                        XTypedServices.SetList<genreform>(this.genreformField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<function> function {
            get {
                if ((this.functionField == null)) {
                    this.functionField = new XTypedList<function>(this, LinqToXsdTypeManager.Instance, functionXName);
                }
                return this.functionField;
            }
            set {
                if ((value == null)) {
                    this.functionField = null;
                }
                else {
                    if ((this.functionField == null)) {
                        this.functionField = XTypedList<function>.Initialize(this, LinqToXsdTypeManager.Instance, value, functionXName);
                    }
                    else {
                        XTypedServices.SetList<function>(this.functionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<date> date {
            get {
                if ((this.dateField == null)) {
                    this.dateField = new XTypedList<date>(this, LinqToXsdTypeManager.Instance, dateXName);
                }
                return this.dateField;
            }
            set {
                if ((value == null)) {
                    this.dateField = null;
                }
                else {
                    if ((this.dateField == null)) {
                        this.dateField = XTypedList<date>.Initialize(this, LinqToXsdTypeManager.Instance, value, dateXName);
                    }
                    else {
                        XTypedServices.SetList<date>(this.dateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<num> num {
            get {
                if ((this.numField == null)) {
                    this.numField = new XTypedList<num>(this, LinqToXsdTypeManager.Instance, numXName);
                }
                return this.numField;
            }
            set {
                if ((value == null)) {
                    this.numField = null;
                }
                else {
                    if ((this.numField == null)) {
                        this.numField = XTypedList<num>.Initialize(this, LinqToXsdTypeManager.Instance, value, numXName);
                    }
                    else {
                        XTypedServices.SetList<num>(this.numField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<origination> origination {
            get {
                if ((this.originationField == null)) {
                    this.originationField = new XTypedList<origination>(this, LinqToXsdTypeManager.Instance, originationXName);
                }
                return this.originationField;
            }
            set {
                if ((value == null)) {
                    this.originationField = null;
                }
                else {
                    if ((this.originationField == null)) {
                        this.originationField = XTypedList<origination>.Initialize(this, LinqToXsdTypeManager.Instance, value, originationXName);
                    }
                    else {
                        XTypedServices.SetList<origination>(this.originationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<repository> repository {
            get {
                if ((this.repositoryField == null)) {
                    this.repositoryField = new XTypedList<repository>(this, LinqToXsdTypeManager.Instance, repositoryXName);
                }
                return this.repositoryField;
            }
            set {
                if ((value == null)) {
                    this.repositoryField = null;
                }
                else {
                    if ((this.repositoryField == null)) {
                        this.repositoryField = XTypedList<repository>.Initialize(this, LinqToXsdTypeManager.Instance, value, repositoryXName);
                    }
                    else {
                        XTypedServices.SetList<repository>(this.repositoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<unitdate> unitdate {
            get {
                if ((this.unitdateField == null)) {
                    this.unitdateField = new XTypedList<unitdate>(this, LinqToXsdTypeManager.Instance, unitdateXName);
                }
                return this.unitdateField;
            }
            set {
                if ((value == null)) {
                    this.unitdateField = null;
                }
                else {
                    if ((this.unitdateField == null)) {
                        this.unitdateField = XTypedList<unitdate>.Initialize(this, LinqToXsdTypeManager.Instance, value, unitdateXName);
                    }
                    else {
                        XTypedServices.SetList<unitdate>(this.unitdateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<unittitle> unittitle {
            get {
                if ((this.unittitleField == null)) {
                    this.unittitleField = new XTypedList<unittitle>(this, LinqToXsdTypeManager.Instance, unittitleXName);
                }
                return this.unittitleField;
            }
            set {
                if ((value == null)) {
                    this.unittitleField = null;
                }
                else {
                    if ((this.unittitleField == null)) {
                        this.unittitleField = XTypedList<unittitle>.Initialize(this, LinqToXsdTypeManager.Instance, value, unittitleXName);
                    }
                    else {
                        XTypedServices.SetList<unittitle>(this.unittitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<@ref> @ref {
            get {
                if ((this.@refField == null)) {
                    this.@refField = new XTypedList<@ref>(this, LinqToXsdTypeManager.Instance, @refXName);
                }
                return this.@refField;
            }
            set {
                if ((value == null)) {
                    this.@refField = null;
                }
                else {
                    if ((this.@refField == null)) {
                        this.@refField = XTypedList<@ref>.Initialize(this, LinqToXsdTypeManager.Instance, value, @refXName);
                    }
                    else {
                        XTypedServices.SetList<@ref>(this.@refField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<extref> extref {
            get {
                if ((this.extrefField == null)) {
                    this.extrefField = new XTypedList<extref>(this, LinqToXsdTypeManager.Instance, extrefXName);
                }
                return this.extrefField;
            }
            set {
                if ((value == null)) {
                    this.extrefField = null;
                }
                else {
                    if ((this.extrefField == null)) {
                        this.extrefField = XTypedList<extref>.Initialize(this, LinqToXsdTypeManager.Instance, value, extrefXName);
                    }
                    else {
                        XTypedServices.SetList<extref>(this.extrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<linkgrp> linkgrp {
            get {
                if ((this.linkgrpField == null)) {
                    this.linkgrpField = new XTypedList<linkgrp>(this, LinqToXsdTypeManager.Instance, linkgrpXName);
                }
                return this.linkgrpField;
            }
            set {
                if ((value == null)) {
                    this.linkgrpField = null;
                }
                else {
                    if ((this.linkgrpField == null)) {
                        this.linkgrpField = XTypedList<linkgrp>.Initialize(this, LinqToXsdTypeManager.Instance, value, linkgrpXName);
                    }
                    else {
                        XTypedServices.SetList<linkgrp>(this.linkgrpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<bibref> bibref {
            get {
                if ((this.bibrefField == null)) {
                    this.bibrefField = new XTypedList<bibref>(this, LinqToXsdTypeManager.Instance, bibrefXName);
                }
                return this.bibrefField;
            }
            set {
                if ((value == null)) {
                    this.bibrefField = null;
                }
                else {
                    if ((this.bibrefField == null)) {
                        this.bibrefField = XTypedList<bibref>.Initialize(this, LinqToXsdTypeManager.Instance, value, bibrefXName);
                    }
                    else {
                        XTypedServices.SetList<bibref>(this.bibrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, titleXName);
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, titleXName);
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<archref> archref {
            get {
                if ((this.archrefField == null)) {
                    this.archrefField = new XTypedList<archref>(this, LinqToXsdTypeManager.Instance, archrefXName);
                }
                return this.archrefField;
            }
            set {
                if ((value == null)) {
                    this.archrefField = null;
                }
                else {
                    if ((this.archrefField == null)) {
                        this.archrefField = XTypedList<archref>.Initialize(this, LinqToXsdTypeManager.Instance, value, archrefXName);
                    }
                    else {
                        XTypedServices.SetList<archref>(this.archrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, addressXName);
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, addressXName);
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, listXName);
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, listXName);
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | @ref | extref | linkgrp | bibref | title | archref | address | list | note)*
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string colname {
            get {
                XAttribute x = this.Attribute(colnameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(colnameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string namest {
            get {
                XAttribute x = this.Attribute(namestXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(namestXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string nameend {
            get {
                XAttribute x = this.Attribute(nameendXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(nameendXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string morerows {
            get {
                XAttribute x = this.Attribute(morerowsXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(morerowsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string colsep {
            get {
                XAttribute x = this.Attribute(colsepXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(colsepXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string rowsep {
            get {
                XAttribute x = this.Attribute(rowsepXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(rowsepXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string align {
            get {
                XAttribute x = this.Attribute(alignXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(alignXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string @char {
            get {
                XAttribute x = this.Attribute(@charXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(@charXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string charoff {
            get {
                XAttribute x = this.Attribute(charoffXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(charoffXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LibraryOfCongress.EAD.entry.ValignEnum? valign {
            get {
                XAttribute x = this.Attribute(valignXName);
                if ((x == null)) {
                    return null;
                }
                return ((LibraryOfCongress.EAD.entry.ValignEnum)(Enum.Parse(typeof(LibraryOfCongress.EAD.entry.ValignEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(valignXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<entry>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
            localElementDictionary.Add(abbrXName, typeof(abbr));
            localElementDictionary.Add(expanXName, typeof(expan));
            localElementDictionary.Add(corpnameXName, typeof(corpname));
            localElementDictionary.Add(famnameXName, typeof(famname));
            localElementDictionary.Add(geognameXName, typeof(geogname));
            localElementDictionary.Add(nameXName, typeof(name));
            localElementDictionary.Add(occupationXName, typeof(occupation));
            localElementDictionary.Add(persnameXName, typeof(persname));
            localElementDictionary.Add(subjectXName, typeof(subject));
            localElementDictionary.Add(genreformXName, typeof(genreform));
            localElementDictionary.Add(functionXName, typeof(function));
            localElementDictionary.Add(dateXName, typeof(date));
            localElementDictionary.Add(numXName, typeof(num));
            localElementDictionary.Add(originationXName, typeof(origination));
            localElementDictionary.Add(repositoryXName, typeof(repository));
            localElementDictionary.Add(unitdateXName, typeof(unitdate));
            localElementDictionary.Add(unittitleXName, typeof(unittitle));
            localElementDictionary.Add(@refXName, typeof(@ref));
            localElementDictionary.Add(extrefXName, typeof(extref));
            localElementDictionary.Add(linkgrpXName, typeof(linkgrp));
            localElementDictionary.Add(bibrefXName, typeof(bibref));
            localElementDictionary.Add(titleXName, typeof(title));
            localElementDictionary.Add(archrefXName, typeof(archref));
            localElementDictionary.Add(addressXName, typeof(address));
            localElementDictionary.Add(listXName, typeof(list));
            localElementDictionary.Add(noteXName, typeof(note));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum ValignEnum {
            
            top,
            
            middle,
            
            bottom,
        }
    }
    
    public partial class ptrloc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string typeFixedValue = "locator";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName hrefXName = System.Xml.Linq.XName.Get("href", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName labelXName = System.Xml.Linq.XName.Get("label", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName targetXName = System.Xml.Linq.XName.Get("target", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName xpointerXName = System.Xml.Linq.XName.Get("xpointer", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ptrloc", "urn:isbn:1-931666-22-9");
        
		public static explicit operator ptrloc(XElement xe) { return XTypedServices.ToXTypedElement<ptrloc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ptrloc() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                return typeFixedValue;
            }
            set {
                if (value.Equals(typeFixedValue)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, typeFixedValue);
                }
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual System.Uri href {
            get {
                XAttribute x = this.Attribute(hrefXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(hrefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title {
            get {
                XAttribute x = this.Attribute(titleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(titleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(labelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(labelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string target {
            get {
                XAttribute x = this.Attribute(targetXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(targetXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string xpointer {
            get {
                XAttribute x = this.Attribute(xpointerXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(xpointerXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ptrloc>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class extptrloc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string typeFixedValue = "locator";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName hrefXName = System.Xml.Linq.XName.Get("href", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName labelXName = System.Xml.Linq.XName.Get("label", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName entityrefXName = System.Xml.Linq.XName.Get("entityref", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName xpointerXName = System.Xml.Linq.XName.Get("xpointer", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("extptrloc", "urn:isbn:1-931666-22-9");
        
		public static explicit operator extptrloc(XElement xe) { return XTypedServices.ToXTypedElement<extptrloc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public extptrloc() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                return typeFixedValue;
            }
            set {
                if (value.Equals(typeFixedValue)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, typeFixedValue);
                }
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual System.Uri href {
            get {
                XAttribute x = this.Attribute(hrefXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(hrefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title {
            get {
                XAttribute x = this.Attribute(titleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(titleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(labelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(labelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string entityref {
            get {
                XAttribute x = this.Attribute(entityrefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Entity).Datatype);
            }
            set {
                this.SetAttribute(entityrefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Entity).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string xpointer {
            get {
                XAttribute x = this.Attribute(xpointerXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(xpointerXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<extptrloc>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
    /// </para>
    /// </summary>
    public partial class refloc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName abbrXName = System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName expanXName = System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName corpnameXName = System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<corpname> corpnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName famnameXName = System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<famname> famnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geognameXName = System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<geogname> geognameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<name> nameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName occupationXName = System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<occupation> occupationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName persnameXName = System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<persname> persnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName subjectXName = System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<subject> subjectField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName genreformXName = System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<genreform> genreformField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName functionXName = System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<function> functionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dateXName = System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<date> dateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName numXName = System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<num> numField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName originationXName = System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<origination> originationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName repositoryXName = System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<repository> repositoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unitdateXName = System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unitdate> unitdateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unittitleXName = System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unittitle> unittitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName addressXName = System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName chronlistXName = System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listXName = System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tableXName = System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName blockquoteXName = System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string typeFixedValue = "locator";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName hrefXName = System.Xml.Linq.XName.Get("href", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName labelXName = System.Xml.Linq.XName.Get("label", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName targetXName = System.Xml.Linq.XName.Get("target", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName xpointerXName = System.Xml.Linq.XName.Get("xpointer", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("refloc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator refloc(XElement xe) { return XTypedServices.ToXTypedElement<refloc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static refloc() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName), new NamedContentModelEntity(abbrXName), new NamedContentModelEntity(expanXName), new NamedContentModelEntity(corpnameXName), new NamedContentModelEntity(famnameXName), new NamedContentModelEntity(geognameXName), new NamedContentModelEntity(nameXName), new NamedContentModelEntity(occupationXName), new NamedContentModelEntity(persnameXName), new NamedContentModelEntity(subjectXName), new NamedContentModelEntity(genreformXName), new NamedContentModelEntity(functionXName), new NamedContentModelEntity(dateXName), new NamedContentModelEntity(numXName), new NamedContentModelEntity(originationXName), new NamedContentModelEntity(repositoryXName), new NamedContentModelEntity(unitdateXName), new NamedContentModelEntity(unittitleXName), new NamedContentModelEntity(addressXName), new NamedContentModelEntity(chronlistXName), new NamedContentModelEntity(listXName), new NamedContentModelEntity(noteXName), new NamedContentModelEntity(tableXName), new NamedContentModelEntity(blockquoteXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public refloc() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, abbrXName);
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, abbrXName);
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, expanXName);
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, expanXName);
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<corpname> corpname {
            get {
                if ((this.corpnameField == null)) {
                    this.corpnameField = new XTypedList<corpname>(this, LinqToXsdTypeManager.Instance, corpnameXName);
                }
                return this.corpnameField;
            }
            set {
                if ((value == null)) {
                    this.corpnameField = null;
                }
                else {
                    if ((this.corpnameField == null)) {
                        this.corpnameField = XTypedList<corpname>.Initialize(this, LinqToXsdTypeManager.Instance, value, corpnameXName);
                    }
                    else {
                        XTypedServices.SetList<corpname>(this.corpnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<famname> famname {
            get {
                if ((this.famnameField == null)) {
                    this.famnameField = new XTypedList<famname>(this, LinqToXsdTypeManager.Instance, famnameXName);
                }
                return this.famnameField;
            }
            set {
                if ((value == null)) {
                    this.famnameField = null;
                }
                else {
                    if ((this.famnameField == null)) {
                        this.famnameField = XTypedList<famname>.Initialize(this, LinqToXsdTypeManager.Instance, value, famnameXName);
                    }
                    else {
                        XTypedServices.SetList<famname>(this.famnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<geogname> geogname {
            get {
                if ((this.geognameField == null)) {
                    this.geognameField = new XTypedList<geogname>(this, LinqToXsdTypeManager.Instance, geognameXName);
                }
                return this.geognameField;
            }
            set {
                if ((value == null)) {
                    this.geognameField = null;
                }
                else {
                    if ((this.geognameField == null)) {
                        this.geognameField = XTypedList<geogname>.Initialize(this, LinqToXsdTypeManager.Instance, value, geognameXName);
                    }
                    else {
                        XTypedServices.SetList<geogname>(this.geognameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<name> name {
            get {
                if ((this.nameField == null)) {
                    this.nameField = new XTypedList<name>(this, LinqToXsdTypeManager.Instance, nameXName);
                }
                return this.nameField;
            }
            set {
                if ((value == null)) {
                    this.nameField = null;
                }
                else {
                    if ((this.nameField == null)) {
                        this.nameField = XTypedList<name>.Initialize(this, LinqToXsdTypeManager.Instance, value, nameXName);
                    }
                    else {
                        XTypedServices.SetList<name>(this.nameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<occupation> occupation {
            get {
                if ((this.occupationField == null)) {
                    this.occupationField = new XTypedList<occupation>(this, LinqToXsdTypeManager.Instance, occupationXName);
                }
                return this.occupationField;
            }
            set {
                if ((value == null)) {
                    this.occupationField = null;
                }
                else {
                    if ((this.occupationField == null)) {
                        this.occupationField = XTypedList<occupation>.Initialize(this, LinqToXsdTypeManager.Instance, value, occupationXName);
                    }
                    else {
                        XTypedServices.SetList<occupation>(this.occupationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<persname> persname {
            get {
                if ((this.persnameField == null)) {
                    this.persnameField = new XTypedList<persname>(this, LinqToXsdTypeManager.Instance, persnameXName);
                }
                return this.persnameField;
            }
            set {
                if ((value == null)) {
                    this.persnameField = null;
                }
                else {
                    if ((this.persnameField == null)) {
                        this.persnameField = XTypedList<persname>.Initialize(this, LinqToXsdTypeManager.Instance, value, persnameXName);
                    }
                    else {
                        XTypedServices.SetList<persname>(this.persnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<subject> subject {
            get {
                if ((this.subjectField == null)) {
                    this.subjectField = new XTypedList<subject>(this, LinqToXsdTypeManager.Instance, subjectXName);
                }
                return this.subjectField;
            }
            set {
                if ((value == null)) {
                    this.subjectField = null;
                }
                else {
                    if ((this.subjectField == null)) {
                        this.subjectField = XTypedList<subject>.Initialize(this, LinqToXsdTypeManager.Instance, value, subjectXName);
                    }
                    else {
                        XTypedServices.SetList<subject>(this.subjectField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<genreform> genreform {
            get {
                if ((this.genreformField == null)) {
                    this.genreformField = new XTypedList<genreform>(this, LinqToXsdTypeManager.Instance, genreformXName);
                }
                return this.genreformField;
            }
            set {
                if ((value == null)) {
                    this.genreformField = null;
                }
                else {
                    if ((this.genreformField == null)) {
                        this.genreformField = XTypedList<genreform>.Initialize(this, LinqToXsdTypeManager.Instance, value, genreformXName);
                    }
                    else {
                        XTypedServices.SetList<genreform>(this.genreformField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<function> function {
            get {
                if ((this.functionField == null)) {
                    this.functionField = new XTypedList<function>(this, LinqToXsdTypeManager.Instance, functionXName);
                }
                return this.functionField;
            }
            set {
                if ((value == null)) {
                    this.functionField = null;
                }
                else {
                    if ((this.functionField == null)) {
                        this.functionField = XTypedList<function>.Initialize(this, LinqToXsdTypeManager.Instance, value, functionXName);
                    }
                    else {
                        XTypedServices.SetList<function>(this.functionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<date> date {
            get {
                if ((this.dateField == null)) {
                    this.dateField = new XTypedList<date>(this, LinqToXsdTypeManager.Instance, dateXName);
                }
                return this.dateField;
            }
            set {
                if ((value == null)) {
                    this.dateField = null;
                }
                else {
                    if ((this.dateField == null)) {
                        this.dateField = XTypedList<date>.Initialize(this, LinqToXsdTypeManager.Instance, value, dateXName);
                    }
                    else {
                        XTypedServices.SetList<date>(this.dateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<num> num {
            get {
                if ((this.numField == null)) {
                    this.numField = new XTypedList<num>(this, LinqToXsdTypeManager.Instance, numXName);
                }
                return this.numField;
            }
            set {
                if ((value == null)) {
                    this.numField = null;
                }
                else {
                    if ((this.numField == null)) {
                        this.numField = XTypedList<num>.Initialize(this, LinqToXsdTypeManager.Instance, value, numXName);
                    }
                    else {
                        XTypedServices.SetList<num>(this.numField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<origination> origination {
            get {
                if ((this.originationField == null)) {
                    this.originationField = new XTypedList<origination>(this, LinqToXsdTypeManager.Instance, originationXName);
                }
                return this.originationField;
            }
            set {
                if ((value == null)) {
                    this.originationField = null;
                }
                else {
                    if ((this.originationField == null)) {
                        this.originationField = XTypedList<origination>.Initialize(this, LinqToXsdTypeManager.Instance, value, originationXName);
                    }
                    else {
                        XTypedServices.SetList<origination>(this.originationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<repository> repository {
            get {
                if ((this.repositoryField == null)) {
                    this.repositoryField = new XTypedList<repository>(this, LinqToXsdTypeManager.Instance, repositoryXName);
                }
                return this.repositoryField;
            }
            set {
                if ((value == null)) {
                    this.repositoryField = null;
                }
                else {
                    if ((this.repositoryField == null)) {
                        this.repositoryField = XTypedList<repository>.Initialize(this, LinqToXsdTypeManager.Instance, value, repositoryXName);
                    }
                    else {
                        XTypedServices.SetList<repository>(this.repositoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<unitdate> unitdate {
            get {
                if ((this.unitdateField == null)) {
                    this.unitdateField = new XTypedList<unitdate>(this, LinqToXsdTypeManager.Instance, unitdateXName);
                }
                return this.unitdateField;
            }
            set {
                if ((value == null)) {
                    this.unitdateField = null;
                }
                else {
                    if ((this.unitdateField == null)) {
                        this.unitdateField = XTypedList<unitdate>.Initialize(this, LinqToXsdTypeManager.Instance, value, unitdateXName);
                    }
                    else {
                        XTypedServices.SetList<unitdate>(this.unitdateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<unittitle> unittitle {
            get {
                if ((this.unittitleField == null)) {
                    this.unittitleField = new XTypedList<unittitle>(this, LinqToXsdTypeManager.Instance, unittitleXName);
                }
                return this.unittitleField;
            }
            set {
                if ((value == null)) {
                    this.unittitleField = null;
                }
                else {
                    if ((this.unittitleField == null)) {
                        this.unittitleField = XTypedList<unittitle>.Initialize(this, LinqToXsdTypeManager.Instance, value, unittitleXName);
                    }
                    else {
                        XTypedServices.SetList<unittitle>(this.unittitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, addressXName);
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, addressXName);
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, chronlistXName);
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, chronlistXName);
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, listXName);
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, listXName);
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, tableXName);
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, tableXName);
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, blockquoteXName);
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, blockquoteXName);
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                return typeFixedValue;
            }
            set {
                if (value.Equals(typeFixedValue)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, typeFixedValue);
                }
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual System.Uri href {
            get {
                XAttribute x = this.Attribute(hrefXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(hrefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title {
            get {
                XAttribute x = this.Attribute(titleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(titleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(labelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(labelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string target {
            get {
                XAttribute x = this.Attribute(targetXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(targetXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string xpointer {
            get {
                XAttribute x = this.Attribute(xpointerXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(xpointerXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<refloc>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
            localElementDictionary.Add(abbrXName, typeof(abbr));
            localElementDictionary.Add(expanXName, typeof(expan));
            localElementDictionary.Add(corpnameXName, typeof(corpname));
            localElementDictionary.Add(famnameXName, typeof(famname));
            localElementDictionary.Add(geognameXName, typeof(geogname));
            localElementDictionary.Add(nameXName, typeof(name));
            localElementDictionary.Add(occupationXName, typeof(occupation));
            localElementDictionary.Add(persnameXName, typeof(persname));
            localElementDictionary.Add(subjectXName, typeof(subject));
            localElementDictionary.Add(genreformXName, typeof(genreform));
            localElementDictionary.Add(functionXName, typeof(function));
            localElementDictionary.Add(dateXName, typeof(date));
            localElementDictionary.Add(numXName, typeof(num));
            localElementDictionary.Add(originationXName, typeof(origination));
            localElementDictionary.Add(repositoryXName, typeof(repository));
            localElementDictionary.Add(unitdateXName, typeof(unitdate));
            localElementDictionary.Add(unittitleXName, typeof(unittitle));
            localElementDictionary.Add(addressXName, typeof(address));
            localElementDictionary.Add(chronlistXName, typeof(chronlist));
            localElementDictionary.Add(listXName, typeof(list));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(tableXName, typeof(table));
            localElementDictionary.Add(blockquoteXName, typeof(blockquote));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
    /// </para>
    /// </summary>
    public partial class extrefloc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ptrXName = System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ptr> ptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName extptrXName = System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extptr> extptrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName abbrXName = System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<abbr> abbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName expanXName = System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<expan> expanField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName corpnameXName = System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<corpname> corpnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName famnameXName = System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<famname> famnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geognameXName = System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<geogname> geognameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<name> nameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName occupationXName = System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<occupation> occupationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName persnameXName = System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<persname> persnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName subjectXName = System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<subject> subjectField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName genreformXName = System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<genreform> genreformField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName functionXName = System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<function> functionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dateXName = System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<date> dateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName numXName = System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<num> numField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName originationXName = System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<origination> originationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName repositoryXName = System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<repository> repositoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unitdateXName = System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unitdate> unitdateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unittitleXName = System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unittitle> unittitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName addressXName = System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName chronlistXName = System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<chronlist> chronlistField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listXName = System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<list> listField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<note> noteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tableXName = System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<table> tableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName blockquoteXName = System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<blockquote> blockquoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string typeFixedValue = "locator";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName hrefXName = System.Xml.Linq.XName.Get("href", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName labelXName = System.Xml.Linq.XName.Get("label", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName entityrefXName = System.Xml.Linq.XName.Get("entityref", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName xpointerXName = System.Xml.Linq.XName.Get("xpointer", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("extrefloc", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator extrefloc(XElement xe) { return XTypedServices.ToXTypedElement<extrefloc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static extrefloc() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ptrXName), new NamedContentModelEntity(extptrXName), new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName), new NamedContentModelEntity(abbrXName), new NamedContentModelEntity(expanXName), new NamedContentModelEntity(corpnameXName), new NamedContentModelEntity(famnameXName), new NamedContentModelEntity(geognameXName), new NamedContentModelEntity(nameXName), new NamedContentModelEntity(occupationXName), new NamedContentModelEntity(persnameXName), new NamedContentModelEntity(subjectXName), new NamedContentModelEntity(genreformXName), new NamedContentModelEntity(functionXName), new NamedContentModelEntity(dateXName), new NamedContentModelEntity(numXName), new NamedContentModelEntity(originationXName), new NamedContentModelEntity(repositoryXName), new NamedContentModelEntity(unitdateXName), new NamedContentModelEntity(unittitleXName), new NamedContentModelEntity(addressXName), new NamedContentModelEntity(chronlistXName), new NamedContentModelEntity(listXName), new NamedContentModelEntity(noteXName), new NamedContentModelEntity(tableXName), new NamedContentModelEntity(blockquoteXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public extrefloc() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<ptr> ptr {
            get {
                if ((this.ptrField == null)) {
                    this.ptrField = new XTypedList<ptr>(this, LinqToXsdTypeManager.Instance, ptrXName);
                }
                return this.ptrField;
            }
            set {
                if ((value == null)) {
                    this.ptrField = null;
                }
                else {
                    if ((this.ptrField == null)) {
                        this.ptrField = XTypedList<ptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, ptrXName);
                    }
                    else {
                        XTypedServices.SetList<ptr>(this.ptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<extptr> extptr {
            get {
                if ((this.extptrField == null)) {
                    this.extptrField = new XTypedList<extptr>(this, LinqToXsdTypeManager.Instance, extptrXName);
                }
                return this.extptrField;
            }
            set {
                if ((value == null)) {
                    this.extptrField = null;
                }
                else {
                    if ((this.extptrField == null)) {
                        this.extptrField = XTypedList<extptr>.Initialize(this, LinqToXsdTypeManager.Instance, value, extptrXName);
                    }
                    else {
                        XTypedServices.SetList<extptr>(this.extptrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<abbr> abbr {
            get {
                if ((this.abbrField == null)) {
                    this.abbrField = new XTypedList<abbr>(this, LinqToXsdTypeManager.Instance, abbrXName);
                }
                return this.abbrField;
            }
            set {
                if ((value == null)) {
                    this.abbrField = null;
                }
                else {
                    if ((this.abbrField == null)) {
                        this.abbrField = XTypedList<abbr>.Initialize(this, LinqToXsdTypeManager.Instance, value, abbrXName);
                    }
                    else {
                        XTypedServices.SetList<abbr>(this.abbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<expan> expan {
            get {
                if ((this.expanField == null)) {
                    this.expanField = new XTypedList<expan>(this, LinqToXsdTypeManager.Instance, expanXName);
                }
                return this.expanField;
            }
            set {
                if ((value == null)) {
                    this.expanField = null;
                }
                else {
                    if ((this.expanField == null)) {
                        this.expanField = XTypedList<expan>.Initialize(this, LinqToXsdTypeManager.Instance, value, expanXName);
                    }
                    else {
                        XTypedServices.SetList<expan>(this.expanField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<corpname> corpname {
            get {
                if ((this.corpnameField == null)) {
                    this.corpnameField = new XTypedList<corpname>(this, LinqToXsdTypeManager.Instance, corpnameXName);
                }
                return this.corpnameField;
            }
            set {
                if ((value == null)) {
                    this.corpnameField = null;
                }
                else {
                    if ((this.corpnameField == null)) {
                        this.corpnameField = XTypedList<corpname>.Initialize(this, LinqToXsdTypeManager.Instance, value, corpnameXName);
                    }
                    else {
                        XTypedServices.SetList<corpname>(this.corpnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<famname> famname {
            get {
                if ((this.famnameField == null)) {
                    this.famnameField = new XTypedList<famname>(this, LinqToXsdTypeManager.Instance, famnameXName);
                }
                return this.famnameField;
            }
            set {
                if ((value == null)) {
                    this.famnameField = null;
                }
                else {
                    if ((this.famnameField == null)) {
                        this.famnameField = XTypedList<famname>.Initialize(this, LinqToXsdTypeManager.Instance, value, famnameXName);
                    }
                    else {
                        XTypedServices.SetList<famname>(this.famnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<geogname> geogname {
            get {
                if ((this.geognameField == null)) {
                    this.geognameField = new XTypedList<geogname>(this, LinqToXsdTypeManager.Instance, geognameXName);
                }
                return this.geognameField;
            }
            set {
                if ((value == null)) {
                    this.geognameField = null;
                }
                else {
                    if ((this.geognameField == null)) {
                        this.geognameField = XTypedList<geogname>.Initialize(this, LinqToXsdTypeManager.Instance, value, geognameXName);
                    }
                    else {
                        XTypedServices.SetList<geogname>(this.geognameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<name> name {
            get {
                if ((this.nameField == null)) {
                    this.nameField = new XTypedList<name>(this, LinqToXsdTypeManager.Instance, nameXName);
                }
                return this.nameField;
            }
            set {
                if ((value == null)) {
                    this.nameField = null;
                }
                else {
                    if ((this.nameField == null)) {
                        this.nameField = XTypedList<name>.Initialize(this, LinqToXsdTypeManager.Instance, value, nameXName);
                    }
                    else {
                        XTypedServices.SetList<name>(this.nameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<occupation> occupation {
            get {
                if ((this.occupationField == null)) {
                    this.occupationField = new XTypedList<occupation>(this, LinqToXsdTypeManager.Instance, occupationXName);
                }
                return this.occupationField;
            }
            set {
                if ((value == null)) {
                    this.occupationField = null;
                }
                else {
                    if ((this.occupationField == null)) {
                        this.occupationField = XTypedList<occupation>.Initialize(this, LinqToXsdTypeManager.Instance, value, occupationXName);
                    }
                    else {
                        XTypedServices.SetList<occupation>(this.occupationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<persname> persname {
            get {
                if ((this.persnameField == null)) {
                    this.persnameField = new XTypedList<persname>(this, LinqToXsdTypeManager.Instance, persnameXName);
                }
                return this.persnameField;
            }
            set {
                if ((value == null)) {
                    this.persnameField = null;
                }
                else {
                    if ((this.persnameField == null)) {
                        this.persnameField = XTypedList<persname>.Initialize(this, LinqToXsdTypeManager.Instance, value, persnameXName);
                    }
                    else {
                        XTypedServices.SetList<persname>(this.persnameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<subject> subject {
            get {
                if ((this.subjectField == null)) {
                    this.subjectField = new XTypedList<subject>(this, LinqToXsdTypeManager.Instance, subjectXName);
                }
                return this.subjectField;
            }
            set {
                if ((value == null)) {
                    this.subjectField = null;
                }
                else {
                    if ((this.subjectField == null)) {
                        this.subjectField = XTypedList<subject>.Initialize(this, LinqToXsdTypeManager.Instance, value, subjectXName);
                    }
                    else {
                        XTypedServices.SetList<subject>(this.subjectField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<genreform> genreform {
            get {
                if ((this.genreformField == null)) {
                    this.genreformField = new XTypedList<genreform>(this, LinqToXsdTypeManager.Instance, genreformXName);
                }
                return this.genreformField;
            }
            set {
                if ((value == null)) {
                    this.genreformField = null;
                }
                else {
                    if ((this.genreformField == null)) {
                        this.genreformField = XTypedList<genreform>.Initialize(this, LinqToXsdTypeManager.Instance, value, genreformXName);
                    }
                    else {
                        XTypedServices.SetList<genreform>(this.genreformField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<function> function {
            get {
                if ((this.functionField == null)) {
                    this.functionField = new XTypedList<function>(this, LinqToXsdTypeManager.Instance, functionXName);
                }
                return this.functionField;
            }
            set {
                if ((value == null)) {
                    this.functionField = null;
                }
                else {
                    if ((this.functionField == null)) {
                        this.functionField = XTypedList<function>.Initialize(this, LinqToXsdTypeManager.Instance, value, functionXName);
                    }
                    else {
                        XTypedServices.SetList<function>(this.functionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<date> date {
            get {
                if ((this.dateField == null)) {
                    this.dateField = new XTypedList<date>(this, LinqToXsdTypeManager.Instance, dateXName);
                }
                return this.dateField;
            }
            set {
                if ((value == null)) {
                    this.dateField = null;
                }
                else {
                    if ((this.dateField == null)) {
                        this.dateField = XTypedList<date>.Initialize(this, LinqToXsdTypeManager.Instance, value, dateXName);
                    }
                    else {
                        XTypedServices.SetList<date>(this.dateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<num> num {
            get {
                if ((this.numField == null)) {
                    this.numField = new XTypedList<num>(this, LinqToXsdTypeManager.Instance, numXName);
                }
                return this.numField;
            }
            set {
                if ((value == null)) {
                    this.numField = null;
                }
                else {
                    if ((this.numField == null)) {
                        this.numField = XTypedList<num>.Initialize(this, LinqToXsdTypeManager.Instance, value, numXName);
                    }
                    else {
                        XTypedServices.SetList<num>(this.numField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<origination> origination {
            get {
                if ((this.originationField == null)) {
                    this.originationField = new XTypedList<origination>(this, LinqToXsdTypeManager.Instance, originationXName);
                }
                return this.originationField;
            }
            set {
                if ((value == null)) {
                    this.originationField = null;
                }
                else {
                    if ((this.originationField == null)) {
                        this.originationField = XTypedList<origination>.Initialize(this, LinqToXsdTypeManager.Instance, value, originationXName);
                    }
                    else {
                        XTypedServices.SetList<origination>(this.originationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<repository> repository {
            get {
                if ((this.repositoryField == null)) {
                    this.repositoryField = new XTypedList<repository>(this, LinqToXsdTypeManager.Instance, repositoryXName);
                }
                return this.repositoryField;
            }
            set {
                if ((value == null)) {
                    this.repositoryField = null;
                }
                else {
                    if ((this.repositoryField == null)) {
                        this.repositoryField = XTypedList<repository>.Initialize(this, LinqToXsdTypeManager.Instance, value, repositoryXName);
                    }
                    else {
                        XTypedServices.SetList<repository>(this.repositoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<unitdate> unitdate {
            get {
                if ((this.unitdateField == null)) {
                    this.unitdateField = new XTypedList<unitdate>(this, LinqToXsdTypeManager.Instance, unitdateXName);
                }
                return this.unitdateField;
            }
            set {
                if ((value == null)) {
                    this.unitdateField = null;
                }
                else {
                    if ((this.unitdateField == null)) {
                        this.unitdateField = XTypedList<unitdate>.Initialize(this, LinqToXsdTypeManager.Instance, value, unitdateXName);
                    }
                    else {
                        XTypedServices.SetList<unitdate>(this.unitdateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<unittitle> unittitle {
            get {
                if ((this.unittitleField == null)) {
                    this.unittitleField = new XTypedList<unittitle>(this, LinqToXsdTypeManager.Instance, unittitleXName);
                }
                return this.unittitleField;
            }
            set {
                if ((value == null)) {
                    this.unittitleField = null;
                }
                else {
                    if ((this.unittitleField == null)) {
                        this.unittitleField = XTypedList<unittitle>.Initialize(this, LinqToXsdTypeManager.Instance, value, unittitleXName);
                    }
                    else {
                        XTypedServices.SetList<unittitle>(this.unittitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, addressXName);
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, addressXName);
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<chronlist> chronlist {
            get {
                if ((this.chronlistField == null)) {
                    this.chronlistField = new XTypedList<chronlist>(this, LinqToXsdTypeManager.Instance, chronlistXName);
                }
                return this.chronlistField;
            }
            set {
                if ((value == null)) {
                    this.chronlistField = null;
                }
                else {
                    if ((this.chronlistField == null)) {
                        this.chronlistField = XTypedList<chronlist>.Initialize(this, LinqToXsdTypeManager.Instance, value, chronlistXName);
                    }
                    else {
                        XTypedServices.SetList<chronlist>(this.chronlistField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<list> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<list>(this, LinqToXsdTypeManager.Instance, listXName);
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<list>.Initialize(this, LinqToXsdTypeManager.Instance, value, listXName);
                    }
                    else {
                        XTypedServices.SetList<list>(this.listField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<note> note {
            get {
                if ((this.noteField == null)) {
                    this.noteField = new XTypedList<note>(this, LinqToXsdTypeManager.Instance, noteXName);
                }
                return this.noteField;
            }
            set {
                if ((value == null)) {
                    this.noteField = null;
                }
                else {
                    if ((this.noteField == null)) {
                        this.noteField = XTypedList<note>.Initialize(this, LinqToXsdTypeManager.Instance, value, noteXName);
                    }
                    else {
                        XTypedServices.SetList<note>(this.noteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<table> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<table>(this, LinqToXsdTypeManager.Instance, tableXName);
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<table>.Initialize(this, LinqToXsdTypeManager.Instance, value, tableXName);
                    }
                    else {
                        XTypedServices.SetList<table>(this.tableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (ptr | extptr | emph | lb | abbr | expan | corpname | famname | geogname | name | occupation | persname | subject | genreform | function | date | num | origination | repository | unitdate | unittitle | address | chronlist | list | note | table | blockquote)*
        /// </para>
        /// </summary>
        public virtual IList<blockquote> blockquote {
            get {
                if ((this.blockquoteField == null)) {
                    this.blockquoteField = new XTypedList<blockquote>(this, LinqToXsdTypeManager.Instance, blockquoteXName);
                }
                return this.blockquoteField;
            }
            set {
                if ((value == null)) {
                    this.blockquoteField = null;
                }
                else {
                    if ((this.blockquoteField == null)) {
                        this.blockquoteField = XTypedList<blockquote>.Initialize(this, LinqToXsdTypeManager.Instance, value, blockquoteXName);
                    }
                    else {
                        XTypedServices.SetList<blockquote>(this.blockquoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                return typeFixedValue;
            }
            set {
                if (value.Equals(typeFixedValue)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, typeFixedValue);
                }
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual System.Uri href {
            get {
                XAttribute x = this.Attribute(hrefXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(hrefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title {
            get {
                XAttribute x = this.Attribute(titleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(titleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(labelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(labelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string entityref {
            get {
                XAttribute x = this.Attribute(entityrefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Entity).Datatype);
            }
            set {
                this.SetAttribute(entityrefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Entity).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string xpointer {
            get {
                XAttribute x = this.Attribute(xpointerXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(xpointerXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<extrefloc>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ptrXName, typeof(ptr));
            localElementDictionary.Add(extptrXName, typeof(extptr));
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
            localElementDictionary.Add(abbrXName, typeof(abbr));
            localElementDictionary.Add(expanXName, typeof(expan));
            localElementDictionary.Add(corpnameXName, typeof(corpname));
            localElementDictionary.Add(famnameXName, typeof(famname));
            localElementDictionary.Add(geognameXName, typeof(geogname));
            localElementDictionary.Add(nameXName, typeof(name));
            localElementDictionary.Add(occupationXName, typeof(occupation));
            localElementDictionary.Add(persnameXName, typeof(persname));
            localElementDictionary.Add(subjectXName, typeof(subject));
            localElementDictionary.Add(genreformXName, typeof(genreform));
            localElementDictionary.Add(functionXName, typeof(function));
            localElementDictionary.Add(dateXName, typeof(date));
            localElementDictionary.Add(numXName, typeof(num));
            localElementDictionary.Add(originationXName, typeof(origination));
            localElementDictionary.Add(repositoryXName, typeof(repository));
            localElementDictionary.Add(unitdateXName, typeof(unitdate));
            localElementDictionary.Add(unittitleXName, typeof(unittitle));
            localElementDictionary.Add(addressXName, typeof(address));
            localElementDictionary.Add(chronlistXName, typeof(chronlist));
            localElementDictionary.Add(listXName, typeof(list));
            localElementDictionary.Add(noteXName, typeof(note));
            localElementDictionary.Add(tableXName, typeof(table));
            localElementDictionary.Add(blockquoteXName, typeof(blockquote));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class arc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string typeFixedValue = "arc";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arcroleXName = System.Xml.Linq.XName.Get("arcrole", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName showXName = System.Xml.Linq.XName.Get("show", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName actuateXName = System.Xml.Linq.XName.Get("actuate", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName fromXName = System.Xml.Linq.XName.Get("from", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName toXName = System.Xml.Linq.XName.Get("to", "http://www.w3.org/1999/xlink");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("arc", "urn:isbn:1-931666-22-9");
        
		public static explicit operator arc(XElement xe) { return XTypedServices.ToXTypedElement<arc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public arc() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                return typeFixedValue;
            }
            set {
                if (value.Equals(typeFixedValue)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, typeFixedValue);
                }
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string arcrole {
            get {
                XAttribute x = this.Attribute(arcroleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(arcroleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title {
            get {
                XAttribute x = this.Attribute(titleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(titleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string show {
            get {
                XAttribute x = this.Attribute(showXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(showXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LibraryOfCongress.EAD.ActuateEnum? actuate {
            get {
                XAttribute x = this.Attribute(actuateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LibraryOfCongress.EAD.ActuateEnum)(Enum.Parse(typeof(LibraryOfCongress.EAD.ActuateEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(actuateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string from {
            get {
                XAttribute x = this.Attribute(fromXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(fromXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string to {
            get {
                XAttribute x = this.Attribute(toXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(toXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<arc>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (emph | lb)*
    /// </para>
    /// </summary>
    public partial class resource : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emphXName = System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emph> emphField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lbXName = System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lb> lbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altrenderXName = System.Xml.Linq.XName.Get("altrender", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName audienceXName = System.Xml.Linq.XName.Get("audience", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string typeFixedValue = "resource";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName labelXName = System.Xml.Linq.XName.Get("label", "http://www.w3.org/1999/xlink");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("resource", "urn:isbn:1-931666-22-9");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator resource(XElement xe) { return XTypedServices.ToXTypedElement<resource>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static resource() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(emphXName), new NamedContentModelEntity(lbXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (emph | lb)*
        /// </para>
        /// </summary>
        public resource() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<emph> emph {
            get {
                if ((this.emphField == null)) {
                    this.emphField = new XTypedList<emph>(this, LinqToXsdTypeManager.Instance, emphXName);
                }
                return this.emphField;
            }
            set {
                if ((value == null)) {
                    this.emphField = null;
                }
                else {
                    if ((this.emphField == null)) {
                        this.emphField = XTypedList<emph>.Initialize(this, LinqToXsdTypeManager.Instance, value, emphXName);
                    }
                    else {
                        XTypedServices.SetList<emph>(this.emphField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (emph | lb)*
        /// </para>
        /// </summary>
        public virtual IList<lb> lb {
            get {
                if ((this.lbField == null)) {
                    this.lbField = new XTypedList<lb>(this, LinqToXsdTypeManager.Instance, lbXName);
                }
                return this.lbField;
            }
            set {
                if ((value == null)) {
                    this.lbField = null;
                }
                else {
                    if ((this.lbField == null)) {
                        this.lbField = XTypedList<lb>.Initialize(this, LinqToXsdTypeManager.Instance, value, lbXName);
                    }
                    else {
                        XTypedServices.SetList<lb>(this.lbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string altrender {
            get {
                XAttribute x = this.Attribute(altrenderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(altrenderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string audience {
            get {
                XAttribute x = this.Attribute(audienceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(audienceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                return typeFixedValue;
            }
            set {
                if (value.Equals(typeFixedValue)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, typeFixedValue);
                }
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title {
            get {
                XAttribute x = this.Attribute(titleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(titleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(labelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(labelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<resource>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(emphXName, typeof(emph));
            localElementDictionary.Add(lbXName, typeof(lb));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> typeDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> elementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
        }
        
        private LinqToXsdTypeManager() {
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(System.Xml.Linq.XName.Get("emph", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.emph));
            typeDictionary.Add(System.Xml.Linq.XName.Get("lb", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.lb));
            typeDictionary.Add(System.Xml.Linq.XName.Get("linkgrp", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.linkgrp));
            typeDictionary.Add(System.Xml.Linq.XName.Get("occupation", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.occupation));
            typeDictionary.Add(System.Xml.Linq.XName.Get("subject", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.subject));
            typeDictionary.Add(System.Xml.Linq.XName.Get("genreform", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.genreform));
            typeDictionary.Add(System.Xml.Linq.XName.Get("function", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.function));
            typeDictionary.Add(System.Xml.Linq.XName.Get("extptr", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.extptr));
            typeDictionary.Add(System.Xml.Linq.XName.Get("chronlist", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.chronlist));
            typeDictionary.Add(System.Xml.Linq.XName.Get("chronitem", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.chronitem));
            typeDictionary.Add(System.Xml.Linq.XName.Get("eventgrp", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.eventgrp));
            typeDictionary.Add(System.Xml.Linq.XName.Get("table", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.table));
            typeDictionary.Add(System.Xml.Linq.XName.Get("tgroup", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.tgroup));
            typeDictionary.Add(System.Xml.Linq.XName.Get("colspec", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.colspec));
            typeDictionary.Add(System.Xml.Linq.XName.Get("tbody", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.tbody));
            typeDictionary.Add(System.Xml.Linq.XName.Get("blockquote", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.blockquote));
            typeDictionary.Add(System.Xml.Linq.XName.Get("abstract", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.@abstract));
            typeDictionary.Add(System.Xml.Linq.XName.Get("container", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.container));
            typeDictionary.Add(System.Xml.Linq.XName.Get("langmaterial", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.langmaterial));
            typeDictionary.Add(System.Xml.Linq.XName.Get("physdesc", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.physdesc));
            typeDictionary.Add(System.Xml.Linq.XName.Get("physfacet", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.physfacet));
            typeDictionary.Add(System.Xml.Linq.XName.Get("extent", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.extent));
            typeDictionary.Add(System.Xml.Linq.XName.Get("physloc", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.physloc));
            typeDictionary.Add(System.Xml.Linq.XName.Get("unitid", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.unitid));
            typeDictionary.Add(System.Xml.Linq.XName.Get("descgrp", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.descgrp));
            typeDictionary.Add(System.Xml.Linq.XName.Get("eadheader", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.eadheader));
            typeDictionary.Add(System.Xml.Linq.XName.Get("eadid", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.eadid));
            typeDictionary.Add(System.Xml.Linq.XName.Get("filedesc", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.filedesc));
            typeDictionary.Add(System.Xml.Linq.XName.Get("titlestmt", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.titlestmt));
            typeDictionary.Add(System.Xml.Linq.XName.Get("editionstmt", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.editionstmt));
            typeDictionary.Add(System.Xml.Linq.XName.Get("publicationstmt", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.publicationstmt));
            typeDictionary.Add(System.Xml.Linq.XName.Get("seriesstmt", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.seriesstmt));
            typeDictionary.Add(System.Xml.Linq.XName.Get("notestmt", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.notestmt));
            typeDictionary.Add(System.Xml.Linq.XName.Get("profiledesc", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.profiledesc));
            typeDictionary.Add(System.Xml.Linq.XName.Get("creation", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.creation));
            typeDictionary.Add(System.Xml.Linq.XName.Get("langusage", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.langusage));
            typeDictionary.Add(System.Xml.Linq.XName.Get("descrules", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.descrules));
            typeDictionary.Add(System.Xml.Linq.XName.Get("revisiondesc", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.revisiondesc));
            typeDictionary.Add(System.Xml.Linq.XName.Get("change", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.change));
            typeDictionary.Add(System.Xml.Linq.XName.Get("frontmatter", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.frontmatter));
            typeDictionary.Add(System.Xml.Linq.XName.Get("titlepage", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.titlepage));
            typeDictionary.Add(System.Xml.Linq.XName.Get("archdesc", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.archdesc));
            typeDictionary.Add(System.Xml.Linq.XName.Get("runner", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.runner));
            typeDictionary.Add(System.Xml.Linq.XName.Get("titleproper", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.titleproper));
            typeDictionary.Add(System.Xml.Linq.XName.Get("subtitle", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.subtitle));
            typeDictionary.Add(System.Xml.Linq.XName.Get("author", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.author));
            typeDictionary.Add(System.Xml.Linq.XName.Get("sponsor", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.sponsor));
            typeDictionary.Add(System.Xml.Linq.XName.Get("div", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.div));
            typeDictionary.Add(System.Xml.Linq.XName.Get("did", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.did));
            typeDictionary.Add(System.Xml.Linq.XName.Get("dimensions", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.dimensions));
            typeDictionary.Add(System.Xml.Linq.XName.Get("origination", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.origination));
            typeDictionary.Add(System.Xml.Linq.XName.Get("repository", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.repository));
            typeDictionary.Add(System.Xml.Linq.XName.Get("subarea", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.subarea));
            typeDictionary.Add(System.Xml.Linq.XName.Get("unitdate", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.unitdate));
            typeDictionary.Add(System.Xml.Linq.XName.Get("unittitle", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.unittitle));
            typeDictionary.Add(System.Xml.Linq.XName.Get("language", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.language));
            typeDictionary.Add(System.Xml.Linq.XName.Get("materialspec", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.materialspec));
            typeDictionary.Add(System.Xml.Linq.XName.Get("accruals", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.accruals));
            typeDictionary.Add(System.Xml.Linq.XName.Get("accessrestrict", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.accessrestrict));
            typeDictionary.Add(System.Xml.Linq.XName.Get("legalstatus", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.legalstatus));
            typeDictionary.Add(System.Xml.Linq.XName.Get("acqinfo", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.acqinfo));
            typeDictionary.Add(System.Xml.Linq.XName.Get("altformavail", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.altformavail));
            typeDictionary.Add(System.Xml.Linq.XName.Get("originalsloc", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.originalsloc));
            typeDictionary.Add(System.Xml.Linq.XName.Get("phystech", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.phystech));
            typeDictionary.Add(System.Xml.Linq.XName.Get("appraisal", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.appraisal));
            typeDictionary.Add(System.Xml.Linq.XName.Get("custodhist", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.custodhist));
            typeDictionary.Add(System.Xml.Linq.XName.Get("prefercite", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.prefercite));
            typeDictionary.Add(System.Xml.Linq.XName.Get("processinfo", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.processinfo));
            typeDictionary.Add(System.Xml.Linq.XName.Get("userestrict", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.userestrict));
            typeDictionary.Add(System.Xml.Linq.XName.Get("bioghist", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.bioghist));
            typeDictionary.Add(System.Xml.Linq.XName.Get("controlaccess", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.controlaccess));
            typeDictionary.Add(System.Xml.Linq.XName.Get("odd", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.odd));
            typeDictionary.Add(System.Xml.Linq.XName.Get("scopecontent", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.scopecontent));
            typeDictionary.Add(System.Xml.Linq.XName.Get("arrangement", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.arrangement));
            typeDictionary.Add(System.Xml.Linq.XName.Get("bibliography", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.bibliography));
            typeDictionary.Add(System.Xml.Linq.XName.Get("fileplan", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.fileplan));
            typeDictionary.Add(System.Xml.Linq.XName.Get("relatedmaterial", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.relatedmaterial));
            typeDictionary.Add(System.Xml.Linq.XName.Get("separatedmaterial", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.separatedmaterial));
            typeDictionary.Add(System.Xml.Linq.XName.Get("otherfindaid", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.otherfindaid));
            typeDictionary.Add(System.Xml.Linq.XName.Get("index", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.index));
            typeDictionary.Add(System.Xml.Linq.XName.Get("indexentry", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.indexentry));
            typeDictionary.Add(System.Xml.Linq.XName.Get("namegrp", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.namegrp));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ptrgrp", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.ptrgrp));
            typeDictionary.Add(System.Xml.Linq.XName.Get("dsc", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.dsc));
            typeDictionary.Add(System.Xml.Linq.XName.Get("c", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.c));
            typeDictionary.Add(System.Xml.Linq.XName.Get("c01", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.c01));
            typeDictionary.Add(System.Xml.Linq.XName.Get("c02", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.c02));
            typeDictionary.Add(System.Xml.Linq.XName.Get("c03", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.c03));
            typeDictionary.Add(System.Xml.Linq.XName.Get("c04", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.c04));
            typeDictionary.Add(System.Xml.Linq.XName.Get("c05", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.c05));
            typeDictionary.Add(System.Xml.Linq.XName.Get("c06", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.c06));
            typeDictionary.Add(System.Xml.Linq.XName.Get("c07", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.c07));
            typeDictionary.Add(System.Xml.Linq.XName.Get("c08", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.c08));
            typeDictionary.Add(System.Xml.Linq.XName.Get("c09", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.c09));
            typeDictionary.Add(System.Xml.Linq.XName.Get("c10", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.c10));
            typeDictionary.Add(System.Xml.Linq.XName.Get("c11", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.c11));
            typeDictionary.Add(System.Xml.Linq.XName.Get("c12", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.c12));
            typeDictionary.Add(System.Xml.Linq.XName.Get("head", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.head));
            typeDictionary.Add(System.Xml.Linq.XName.Get("p", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.p));
            typeDictionary.Add(System.Xml.Linq.XName.Get("dao", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.dao));
            typeDictionary.Add(System.Xml.Linq.XName.Get("daodesc", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.daodesc));
            typeDictionary.Add(System.Xml.Linq.XName.Get("daogrp", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.daogrp));
            typeDictionary.Add(System.Xml.Linq.XName.Get("daoloc", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.daoloc));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ptr", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.ptr));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ref", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.@ref));
            typeDictionary.Add(System.Xml.Linq.XName.Get("extref", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.extref));
            typeDictionary.Add(System.Xml.Linq.XName.Get("title", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.title));
            typeDictionary.Add(System.Xml.Linq.XName.Get("archref", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.archref));
            typeDictionary.Add(System.Xml.Linq.XName.Get("bibref", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.bibref));
            typeDictionary.Add(System.Xml.Linq.XName.Get("edition", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.edition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("bibseries", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.bibseries));
            typeDictionary.Add(System.Xml.Linq.XName.Get("imprint", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.imprint));
            typeDictionary.Add(System.Xml.Linq.XName.Get("publisher", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.publisher));
            typeDictionary.Add(System.Xml.Linq.XName.Get("corpname", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.corpname));
            typeDictionary.Add(System.Xml.Linq.XName.Get("famname", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.famname));
            typeDictionary.Add(System.Xml.Linq.XName.Get("geogname", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.geogname));
            typeDictionary.Add(System.Xml.Linq.XName.Get("name", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.name));
            typeDictionary.Add(System.Xml.Linq.XName.Get("persname", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.persname));
            typeDictionary.Add(System.Xml.Linq.XName.Get("date", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.date));
            typeDictionary.Add(System.Xml.Linq.XName.Get("num", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.num));
            typeDictionary.Add(System.Xml.Linq.XName.Get("abbr", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.abbr));
            typeDictionary.Add(System.Xml.Linq.XName.Get("expan", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.expan));
            typeDictionary.Add(System.Xml.Linq.XName.Get("address", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.address));
            typeDictionary.Add(System.Xml.Linq.XName.Get("addressline", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.addressline));
            typeDictionary.Add(System.Xml.Linq.XName.Get("event", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.@event));
            typeDictionary.Add(System.Xml.Linq.XName.Get("list", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.list));
            typeDictionary.Add(System.Xml.Linq.XName.Get("defitem", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.defitem));
            typeDictionary.Add(System.Xml.Linq.XName.Get("label", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.label));
            typeDictionary.Add(System.Xml.Linq.XName.Get("listhead", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.listhead));
            typeDictionary.Add(System.Xml.Linq.XName.Get("head01", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.head01));
            typeDictionary.Add(System.Xml.Linq.XName.Get("head02", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.head02));
            typeDictionary.Add(System.Xml.Linq.XName.Get("item", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.item));
            typeDictionary.Add(System.Xml.Linq.XName.Get("note", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.note));
            typeDictionary.Add(System.Xml.Linq.XName.Get("thead", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.thead));
            typeDictionary.Add(System.Xml.Linq.XName.Get("row", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.row));
            typeDictionary.Add(System.Xml.Linq.XName.Get("entry", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.entry));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ptrloc", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.ptrloc));
            typeDictionary.Add(System.Xml.Linq.XName.Get("extptrloc", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.extptrloc));
            typeDictionary.Add(System.Xml.Linq.XName.Get("refloc", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.refloc));
            typeDictionary.Add(System.Xml.Linq.XName.Get("extrefloc", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.extrefloc));
            typeDictionary.Add(System.Xml.Linq.XName.Get("arc", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.arc));
            typeDictionary.Add(System.Xml.Linq.XName.Get("resource", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.resource));
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(System.Xml.Linq.XName.Get("ead", "urn:isbn:1-931666-22-9"), typeof(global::LibraryOfCongress.EAD.ead));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[System.Xml.Linq.XName.Get("ead", "urn:isbn:1-931666-22-9")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public ead ead {  get {return rootObject as ead; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(ead root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public global::LibraryOfCongress.EAD.ead ead {  get {return rootObject as global::LibraryOfCongress.EAD.ead; } }
        
        private XRoot() {
        }
        
        public XRoot(global::LibraryOfCongress.EAD.ead root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
